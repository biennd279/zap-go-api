// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyHeaderScopes = "apiKeyHeader.Scopes"
	ApiKeyQueryScopes  = "apiKeyQuery.Scopes"
)

// ErrorJson defines model for ErrorJson.
type ErrorJson struct {
	Code    string  `json:"code"`
	Detail  *string `json:"detail,omitempty"`
	Message string  `json:"message"`
}

// AccessControlActionScanParams defines parameters for AccessControlActionScan.
type AccessControlActionScanParams struct {
	ContextId        string  `form:"contextId" json:"contextId"`
	UserId           string  `form:"userId" json:"userId"`
	ScanAsUnAuthUser *string `form:"scanAsUnAuthUser,omitempty" json:"scanAsUnAuthUser,omitempty"`
	RaiseAlert       *string `form:"raiseAlert,omitempty" json:"raiseAlert,omitempty"`
	AlertRiskLevel   *string `form:"alertRiskLevel,omitempty" json:"alertRiskLevel,omitempty"`
}

// AccessControlActionWriteHTMLreportParams defines parameters for AccessControlActionWriteHTMLreport.
type AccessControlActionWriteHTMLreportParams struct {
	ContextId string `form:"contextId" json:"contextId"`
	FileName  string `form:"fileName" json:"fileName"`
}

// AccessControlViewGetScanProgressParams defines parameters for AccessControlViewGetScanProgress.
type AccessControlViewGetScanProgressParams struct {
	ContextId string `form:"contextId" json:"contextId"`
}

// AccessControlViewGetScanStatusParams defines parameters for AccessControlViewGetScanStatus.
type AccessControlViewGetScanStatusParams struct {
	ContextId string `form:"contextId" json:"contextId"`
}

// AcsrfActionAddOptionTokenParams defines parameters for AcsrfActionAddOptionToken.
type AcsrfActionAddOptionTokenParams struct {
	String string `form:"String" json:"String"`
}

// AcsrfActionRemoveOptionTokenParams defines parameters for AcsrfActionRemoveOptionToken.
type AcsrfActionRemoveOptionTokenParams struct {
	String string `form:"String" json:"String"`
}

// AcsrfActionSetOptionPartialMatchingEnabledParams defines parameters for AcsrfActionSetOptionPartialMatchingEnabled.
type AcsrfActionSetOptionPartialMatchingEnabledParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AjaxSpiderActionAddAllowedResourceParams defines parameters for AjaxSpiderActionAddAllowedResource.
type AjaxSpiderActionAddAllowedResourceParams struct {
	// Regex The regular expression of the allowed resource.
	Regex string `form:"regex" json:"regex"`

	// Enabled If the allowed resource should be enabled or not.
	Enabled *string `form:"enabled,omitempty" json:"enabled,omitempty"`
}

// AjaxSpiderActionAddExcludedElementParams defines parameters for AjaxSpiderActionAddExcludedElement.
type AjaxSpiderActionAddExcludedElementParams struct {
	// ContextName The name of the context.
	ContextName string `form:"contextName" json:"contextName"`

	// Description The description of the excluded element.
	Description string `form:"description" json:"description"`

	// Element The element to exclude.
	Element string `form:"element" json:"element"`

	// Xpath The XPath of the element.
	Xpath *string `form:"xpath,omitempty" json:"xpath,omitempty"`

	// Text The text of the element.
	Text *string `form:"text,omitempty" json:"text,omitempty"`

	// AttributeName The attribute name of the element.
	AttributeName *string `form:"attributeName,omitempty" json:"attributeName,omitempty"`

	// AttributeValue The attribute value of the element.
	AttributeValue *string `form:"attributeValue,omitempty" json:"attributeValue,omitempty"`

	// Enabled The enabled state, true or false.
	Enabled *string `form:"enabled,omitempty" json:"enabled,omitempty"`
}

// AjaxSpiderActionModifyExcludedElementParams defines parameters for AjaxSpiderActionModifyExcludedElement.
type AjaxSpiderActionModifyExcludedElementParams struct {
	// ContextName The name of the context.
	ContextName string `form:"contextName" json:"contextName"`

	// Description The description of the excluded element.
	Description string `form:"description" json:"description"`

	// Element The element to exclude.
	Element string `form:"element" json:"element"`

	// DescriptionNew The new description.
	DescriptionNew *string `form:"descriptionNew,omitempty" json:"descriptionNew,omitempty"`

	// Xpath The XPath of the element.
	Xpath *string `form:"xpath,omitempty" json:"xpath,omitempty"`

	// Text The text of the element.
	Text *string `form:"text,omitempty" json:"text,omitempty"`

	// AttributeName The attribute name of the element.
	AttributeName *string `form:"attributeName,omitempty" json:"attributeName,omitempty"`

	// AttributeValue The attribute value of the element.
	AttributeValue *string `form:"attributeValue,omitempty" json:"attributeValue,omitempty"`

	// Enabled The enabled state, true or false.
	Enabled *string `form:"enabled,omitempty" json:"enabled,omitempty"`
}

// AjaxSpiderActionRemoveAllowedResourceParams defines parameters for AjaxSpiderActionRemoveAllowedResource.
type AjaxSpiderActionRemoveAllowedResourceParams struct {
	// Regex The regular expression of the allowed resource.
	Regex string `form:"regex" json:"regex"`
}

// AjaxSpiderActionRemoveExcludedElementParams defines parameters for AjaxSpiderActionRemoveExcludedElement.
type AjaxSpiderActionRemoveExcludedElementParams struct {
	// ContextName The name of the context.
	ContextName string `form:"contextName" json:"contextName"`

	// Description The description of the excluded element.
	Description string `form:"description" json:"description"`
}

// AjaxSpiderActionScanParams defines parameters for AjaxSpiderActionScan.
type AjaxSpiderActionScanParams struct {
	// Url The starting URL (needs to include the 'scheme').
	Url *string `form:"url,omitempty" json:"url,omitempty"`

	// InScope A boolean (true/false) indicating whether or not the scan should be restricted to 'inScope' only resources (default value is false).
	InScope *string `form:"inScope,omitempty" json:"inScope,omitempty"`

	// ContextName The name for any defined context. If the value does not match a defined context then an error will occur.
	ContextName *string `form:"contextName,omitempty" json:"contextName,omitempty"`

	// SubtreeOnly A boolean (true/false) indicating whether or not the crawl should be constrained to a specific path (default value is false).
	SubtreeOnly *string `form:"subtreeOnly,omitempty" json:"subtreeOnly,omitempty"`
}

// AjaxSpiderActionScanAsUserParams defines parameters for AjaxSpiderActionScanAsUser.
type AjaxSpiderActionScanAsUserParams struct {
	// ContextName The name for any defined context. If the value does not match a defined context then an error will occur.
	ContextName string `form:"contextName" json:"contextName"`

	// UserName The name of the user to be used when crawling. The "userName" should be previously defined on the context configuration.
	UserName string `form:"userName" json:"userName"`

	// Url The starting URL (needs to include the 'scheme').
	Url *string `form:"url,omitempty" json:"url,omitempty"`

	// SubtreeOnly A boolean (true/false) indicating whether or not the crawl should be constrained to a specific path (default value is false).
	SubtreeOnly *string `form:"subtreeOnly,omitempty" json:"subtreeOnly,omitempty"`
}

// AjaxSpiderActionSetEnabledAllowedResourceParams defines parameters for AjaxSpiderActionSetEnabledAllowedResource.
type AjaxSpiderActionSetEnabledAllowedResourceParams struct {
	// Regex The regular expression of the allowed resource.
	Regex string `form:"regex" json:"regex"`

	// Enabled If the allowed resource should be enabled or not.
	Enabled string `form:"enabled" json:"enabled"`
}

// AjaxSpiderActionSetOptionBrowserIdParams defines parameters for AjaxSpiderActionSetOptionBrowserId.
type AjaxSpiderActionSetOptionBrowserIdParams struct {
	// String The name of the browser to be used by the AJAX Spider. (See the Selenium add-on help for a list of supported browsers.)
	String string `form:"String" json:"String"`
}

// AjaxSpiderActionSetOptionClickDefaultElemsParams defines parameters for AjaxSpiderActionSetOptionClickDefaultElems.
type AjaxSpiderActionSetOptionClickDefaultElemsParams struct {
	// Boolean A boolean (true/false) indicating if only default elements such as 'a' 'button' 'input' should be clicked (default is true).
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AjaxSpiderActionSetOptionClickElemsOnceParams defines parameters for AjaxSpiderActionSetOptionClickElemsOnce.
type AjaxSpiderActionSetOptionClickElemsOnceParams struct {
	// Boolean A boolean (true/false) indicating whether or not the AJAX Spider should only click on elements once. If this is set to false, the crawler will attempt to click multiple times; which is more rigorous but may take considerably more time (default is true).
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AjaxSpiderActionSetOptionEnableExtensionsParams defines parameters for AjaxSpiderActionSetOptionEnableExtensions.
type AjaxSpiderActionSetOptionEnableExtensionsParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AjaxSpiderActionSetOptionEventWaitParams defines parameters for AjaxSpiderActionSetOptionEventWait.
type AjaxSpiderActionSetOptionEventWaitParams struct {
	// Integer The time that the AJAX Spider should wait for each event (default is 1000 milliseconds).
	Integer int `form:"Integer" json:"Integer"`
}

// AjaxSpiderActionSetOptionLogoutAvoidanceParams defines parameters for AjaxSpiderActionSetOptionLogoutAvoidance.
type AjaxSpiderActionSetOptionLogoutAvoidanceParams struct {
	// Boolean A boolean (true/false) indicating if logout elements should be avoided (default is false).
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AjaxSpiderActionSetOptionMaxCrawlDepthParams defines parameters for AjaxSpiderActionSetOptionMaxCrawlDepth.
type AjaxSpiderActionSetOptionMaxCrawlDepthParams struct {
	// Integer The maximum depth that the crawler should explore (zero means unlimited depth, default is 10).
	Integer int `form:"Integer" json:"Integer"`
}

// AjaxSpiderActionSetOptionMaxCrawlStatesParams defines parameters for AjaxSpiderActionSetOptionMaxCrawlStates.
type AjaxSpiderActionSetOptionMaxCrawlStatesParams struct {
	// Integer The maximum number of states that the AJAX Spider should explore (zero means unlimited crawl states, default is 0)
	Integer int `form:"Integer" json:"Integer"`
}

// AjaxSpiderActionSetOptionMaxDurationParams defines parameters for AjaxSpiderActionSetOptionMaxDuration.
type AjaxSpiderActionSetOptionMaxDurationParams struct {
	// Integer The maximum amount of time that the AJAX Spider is allowed to run (zero means unlimited running time, default is 60 minutes).
	Integer int `form:"Integer" json:"Integer"`
}

// AjaxSpiderActionSetOptionNumberOfBrowsersParams defines parameters for AjaxSpiderActionSetOptionNumberOfBrowsers.
type AjaxSpiderActionSetOptionNumberOfBrowsersParams struct {
	// Integer The number of windows that the AJAX Spider can use. The more windows, the faster the process will be. However, more windows also means greater resource usage (CPU, Memory, etc), and could lead to concurrency issues depending on the app being explored (default is 1).
	Integer int `form:"Integer" json:"Integer"`
}

// AjaxSpiderActionSetOptionRandomInputsParams defines parameters for AjaxSpiderActionSetOptionRandomInputs.
type AjaxSpiderActionSetOptionRandomInputsParams struct {
	// Boolean A boolean (true/false) indicating whether or not random values should be use in form fields. Otherwise, empty values are submitted (default is true).
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AjaxSpiderActionSetOptionReloadWaitParams defines parameters for AjaxSpiderActionSetOptionReloadWait.
type AjaxSpiderActionSetOptionReloadWaitParams struct {
	// Integer The number of milliseconds the AJAX Spider should wait after a page is loaded (default is 1000).
	Integer int `form:"Integer" json:"Integer"`
}

// AjaxSpiderActionSetOptionScopeCheckParams defines parameters for AjaxSpiderActionSetOptionScopeCheck.
type AjaxSpiderActionSetOptionScopeCheckParams struct {
	// String The scope check, either Strict or Flexible. Any other value will result in setting the default (Strict).
	String string `form:"String" json:"String"`
}

// AjaxSpiderViewExcludedElementsParams defines parameters for AjaxSpiderViewExcludedElements.
type AjaxSpiderViewExcludedElementsParams struct {
	// ContextName The name of the context.
	ContextName string `form:"contextName" json:"contextName"`
}

// AjaxSpiderViewResultsParams defines parameters for AjaxSpiderViewResults.
type AjaxSpiderViewResultsParams struct {
	// Start The position (or offset) within the results to use as a starting position for the information returned.
	Start *string `form:"start,omitempty" json:"start,omitempty"`

	// Count The number of results to return.
	Count *string `form:"count,omitempty" json:"count,omitempty"`
}

// AlertActionAddAlertParams defines parameters for AlertActionAddAlert.
type AlertActionAddAlertParams struct {
	// MessageId The ID of the message to which the alert should be associated.
	MessageId string `form:"messageId" json:"messageId"`

	// Name The name of the alert.
	Name string `form:"name" json:"name"`

	// RiskId The numeric risk representation ('0 - Informational' through '3 - High').
	RiskId string `form:"riskId" json:"riskId"`

	// ConfidenceId The numeric confidence representation ('1 - Low' through '3 - High' [user set values '0 - False Positive', and '4 - User Confirmed' are also available]).
	ConfidenceId string `form:"confidenceId" json:"confidenceId"`

	// Description The description to be set to the alert.
	Description string `form:"description" json:"description"`

	// Param The name of the parameter applicable to the alert.
	Param *string `form:"param,omitempty" json:"param,omitempty"`

	// Attack The attack (ex: injected string) used by the scan rule.
	Attack *string `form:"attack,omitempty" json:"attack,omitempty"`

	// OtherInfo Other information about the alert or test.
	OtherInfo *string `form:"otherInfo,omitempty" json:"otherInfo,omitempty"`

	// Solution The solution for the alert.
	Solution *string `form:"solution,omitempty" json:"solution,omitempty"`

	// References The reference details for the alert.
	References *string `form:"references,omitempty" json:"references,omitempty"`

	// Evidence The evidence associated with the alert.
	Evidence *string `form:"evidence,omitempty" json:"evidence,omitempty"`

	// CweId The CWE identifier associated with the alert.
	CweId *string `form:"cweId,omitempty" json:"cweId,omitempty"`

	// WascId The WASC identifier associated with the alert.
	WascId *string `form:"wascId,omitempty" json:"wascId,omitempty"`
}

// AlertActionDeleteAlertParams defines parameters for AlertActionDeleteAlert.
type AlertActionDeleteAlertParams struct {
	Id string `form:"id" json:"id"`
}

// AlertActionDeleteAlertsParams defines parameters for AlertActionDeleteAlerts.
type AlertActionDeleteAlertsParams struct {
	// ContextName The name of the Context for which the alerts should be deleted.
	ContextName *string `form:"contextName,omitempty" json:"contextName,omitempty"`

	// Baseurl The highest URL in the Sites tree under which alerts should be deleted.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`

	// RiskId The numeric risk representation ('0 - Informational' through '3 - High').
	RiskId *string `form:"riskId,omitempty" json:"riskId,omitempty"`
}

// AlertActionUpdateAlertParams defines parameters for AlertActionUpdateAlert.
type AlertActionUpdateAlertParams struct {
	// Id The ID of the alert to update.
	Id string `form:"id" json:"id"`

	// Name The name of the alert.
	Name string `form:"name" json:"name"`

	// RiskId The numeric risk representation ('0 - Informational' through '3 - High').
	RiskId string `form:"riskId" json:"riskId"`

	// ConfidenceId The numeric confidence representation ('1 - Low' through '3 - High' [user set values '0 - False Positive', and '4 - User Confirmed' are also available]).
	ConfidenceId string `form:"confidenceId" json:"confidenceId"`

	// Description The description to be set to the alert.
	Description string `form:"description" json:"description"`

	// Param The name of the parameter applicable to the alert.
	Param *string `form:"param,omitempty" json:"param,omitempty"`

	// Attack The attack (ex: injected string) used by the scan rule.
	Attack *string `form:"attack,omitempty" json:"attack,omitempty"`

	// OtherInfo Other information about the alert or test.
	OtherInfo *string `form:"otherInfo,omitempty" json:"otherInfo,omitempty"`

	// Solution The solution for the alert.
	Solution *string `form:"solution,omitempty" json:"solution,omitempty"`

	// References The reference details for the alert.
	References *string `form:"references,omitempty" json:"references,omitempty"`

	// Evidence The evidence associated with the alert.
	Evidence *string `form:"evidence,omitempty" json:"evidence,omitempty"`

	// CweId The CWE identifier associated with the alert.
	CweId *string `form:"cweId,omitempty" json:"cweId,omitempty"`

	// WascId The WASC identifier associated with the alert.
	WascId *string `form:"wascId,omitempty" json:"wascId,omitempty"`
}

// AlertActionUpdateAlertsConfidenceParams defines parameters for AlertActionUpdateAlertsConfidence.
type AlertActionUpdateAlertsConfidenceParams struct {
	// Ids The IDs of the alerts to update (comma separated values).
	Ids string `form:"ids" json:"ids"`

	// ConfidenceId The numeric confidence representation ('1 - Low' through '3 - High' [user set values '0 - False Positive', and '4 - User Confirmed' are also available]).
	ConfidenceId string `form:"confidenceId" json:"confidenceId"`
}

// AlertActionUpdateAlertsRiskParams defines parameters for AlertActionUpdateAlertsRisk.
type AlertActionUpdateAlertsRiskParams struct {
	// Ids The IDs of the alerts to update (comma separated values).
	Ids string `form:"ids" json:"ids"`

	// RiskId The numeric risk representation ('0 - Informational' through '3 - High').
	RiskId string `form:"riskId" json:"riskId"`
}

// AlertViewAlertParams defines parameters for AlertViewAlert.
type AlertViewAlertParams struct {
	Id string `form:"id" json:"id"`
}

// AlertViewAlertCountsByRiskParams defines parameters for AlertViewAlertCountsByRisk.
type AlertViewAlertCountsByRiskParams struct {
	Url     *string `form:"url,omitempty" json:"url,omitempty"`
	Recurse *string `form:"recurse,omitempty" json:"recurse,omitempty"`
}

// AlertViewAlertsParams defines parameters for AlertViewAlerts.
type AlertViewAlertsParams struct {
	// Baseurl The highest URL in the Sites tree under which alerts should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
	RiskId  *string `form:"riskId,omitempty" json:"riskId,omitempty"`

	// ContextName Optionally, the Context name which the Alerts' URLs are associated with.
	ContextName *string `form:"contextName,omitempty" json:"contextName,omitempty"`
}

// AlertViewAlertsByRiskParams defines parameters for AlertViewAlertsByRisk.
type AlertViewAlertsByRiskParams struct {
	Url     *string `form:"url,omitempty" json:"url,omitempty"`
	Recurse *string `form:"recurse,omitempty" json:"recurse,omitempty"`
}

// AlertViewAlertsSummaryParams defines parameters for AlertViewAlertsSummary.
type AlertViewAlertsSummaryParams struct {
	// Baseurl The highest URL in the Sites tree under which alerts should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
}

// AlertViewNumberOfAlertsParams defines parameters for AlertViewNumberOfAlerts.
type AlertViewNumberOfAlertsParams struct {
	// Baseurl The highest URL in the Sites tree under which alerts should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	RiskId  *string `form:"riskId,omitempty" json:"riskId,omitempty"`
}

// AlertFilterActionAddAlertFilterParams defines parameters for AlertFilterActionAddAlertFilter.
type AlertFilterActionAddAlertFilterParams struct {
	// ContextId The numeric ID of the context for which the filter should be added.
	ContextId string `form:"contextId" json:"contextId"`

	// RuleId The numeric ID of the rule for which the filter should apply.
	RuleId string `form:"ruleId" json:"ruleId"`

	// NewLevel The numeric risk representation ('0 - Informational' through '3 - High') ['-1 - False Positive'].
	NewLevel string `form:"newLevel" json:"newLevel"`

	// Url The URL for which the filter should apply (can be regex).
	Url *string `form:"url,omitempty" json:"url,omitempty"`

	// UrlIsRegex A boolean indicating whether or not the URL is a regex.
	UrlIsRegex *string `form:"urlIsRegex,omitempty" json:"urlIsRegex,omitempty"`

	// Parameter The parameter name for which the filter should apply (can be regex).
	Parameter *string `form:"parameter,omitempty" json:"parameter,omitempty"`

	// Enabled A boolean indicating whether or not the filter should be enabled.
	Enabled *string `form:"enabled,omitempty" json:"enabled,omitempty"`

	// ParameterIsRegex A boolean indicating whether or not the parameter name is a regex.
	ParameterIsRegex *string `form:"parameterIsRegex,omitempty" json:"parameterIsRegex,omitempty"`

	// Attack The attack value for which the filter should apply (can be regex).
	Attack *string `form:"attack,omitempty" json:"attack,omitempty"`

	// AttackIsRegex A boolean indicating whether or not the attack value is a regex.
	AttackIsRegex *string `form:"attackIsRegex,omitempty" json:"attackIsRegex,omitempty"`

	// Evidence The evidence value for which the filter should apply (can be regex).
	Evidence *string `form:"evidence,omitempty" json:"evidence,omitempty"`

	// EvidenceIsRegex A boolean indicating whether or not the evidence value is a regex.
	EvidenceIsRegex *string `form:"evidenceIsRegex,omitempty" json:"evidenceIsRegex,omitempty"`

	// Methods The HTTP methods (comma separated) for which the filter should apply.
	Methods *string `form:"methods,omitempty" json:"methods,omitempty"`
}

// AlertFilterActionAddGlobalAlertFilterParams defines parameters for AlertFilterActionAddGlobalAlertFilter.
type AlertFilterActionAddGlobalAlertFilterParams struct {
	// RuleId The numeric ID of the rule for which the filter should apply.
	RuleId string `form:"ruleId" json:"ruleId"`

	// NewLevel The numeric risk representation ('0 - Informational' through '3 - High') ['-1 - False Positive'].
	NewLevel string `form:"newLevel" json:"newLevel"`

	// Url The URL for which the filter should apply (can be regex).
	Url *string `form:"url,omitempty" json:"url,omitempty"`

	// UrlIsRegex A boolean indicating whether or not the URL is a regex.
	UrlIsRegex *string `form:"urlIsRegex,omitempty" json:"urlIsRegex,omitempty"`

	// Parameter The parameter name for which the filter should apply (can be regex).
	Parameter *string `form:"parameter,omitempty" json:"parameter,omitempty"`

	// Enabled A boolean indicating whether or not the filter should be enabled.
	Enabled *string `form:"enabled,omitempty" json:"enabled,omitempty"`

	// ParameterIsRegex A boolean indicating whether or not the parameter name is a regex.
	ParameterIsRegex *string `form:"parameterIsRegex,omitempty" json:"parameterIsRegex,omitempty"`

	// Attack The attack value for which the filter should apply (can be regex).
	Attack *string `form:"attack,omitempty" json:"attack,omitempty"`

	// AttackIsRegex A boolean indicating whether or not the attack value is a regex.
	AttackIsRegex *string `form:"attackIsRegex,omitempty" json:"attackIsRegex,omitempty"`

	// Evidence The evidence value for which the filter should apply (can be regex).
	Evidence *string `form:"evidence,omitempty" json:"evidence,omitempty"`

	// EvidenceIsRegex A boolean indicating whether or not the evidence value is a regex.
	EvidenceIsRegex *string `form:"evidenceIsRegex,omitempty" json:"evidenceIsRegex,omitempty"`

	// Methods The HTTP methods (comma separated) for which the filter should apply.
	Methods *string `form:"methods,omitempty" json:"methods,omitempty"`
}

// AlertFilterActionRemoveAlertFilterParams defines parameters for AlertFilterActionRemoveAlertFilter.
type AlertFilterActionRemoveAlertFilterParams struct {
	// ContextId The numeric ID of the context for which the filter should be removed.
	ContextId string `form:"contextId" json:"contextId"`

	// RuleId The numeric ID of the rule for which the filter applies.
	RuleId string `form:"ruleId" json:"ruleId"`

	// NewLevel The numeric risk representation ('0 - Informational' through '3 - High') ['-1 - False Positive'].
	NewLevel string `form:"newLevel" json:"newLevel"`

	// Url The URL for which the filter applies (can be regex).
	Url *string `form:"url,omitempty" json:"url,omitempty"`

	// UrlIsRegex A boolean indicating whether or not the URL is a regex.
	UrlIsRegex *string `form:"urlIsRegex,omitempty" json:"urlIsRegex,omitempty"`

	// Parameter The parameter name for which the filter applies (can be regex).
	Parameter *string `form:"parameter,omitempty" json:"parameter,omitempty"`

	// Enabled A boolean indicating whether or not the filter should be enabled.
	Enabled *string `form:"enabled,omitempty" json:"enabled,omitempty"`

	// ParameterIsRegex A boolean indicating whether or not the parameter name is a regex.
	ParameterIsRegex *string `form:"parameterIsRegex,omitempty" json:"parameterIsRegex,omitempty"`

	// Attack The attack value for which the filter applies (can be regex).
	Attack *string `form:"attack,omitempty" json:"attack,omitempty"`

	// AttackIsRegex A boolean indicating whether or not the attack value is a regex.
	AttackIsRegex *string `form:"attackIsRegex,omitempty" json:"attackIsRegex,omitempty"`

	// Evidence The evidence value for which the filter applies (can be regex).
	Evidence *string `form:"evidence,omitempty" json:"evidence,omitempty"`

	// EvidenceIsRegex A boolean indicating whether or not the evidence value is a regex.
	EvidenceIsRegex *string `form:"evidenceIsRegex,omitempty" json:"evidenceIsRegex,omitempty"`

	// Methods The HTTP methods (comma separated) for which the filter applies.
	Methods *string `form:"methods,omitempty" json:"methods,omitempty"`
}

// AlertFilterActionRemoveGlobalAlertFilterParams defines parameters for AlertFilterActionRemoveGlobalAlertFilter.
type AlertFilterActionRemoveGlobalAlertFilterParams struct {
	// RuleId The numeric ID of the rule for which the filter applies.
	RuleId string `form:"ruleId" json:"ruleId"`

	// NewLevel The numeric risk representation ('0 - Informational' through '3 - High') ['-1 - False Positive'].
	NewLevel string `form:"newLevel" json:"newLevel"`

	// Url The URL for which the filter applies (can be regex).
	Url *string `form:"url,omitempty" json:"url,omitempty"`

	// UrlIsRegex A boolean indicating whether or not the URL is a regex.
	UrlIsRegex *string `form:"urlIsRegex,omitempty" json:"urlIsRegex,omitempty"`

	// Parameter The parameter name for which the filter applies (can be regex).
	Parameter *string `form:"parameter,omitempty" json:"parameter,omitempty"`

	// Enabled A boolean indicating whether or not the filter should be enabled.
	Enabled *string `form:"enabled,omitempty" json:"enabled,omitempty"`

	// ParameterIsRegex A boolean indicating whether or not the parameter name is a regex.
	ParameterIsRegex *string `form:"parameterIsRegex,omitempty" json:"parameterIsRegex,omitempty"`

	// Attack The attack value for which the filter applies (can be regex).
	Attack *string `form:"attack,omitempty" json:"attack,omitempty"`

	// AttackIsRegex A boolean indicating whether or not the attack value is a regex.
	AttackIsRegex *string `form:"attackIsRegex,omitempty" json:"attackIsRegex,omitempty"`

	// Evidence The evidence value for which the filter applies (can be regex).
	Evidence *string `form:"evidence,omitempty" json:"evidence,omitempty"`

	// EvidenceIsRegex A boolean indicating whether or not the evidence value is a regex.
	EvidenceIsRegex *string `form:"evidenceIsRegex,omitempty" json:"evidenceIsRegex,omitempty"`

	// Methods The HTTP methods (comma separated) for which the filter applies.
	Methods *string `form:"methods,omitempty" json:"methods,omitempty"`
}

// AlertFilterViewAlertFilterListParams defines parameters for AlertFilterViewAlertFilterList.
type AlertFilterViewAlertFilterListParams struct {
	// ContextId The numeric ID of the context for which the filters should be listed.
	ContextId string `form:"contextId" json:"contextId"`
}

// AscanActionAddExcludedParamParams defines parameters for AscanActionAddExcludedParam.
type AscanActionAddExcludedParamParams struct {
	Name string  `form:"name" json:"name"`
	Type *string `form:"type,omitempty" json:"type,omitempty"`
	Url  *string `form:"url,omitempty" json:"url,omitempty"`
}

// AscanActionAddScanPolicyParams defines parameters for AscanActionAddScanPolicy.
type AscanActionAddScanPolicyParams struct {
	ScanPolicyName string  `form:"scanPolicyName" json:"scanPolicyName"`
	AlertThreshold *string `form:"alertThreshold,omitempty" json:"alertThreshold,omitempty"`
	AttackStrength *string `form:"attackStrength,omitempty" json:"attackStrength,omitempty"`
}

// AscanActionDisableAllScannersParams defines parameters for AscanActionDisableAllScanners.
type AscanActionDisableAllScannersParams struct {
	ScanPolicyName *string `form:"scanPolicyName,omitempty" json:"scanPolicyName,omitempty"`
}

// AscanActionDisableScannersParams defines parameters for AscanActionDisableScanners.
type AscanActionDisableScannersParams struct {
	Ids            string  `form:"ids" json:"ids"`
	ScanPolicyName *string `form:"scanPolicyName,omitempty" json:"scanPolicyName,omitempty"`
}

// AscanActionEnableAllScannersParams defines parameters for AscanActionEnableAllScanners.
type AscanActionEnableAllScannersParams struct {
	ScanPolicyName *string `form:"scanPolicyName,omitempty" json:"scanPolicyName,omitempty"`
}

// AscanActionEnableScannersParams defines parameters for AscanActionEnableScanners.
type AscanActionEnableScannersParams struct {
	Ids            string  `form:"ids" json:"ids"`
	ScanPolicyName *string `form:"scanPolicyName,omitempty" json:"scanPolicyName,omitempty"`
}

// AscanActionExcludeFromScanParams defines parameters for AscanActionExcludeFromScan.
type AscanActionExcludeFromScanParams struct {
	Regex string `form:"regex" json:"regex"`
}

// AscanActionImportScanPolicyParams defines parameters for AscanActionImportScanPolicy.
type AscanActionImportScanPolicyParams struct {
	Path string `form:"path" json:"path"`
}

// AscanActionModifyExcludedParamParams defines parameters for AscanActionModifyExcludedParam.
type AscanActionModifyExcludedParamParams struct {
	Idx  string  `form:"idx" json:"idx"`
	Name *string `form:"name,omitempty" json:"name,omitempty"`
	Type *string `form:"type,omitempty" json:"type,omitempty"`
	Url  *string `form:"url,omitempty" json:"url,omitempty"`
}

// AscanActionPauseParams defines parameters for AscanActionPause.
type AscanActionPauseParams struct {
	ScanId string `form:"scanId" json:"scanId"`
}

// AscanActionRemoveExcludedParamParams defines parameters for AscanActionRemoveExcludedParam.
type AscanActionRemoveExcludedParamParams struct {
	Idx string `form:"idx" json:"idx"`
}

// AscanActionRemoveScanParams defines parameters for AscanActionRemoveScan.
type AscanActionRemoveScanParams struct {
	ScanId string `form:"scanId" json:"scanId"`
}

// AscanActionRemoveScanPolicyParams defines parameters for AscanActionRemoveScanPolicy.
type AscanActionRemoveScanPolicyParams struct {
	ScanPolicyName string `form:"scanPolicyName" json:"scanPolicyName"`
}

// AscanActionResumeParams defines parameters for AscanActionResume.
type AscanActionResumeParams struct {
	ScanId string `form:"scanId" json:"scanId"`
}

// AscanActionScanParams defines parameters for AscanActionScan.
type AscanActionScanParams struct {
	Url            *string `form:"url,omitempty" json:"url,omitempty"`
	Recurse        *string `form:"recurse,omitempty" json:"recurse,omitempty"`
	InScopeOnly    *string `form:"inScopeOnly,omitempty" json:"inScopeOnly,omitempty"`
	ScanPolicyName *string `form:"scanPolicyName,omitempty" json:"scanPolicyName,omitempty"`
	Method         *string `form:"method,omitempty" json:"method,omitempty"`
	PostData       *string `form:"postData,omitempty" json:"postData,omitempty"`
	ContextId      *string `form:"contextId,omitempty" json:"contextId,omitempty"`
}

// AscanActionScanAsUserParams defines parameters for AscanActionScanAsUser.
type AscanActionScanAsUserParams struct {
	Url            *string `form:"url,omitempty" json:"url,omitempty"`
	ContextId      *string `form:"contextId,omitempty" json:"contextId,omitempty"`
	UserId         *string `form:"userId,omitempty" json:"userId,omitempty"`
	Recurse        *string `form:"recurse,omitempty" json:"recurse,omitempty"`
	ScanPolicyName *string `form:"scanPolicyName,omitempty" json:"scanPolicyName,omitempty"`
	Method         *string `form:"method,omitempty" json:"method,omitempty"`
	PostData       *string `form:"postData,omitempty" json:"postData,omitempty"`
}

// AscanActionSetEnabledPoliciesParams defines parameters for AscanActionSetEnabledPolicies.
type AscanActionSetEnabledPoliciesParams struct {
	Ids            string  `form:"ids" json:"ids"`
	ScanPolicyName *string `form:"scanPolicyName,omitempty" json:"scanPolicyName,omitempty"`
}

// AscanActionSetOptionAddQueryParamParams defines parameters for AscanActionSetOptionAddQueryParam.
type AscanActionSetOptionAddQueryParamParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AscanActionSetOptionAllowAttackOnStartParams defines parameters for AscanActionSetOptionAllowAttackOnStart.
type AscanActionSetOptionAllowAttackOnStartParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AscanActionSetOptionAttackPolicyParams defines parameters for AscanActionSetOptionAttackPolicy.
type AscanActionSetOptionAttackPolicyParams struct {
	String string `form:"String" json:"String"`
}

// AscanActionSetOptionDefaultPolicyParams defines parameters for AscanActionSetOptionDefaultPolicy.
type AscanActionSetOptionDefaultPolicyParams struct {
	String string `form:"String" json:"String"`
}

// AscanActionSetOptionDelayInMsParams defines parameters for AscanActionSetOptionDelayInMs.
type AscanActionSetOptionDelayInMsParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// AscanActionSetOptionEncodeCookieValuesParams defines parameters for AscanActionSetOptionEncodeCookieValues.
type AscanActionSetOptionEncodeCookieValuesParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AscanActionSetOptionHandleAntiCSRFTokensParams defines parameters for AscanActionSetOptionHandleAntiCSRFTokens.
type AscanActionSetOptionHandleAntiCSRFTokensParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AscanActionSetOptionHostPerScanParams defines parameters for AscanActionSetOptionHostPerScan.
type AscanActionSetOptionHostPerScanParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// AscanActionSetOptionInjectPluginIdInHeaderParams defines parameters for AscanActionSetOptionInjectPluginIdInHeader.
type AscanActionSetOptionInjectPluginIdInHeaderParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AscanActionSetOptionMaxAlertsPerRuleParams defines parameters for AscanActionSetOptionMaxAlertsPerRule.
type AscanActionSetOptionMaxAlertsPerRuleParams struct {
	// Integer The maximum alerts.
	Integer int `form:"Integer" json:"Integer"`
}

// AscanActionSetOptionMaxChartTimeInMinsParams defines parameters for AscanActionSetOptionMaxChartTimeInMins.
type AscanActionSetOptionMaxChartTimeInMinsParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// AscanActionSetOptionMaxResultsToListParams defines parameters for AscanActionSetOptionMaxResultsToList.
type AscanActionSetOptionMaxResultsToListParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// AscanActionSetOptionMaxRuleDurationInMinsParams defines parameters for AscanActionSetOptionMaxRuleDurationInMins.
type AscanActionSetOptionMaxRuleDurationInMinsParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// AscanActionSetOptionMaxScanDurationInMinsParams defines parameters for AscanActionSetOptionMaxScanDurationInMins.
type AscanActionSetOptionMaxScanDurationInMinsParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// AscanActionSetOptionMaxScansInUIParams defines parameters for AscanActionSetOptionMaxScansInUI.
type AscanActionSetOptionMaxScansInUIParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// AscanActionSetOptionPromptInAttackModeParams defines parameters for AscanActionSetOptionPromptInAttackMode.
type AscanActionSetOptionPromptInAttackModeParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AscanActionSetOptionPromptToClearFinishedScansParams defines parameters for AscanActionSetOptionPromptToClearFinishedScans.
type AscanActionSetOptionPromptToClearFinishedScansParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AscanActionSetOptionRescanInAttackModeParams defines parameters for AscanActionSetOptionRescanInAttackMode.
type AscanActionSetOptionRescanInAttackModeParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AscanActionSetOptionScanHeadersAllRequestsParams defines parameters for AscanActionSetOptionScanHeadersAllRequests.
type AscanActionSetOptionScanHeadersAllRequestsParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AscanActionSetOptionScanNullJsonValuesParams defines parameters for AscanActionSetOptionScanNullJsonValues.
type AscanActionSetOptionScanNullJsonValuesParams struct {
	// Boolean true to scan null values, false otherwise.
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AscanActionSetOptionShowAdvancedDialogParams defines parameters for AscanActionSetOptionShowAdvancedDialog.
type AscanActionSetOptionShowAdvancedDialogParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AscanActionSetOptionTargetParamsEnabledRPCParams defines parameters for AscanActionSetOptionTargetParamsEnabledRPC.
type AscanActionSetOptionTargetParamsEnabledRPCParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// AscanActionSetOptionTargetParamsInjectableParams defines parameters for AscanActionSetOptionTargetParamsInjectable.
type AscanActionSetOptionTargetParamsInjectableParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// AscanActionSetOptionThreadPerHostParams defines parameters for AscanActionSetOptionThreadPerHost.
type AscanActionSetOptionThreadPerHostParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// AscanActionSetPolicyAlertThresholdParams defines parameters for AscanActionSetPolicyAlertThreshold.
type AscanActionSetPolicyAlertThresholdParams struct {
	Id             string  `form:"id" json:"id"`
	AlertThreshold string  `form:"alertThreshold" json:"alertThreshold"`
	ScanPolicyName *string `form:"scanPolicyName,omitempty" json:"scanPolicyName,omitempty"`
}

// AscanActionSetPolicyAttackStrengthParams defines parameters for AscanActionSetPolicyAttackStrength.
type AscanActionSetPolicyAttackStrengthParams struct {
	Id             string  `form:"id" json:"id"`
	AttackStrength string  `form:"attackStrength" json:"attackStrength"`
	ScanPolicyName *string `form:"scanPolicyName,omitempty" json:"scanPolicyName,omitempty"`
}

// AscanActionSetScannerAlertThresholdParams defines parameters for AscanActionSetScannerAlertThreshold.
type AscanActionSetScannerAlertThresholdParams struct {
	Id             string  `form:"id" json:"id"`
	AlertThreshold string  `form:"alertThreshold" json:"alertThreshold"`
	ScanPolicyName *string `form:"scanPolicyName,omitempty" json:"scanPolicyName,omitempty"`
}

// AscanActionSetScannerAttackStrengthParams defines parameters for AscanActionSetScannerAttackStrength.
type AscanActionSetScannerAttackStrengthParams struct {
	Id             string  `form:"id" json:"id"`
	AttackStrength string  `form:"attackStrength" json:"attackStrength"`
	ScanPolicyName *string `form:"scanPolicyName,omitempty" json:"scanPolicyName,omitempty"`
}

// AscanActionSkipScannerParams defines parameters for AscanActionSkipScanner.
type AscanActionSkipScannerParams struct {
	ScanId    string `form:"scanId" json:"scanId"`
	ScannerId string `form:"scannerId" json:"scannerId"`
}

// AscanActionStopParams defines parameters for AscanActionStop.
type AscanActionStopParams struct {
	ScanId string `form:"scanId" json:"scanId"`
}

// AscanActionUpdateScanPolicyParams defines parameters for AscanActionUpdateScanPolicy.
type AscanActionUpdateScanPolicyParams struct {
	ScanPolicyName string  `form:"scanPolicyName" json:"scanPolicyName"`
	AlertThreshold *string `form:"alertThreshold,omitempty" json:"alertThreshold,omitempty"`
	AttackStrength *string `form:"attackStrength,omitempty" json:"attackStrength,omitempty"`
}

// AscanViewAlertsIdsParams defines parameters for AscanViewAlertsIds.
type AscanViewAlertsIdsParams struct {
	ScanId string `form:"scanId" json:"scanId"`
}

// AscanViewMessagesIdsParams defines parameters for AscanViewMessagesIds.
type AscanViewMessagesIdsParams struct {
	ScanId string `form:"scanId" json:"scanId"`
}

// AscanViewPoliciesParams defines parameters for AscanViewPolicies.
type AscanViewPoliciesParams struct {
	ScanPolicyName *string `form:"scanPolicyName,omitempty" json:"scanPolicyName,omitempty"`
	PolicyId       *string `form:"policyId,omitempty" json:"policyId,omitempty"`
}

// AscanViewScanProgressParams defines parameters for AscanViewScanProgress.
type AscanViewScanProgressParams struct {
	ScanId *string `form:"scanId,omitempty" json:"scanId,omitempty"`
}

// AscanViewScannersParams defines parameters for AscanViewScanners.
type AscanViewScannersParams struct {
	ScanPolicyName *string `form:"scanPolicyName,omitempty" json:"scanPolicyName,omitempty"`
	PolicyId       *string `form:"policyId,omitempty" json:"policyId,omitempty"`
}

// AscanViewStatusParams defines parameters for AscanViewStatus.
type AscanViewStatusParams struct {
	ScanId *string `form:"scanId,omitempty" json:"scanId,omitempty"`
}

// AuthenticationActionSetAuthenticationMethodParams defines parameters for AuthenticationActionSetAuthenticationMethod.
type AuthenticationActionSetAuthenticationMethodParams struct {
	ContextId              string  `form:"contextId" json:"contextId"`
	AuthMethodName         string  `form:"authMethodName" json:"authMethodName"`
	AuthMethodConfigParams *string `form:"authMethodConfigParams,omitempty" json:"authMethodConfigParams,omitempty"`
}

// AuthenticationActionSetLoggedInIndicatorParams defines parameters for AuthenticationActionSetLoggedInIndicator.
type AuthenticationActionSetLoggedInIndicatorParams struct {
	ContextId              string `form:"contextId" json:"contextId"`
	LoggedInIndicatorRegex string `form:"loggedInIndicatorRegex" json:"loggedInIndicatorRegex"`
}

// AuthenticationActionSetLoggedOutIndicatorParams defines parameters for AuthenticationActionSetLoggedOutIndicator.
type AuthenticationActionSetLoggedOutIndicatorParams struct {
	ContextId               string `form:"contextId" json:"contextId"`
	LoggedOutIndicatorRegex string `form:"loggedOutIndicatorRegex" json:"loggedOutIndicatorRegex"`
}

// AuthenticationViewGetAuthenticationMethodParams defines parameters for AuthenticationViewGetAuthenticationMethod.
type AuthenticationViewGetAuthenticationMethodParams struct {
	ContextId string `form:"contextId" json:"contextId"`
}

// AuthenticationViewGetAuthenticationMethodConfigParamsParams defines parameters for AuthenticationViewGetAuthenticationMethodConfigParams.
type AuthenticationViewGetAuthenticationMethodConfigParamsParams struct {
	AuthMethodName string `form:"authMethodName" json:"authMethodName"`
}

// AuthenticationViewGetLoggedInIndicatorParams defines parameters for AuthenticationViewGetLoggedInIndicator.
type AuthenticationViewGetLoggedInIndicatorParams struct {
	ContextId string `form:"contextId" json:"contextId"`
}

// AuthenticationViewGetLoggedOutIndicatorParams defines parameters for AuthenticationViewGetLoggedOutIndicator.
type AuthenticationViewGetLoggedOutIndicatorParams struct {
	ContextId string `form:"contextId" json:"contextId"`
}

// AuthorizationActionSetBasicAuthorizationDetectionMethodParams defines parameters for AuthorizationActionSetBasicAuthorizationDetectionMethod.
type AuthorizationActionSetBasicAuthorizationDetectionMethodParams struct {
	ContextId       string  `form:"contextId" json:"contextId"`
	HeaderRegex     *string `form:"headerRegex,omitempty" json:"headerRegex,omitempty"`
	BodyRegex       *string `form:"bodyRegex,omitempty" json:"bodyRegex,omitempty"`
	StatusCode      *string `form:"statusCode,omitempty" json:"statusCode,omitempty"`
	LogicalOperator *string `form:"logicalOperator,omitempty" json:"logicalOperator,omitempty"`
}

// AuthorizationViewGetAuthorizationDetectionMethodParams defines parameters for AuthorizationViewGetAuthorizationDetectionMethod.
type AuthorizationViewGetAuthorizationDetectionMethodParams struct {
	ContextId string `form:"contextId" json:"contextId"`
}

// AutomationActionRunPlanParams defines parameters for AutomationActionRunPlan.
type AutomationActionRunPlanParams struct {
	FilePath string `form:"filePath" json:"filePath"`
}

// AutomationViewPlanProgressParams defines parameters for AutomationViewPlanProgress.
type AutomationViewPlanProgressParams struct {
	PlanId string `form:"planId" json:"planId"`
}

// AutoupdateActionInstallAddonParams defines parameters for AutoupdateActionInstallAddon.
type AutoupdateActionInstallAddonParams struct {
	Id string `form:"id" json:"id"`
}

// AutoupdateActionInstallLocalAddonParams defines parameters for AutoupdateActionInstallLocalAddon.
type AutoupdateActionInstallLocalAddonParams struct {
	File string `form:"file" json:"file"`
}

// AutoupdateActionSetOptionCheckAddonUpdatesParams defines parameters for AutoupdateActionSetOptionCheckAddonUpdates.
type AutoupdateActionSetOptionCheckAddonUpdatesParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AutoupdateActionSetOptionCheckOnStartParams defines parameters for AutoupdateActionSetOptionCheckOnStart.
type AutoupdateActionSetOptionCheckOnStartParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AutoupdateActionSetOptionDownloadNewReleaseParams defines parameters for AutoupdateActionSetOptionDownloadNewRelease.
type AutoupdateActionSetOptionDownloadNewReleaseParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AutoupdateActionSetOptionInstallAddonUpdatesParams defines parameters for AutoupdateActionSetOptionInstallAddonUpdates.
type AutoupdateActionSetOptionInstallAddonUpdatesParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AutoupdateActionSetOptionInstallScannerRulesParams defines parameters for AutoupdateActionSetOptionInstallScannerRules.
type AutoupdateActionSetOptionInstallScannerRulesParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AutoupdateActionSetOptionReportAlphaAddonsParams defines parameters for AutoupdateActionSetOptionReportAlphaAddons.
type AutoupdateActionSetOptionReportAlphaAddonsParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AutoupdateActionSetOptionReportBetaAddonsParams defines parameters for AutoupdateActionSetOptionReportBetaAddons.
type AutoupdateActionSetOptionReportBetaAddonsParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AutoupdateActionSetOptionReportReleaseAddonsParams defines parameters for AutoupdateActionSetOptionReportReleaseAddons.
type AutoupdateActionSetOptionReportReleaseAddonsParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// AutoupdateActionUninstallAddonParams defines parameters for AutoupdateActionUninstallAddon.
type AutoupdateActionUninstallAddonParams struct {
	Id string `form:"id" json:"id"`
}

// BreakActionAddHttpBreakpointParams defines parameters for BreakActionAddHttpBreakpoint.
type BreakActionAddHttpBreakpointParams struct {
	String     string `form:"string" json:"string"`
	Location   string `form:"location" json:"location"`
	Match      string `form:"match" json:"match"`
	Inverse    string `form:"inverse" json:"inverse"`
	Ignorecase string `form:"ignorecase" json:"ignorecase"`
}

// BreakActionBreakParams defines parameters for BreakActionBreak.
type BreakActionBreakParams struct {
	Type  string  `form:"type" json:"type"`
	State string  `form:"state" json:"state"`
	Scope *string `form:"scope,omitempty" json:"scope,omitempty"`
}

// BreakActionRemoveHttpBreakpointParams defines parameters for BreakActionRemoveHttpBreakpoint.
type BreakActionRemoveHttpBreakpointParams struct {
	String     string `form:"string" json:"string"`
	Location   string `form:"location" json:"location"`
	Match      string `form:"match" json:"match"`
	Inverse    string `form:"inverse" json:"inverse"`
	Ignorecase string `form:"ignorecase" json:"ignorecase"`
}

// BreakActionSetHttpMessageParams defines parameters for BreakActionSetHttpMessage.
type BreakActionSetHttpMessageParams struct {
	HttpHeader string  `form:"httpHeader" json:"httpHeader"`
	HttpBody   *string `form:"httpBody,omitempty" json:"httpBody,omitempty"`
}

// ClientActionExportClientMapParams defines parameters for ClientActionExportClientMap.
type ClientActionExportClientMapParams struct {
	// PathYaml The file system path to the file.
	PathYaml string `form:"pathYaml" json:"pathYaml"`
}

// ClientActionReportEventParams defines parameters for ClientActionReportEvent.
type ClientActionReportEventParams struct {
	EventJson string `form:"eventJson" json:"eventJson"`
}

// ClientActionReportObjectParams defines parameters for ClientActionReportObject.
type ClientActionReportObjectParams struct {
	ObjectJson string `form:"objectJson" json:"objectJson"`
}

// ClientActionReportZestScriptParams defines parameters for ClientActionReportZestScript.
type ClientActionReportZestScriptParams struct {
	ScriptJson string `form:"scriptJson" json:"scriptJson"`
}

// ClientActionReportZestStatementParams defines parameters for ClientActionReportZestStatement.
type ClientActionReportZestStatementParams struct {
	StatementJson string `form:"statementJson" json:"statementJson"`
}

// ClientSpiderActionScanParams defines parameters for ClientSpiderActionScan.
type ClientSpiderActionScanParams struct {
	// Browser The ID of the browser. See Selenium documentation for valid IDs.
	Browser *string `form:"browser,omitempty" json:"browser,omitempty"`

	// Url The URL from where to start the spider.
	Url *string `form:"url,omitempty" json:"url,omitempty"`

	// ContextName The name of the context.
	ContextName *string `form:"contextName,omitempty" json:"contextName,omitempty"`

	// UserName The name of the user.
	UserName *string `form:"userName,omitempty" json:"userName,omitempty"`

	// SubtreeOnly true to spider only under the subtree, false otherwise.
	SubtreeOnly *string `form:"subtreeOnly,omitempty" json:"subtreeOnly,omitempty"`

	// MaxCrawlDepth Maximum Crawl Depth (0 is unlimited).
	MaxCrawlDepth *string `form:"maxCrawlDepth,omitempty" json:"maxCrawlDepth,omitempty"`

	// PageLoadTime Page Load Time (seconds).
	PageLoadTime *string `form:"pageLoadTime,omitempty" json:"pageLoadTime,omitempty"`
}

// ClientSpiderActionStopParams defines parameters for ClientSpiderActionStop.
type ClientSpiderActionStopParams struct {
	// ScanId The ID of the client spider scan.
	ScanId string `form:"scanId" json:"scanId"`
}

// ClientSpiderViewStatusParams defines parameters for ClientSpiderViewStatus.
type ClientSpiderViewStatusParams struct {
	// ScanId The ID of the client spider scan.
	ScanId string `form:"scanId" json:"scanId"`
}

// ContextActionExcludeAllContextTechnologiesParams defines parameters for ContextActionExcludeAllContextTechnologies.
type ContextActionExcludeAllContextTechnologiesParams struct {
	// ContextName The name of the context
	ContextName string `form:"contextName" json:"contextName"`
}

// ContextActionExcludeContextTechnologiesParams defines parameters for ContextActionExcludeContextTechnologies.
type ContextActionExcludeContextTechnologiesParams struct {
	// ContextName The name of the context
	ContextName     string `form:"contextName" json:"contextName"`
	TechnologyNames string `form:"technologyNames" json:"technologyNames"`
}

// ContextActionExcludeFromContextParams defines parameters for ContextActionExcludeFromContext.
type ContextActionExcludeFromContextParams struct {
	// ContextName The name of the context
	ContextName string `form:"contextName" json:"contextName"`
	Regex       string `form:"regex" json:"regex"`
}

// ContextActionExportContextParams defines parameters for ContextActionExportContext.
type ContextActionExportContextParams struct {
	// ContextName The name of the context
	ContextName string `form:"contextName" json:"contextName"`
	ContextFile string `form:"contextFile" json:"contextFile"`
}

// ContextActionImportContextParams defines parameters for ContextActionImportContext.
type ContextActionImportContextParams struct {
	ContextFile string `form:"contextFile" json:"contextFile"`
}

// ContextActionIncludeAllContextTechnologiesParams defines parameters for ContextActionIncludeAllContextTechnologies.
type ContextActionIncludeAllContextTechnologiesParams struct {
	// ContextName The name of the context
	ContextName string `form:"contextName" json:"contextName"`
}

// ContextActionIncludeContextTechnologiesParams defines parameters for ContextActionIncludeContextTechnologies.
type ContextActionIncludeContextTechnologiesParams struct {
	// ContextName The name of the context
	ContextName     string `form:"contextName" json:"contextName"`
	TechnologyNames string `form:"technologyNames" json:"technologyNames"`
}

// ContextActionIncludeInContextParams defines parameters for ContextActionIncludeInContext.
type ContextActionIncludeInContextParams struct {
	// ContextName The name of the context
	ContextName string `form:"contextName" json:"contextName"`
	Regex       string `form:"regex" json:"regex"`
}

// ContextActionNewContextParams defines parameters for ContextActionNewContext.
type ContextActionNewContextParams struct {
	// ContextName The name of the context
	ContextName string `form:"contextName" json:"contextName"`
}

// ContextActionRemoveContextParams defines parameters for ContextActionRemoveContext.
type ContextActionRemoveContextParams struct {
	// ContextName The name of the context
	ContextName string `form:"contextName" json:"contextName"`
}

// ContextActionSetContextCheckingStrategyParams defines parameters for ContextActionSetContextCheckingStrategy.
type ContextActionSetContextCheckingStrategyParams struct {
	// ContextName The name of the context
	ContextName string `form:"contextName" json:"contextName"`

	// CheckingStrategy One of EACH_RESP, EACH_REQ, EACH_REQ_RESP, POLL_URL
	CheckingStrategy string `form:"checkingStrategy" json:"checkingStrategy"`

	// PollUrl The URL for ZAP to poll, must be supplied if checkingStrategy = POLL_URL, otherwise ignored
	PollUrl *string `form:"pollUrl,omitempty" json:"pollUrl,omitempty"`

	// PollData The POST data to supply to the pollUrl, option and only takes effect if checkingStrategy = POLL_URL
	PollData *string `form:"pollData,omitempty" json:"pollData,omitempty"`

	// PollHeaders Any additional headers that need to be added to the poll request, separated by '\n' characters, only takes effect if checkingStrategy = POLL_URL
	PollHeaders *string `form:"pollHeaders,omitempty" json:"pollHeaders,omitempty"`

	// PollFrequency An integer greater than zero, must be supplied if checkingStrategy = POLL_URL, otherwise ignored
	PollFrequency *string `form:"pollFrequency,omitempty" json:"pollFrequency,omitempty"`

	// PollFrequencyUnits One of REQUESTS, SECONDS, must be supplied if checkingStrategy = POLL_URL, otherwise ignored
	PollFrequencyUnits *string `form:"pollFrequencyUnits,omitempty" json:"pollFrequencyUnits,omitempty"`
}

// ContextActionSetContextInScopeParams defines parameters for ContextActionSetContextInScope.
type ContextActionSetContextInScopeParams struct {
	// ContextName The name of the context
	ContextName    string `form:"contextName" json:"contextName"`
	BooleanInScope string `form:"booleanInScope" json:"booleanInScope"`
}

// ContextActionSetContextRegexsParams defines parameters for ContextActionSetContextRegexs.
type ContextActionSetContextRegexsParams struct {
	// ContextName The name of the context
	ContextName string `form:"contextName" json:"contextName"`
	IncRegexs   string `form:"incRegexs" json:"incRegexs"`
	ExcRegexs   string `form:"excRegexs" json:"excRegexs"`
}

// ContextViewContextParams defines parameters for ContextViewContext.
type ContextViewContextParams struct {
	// ContextName The name of the context
	ContextName string `form:"contextName" json:"contextName"`
}

// ContextViewExcludeRegexsParams defines parameters for ContextViewExcludeRegexs.
type ContextViewExcludeRegexsParams struct {
	// ContextName The name of the context
	ContextName string `form:"contextName" json:"contextName"`
}

// ContextViewExcludedTechnologyListParams defines parameters for ContextViewExcludedTechnologyList.
type ContextViewExcludedTechnologyListParams struct {
	// ContextName The name of the context
	ContextName string `form:"contextName" json:"contextName"`
}

// ContextViewIncludeRegexsParams defines parameters for ContextViewIncludeRegexs.
type ContextViewIncludeRegexsParams struct {
	// ContextName The name of the context
	ContextName string `form:"contextName" json:"contextName"`
}

// ContextViewIncludedTechnologyListParams defines parameters for ContextViewIncludedTechnologyList.
type ContextViewIncludedTechnologyListParams struct {
	// ContextName The name of the context
	ContextName string `form:"contextName" json:"contextName"`
}

// ContextViewUrlsParams defines parameters for ContextViewUrls.
type ContextViewUrlsParams struct {
	// ContextName The name of the context
	ContextName string `form:"contextName" json:"contextName"`
}

// CoreActionAccessUrlParams defines parameters for CoreActionAccessUrl.
type CoreActionAccessUrlParams struct {
	Url             string  `form:"url" json:"url"`
	FollowRedirects *string `form:"followRedirects,omitempty" json:"followRedirects,omitempty"`
}

// CoreActionAddProxyChainExcludedDomainParams defines parameters for CoreActionAddProxyChainExcludedDomain.
type CoreActionAddProxyChainExcludedDomainParams struct {
	Value     string  `form:"value" json:"value"`
	IsRegex   *string `form:"isRegex,omitempty" json:"isRegex,omitempty"`
	IsEnabled *string `form:"isEnabled,omitempty" json:"isEnabled,omitempty"`
}

// CoreActionCreateSbomZipParams defines parameters for CoreActionCreateSbomZip.
type CoreActionCreateSbomZipParams struct {
	// FilePath The path of the zip file to create
	FilePath string `form:"filePath" json:"filePath"`
}

// CoreActionDeleteAlertParams defines parameters for CoreActionDeleteAlert.
type CoreActionDeleteAlertParams struct {
	Id string `form:"id" json:"id"`
}

// CoreActionDeleteSiteNodeParams defines parameters for CoreActionDeleteSiteNode.
type CoreActionDeleteSiteNodeParams struct {
	Url      string  `form:"url" json:"url"`
	Method   *string `form:"method,omitempty" json:"method,omitempty"`
	PostData *string `form:"postData,omitempty" json:"postData,omitempty"`
}

// CoreActionEnablePKCS12ClientCertificateParams defines parameters for CoreActionEnablePKCS12ClientCertificate.
type CoreActionEnablePKCS12ClientCertificateParams struct {
	FilePath string  `form:"filePath" json:"filePath"`
	Password string  `form:"password" json:"password"`
	Index    *string `form:"index,omitempty" json:"index,omitempty"`
}

// CoreActionExcludeFromProxyParams defines parameters for CoreActionExcludeFromProxy.
type CoreActionExcludeFromProxyParams struct {
	Regex string `form:"regex" json:"regex"`
}

// CoreActionLoadSessionParams defines parameters for CoreActionLoadSession.
type CoreActionLoadSessionParams struct {
	Name string `form:"name" json:"name"`
}

// CoreActionModifyProxyChainExcludedDomainParams defines parameters for CoreActionModifyProxyChainExcludedDomain.
type CoreActionModifyProxyChainExcludedDomainParams struct {
	Idx       string  `form:"idx" json:"idx"`
	Value     *string `form:"value,omitempty" json:"value,omitempty"`
	IsRegex   *string `form:"isRegex,omitempty" json:"isRegex,omitempty"`
	IsEnabled *string `form:"isEnabled,omitempty" json:"isEnabled,omitempty"`
}

// CoreActionNewSessionParams defines parameters for CoreActionNewSession.
type CoreActionNewSessionParams struct {
	Name      *string `form:"name,omitempty" json:"name,omitempty"`
	Overwrite *string `form:"overwrite,omitempty" json:"overwrite,omitempty"`
}

// CoreActionRemoveProxyChainExcludedDomainParams defines parameters for CoreActionRemoveProxyChainExcludedDomain.
type CoreActionRemoveProxyChainExcludedDomainParams struct {
	Idx string `form:"idx" json:"idx"`
}

// CoreActionSaveSessionParams defines parameters for CoreActionSaveSession.
type CoreActionSaveSessionParams struct {
	// Name The name (or path) of the session. If a relative path is specified it will be resolved against the "session" directory in ZAP "home" dir.
	Name string `form:"name" json:"name"`

	// Overwrite If existing files should be overwritten, attempting to overwrite the files of the session already in use/saved will lead to an error ("already_exists").
	Overwrite *string `form:"overwrite,omitempty" json:"overwrite,omitempty"`
}

// CoreActionSendRequestParams defines parameters for CoreActionSendRequest.
type CoreActionSendRequestParams struct {
	Request         string  `form:"request" json:"request"`
	FollowRedirects *string `form:"followRedirects,omitempty" json:"followRedirects,omitempty"`
}

// CoreActionSetHomeDirectoryParams defines parameters for CoreActionSetHomeDirectory.
type CoreActionSetHomeDirectoryParams struct {
	Dir string `form:"dir" json:"dir"`
}

// CoreActionSetLogLevelParams defines parameters for CoreActionSetLogLevel.
type CoreActionSetLogLevelParams struct {
	// Name The logger name for which the logging level should be set.
	Name string `form:"name" json:"name"`

	// LogLevel The logging level which should be set.
	LogLevel string `form:"logLevel" json:"logLevel"`
}

// CoreActionSetModeParams defines parameters for CoreActionSetMode.
type CoreActionSetModeParams struct {
	Mode string `form:"mode" json:"mode"`
}

// CoreActionSetOptionAlertOverridesFilePathParams defines parameters for CoreActionSetOptionAlertOverridesFilePath.
type CoreActionSetOptionAlertOverridesFilePathParams struct {
	FilePath *string `form:"filePath,omitempty" json:"filePath,omitempty"`
}

// CoreActionSetOptionDefaultUserAgentParams defines parameters for CoreActionSetOptionDefaultUserAgent.
type CoreActionSetOptionDefaultUserAgentParams struct {
	String string `form:"String" json:"String"`
}

// CoreActionSetOptionDnsTtlSuccessfulQueriesParams defines parameters for CoreActionSetOptionDnsTtlSuccessfulQueries.
type CoreActionSetOptionDnsTtlSuccessfulQueriesParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// CoreActionSetOptionHttpStateEnabledParams defines parameters for CoreActionSetOptionHttpStateEnabled.
type CoreActionSetOptionHttpStateEnabledParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// CoreActionSetOptionMaximumAlertInstancesParams defines parameters for CoreActionSetOptionMaximumAlertInstances.
type CoreActionSetOptionMaximumAlertInstancesParams struct {
	NumberOfInstances string `form:"numberOfInstances" json:"numberOfInstances"`
}

// CoreActionSetOptionMergeRelatedAlertsParams defines parameters for CoreActionSetOptionMergeRelatedAlerts.
type CoreActionSetOptionMergeRelatedAlertsParams struct {
	Enabled string `form:"enabled" json:"enabled"`
}

// CoreActionSetOptionProxyChainNameParams defines parameters for CoreActionSetOptionProxyChainName.
type CoreActionSetOptionProxyChainNameParams struct {
	String string `form:"String" json:"String"`
}

// CoreActionSetOptionProxyChainPasswordParams defines parameters for CoreActionSetOptionProxyChainPassword.
type CoreActionSetOptionProxyChainPasswordParams struct {
	String string `form:"String" json:"String"`
}

// CoreActionSetOptionProxyChainPortParams defines parameters for CoreActionSetOptionProxyChainPort.
type CoreActionSetOptionProxyChainPortParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// CoreActionSetOptionProxyChainPromptParams defines parameters for CoreActionSetOptionProxyChainPrompt.
type CoreActionSetOptionProxyChainPromptParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// CoreActionSetOptionProxyChainRealmParams defines parameters for CoreActionSetOptionProxyChainRealm.
type CoreActionSetOptionProxyChainRealmParams struct {
	String string `form:"String" json:"String"`
}

// CoreActionSetOptionProxyChainSkipNameParams defines parameters for CoreActionSetOptionProxyChainSkipName.
type CoreActionSetOptionProxyChainSkipNameParams struct {
	String string `form:"String" json:"String"`
}

// CoreActionSetOptionProxyChainUserNameParams defines parameters for CoreActionSetOptionProxyChainUserName.
type CoreActionSetOptionProxyChainUserNameParams struct {
	String string `form:"String" json:"String"`
}

// CoreActionSetOptionSingleCookieRequestHeaderParams defines parameters for CoreActionSetOptionSingleCookieRequestHeader.
type CoreActionSetOptionSingleCookieRequestHeaderParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// CoreActionSetOptionTimeoutInSecsParams defines parameters for CoreActionSetOptionTimeoutInSecs.
type CoreActionSetOptionTimeoutInSecsParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// CoreActionSetOptionUseProxyChainParams defines parameters for CoreActionSetOptionUseProxyChain.
type CoreActionSetOptionUseProxyChainParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// CoreActionSetOptionUseProxyChainAuthParams defines parameters for CoreActionSetOptionUseProxyChainAuth.
type CoreActionSetOptionUseProxyChainAuthParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// CoreActionSetOptionUseSocksProxyParams defines parameters for CoreActionSetOptionUseSocksProxy.
type CoreActionSetOptionUseSocksProxyParams struct {
	// Boolean true if the SOCKS proxy should be used, false otherwise.
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// CoreActionSnapshotSessionParams defines parameters for CoreActionSnapshotSession.
type CoreActionSnapshotSessionParams struct {
	Name      *string `form:"name,omitempty" json:"name,omitempty"`
	Overwrite *string `form:"overwrite,omitempty" json:"overwrite,omitempty"`
}

// CoreViewAlertParams defines parameters for CoreViewAlert.
type CoreViewAlertParams struct {
	Id string `form:"id" json:"id"`
}

// CoreViewAlertsParams defines parameters for CoreViewAlerts.
type CoreViewAlertsParams struct {
	// Baseurl The highest URL in the Sites tree under which alerts should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
	RiskId  *string `form:"riskId,omitempty" json:"riskId,omitempty"`
}

// CoreViewAlertsSummaryParams defines parameters for CoreViewAlertsSummary.
type CoreViewAlertsSummaryParams struct {
	// Baseurl The highest URL in the Sites tree under which alerts should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
}

// CoreViewChildNodesParams defines parameters for CoreViewChildNodes.
type CoreViewChildNodesParams struct {
	Url *string `form:"url,omitempty" json:"url,omitempty"`
}

// CoreViewGetLogLevelParams defines parameters for CoreViewGetLogLevel.
type CoreViewGetLogLevelParams struct {
	// Name The name for which the logger details should be provided (this value will be used as a case insensitive starts with filter).
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// CoreViewMessageParams defines parameters for CoreViewMessage.
type CoreViewMessageParams struct {
	Id string `form:"id" json:"id"`
}

// CoreViewMessagesParams defines parameters for CoreViewMessages.
type CoreViewMessagesParams struct {
	// Baseurl The highest URL in the Sites tree under which messages should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// CoreViewMessagesByIdParams defines parameters for CoreViewMessagesById.
type CoreViewMessagesByIdParams struct {
	Ids string `form:"ids" json:"ids"`
}

// CoreViewNumberOfAlertsParams defines parameters for CoreViewNumberOfAlerts.
type CoreViewNumberOfAlertsParams struct {
	// Baseurl The highest URL in the Sites tree under which alerts should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	RiskId  *string `form:"riskId,omitempty" json:"riskId,omitempty"`
}

// CoreViewNumberOfMessagesParams defines parameters for CoreViewNumberOfMessages.
type CoreViewNumberOfMessagesParams struct {
	// Baseurl The highest URL in the Sites tree under which messages should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
}

// CoreViewUrlsParams defines parameters for CoreViewUrls.
type CoreViewUrlsParams struct {
	// Baseurl The highest URL in the Sites tree under which URLs should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
}

// CustompayloadsActionAddCustomPayloadParams defines parameters for CustompayloadsActionAddCustomPayload.
type CustompayloadsActionAddCustomPayloadParams struct {
	// Category The category for the new payload.
	Category string `form:"category" json:"category"`

	// Payload The payload to be added.
	Payload *string `form:"payload,omitempty" json:"payload,omitempty"`
}

// CustompayloadsActionDisableCustomPayloadParams defines parameters for CustompayloadsActionDisableCustomPayload.
type CustompayloadsActionDisableCustomPayloadParams struct {
	// Category The category for the payload being disabled.
	Category string `form:"category" json:"category"`

	// Payload The payload being disabled.
	Payload *string `form:"payload,omitempty" json:"payload,omitempty"`
}

// CustompayloadsActionDisableCustomPayloadsParams defines parameters for CustompayloadsActionDisableCustomPayloads.
type CustompayloadsActionDisableCustomPayloadsParams struct {
	// Category The category for which the payloads should be disabled (leave empty for all).
	Category *string `form:"category,omitempty" json:"category,omitempty"`
}

// CustompayloadsActionEnableCustomPayloadParams defines parameters for CustompayloadsActionEnableCustomPayload.
type CustompayloadsActionEnableCustomPayloadParams struct {
	// Category The category for the payload being enabled.
	Category string `form:"category" json:"category"`

	// Payload The payload being enabled.
	Payload *string `form:"payload,omitempty" json:"payload,omitempty"`
}

// CustompayloadsActionEnableCustomPayloadsParams defines parameters for CustompayloadsActionEnableCustomPayloads.
type CustompayloadsActionEnableCustomPayloadsParams struct {
	// Category The category for which the payloads should be enabled (leave empty for all).
	Category *string `form:"category,omitempty" json:"category,omitempty"`
}

// CustompayloadsActionRemoveCustomPayloadParams defines parameters for CustompayloadsActionRemoveCustomPayload.
type CustompayloadsActionRemoveCustomPayloadParams struct {
	// Category The category of the payload being removed.
	Category string `form:"category" json:"category"`

	// Payload The payload being removed.
	Payload *string `form:"payload,omitempty" json:"payload,omitempty"`
}

// CustompayloadsViewCustomPayloadsParams defines parameters for CustompayloadsViewCustomPayloads.
type CustompayloadsViewCustomPayloadsParams struct {
	// Category The category for which the payloads should be displayed.
	Category *string `form:"category,omitempty" json:"category,omitempty"`
}

// EximActionExportSitesTreeParams defines parameters for EximActionExportSitesTree.
type EximActionExportSitesTreeParams struct {
	FilePath string `form:"filePath" json:"filePath"`
}

// EximActionImportHarParams defines parameters for EximActionImportHar.
type EximActionImportHarParams struct {
	FilePath string `form:"filePath" json:"filePath"`
}

// EximActionImportModsec2LogsParams defines parameters for EximActionImportModsec2Logs.
type EximActionImportModsec2LogsParams struct {
	FilePath string `form:"filePath" json:"filePath"`
}

// EximActionImportUrlsParams defines parameters for EximActionImportUrls.
type EximActionImportUrlsParams struct {
	FilePath string `form:"filePath" json:"filePath"`
}

// EximActionImportZapLogsParams defines parameters for EximActionImportZapLogs.
type EximActionImportZapLogsParams struct {
	FilePath string `form:"filePath" json:"filePath"`
}

// EximActionPruneSitesTreeParams defines parameters for EximActionPruneSitesTree.
type EximActionPruneSitesTreeParams struct {
	FilePath string `form:"filePath" json:"filePath"`
}

// ForcedUserActionSetForcedUserParams defines parameters for ForcedUserActionSetForcedUser.
type ForcedUserActionSetForcedUserParams struct {
	ContextId string `form:"contextId" json:"contextId"`
	UserId    string `form:"userId" json:"userId"`
}

// ForcedUserActionSetForcedUserModeEnabledParams defines parameters for ForcedUserActionSetForcedUserModeEnabled.
type ForcedUserActionSetForcedUserModeEnabledParams struct {
	Boolean string `form:"boolean" json:"boolean"`
}

// ForcedUserViewGetForcedUserParams defines parameters for ForcedUserViewGetForcedUser.
type ForcedUserViewGetForcedUserParams struct {
	ContextId string `form:"contextId" json:"contextId"`
}

// GraphqlActionImportFileParams defines parameters for GraphqlActionImportFile.
type GraphqlActionImportFileParams struct {
	// Endurl The Endpoint URL.
	Endurl string `form:"endurl" json:"endurl"`

	// File The File That Contains the GraphQL Schema.
	File string `form:"file" json:"file"`
}

// GraphqlActionImportUrlParams defines parameters for GraphqlActionImportUrl.
type GraphqlActionImportUrlParams struct {
	// Endurl The Endpoint URL.
	Endurl string `form:"endurl" json:"endurl"`

	// Url The URL Locating the GraphQL Schema.
	Url *string `form:"url,omitempty" json:"url,omitempty"`
}

// GraphqlActionSetOptionArgsTypeParams defines parameters for GraphqlActionSetOptionArgsType.
type GraphqlActionSetOptionArgsTypeParams struct {
	// String Can be "INLINE", "VARIABLES", or "BOTH".
	String string `form:"String" json:"String"`
}

// GraphqlActionSetOptionLenientMaxQueryDepthEnabledParams defines parameters for GraphqlActionSetOptionLenientMaxQueryDepthEnabled.
type GraphqlActionSetOptionLenientMaxQueryDepthEnabledParams struct {
	// Boolean Enforce Leniently (true or false).
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// GraphqlActionSetOptionMaxAdditionalQueryDepthParams defines parameters for GraphqlActionSetOptionMaxAdditionalQueryDepth.
type GraphqlActionSetOptionMaxAdditionalQueryDepthParams struct {
	// Integer The Maximum Additional Depth.
	Integer int `form:"Integer" json:"Integer"`
}

// GraphqlActionSetOptionMaxArgsDepthParams defines parameters for GraphqlActionSetOptionMaxArgsDepth.
type GraphqlActionSetOptionMaxArgsDepthParams struct {
	// Integer The Maximum Depth.
	Integer int `form:"Integer" json:"Integer"`
}

// GraphqlActionSetOptionMaxQueryDepthParams defines parameters for GraphqlActionSetOptionMaxQueryDepth.
type GraphqlActionSetOptionMaxQueryDepthParams struct {
	// Integer The Maximum Depth.
	Integer int `form:"Integer" json:"Integer"`
}

// GraphqlActionSetOptionOptionalArgsEnabledParams defines parameters for GraphqlActionSetOptionOptionalArgsEnabled.
type GraphqlActionSetOptionOptionalArgsEnabledParams struct {
	// Boolean Specify Optional Arguments (true or false).
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// GraphqlActionSetOptionQueryGenEnabledParams defines parameters for GraphqlActionSetOptionQueryGenEnabled.
type GraphqlActionSetOptionQueryGenEnabledParams struct {
	// Boolean Enable query generation (true or false).
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// GraphqlActionSetOptionQuerySplitTypeParams defines parameters for GraphqlActionSetOptionQuerySplitType.
type GraphqlActionSetOptionQuerySplitTypeParams struct {
	// String Can be "LEAF", "ROOT_FIELD", or "OPERATION".
	String string `form:"String" json:"String"`
}

// GraphqlActionSetOptionRequestMethodParams defines parameters for GraphqlActionSetOptionRequestMethod.
type GraphqlActionSetOptionRequestMethodParams struct {
	// String Can be "POST_JSON", "POST_GRAPHQL", or "GET".
	String string `form:"String" json:"String"`
}

// HttpSessionsActionAddDefaultSessionTokenParams defines parameters for HttpSessionsActionAddDefaultSessionToken.
type HttpSessionsActionAddDefaultSessionTokenParams struct {
	SessionToken string  `form:"sessionToken" json:"sessionToken"`
	TokenEnabled *string `form:"tokenEnabled,omitempty" json:"tokenEnabled,omitempty"`
}

// HttpSessionsActionAddSessionTokenParams defines parameters for HttpSessionsActionAddSessionToken.
type HttpSessionsActionAddSessionTokenParams struct {
	Site         string `form:"site" json:"site"`
	SessionToken string `form:"sessionToken" json:"sessionToken"`
}

// HttpSessionsActionCreateEmptySessionParams defines parameters for HttpSessionsActionCreateEmptySession.
type HttpSessionsActionCreateEmptySessionParams struct {
	Site    string  `form:"site" json:"site"`
	Session *string `form:"session,omitempty" json:"session,omitempty"`
}

// HttpSessionsActionRemoveDefaultSessionTokenParams defines parameters for HttpSessionsActionRemoveDefaultSessionToken.
type HttpSessionsActionRemoveDefaultSessionTokenParams struct {
	SessionToken string `form:"sessionToken" json:"sessionToken"`
}

// HttpSessionsActionRemoveSessionParams defines parameters for HttpSessionsActionRemoveSession.
type HttpSessionsActionRemoveSessionParams struct {
	Site    string `form:"site" json:"site"`
	Session string `form:"session" json:"session"`
}

// HttpSessionsActionRemoveSessionTokenParams defines parameters for HttpSessionsActionRemoveSessionToken.
type HttpSessionsActionRemoveSessionTokenParams struct {
	Site         string `form:"site" json:"site"`
	SessionToken string `form:"sessionToken" json:"sessionToken"`
}

// HttpSessionsActionRenameSessionParams defines parameters for HttpSessionsActionRenameSession.
type HttpSessionsActionRenameSessionParams struct {
	Site           string `form:"site" json:"site"`
	OldSessionName string `form:"oldSessionName" json:"oldSessionName"`
	NewSessionName string `form:"newSessionName" json:"newSessionName"`
}

// HttpSessionsActionSetActiveSessionParams defines parameters for HttpSessionsActionSetActiveSession.
type HttpSessionsActionSetActiveSessionParams struct {
	Site    string `form:"site" json:"site"`
	Session string `form:"session" json:"session"`
}

// HttpSessionsActionSetDefaultSessionTokenEnabledParams defines parameters for HttpSessionsActionSetDefaultSessionTokenEnabled.
type HttpSessionsActionSetDefaultSessionTokenEnabledParams struct {
	SessionToken string `form:"sessionToken" json:"sessionToken"`
	TokenEnabled string `form:"tokenEnabled" json:"tokenEnabled"`
}

// HttpSessionsActionSetSessionTokenValueParams defines parameters for HttpSessionsActionSetSessionTokenValue.
type HttpSessionsActionSetSessionTokenValueParams struct {
	Site         string `form:"site" json:"site"`
	Session      string `form:"session" json:"session"`
	SessionToken string `form:"sessionToken" json:"sessionToken"`
	TokenValue   string `form:"tokenValue" json:"tokenValue"`
}

// HttpSessionsActionUnsetActiveSessionParams defines parameters for HttpSessionsActionUnsetActiveSession.
type HttpSessionsActionUnsetActiveSessionParams struct {
	Site string `form:"site" json:"site"`
}

// HttpSessionsViewActiveSessionParams defines parameters for HttpSessionsViewActiveSession.
type HttpSessionsViewActiveSessionParams struct {
	Site string `form:"site" json:"site"`
}

// HttpSessionsViewSessionTokensParams defines parameters for HttpSessionsViewSessionTokens.
type HttpSessionsViewSessionTokensParams struct {
	Site string `form:"site" json:"site"`
}

// HttpSessionsViewSessionsParams defines parameters for HttpSessionsViewSessions.
type HttpSessionsViewSessionsParams struct {
	Site    string  `form:"site" json:"site"`
	Session *string `form:"session,omitempty" json:"session,omitempty"`
}

// HudActionLogParams defines parameters for HudActionLog.
type HudActionLogParams struct {
	Record string `form:"record" json:"record"`
}

// HudActionRecordRequestParams defines parameters for HudActionRecordRequest.
type HudActionRecordRequestParams struct {
	Header string `form:"header" json:"header"`
	Body   string `form:"body" json:"body"`
}

// HudActionSetOptionBaseDirectoryParams defines parameters for HudActionSetOptionBaseDirectory.
type HudActionSetOptionBaseDirectoryParams struct {
	String string `form:"String" json:"String"`
}

// HudActionSetOptionDevelopmentModeParams defines parameters for HudActionSetOptionDevelopmentMode.
type HudActionSetOptionDevelopmentModeParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// HudActionSetOptionEnableOnDomainMsgsParams defines parameters for HudActionSetOptionEnableOnDomainMsgs.
type HudActionSetOptionEnableOnDomainMsgsParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// HudActionSetOptionEnabledForDaemonParams defines parameters for HudActionSetOptionEnabledForDaemon.
type HudActionSetOptionEnabledForDaemonParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// HudActionSetOptionEnabledForDesktopParams defines parameters for HudActionSetOptionEnabledForDesktop.
type HudActionSetOptionEnabledForDesktopParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// HudActionSetOptionInScopeOnlyParams defines parameters for HudActionSetOptionInScopeOnly.
type HudActionSetOptionInScopeOnlyParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// HudActionSetOptionRemoveCSPParams defines parameters for HudActionSetOptionRemoveCSP.
type HudActionSetOptionRemoveCSPParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// HudActionSetOptionShowWelcomeScreenParams defines parameters for HudActionSetOptionShowWelcomeScreen.
type HudActionSetOptionShowWelcomeScreenParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// HudActionSetOptionSkipTutorialTasksParams defines parameters for HudActionSetOptionSkipTutorialTasks.
type HudActionSetOptionSkipTutorialTasksParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// HudActionSetOptionTutorialTaskDoneParams defines parameters for HudActionSetOptionTutorialTaskDone.
type HudActionSetOptionTutorialTaskDoneParams struct {
	String string `form:"String" json:"String"`
}

// HudActionSetOptionTutorialTestModeParams defines parameters for HudActionSetOptionTutorialTestMode.
type HudActionSetOptionTutorialTestModeParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// HudActionSetUiOptionParams defines parameters for HudActionSetUiOption.
type HudActionSetUiOptionParams struct {
	Key   string  `form:"key" json:"key"`
	Value *string `form:"value,omitempty" json:"value,omitempty"`
}

// HudViewGetUiOptionParams defines parameters for HudViewGetUiOption.
type HudViewGetUiOptionParams struct {
	Key string `form:"key" json:"key"`
}

// HudViewHudAlertDataParams defines parameters for HudViewHudAlertData.
type HudViewHudAlertDataParams struct {
	Url string `form:"url" json:"url"`
}

// LocalProxiesActionAddAdditionalProxyParams defines parameters for LocalProxiesActionAddAdditionalProxy.
type LocalProxiesActionAddAdditionalProxyParams struct {
	Address                    string  `form:"address" json:"address"`
	Port                       string  `form:"port" json:"port"`
	BehindNat                  *string `form:"behindNat,omitempty" json:"behindNat,omitempty"`
	AlwaysDecodeZip            *string `form:"alwaysDecodeZip,omitempty" json:"alwaysDecodeZip,omitempty"`
	RemoveUnsupportedEncodings *string `form:"removeUnsupportedEncodings,omitempty" json:"removeUnsupportedEncodings,omitempty"`
}

// LocalProxiesActionRemoveAdditionalProxyParams defines parameters for LocalProxiesActionRemoveAdditionalProxy.
type LocalProxiesActionRemoveAdditionalProxyParams struct {
	Address string `form:"address" json:"address"`
	Port    string `form:"port" json:"port"`
}

// NetworkActionAddAliasParams defines parameters for NetworkActionAddAlias.
type NetworkActionAddAliasParams struct {
	// Name The name of the alias.
	Name string `form:"name" json:"name"`

	// Enabled The enabled state, true or false.
	Enabled *string `form:"enabled,omitempty" json:"enabled,omitempty"`
}

// NetworkActionAddHttpProxyExclusionParams defines parameters for NetworkActionAddHttpProxyExclusion.
type NetworkActionAddHttpProxyExclusionParams struct {
	// Host The value of the host, a regular expression.
	Host string `form:"host" json:"host"`

	// Enabled The enabled state, true or false.
	Enabled *string `form:"enabled,omitempty" json:"enabled,omitempty"`
}

// NetworkActionAddLocalServerParams defines parameters for NetworkActionAddLocalServer.
type NetworkActionAddLocalServerParams struct {
	// Address The address of the local server/proxy.
	Address string `form:"address" json:"address"`

	// Port The port of the local server/proxy.
	Port string `form:"port" json:"port"`

	// Api If the ZAP API is available, true or false.
	Api *string `form:"api,omitempty" json:"api,omitempty"`

	// Proxy If the local server should proxy, true or false.
	Proxy *string `form:"proxy,omitempty" json:"proxy,omitempty"`

	// BehindNat If the local server is behind NAT, true or false.
	BehindNat *string `form:"behindNat,omitempty" json:"behindNat,omitempty"`

	// DecodeResponse If the response should be decoded, true or false.
	DecodeResponse *string `form:"decodeResponse,omitempty" json:"decodeResponse,omitempty"`

	// RemoveAcceptEncoding If the request header Accept-Encoding should be removed, true or false.
	RemoveAcceptEncoding *string `form:"removeAcceptEncoding,omitempty" json:"removeAcceptEncoding,omitempty"`
}

// NetworkActionAddPassThroughParams defines parameters for NetworkActionAddPassThrough.
type NetworkActionAddPassThroughParams struct {
	// Authority The value of the authority, can be a regular expression.
	Authority string `form:"authority" json:"authority"`

	// Enabled The enabled state, true or false.
	Enabled *string `form:"enabled,omitempty" json:"enabled,omitempty"`
}

// NetworkActionAddPkcs12ClientCertificateParams defines parameters for NetworkActionAddPkcs12ClientCertificate.
type NetworkActionAddPkcs12ClientCertificateParams struct {
	// FilePath The file path.
	FilePath string `form:"filePath" json:"filePath"`

	// Password The password for the file.
	Password string `form:"password" json:"password"`

	// Index The index of the certificate in the file, defaults to 0.
	Index *string `form:"index,omitempty" json:"index,omitempty"`
}

// NetworkActionAddRateLimitRuleParams defines parameters for NetworkActionAddRateLimitRule.
type NetworkActionAddRateLimitRuleParams struct {
	// Description A description that allows you to identify the rule. Each rule must have a unique description.
	Description string `form:"description" json:"description"`

	// Enabled The enabled state, true or false.
	Enabled string `form:"enabled" json:"enabled"`

	// MatchRegex Regex used to match the host.
	MatchRegex string `form:"matchRegex" json:"matchRegex"`

	// MatchString Plain string match is handled based on DNS conventions. If the string has one or two components.
	MatchString string `form:"matchString" json:"matchString"`

	// RequestsPerSecond The maximum number of requests per second.
	RequestsPerSecond string `form:"requestsPerSecond" json:"requestsPerSecond"`

	// GroupBy How to group hosts when applying rate limiting: rule or host
	GroupBy string `form:"groupBy" json:"groupBy"`
}

// NetworkActionImportRootCaCertParams defines parameters for NetworkActionImportRootCaCert.
type NetworkActionImportRootCaCertParams struct {
	// FilePath The file system path to the PEM file, containing the certificate and private key.
	FilePath string `form:"filePath" json:"filePath"`
}

// NetworkActionRemoveAliasParams defines parameters for NetworkActionRemoveAlias.
type NetworkActionRemoveAliasParams struct {
	// Name The name of the alias.
	Name string `form:"name" json:"name"`
}

// NetworkActionRemoveHttpProxyExclusionParams defines parameters for NetworkActionRemoveHttpProxyExclusion.
type NetworkActionRemoveHttpProxyExclusionParams struct {
	// Host The value of the host.
	Host string `form:"host" json:"host"`
}

// NetworkActionRemoveLocalServerParams defines parameters for NetworkActionRemoveLocalServer.
type NetworkActionRemoveLocalServerParams struct {
	// Address The address of the local server/proxy.
	Address string `form:"address" json:"address"`

	// Port The port of the local server/proxy.
	Port string `form:"port" json:"port"`
}

// NetworkActionRemovePassThroughParams defines parameters for NetworkActionRemovePassThrough.
type NetworkActionRemovePassThroughParams struct {
	// Authority The value of the authority.
	Authority string `form:"authority" json:"authority"`
}

// NetworkActionRemoveRateLimitRuleParams defines parameters for NetworkActionRemoveRateLimitRule.
type NetworkActionRemoveRateLimitRuleParams struct {
	// Description The description of the rule to remove.
	Description string `form:"description" json:"description"`
}

// NetworkActionSetAliasEnabledParams defines parameters for NetworkActionSetAliasEnabled.
type NetworkActionSetAliasEnabledParams struct {
	// Name The name of the alias.
	Name string `form:"name" json:"name"`

	// Enabled The enabled state, true or false.
	Enabled string `form:"enabled" json:"enabled"`
}

// NetworkActionSetConnectionTimeoutParams defines parameters for NetworkActionSetConnectionTimeout.
type NetworkActionSetConnectionTimeoutParams struct {
	// Timeout The timeout, in seconds.
	Timeout string `form:"timeout" json:"timeout"`
}

// NetworkActionSetDefaultUserAgentParams defines parameters for NetworkActionSetDefaultUserAgent.
type NetworkActionSetDefaultUserAgentParams struct {
	// UserAgent The default user-agent.
	UserAgent string `form:"userAgent" json:"userAgent"`
}

// NetworkActionSetDnsTtlSuccessfulQueriesParams defines parameters for NetworkActionSetDnsTtlSuccessfulQueries.
type NetworkActionSetDnsTtlSuccessfulQueriesParams struct {
	// Ttl The TTL, in seconds. Negative number, cache forever. Zero, disables caching. Positive number, the number of seconds the successful DNS queries will be cached.
	Ttl string `form:"ttl" json:"ttl"`
}

// NetworkActionSetHttpProxyParams defines parameters for NetworkActionSetHttpProxy.
type NetworkActionSetHttpProxyParams struct {
	// Host The host, name or address.
	Host string `form:"host" json:"host"`

	// Port The port.
	Port string `form:"port" json:"port"`

	// Realm The authentication realm.
	Realm *string `form:"realm,omitempty" json:"realm,omitempty"`

	// Username The user name.
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Password The password.
	Password *string `form:"password,omitempty" json:"password,omitempty"`
}

// NetworkActionSetHttpProxyAuthEnabledParams defines parameters for NetworkActionSetHttpProxyAuthEnabled.
type NetworkActionSetHttpProxyAuthEnabledParams struct {
	// Enabled The enabled state, true or false.
	Enabled string `form:"enabled" json:"enabled"`
}

// NetworkActionSetHttpProxyEnabledParams defines parameters for NetworkActionSetHttpProxyEnabled.
type NetworkActionSetHttpProxyEnabledParams struct {
	// Enabled The enabled state, true or false.
	Enabled string `form:"enabled" json:"enabled"`
}

// NetworkActionSetHttpProxyExclusionEnabledParams defines parameters for NetworkActionSetHttpProxyExclusionEnabled.
type NetworkActionSetHttpProxyExclusionEnabledParams struct {
	// Host The value of the host.
	Host string `form:"host" json:"host"`

	// Enabled The enabled state, true or false.
	Enabled string `form:"enabled" json:"enabled"`
}

// NetworkActionSetPassThroughEnabledParams defines parameters for NetworkActionSetPassThroughEnabled.
type NetworkActionSetPassThroughEnabledParams struct {
	// Authority The value of the authority.
	Authority string `form:"authority" json:"authority"`

	// Enabled The enabled state, true or false.
	Enabled string `form:"enabled" json:"enabled"`
}

// NetworkActionSetRateLimitRuleEnabledParams defines parameters for NetworkActionSetRateLimitRuleEnabled.
type NetworkActionSetRateLimitRuleEnabledParams struct {
	// Description The description of the rule to modify.
	Description string `form:"description" json:"description"`

	// Enabled The enabled state, true or false.
	Enabled string `form:"enabled" json:"enabled"`
}

// NetworkActionSetRootCaCertValidityParams defines parameters for NetworkActionSetRootCaCertValidity.
type NetworkActionSetRootCaCertValidityParams struct {
	// Validity The number of days that the generated Root CA certificate will be valid for.
	Validity string `form:"validity" json:"validity"`
}

// NetworkActionSetServerCertValidityParams defines parameters for NetworkActionSetServerCertValidity.
type NetworkActionSetServerCertValidityParams struct {
	// Validity The number of days that the generated server certificates will be valid for.
	Validity string `form:"validity" json:"validity"`
}

// NetworkActionSetSocksProxyParams defines parameters for NetworkActionSetSocksProxy.
type NetworkActionSetSocksProxyParams struct {
	// Host The host, name or address.
	Host string `form:"host" json:"host"`

	// Port The port.
	Port string `form:"port" json:"port"`

	// Version The SOCKS version.
	Version *string `form:"version,omitempty" json:"version,omitempty"`

	// UseDns If the names should be resolved by the SOCKS proxy, true or false.
	UseDns *string `form:"useDns,omitempty" json:"useDns,omitempty"`

	// Username The user name.
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Password The password.
	Password *string `form:"password,omitempty" json:"password,omitempty"`
}

// NetworkActionSetSocksProxyEnabledParams defines parameters for NetworkActionSetSocksProxyEnabled.
type NetworkActionSetSocksProxyEnabledParams struct {
	// Enabled The enabled state, true or false.
	Enabled string `form:"enabled" json:"enabled"`
}

// NetworkActionSetUseClientCertificateParams defines parameters for NetworkActionSetUseClientCertificate.
type NetworkActionSetUseClientCertificateParams struct {
	// Use The use state, true or false.
	Use string `form:"use" json:"use"`
}

// NetworkActionSetUseGlobalHttpStateParams defines parameters for NetworkActionSetUseGlobalHttpState.
type NetworkActionSetUseGlobalHttpStateParams struct {
	// Use The use state, true or false.
	Use string `form:"use" json:"use"`
}

// OastActionSetActiveScanServiceParams defines parameters for OastActionSetActiveScanService.
type OastActionSetActiveScanServiceParams struct {
	// Name The name of the service.
	Name string `form:"name" json:"name"`
}

// OastActionSetBoastOptionsParams defines parameters for OastActionSetBoastOptions.
type OastActionSetBoastOptionsParams struct {
	// Server The server URL.
	Server string `form:"server" json:"server"`

	// PollInSecs The polling frequency.
	PollInSecs string `form:"pollInSecs" json:"pollInSecs"`
}

// OastActionSetCallbackOptionsParams defines parameters for OastActionSetCallbackOptions.
type OastActionSetCallbackOptionsParams struct {
	// LocalAddress The local address
	LocalAddress string `form:"localAddress" json:"localAddress"`

	// RemoteAddress The remote address.
	RemoteAddress string `form:"remoteAddress" json:"remoteAddress"`

	// Port The port to listen on.
	Port string `form:"port" json:"port"`
}

// OastActionSetDaysToKeepRecordsParams defines parameters for OastActionSetDaysToKeepRecords.
type OastActionSetDaysToKeepRecordsParams struct {
	// Days The number of days.
	Days string `form:"days" json:"days"`
}

// OastActionSetInteractshOptionsParams defines parameters for OastActionSetInteractshOptions.
type OastActionSetInteractshOptionsParams struct {
	// Server The server URL.
	Server string `form:"server" json:"server"`

	// PollInSecs The polling frequency.
	PollInSecs string `form:"pollInSecs" json:"pollInSecs"`

	// AuthToken The Interactsh authentication token.
	AuthToken string `form:"authToken" json:"authToken"`
}

// OpenapiActionImportFileParams defines parameters for OpenapiActionImportFile.
type OpenapiActionImportFileParams struct {
	// File The file that contains the OpenAPI definition.
	File string `form:"file" json:"file"`

	// Target The Target URL to override the server URL present in the definition.
	Target *string `form:"target,omitempty" json:"target,omitempty"`

	// ContextId The ID of the context. Defaults to the first context, if any.
	ContextId *string `form:"contextId,omitempty" json:"contextId,omitempty"`

	// UserId The ID of the user.
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`
}

// OpenapiActionImportUrlParams defines parameters for OpenapiActionImportUrl.
type OpenapiActionImportUrlParams struct {
	// Url The URL locating the OpenAPI definition.
	Url string `form:"url" json:"url"`

	// HostOverride The Target URL (called hostOverride for historical reasons) to override the server URL present in the definition.
	HostOverride *string `form:"hostOverride,omitempty" json:"hostOverride,omitempty"`

	// ContextId The ID of the context. Defaults to the first context, if any.
	ContextId *string `form:"contextId,omitempty" json:"contextId,omitempty"`

	// UserId The ID of the user.
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`
}

// ParamsViewParamsParams defines parameters for ParamsViewParams.
type ParamsViewParamsParams struct {
	Site *string `form:"site,omitempty" json:"site,omitempty"`
}

// PnhActionMonitorParams defines parameters for PnhActionMonitor.
type PnhActionMonitorParams struct {
	Id      string `form:"id" json:"id"`
	Message string `form:"message" json:"message"`
}

// PnhActionOracleParams defines parameters for PnhActionOracle.
type PnhActionOracleParams struct {
	Id string `form:"id" json:"id"`
}

// PnhActionStartMonitoringParams defines parameters for PnhActionStartMonitoring.
type PnhActionStartMonitoringParams struct {
	Url string `form:"url" json:"url"`
}

// PnhActionStopMonitoringParams defines parameters for PnhActionStopMonitoring.
type PnhActionStopMonitoringParams struct {
	Id string `form:"id" json:"id"`
}

// PostmanActionImportFileParams defines parameters for PostmanActionImportFile.
type PostmanActionImportFileParams struct {
	File        string  `form:"file" json:"file"`
	EndpointUrl *string `form:"endpointUrl,omitempty" json:"endpointUrl,omitempty"`
}

// PostmanActionImportUrlParams defines parameters for PostmanActionImportUrl.
type PostmanActionImportUrlParams struct {
	Url         string  `form:"url" json:"url"`
	EndpointUrl *string `form:"endpointUrl,omitempty" json:"endpointUrl,omitempty"`
}

// PscanActionDisableScannersParams defines parameters for PscanActionDisableScanners.
type PscanActionDisableScannersParams struct {
	// Ids A comma separated list of scan rule IDs.
	Ids string `form:"ids" json:"ids"`
}

// PscanActionEnableScannersParams defines parameters for PscanActionEnableScanners.
type PscanActionEnableScannersParams struct {
	// Ids A comma separated list of scan rule IDs.
	Ids string `form:"ids" json:"ids"`
}

// PscanActionSetEnabledParams defines parameters for PscanActionSetEnabled.
type PscanActionSetEnabledParams struct {
	// Enabled The enabled state, true or false.
	Enabled string `form:"enabled" json:"enabled"`
}

// PscanActionSetMaxAlertsPerRuleParams defines parameters for PscanActionSetMaxAlertsPerRule.
type PscanActionSetMaxAlertsPerRuleParams struct {
	// MaxAlerts The maximum number of alerts.
	MaxAlerts string `form:"maxAlerts" json:"maxAlerts"`
}

// PscanActionSetScanOnlyInScopeParams defines parameters for PscanActionSetScanOnlyInScope.
type PscanActionSetScanOnlyInScopeParams struct {
	// OnlyInScope The scan state, true or false.
	OnlyInScope string `form:"onlyInScope" json:"onlyInScope"`
}

// PscanActionSetScannerAlertThresholdParams defines parameters for PscanActionSetScannerAlertThreshold.
type PscanActionSetScannerAlertThresholdParams struct {
	// Id The ID of the scan rule.
	Id string `form:"id" json:"id"`

	// AlertThreshold The alert threshold: OFF, DEFAULT, LOW, MEDIUM and HIGH
	AlertThreshold string `form:"alertThreshold" json:"alertThreshold"`
}

// ReplacerActionAddRuleParams defines parameters for ReplacerActionAddRule.
type ReplacerActionAddRuleParams struct {
	Description string  `form:"description" json:"description"`
	Enabled     string  `form:"enabled" json:"enabled"`
	MatchType   string  `form:"matchType" json:"matchType"`
	MatchRegex  string  `form:"matchRegex" json:"matchRegex"`
	MatchString string  `form:"matchString" json:"matchString"`
	Replacement *string `form:"replacement,omitempty" json:"replacement,omitempty"`
	Initiators  *string `form:"initiators,omitempty" json:"initiators,omitempty"`

	// Url A regular expression to match the URL of the message, if empty the rule applies to all messages.
	Url *string `form:"url,omitempty" json:"url,omitempty"`
}

// ReplacerActionRemoveRuleParams defines parameters for ReplacerActionRemoveRule.
type ReplacerActionRemoveRuleParams struct {
	Description string `form:"description" json:"description"`
}

// ReplacerActionSetEnabledParams defines parameters for ReplacerActionSetEnabled.
type ReplacerActionSetEnabledParams struct {
	Description string `form:"description" json:"description"`
	Bool        string `form:"bool" json:"bool"`
}

// ReportsActionGenerateParams defines parameters for ReportsActionGenerate.
type ReportsActionGenerateParams struct {
	// Title Report Title
	Title string `form:"title" json:"title"`

	// Template Report Template
	Template string `form:"template" json:"template"`

	// Theme Report Theme
	Theme *string `form:"theme,omitempty" json:"theme,omitempty"`

	// Description Report Description
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// Contexts The name of the contexts to be included in the report, separated by '|'.
	Contexts *string `form:"contexts,omitempty" json:"contexts,omitempty"`

	// Sites The site URLs that should be included in the report, separated by '|'.
	Sites *string `form:"sites,omitempty" json:"sites,omitempty"`

	// Sections The report sections that should be included, separated by '|'.
	Sections *string `form:"sections,omitempty" json:"sections,omitempty"`

	// IncludedConfidences Confidences that should be included in the report, separated by '|'. Accepted values are "False Positive", "Low", "Medium", "High", and "Confirmed".
	IncludedConfidences *string `form:"includedConfidences,omitempty" json:"includedConfidences,omitempty"`

	// IncludedRisks Risks that should be included in the report, separated by '|'. Accepted values are "Informational", "Low", "Medium", and "High".
	IncludedRisks *string `form:"includedRisks,omitempty" json:"includedRisks,omitempty"`

	// ReportFileName The file name of the generated report. This value overrides the reportFileNamePattern parameter.
	ReportFileName *string `form:"reportFileName,omitempty" json:"reportFileName,omitempty"`

	// ReportFileNamePattern Report File Name Pattern.
	ReportFileNamePattern *string `form:"reportFileNamePattern,omitempty" json:"reportFileNamePattern,omitempty"`

	// ReportDir Path to directory in which the generated report should be placed.
	ReportDir *string `form:"reportDir,omitempty" json:"reportDir,omitempty"`

	// Display Display the generated report. Either "true" or "false".
	Display *string `form:"display,omitempty" json:"display,omitempty"`
}

// ReportsViewTemplateDetailsParams defines parameters for ReportsViewTemplateDetails.
type ReportsViewTemplateDetailsParams struct {
	// Template Template Label
	Template string `form:"template" json:"template"`
}

// RetestActionRetestParams defines parameters for RetestActionRetest.
type RetestActionRetestParams struct {
	AlertIds string `form:"alertIds" json:"alertIds"`
}

// RevealActionSetRevealParams defines parameters for RevealActionSetReveal.
type RevealActionSetRevealParams struct {
	Reveal string `form:"reveal" json:"reveal"`
}

// RevisitActionRevisitSiteOffParams defines parameters for RevisitActionRevisitSiteOff.
type RevisitActionRevisitSiteOffParams struct {
	Site string `form:"site" json:"site"`
}

// RevisitActionRevisitSiteOnParams defines parameters for RevisitActionRevisitSiteOn.
type RevisitActionRevisitSiteOnParams struct {
	Site      string `form:"site" json:"site"`
	StartTime string `form:"startTime" json:"startTime"`
	EndTime   string `form:"endTime" json:"endTime"`
}

// RuleConfigActionResetRuleConfigValueParams defines parameters for RuleConfigActionResetRuleConfigValue.
type RuleConfigActionResetRuleConfigValueParams struct {
	Key string `form:"key" json:"key"`
}

// RuleConfigActionSetRuleConfigValueParams defines parameters for RuleConfigActionSetRuleConfigValue.
type RuleConfigActionSetRuleConfigValueParams struct {
	Key   string  `form:"key" json:"key"`
	Value *string `form:"value,omitempty" json:"value,omitempty"`
}

// RuleConfigViewRuleConfigValueParams defines parameters for RuleConfigViewRuleConfigValue.
type RuleConfigViewRuleConfigValueParams struct {
	Key string `form:"key" json:"key"`
}

// ScriptActionClearGlobalCustomVarParams defines parameters for ScriptActionClearGlobalCustomVar.
type ScriptActionClearGlobalCustomVarParams struct {
	// VarKey The key of the variable.
	VarKey string `form:"varKey" json:"varKey"`
}

// ScriptActionClearGlobalVarParams defines parameters for ScriptActionClearGlobalVar.
type ScriptActionClearGlobalVarParams struct {
	VarKey string `form:"varKey" json:"varKey"`
}

// ScriptActionClearScriptCustomVarParams defines parameters for ScriptActionClearScriptCustomVar.
type ScriptActionClearScriptCustomVarParams struct {
	// ScriptName The name of the script.
	ScriptName string `form:"scriptName" json:"scriptName"`

	// VarKey The key of the variable.
	VarKey string `form:"varKey" json:"varKey"`
}

// ScriptActionClearScriptVarParams defines parameters for ScriptActionClearScriptVar.
type ScriptActionClearScriptVarParams struct {
	ScriptName string `form:"scriptName" json:"scriptName"`
	VarKey     string `form:"varKey" json:"varKey"`
}

// ScriptActionClearScriptVarsParams defines parameters for ScriptActionClearScriptVars.
type ScriptActionClearScriptVarsParams struct {
	ScriptName string `form:"scriptName" json:"scriptName"`
}

// ScriptActionDisableParams defines parameters for ScriptActionDisable.
type ScriptActionDisableParams struct {
	ScriptName string `form:"scriptName" json:"scriptName"`
}

// ScriptActionEnableParams defines parameters for ScriptActionEnable.
type ScriptActionEnableParams struct {
	ScriptName string `form:"scriptName" json:"scriptName"`
}

// ScriptActionLoadParams defines parameters for ScriptActionLoad.
type ScriptActionLoadParams struct {
	ScriptName        string  `form:"scriptName" json:"scriptName"`
	ScriptType        string  `form:"scriptType" json:"scriptType"`
	ScriptEngine      string  `form:"scriptEngine" json:"scriptEngine"`
	FileName          string  `form:"fileName" json:"fileName"`
	ScriptDescription *string `form:"scriptDescription,omitempty" json:"scriptDescription,omitempty"`
	Charset           *string `form:"charset,omitempty" json:"charset,omitempty"`
}

// ScriptActionRemoveParams defines parameters for ScriptActionRemove.
type ScriptActionRemoveParams struct {
	ScriptName string `form:"scriptName" json:"scriptName"`
}

// ScriptActionRunStandAloneScriptParams defines parameters for ScriptActionRunStandAloneScript.
type ScriptActionRunStandAloneScriptParams struct {
	ScriptName string `form:"scriptName" json:"scriptName"`
}

// ScriptActionSetGlobalVarParams defines parameters for ScriptActionSetGlobalVar.
type ScriptActionSetGlobalVarParams struct {
	VarKey   string  `form:"varKey" json:"varKey"`
	VarValue *string `form:"varValue,omitempty" json:"varValue,omitempty"`
}

// ScriptActionSetScriptVarParams defines parameters for ScriptActionSetScriptVar.
type ScriptActionSetScriptVarParams struct {
	ScriptName string  `form:"scriptName" json:"scriptName"`
	VarKey     string  `form:"varKey" json:"varKey"`
	VarValue   *string `form:"varValue,omitempty" json:"varValue,omitempty"`
}

// ScriptViewGlobalCustomVarParams defines parameters for ScriptViewGlobalCustomVar.
type ScriptViewGlobalCustomVarParams struct {
	// VarKey The key of the variable.
	VarKey string `form:"varKey" json:"varKey"`
}

// ScriptViewGlobalVarParams defines parameters for ScriptViewGlobalVar.
type ScriptViewGlobalVarParams struct {
	VarKey string `form:"varKey" json:"varKey"`
}

// ScriptViewScriptCustomVarParams defines parameters for ScriptViewScriptCustomVar.
type ScriptViewScriptCustomVarParams struct {
	// ScriptName The name of the script.
	ScriptName string `form:"scriptName" json:"scriptName"`

	// VarKey The key of the variable.
	VarKey string `form:"varKey" json:"varKey"`
}

// ScriptViewScriptCustomVarsParams defines parameters for ScriptViewScriptCustomVars.
type ScriptViewScriptCustomVarsParams struct {
	// ScriptName The name of the script.
	ScriptName string `form:"scriptName" json:"scriptName"`
}

// ScriptViewScriptVarParams defines parameters for ScriptViewScriptVar.
type ScriptViewScriptVarParams struct {
	ScriptName string `form:"scriptName" json:"scriptName"`
	VarKey     string `form:"varKey" json:"varKey"`
}

// ScriptViewScriptVarsParams defines parameters for ScriptViewScriptVars.
type ScriptViewScriptVarsParams struct {
	ScriptName string `form:"scriptName" json:"scriptName"`
}

// SearchViewMessagesByHeaderRegexParams defines parameters for SearchViewMessagesByHeaderRegex.
type SearchViewMessagesByHeaderRegexParams struct {
	Regex string `form:"regex" json:"regex"`

	// Baseurl The highest URL in the Sites tree under which messages should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SearchViewMessagesByNoteRegexParams defines parameters for SearchViewMessagesByNoteRegex.
type SearchViewMessagesByNoteRegexParams struct {
	Regex string `form:"regex" json:"regex"`

	// Baseurl The highest URL in the Sites tree under which messages should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SearchViewMessagesByRequestRegexParams defines parameters for SearchViewMessagesByRequestRegex.
type SearchViewMessagesByRequestRegexParams struct {
	Regex string `form:"regex" json:"regex"`

	// Baseurl The highest URL in the Sites tree under which messages should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SearchViewMessagesByResponseRegexParams defines parameters for SearchViewMessagesByResponseRegex.
type SearchViewMessagesByResponseRegexParams struct {
	Regex string `form:"regex" json:"regex"`

	// Baseurl The highest URL in the Sites tree under which messages should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SearchViewMessagesByTagRegexParams defines parameters for SearchViewMessagesByTagRegex.
type SearchViewMessagesByTagRegexParams struct {
	Regex string `form:"regex" json:"regex"`

	// Baseurl The highest URL in the Sites tree under which messages should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SearchViewMessagesByUrlRegexParams defines parameters for SearchViewMessagesByUrlRegex.
type SearchViewMessagesByUrlRegexParams struct {
	Regex string `form:"regex" json:"regex"`

	// Baseurl The highest URL in the Sites tree under which messages should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SearchViewUrlsByHeaderRegexParams defines parameters for SearchViewUrlsByHeaderRegex.
type SearchViewUrlsByHeaderRegexParams struct {
	Regex string `form:"regex" json:"regex"`

	// Baseurl The highest URL in the Sites tree under which URLs should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SearchViewUrlsByNoteRegexParams defines parameters for SearchViewUrlsByNoteRegex.
type SearchViewUrlsByNoteRegexParams struct {
	Regex string `form:"regex" json:"regex"`

	// Baseurl The highest URL in the Sites tree under which URLs should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SearchViewUrlsByRequestRegexParams defines parameters for SearchViewUrlsByRequestRegex.
type SearchViewUrlsByRequestRegexParams struct {
	Regex string `form:"regex" json:"regex"`

	// Baseurl The highest URL in the Sites tree under which URLs should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SearchViewUrlsByResponseRegexParams defines parameters for SearchViewUrlsByResponseRegex.
type SearchViewUrlsByResponseRegexParams struct {
	Regex string `form:"regex" json:"regex"`

	// Baseurl The highest URL in the Sites tree under which URLs should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SearchViewUrlsByTagRegexParams defines parameters for SearchViewUrlsByTagRegex.
type SearchViewUrlsByTagRegexParams struct {
	Regex string `form:"regex" json:"regex"`

	// Baseurl The highest URL in the Sites tree under which URLs should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SearchViewUrlsByUrlRegexParams defines parameters for SearchViewUrlsByUrlRegex.
type SearchViewUrlsByUrlRegexParams struct {
	Regex string `form:"regex" json:"regex"`

	// Baseurl The highest URL in the Sites tree under which URLs should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SeleniumActionAddBrowserArgumentParams defines parameters for SeleniumActionAddBrowserArgument.
type SeleniumActionAddBrowserArgumentParams struct {
	// Browser The browser, chrome or firefox.
	Browser string `form:"browser" json:"browser"`

	// Argument The argument.
	Argument string `form:"argument" json:"argument"`

	// Enabled The enabled state, true or false.
	Enabled *string `form:"enabled,omitempty" json:"enabled,omitempty"`
}

// SeleniumActionLaunchBrowserParams defines parameters for SeleniumActionLaunchBrowser.
type SeleniumActionLaunchBrowserParams struct {
	// Browser The browser, chrome or firefox.
	Browser string `form:"browser" json:"browser"`
}

// SeleniumActionRemoveBrowserArgumentParams defines parameters for SeleniumActionRemoveBrowserArgument.
type SeleniumActionRemoveBrowserArgumentParams struct {
	// Browser The browser, chrome or firefox.
	Browser string `form:"browser" json:"browser"`

	// Argument The argument.
	Argument string `form:"argument" json:"argument"`
}

// SeleniumActionSetBrowserArgumentEnabledParams defines parameters for SeleniumActionSetBrowserArgumentEnabled.
type SeleniumActionSetBrowserArgumentEnabledParams struct {
	// Browser The browser, chrome or firefox.
	Browser string `form:"browser" json:"browser"`

	// Argument The argument.
	Argument string `form:"argument" json:"argument"`

	// Enabled The enabled state, true or false.
	Enabled string `form:"enabled" json:"enabled"`
}

// SeleniumActionSetOptionChromeBinaryPathParams defines parameters for SeleniumActionSetOptionChromeBinaryPath.
type SeleniumActionSetOptionChromeBinaryPathParams struct {
	String string `form:"String" json:"String"`
}

// SeleniumActionSetOptionChromeDriverPathParams defines parameters for SeleniumActionSetOptionChromeDriverPath.
type SeleniumActionSetOptionChromeDriverPathParams struct {
	String string `form:"String" json:"String"`
}

// SeleniumActionSetOptionFirefoxBinaryPathParams defines parameters for SeleniumActionSetOptionFirefoxBinaryPath.
type SeleniumActionSetOptionFirefoxBinaryPathParams struct {
	String string `form:"String" json:"String"`
}

// SeleniumActionSetOptionFirefoxDefaultProfileParams defines parameters for SeleniumActionSetOptionFirefoxDefaultProfile.
type SeleniumActionSetOptionFirefoxDefaultProfileParams struct {
	String string `form:"String" json:"String"`
}

// SeleniumActionSetOptionFirefoxDriverPathParams defines parameters for SeleniumActionSetOptionFirefoxDriverPath.
type SeleniumActionSetOptionFirefoxDriverPathParams struct {
	String string `form:"String" json:"String"`
}

// SeleniumActionSetOptionIeDriverPathParams defines parameters for SeleniumActionSetOptionIeDriverPath.
type SeleniumActionSetOptionIeDriverPathParams struct {
	String string `form:"String" json:"String"`
}

// SeleniumActionSetOptionLastDirectoryParams defines parameters for SeleniumActionSetOptionLastDirectory.
type SeleniumActionSetOptionLastDirectoryParams struct {
	String string `form:"String" json:"String"`
}

// SeleniumActionSetOptionPhantomJsBinaryPathParams defines parameters for SeleniumActionSetOptionPhantomJsBinaryPath.
type SeleniumActionSetOptionPhantomJsBinaryPathParams struct {
	String string `form:"String" json:"String"`
}

// SeleniumViewGetBrowserArgumentsParams defines parameters for SeleniumViewGetBrowserArguments.
type SeleniumViewGetBrowserArgumentsParams struct {
	// Browser The browser, chrome or firefox.
	Browser string `form:"browser" json:"browser"`
}

// SessionManagementActionSetSessionManagementMethodParams defines parameters for SessionManagementActionSetSessionManagementMethod.
type SessionManagementActionSetSessionManagementMethodParams struct {
	ContextId          string  `form:"contextId" json:"contextId"`
	MethodName         string  `form:"methodName" json:"methodName"`
	MethodConfigParams *string `form:"methodConfigParams,omitempty" json:"methodConfigParams,omitempty"`
}

// SessionManagementViewGetSessionManagementMethodParams defines parameters for SessionManagementViewGetSessionManagementMethod.
type SessionManagementViewGetSessionManagementMethodParams struct {
	ContextId string `form:"contextId" json:"contextId"`
}

// SessionManagementViewGetSessionManagementMethodConfigParamsParams defines parameters for SessionManagementViewGetSessionManagementMethodConfigParams.
type SessionManagementViewGetSessionManagementMethodConfigParamsParams struct {
	MethodName string `form:"methodName" json:"methodName"`
}

// SoapActionImportFileParams defines parameters for SoapActionImportFile.
type SoapActionImportFileParams struct {
	File string `form:"file" json:"file"`
}

// SoapActionImportUrlParams defines parameters for SoapActionImportUrl.
type SoapActionImportUrlParams struct {
	Url string `form:"url" json:"url"`
}

// SpiderActionAddDomainAlwaysInScopeParams defines parameters for SpiderActionAddDomainAlwaysInScope.
type SpiderActionAddDomainAlwaysInScopeParams struct {
	Value     string  `form:"value" json:"value"`
	IsRegex   *string `form:"isRegex,omitempty" json:"isRegex,omitempty"`
	IsEnabled *string `form:"isEnabled,omitempty" json:"isEnabled,omitempty"`
}

// SpiderActionExcludeFromScanParams defines parameters for SpiderActionExcludeFromScan.
type SpiderActionExcludeFromScanParams struct {
	Regex string `form:"regex" json:"regex"`
}

// SpiderActionModifyDomainAlwaysInScopeParams defines parameters for SpiderActionModifyDomainAlwaysInScope.
type SpiderActionModifyDomainAlwaysInScopeParams struct {
	Idx       string  `form:"idx" json:"idx"`
	Value     *string `form:"value,omitempty" json:"value,omitempty"`
	IsRegex   *string `form:"isRegex,omitempty" json:"isRegex,omitempty"`
	IsEnabled *string `form:"isEnabled,omitempty" json:"isEnabled,omitempty"`
}

// SpiderActionPauseParams defines parameters for SpiderActionPause.
type SpiderActionPauseParams struct {
	ScanId string `form:"scanId" json:"scanId"`
}

// SpiderActionRemoveDomainAlwaysInScopeParams defines parameters for SpiderActionRemoveDomainAlwaysInScope.
type SpiderActionRemoveDomainAlwaysInScopeParams struct {
	Idx string `form:"idx" json:"idx"`
}

// SpiderActionRemoveScanParams defines parameters for SpiderActionRemoveScan.
type SpiderActionRemoveScanParams struct {
	ScanId string `form:"scanId" json:"scanId"`
}

// SpiderActionResumeParams defines parameters for SpiderActionResume.
type SpiderActionResumeParams struct {
	ScanId string `form:"scanId" json:"scanId"`
}

// SpiderActionScanParams defines parameters for SpiderActionScan.
type SpiderActionScanParams struct {
	Url         *string `form:"url,omitempty" json:"url,omitempty"`
	MaxChildren *string `form:"maxChildren,omitempty" json:"maxChildren,omitempty"`
	Recurse     *string `form:"recurse,omitempty" json:"recurse,omitempty"`
	ContextName *string `form:"contextName,omitempty" json:"contextName,omitempty"`
	SubtreeOnly *string `form:"subtreeOnly,omitempty" json:"subtreeOnly,omitempty"`
}

// SpiderActionScanAsUserParams defines parameters for SpiderActionScanAsUser.
type SpiderActionScanAsUserParams struct {
	ContextId   string  `form:"contextId" json:"contextId"`
	UserId      string  `form:"userId" json:"userId"`
	Url         *string `form:"url,omitempty" json:"url,omitempty"`
	MaxChildren *string `form:"maxChildren,omitempty" json:"maxChildren,omitempty"`
	Recurse     *string `form:"recurse,omitempty" json:"recurse,omitempty"`
	SubtreeOnly *string `form:"subtreeOnly,omitempty" json:"subtreeOnly,omitempty"`
}

// SpiderActionSetOptionAcceptCookiesParams defines parameters for SpiderActionSetOptionAcceptCookies.
type SpiderActionSetOptionAcceptCookiesParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// SpiderActionSetOptionHandleODataParametersVisitedParams defines parameters for SpiderActionSetOptionHandleODataParametersVisited.
type SpiderActionSetOptionHandleODataParametersVisitedParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// SpiderActionSetOptionHandleParametersParams defines parameters for SpiderActionSetOptionHandleParameters.
type SpiderActionSetOptionHandleParametersParams struct {
	String string `form:"String" json:"String"`
}

// SpiderActionSetOptionLogoutAvoidanceParams defines parameters for SpiderActionSetOptionLogoutAvoidance.
type SpiderActionSetOptionLogoutAvoidanceParams struct {
	// Boolean A boolean (true/false) indicating if seeming logout paths/functionality should be avoided (default is false).
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// SpiderActionSetOptionMaxChildrenParams defines parameters for SpiderActionSetOptionMaxChildren.
type SpiderActionSetOptionMaxChildrenParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// SpiderActionSetOptionMaxDepthParams defines parameters for SpiderActionSetOptionMaxDepth.
type SpiderActionSetOptionMaxDepthParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// SpiderActionSetOptionMaxDurationParams defines parameters for SpiderActionSetOptionMaxDuration.
type SpiderActionSetOptionMaxDurationParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// SpiderActionSetOptionMaxParseSizeBytesParams defines parameters for SpiderActionSetOptionMaxParseSizeBytes.
type SpiderActionSetOptionMaxParseSizeBytesParams struct {
	// Integer The maximum size or 0 for unlimited.
	Integer int `form:"Integer" json:"Integer"`
}

// SpiderActionSetOptionMaxScansInUIParams defines parameters for SpiderActionSetOptionMaxScansInUI.
type SpiderActionSetOptionMaxScansInUIParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// SpiderActionSetOptionParseCommentsParams defines parameters for SpiderActionSetOptionParseComments.
type SpiderActionSetOptionParseCommentsParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// SpiderActionSetOptionParseDsStoreParams defines parameters for SpiderActionSetOptionParseDsStore.
type SpiderActionSetOptionParseDsStoreParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// SpiderActionSetOptionParseGitParams defines parameters for SpiderActionSetOptionParseGit.
type SpiderActionSetOptionParseGitParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// SpiderActionSetOptionParseRobotsTxtParams defines parameters for SpiderActionSetOptionParseRobotsTxt.
type SpiderActionSetOptionParseRobotsTxtParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// SpiderActionSetOptionParseSVNEntriesParams defines parameters for SpiderActionSetOptionParseSVNEntries.
type SpiderActionSetOptionParseSVNEntriesParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// SpiderActionSetOptionParseSitemapXmlParams defines parameters for SpiderActionSetOptionParseSitemapXml.
type SpiderActionSetOptionParseSitemapXmlParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// SpiderActionSetOptionPostFormParams defines parameters for SpiderActionSetOptionPostForm.
type SpiderActionSetOptionPostFormParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// SpiderActionSetOptionProcessFormParams defines parameters for SpiderActionSetOptionProcessForm.
type SpiderActionSetOptionProcessFormParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// SpiderActionSetOptionSendRefererHeaderParams defines parameters for SpiderActionSetOptionSendRefererHeader.
type SpiderActionSetOptionSendRefererHeaderParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// SpiderActionSetOptionShowAdvancedDialogParams defines parameters for SpiderActionSetOptionShowAdvancedDialog.
type SpiderActionSetOptionShowAdvancedDialogParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// SpiderActionSetOptionSkipURLStringParams defines parameters for SpiderActionSetOptionSkipURLString.
type SpiderActionSetOptionSkipURLStringParams struct {
	String string `form:"String" json:"String"`
}

// SpiderActionSetOptionThreadCountParams defines parameters for SpiderActionSetOptionThreadCount.
type SpiderActionSetOptionThreadCountParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// SpiderActionSetOptionUserAgentParams defines parameters for SpiderActionSetOptionUserAgent.
type SpiderActionSetOptionUserAgentParams struct {
	String string `form:"String" json:"String"`
}

// SpiderActionStopParams defines parameters for SpiderActionStop.
type SpiderActionStopParams struct {
	ScanId *string `form:"scanId,omitempty" json:"scanId,omitempty"`
}

// SpiderViewAddedNodesParams defines parameters for SpiderViewAddedNodes.
type SpiderViewAddedNodesParams struct {
	ScanId *string `form:"scanId,omitempty" json:"scanId,omitempty"`
}

// SpiderViewFullResultsParams defines parameters for SpiderViewFullResults.
type SpiderViewFullResultsParams struct {
	ScanId string `form:"scanId" json:"scanId"`
}

// SpiderViewResultsParams defines parameters for SpiderViewResults.
type SpiderViewResultsParams struct {
	ScanId *string `form:"scanId,omitempty" json:"scanId,omitempty"`
}

// SpiderViewStatusParams defines parameters for SpiderViewStatus.
type SpiderViewStatusParams struct {
	ScanId *string `form:"scanId,omitempty" json:"scanId,omitempty"`
}

// StatsActionClearStatsParams defines parameters for StatsActionClearStats.
type StatsActionClearStatsParams struct {
	KeyPrefix *string `form:"keyPrefix,omitempty" json:"keyPrefix,omitempty"`
}

// StatsActionSetOptionInMemoryEnabledParams defines parameters for StatsActionSetOptionInMemoryEnabled.
type StatsActionSetOptionInMemoryEnabledParams struct {
	Boolean bool `form:"Boolean" json:"Boolean"`
}

// StatsActionSetOptionStatsdHostParams defines parameters for StatsActionSetOptionStatsdHost.
type StatsActionSetOptionStatsdHostParams struct {
	String string `form:"String" json:"String"`
}

// StatsActionSetOptionStatsdPortParams defines parameters for StatsActionSetOptionStatsdPort.
type StatsActionSetOptionStatsdPortParams struct {
	Integer int `form:"Integer" json:"Integer"`
}

// StatsActionSetOptionStatsdPrefixParams defines parameters for StatsActionSetOptionStatsdPrefix.
type StatsActionSetOptionStatsdPrefixParams struct {
	String string `form:"String" json:"String"`
}

// StatsViewAllSitesStatsParams defines parameters for StatsViewAllSitesStats.
type StatsViewAllSitesStatsParams struct {
	KeyPrefix *string `form:"keyPrefix,omitempty" json:"keyPrefix,omitempty"`
}

// StatsViewSiteStatsParams defines parameters for StatsViewSiteStats.
type StatsViewSiteStatsParams struct {
	Site      string  `form:"site" json:"site"`
	KeyPrefix *string `form:"keyPrefix,omitempty" json:"keyPrefix,omitempty"`
}

// StatsViewStatsParams defines parameters for StatsViewStats.
type StatsViewStatsParams struct {
	KeyPrefix *string `form:"keyPrefix,omitempty" json:"keyPrefix,omitempty"`
}

// UsersActionAuthenticateAsUserParams defines parameters for UsersActionAuthenticateAsUser.
type UsersActionAuthenticateAsUserParams struct {
	// ContextId The Context ID
	ContextId string `form:"contextId" json:"contextId"`

	// UserId The User ID
	UserId string `form:"userId" json:"userId"`
}

// UsersActionNewUserParams defines parameters for UsersActionNewUser.
type UsersActionNewUserParams struct {
	// ContextId The Context ID
	ContextId string `form:"contextId" json:"contextId"`
	Name      string `form:"name" json:"name"`
}

// UsersActionPollAsUserParams defines parameters for UsersActionPollAsUser.
type UsersActionPollAsUserParams struct {
	// ContextId The Context ID
	ContextId string `form:"contextId" json:"contextId"`

	// UserId The User ID
	UserId string `form:"userId" json:"userId"`
}

// UsersActionRemoveUserParams defines parameters for UsersActionRemoveUser.
type UsersActionRemoveUserParams struct {
	// ContextId The Context ID
	ContextId string `form:"contextId" json:"contextId"`

	// UserId The User ID
	UserId string `form:"userId" json:"userId"`
}

// UsersActionSetAuthenticationCredentialsParams defines parameters for UsersActionSetAuthenticationCredentials.
type UsersActionSetAuthenticationCredentialsParams struct {
	// ContextId The Context ID
	ContextId string `form:"contextId" json:"contextId"`

	// UserId The User ID
	UserId                      string  `form:"userId" json:"userId"`
	AuthCredentialsConfigParams *string `form:"authCredentialsConfigParams,omitempty" json:"authCredentialsConfigParams,omitempty"`
}

// UsersActionSetAuthenticationStateParams defines parameters for UsersActionSetAuthenticationState.
type UsersActionSetAuthenticationStateParams struct {
	// ContextId The Context ID
	ContextId string `form:"contextId" json:"contextId"`

	// UserId The User ID
	UserId string `form:"userId" json:"userId"`

	// LastPollResult Last Poll Result - optional, should be 'true' or 'false'.
	LastPollResult *string `form:"lastPollResult,omitempty" json:"lastPollResult,omitempty"`

	// LastPollTimeInMs Last Poll Time in Milliseconds - optional, should be a long or 'NOW' for the current time in ms.
	LastPollTimeInMs *string `form:"lastPollTimeInMs,omitempty" json:"lastPollTimeInMs,omitempty"`

	// RequestsSinceLastPoll Requests Since Last Poll - optional, should be an integer.
	RequestsSinceLastPoll *string `form:"requestsSinceLastPoll,omitempty" json:"requestsSinceLastPoll,omitempty"`
}

// UsersActionSetCookieParams defines parameters for UsersActionSetCookie.
type UsersActionSetCookieParams struct {
	// ContextId The Context ID
	ContextId string `form:"contextId" json:"contextId"`

	// UserId The User ID
	UserId string `form:"userId" json:"userId"`

	// Domain The Cookie Domain
	Domain string `form:"domain" json:"domain"`

	// Name The Cookie Name
	Name string `form:"name" json:"name"`

	// Value The Cookie Value
	Value string `form:"value" json:"value"`

	// Path The Cookie Path - optional default no path
	Path *string `form:"path,omitempty" json:"path,omitempty"`

	// Secure If the Cookie is secure - optional default false
	Secure *string `form:"secure,omitempty" json:"secure,omitempty"`
}

// UsersActionSetUserEnabledParams defines parameters for UsersActionSetUserEnabled.
type UsersActionSetUserEnabledParams struct {
	// ContextId The Context ID
	ContextId string `form:"contextId" json:"contextId"`

	// UserId The User ID
	UserId  string `form:"userId" json:"userId"`
	Enabled string `form:"enabled" json:"enabled"`
}

// UsersActionSetUserNameParams defines parameters for UsersActionSetUserName.
type UsersActionSetUserNameParams struct {
	// ContextId The Context ID
	ContextId string `form:"contextId" json:"contextId"`

	// UserId The User ID
	UserId string `form:"userId" json:"userId"`
	Name   string `form:"name" json:"name"`
}

// UsersViewGetAuthenticationCredentialsParams defines parameters for UsersViewGetAuthenticationCredentials.
type UsersViewGetAuthenticationCredentialsParams struct {
	// ContextId The Context ID
	ContextId string `form:"contextId" json:"contextId"`

	// UserId the User ID
	UserId string `form:"userId" json:"userId"`
}

// UsersViewGetAuthenticationCredentialsConfigParamsParams defines parameters for UsersViewGetAuthenticationCredentialsConfigParams.
type UsersViewGetAuthenticationCredentialsConfigParamsParams struct {
	// ContextId The Context ID
	ContextId string `form:"contextId" json:"contextId"`
}

// UsersViewGetAuthenticationSessionParams defines parameters for UsersViewGetAuthenticationSession.
type UsersViewGetAuthenticationSessionParams struct {
	// ContextId The Context ID
	ContextId string `form:"contextId" json:"contextId"`

	// UserId The User ID
	UserId string `form:"userId" json:"userId"`
}

// UsersViewGetAuthenticationStateParams defines parameters for UsersViewGetAuthenticationState.
type UsersViewGetAuthenticationStateParams struct {
	// ContextId The Context ID
	ContextId string `form:"contextId" json:"contextId"`

	// UserId The User ID
	UserId string `form:"userId" json:"userId"`
}

// UsersViewGetUserByIdParams defines parameters for UsersViewGetUserById.
type UsersViewGetUserByIdParams struct {
	// ContextId The Context ID
	ContextId string `form:"contextId" json:"contextId"`

	// UserId The User ID
	UserId string `form:"userId" json:"userId"`
}

// UsersViewUsersListParams defines parameters for UsersViewUsersList.
type UsersViewUsersListParams struct {
	// ContextId The Context ID
	ContextId *string `form:"contextId,omitempty" json:"contextId,omitempty"`
}

// WappalyzerViewListSiteParams defines parameters for WappalyzerViewListSite.
type WappalyzerViewListSiteParams struct {
	Site string `form:"site" json:"site"`
}

// WebsocketActionSendTextMessageParams defines parameters for WebsocketActionSendTextMessage.
type WebsocketActionSendTextMessageParams struct {
	ChannelId string `form:"channelId" json:"channelId"`
	Outgoing  string `form:"outgoing" json:"outgoing"`
	Message   string `form:"message" json:"message"`
}

// WebsocketActionSetBreakTextMessageParams defines parameters for WebsocketActionSetBreakTextMessage.
type WebsocketActionSetBreakTextMessageParams struct {
	Message  string `form:"message" json:"message"`
	Outgoing string `form:"outgoing" json:"outgoing"`
}

// WebsocketViewMessageParams defines parameters for WebsocketViewMessage.
type WebsocketViewMessageParams struct {
	ChannelId string `form:"channelId" json:"channelId"`
	MessageId string `form:"messageId" json:"messageId"`
}

// WebsocketViewMessagesParams defines parameters for WebsocketViewMessages.
type WebsocketViewMessagesParams struct {
	ChannelId            *string `form:"channelId,omitempty" json:"channelId,omitempty"`
	Start                *string `form:"start,omitempty" json:"start,omitempty"`
	Count                *string `form:"count,omitempty" json:"count,omitempty"`
	PayloadPreviewLength *string `form:"payloadPreviewLength,omitempty" json:"payloadPreviewLength,omitempty"`
}

// AcsrfOtherGenFormParams defines parameters for AcsrfOtherGenForm.
type AcsrfOtherGenFormParams struct {
	// HrefId Define which request will be used
	HrefId string `form:"hrefId" json:"hrefId"`

	// ActionUrl Define the action URL to be used in the generated form
	ActionUrl *string `form:"actionUrl,omitempty" json:"actionUrl,omitempty"`
}

// CoreOtherFileDownloadParams defines parameters for CoreOtherFileDownload.
type CoreOtherFileDownloadParams struct {
	// FileName The name of the file, may include subdirectories
	FileName string `form:"fileName" json:"fileName"`
}

// CoreOtherFileUploadParams defines parameters for CoreOtherFileUpload.
type CoreOtherFileUploadParams struct {
	// FileName The name of the file, may include subdirectories.
	FileName string `form:"fileName" json:"fileName"`

	// FileContents The contents of the file.
	FileContents string `form:"fileContents" json:"fileContents"`
}

// CoreOtherMessageHarParams defines parameters for CoreOtherMessageHar.
type CoreOtherMessageHarParams struct {
	Id string `form:"id" json:"id"`
}

// CoreOtherMessagesHarParams defines parameters for CoreOtherMessagesHar.
type CoreOtherMessagesHarParams struct {
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// CoreOtherMessagesHarByIdParams defines parameters for CoreOtherMessagesHarById.
type CoreOtherMessagesHarByIdParams struct {
	Ids string `form:"ids" json:"ids"`
}

// CoreOtherSendHarRequestParams defines parameters for CoreOtherSendHarRequest.
type CoreOtherSendHarRequestParams struct {
	Request         string  `form:"request" json:"request"`
	FollowRedirects *string `form:"followRedirects,omitempty" json:"followRedirects,omitempty"`
}

// CoreOtherSetproxyParams defines parameters for CoreOtherSetproxy.
type CoreOtherSetproxyParams struct {
	Proxy string `form:"proxy" json:"proxy"`
}

// EximOtherExportHarParams defines parameters for EximOtherExportHar.
type EximOtherExportHarParams struct {
	// Baseurl The URL below which messages should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`

	// Start The position (or offset) within the results to use as a starting position for the information returned.
	Start *string `form:"start,omitempty" json:"start,omitempty"`

	// Count The number of results to return.
	Count *string `form:"count,omitempty" json:"count,omitempty"`
}

// EximOtherExportHarByIdParams defines parameters for EximOtherExportHarById.
type EximOtherExportHarByIdParams struct {
	// Ids The ID (number(s)) of the message(s) to be returned.
	Ids string `form:"ids" json:"ids"`
}

// EximOtherSendHarRequestParams defines parameters for EximOtherSendHarRequest.
type EximOtherSendHarRequestParams struct {
	// Request The raw JSON of a HAR request.
	Request string `form:"request" json:"request"`

	// FollowRedirects True if redirects should be followed, false otherwise.
	FollowRedirects *string `form:"followRedirects,omitempty" json:"followRedirects,omitempty"`
}

// KeyboardOtherCheatsheetActionOrderParams defines parameters for KeyboardOtherCheatsheetActionOrder.
type KeyboardOtherCheatsheetActionOrderParams struct {
	IncUnset *string `form:"incUnset,omitempty" json:"incUnset,omitempty"`
}

// KeyboardOtherCheatsheetKeyOrderParams defines parameters for KeyboardOtherCheatsheetKeyOrder.
type KeyboardOtherCheatsheetKeyOrderParams struct {
	IncUnset *string `form:"incUnset,omitempty" json:"incUnset,omitempty"`
}

// NetworkOtherSetProxyParams defines parameters for NetworkOtherSetProxy.
type NetworkOtherSetProxyParams struct {
	// Proxy The JSON object containing the HTTP proxy configuration.
	Proxy string `form:"proxy" json:"proxy"`
}

// SearchOtherHarByHeaderRegexParams defines parameters for SearchOtherHarByHeaderRegex.
type SearchOtherHarByHeaderRegexParams struct {
	Regex   string  `form:"regex" json:"regex"`
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SearchOtherHarByNoteRegexParams defines parameters for SearchOtherHarByNoteRegex.
type SearchOtherHarByNoteRegexParams struct {
	Regex string `form:"regex" json:"regex"`

	// Baseurl The highest URL in the Sites tree under which URLs should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SearchOtherHarByRequestRegexParams defines parameters for SearchOtherHarByRequestRegex.
type SearchOtherHarByRequestRegexParams struct {
	Regex   string  `form:"regex" json:"regex"`
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SearchOtherHarByResponseRegexParams defines parameters for SearchOtherHarByResponseRegex.
type SearchOtherHarByResponseRegexParams struct {
	Regex   string  `form:"regex" json:"regex"`
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SearchOtherHarByTagRegexParams defines parameters for SearchOtherHarByTagRegex.
type SearchOtherHarByTagRegexParams struct {
	Regex string `form:"regex" json:"regex"`

	// Baseurl The highest URL in the Sites tree under which URLs should be included.
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// SearchOtherHarByUrlRegexParams defines parameters for SearchOtherHarByUrlRegex.
type SearchOtherHarByUrlRegexParams struct {
	Regex   string  `form:"regex" json:"regex"`
	Baseurl *string `form:"baseurl,omitempty" json:"baseurl,omitempty"`
	Start   *string `form:"start,omitempty" json:"start,omitempty"`
	Count   *string `form:"count,omitempty" json:"count,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AccessControlActionScan request
	AccessControlActionScan(ctx context.Context, params *AccessControlActionScanParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessControlActionWriteHTMLreport request
	AccessControlActionWriteHTMLreport(ctx context.Context, params *AccessControlActionWriteHTMLreportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessControlViewGetScanProgress request
	AccessControlViewGetScanProgress(ctx context.Context, params *AccessControlViewGetScanProgressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessControlViewGetScanStatus request
	AccessControlViewGetScanStatus(ctx context.Context, params *AccessControlViewGetScanStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcsrfActionAddOptionToken request
	AcsrfActionAddOptionToken(ctx context.Context, params *AcsrfActionAddOptionTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcsrfActionRemoveOptionToken request
	AcsrfActionRemoveOptionToken(ctx context.Context, params *AcsrfActionRemoveOptionTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcsrfActionSetOptionPartialMatchingEnabled request
	AcsrfActionSetOptionPartialMatchingEnabled(ctx context.Context, params *AcsrfActionSetOptionPartialMatchingEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcsrfViewOptionPartialMatchingEnabled request
	AcsrfViewOptionPartialMatchingEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcsrfViewOptionTokensNames request
	AcsrfViewOptionTokensNames(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionAddAllowedResource request
	AjaxSpiderActionAddAllowedResource(ctx context.Context, params *AjaxSpiderActionAddAllowedResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionAddExcludedElement request
	AjaxSpiderActionAddExcludedElement(ctx context.Context, params *AjaxSpiderActionAddExcludedElementParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionModifyExcludedElement request
	AjaxSpiderActionModifyExcludedElement(ctx context.Context, params *AjaxSpiderActionModifyExcludedElementParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionRemoveAllowedResource request
	AjaxSpiderActionRemoveAllowedResource(ctx context.Context, params *AjaxSpiderActionRemoveAllowedResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionRemoveExcludedElement request
	AjaxSpiderActionRemoveExcludedElement(ctx context.Context, params *AjaxSpiderActionRemoveExcludedElementParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionScan request
	AjaxSpiderActionScan(ctx context.Context, params *AjaxSpiderActionScanParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionScanAsUser request
	AjaxSpiderActionScanAsUser(ctx context.Context, params *AjaxSpiderActionScanAsUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionSetEnabledAllowedResource request
	AjaxSpiderActionSetEnabledAllowedResource(ctx context.Context, params *AjaxSpiderActionSetEnabledAllowedResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionSetOptionBrowserId request
	AjaxSpiderActionSetOptionBrowserId(ctx context.Context, params *AjaxSpiderActionSetOptionBrowserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionSetOptionClickDefaultElems request
	AjaxSpiderActionSetOptionClickDefaultElems(ctx context.Context, params *AjaxSpiderActionSetOptionClickDefaultElemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionSetOptionClickElemsOnce request
	AjaxSpiderActionSetOptionClickElemsOnce(ctx context.Context, params *AjaxSpiderActionSetOptionClickElemsOnceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionSetOptionEnableExtensions request
	AjaxSpiderActionSetOptionEnableExtensions(ctx context.Context, params *AjaxSpiderActionSetOptionEnableExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionSetOptionEventWait request
	AjaxSpiderActionSetOptionEventWait(ctx context.Context, params *AjaxSpiderActionSetOptionEventWaitParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionSetOptionLogoutAvoidance request
	AjaxSpiderActionSetOptionLogoutAvoidance(ctx context.Context, params *AjaxSpiderActionSetOptionLogoutAvoidanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionSetOptionMaxCrawlDepth request
	AjaxSpiderActionSetOptionMaxCrawlDepth(ctx context.Context, params *AjaxSpiderActionSetOptionMaxCrawlDepthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionSetOptionMaxCrawlStates request
	AjaxSpiderActionSetOptionMaxCrawlStates(ctx context.Context, params *AjaxSpiderActionSetOptionMaxCrawlStatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionSetOptionMaxDuration request
	AjaxSpiderActionSetOptionMaxDuration(ctx context.Context, params *AjaxSpiderActionSetOptionMaxDurationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionSetOptionNumberOfBrowsers request
	AjaxSpiderActionSetOptionNumberOfBrowsers(ctx context.Context, params *AjaxSpiderActionSetOptionNumberOfBrowsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionSetOptionRandomInputs request
	AjaxSpiderActionSetOptionRandomInputs(ctx context.Context, params *AjaxSpiderActionSetOptionRandomInputsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionSetOptionReloadWait request
	AjaxSpiderActionSetOptionReloadWait(ctx context.Context, params *AjaxSpiderActionSetOptionReloadWaitParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionSetOptionScopeCheck request
	AjaxSpiderActionSetOptionScopeCheck(ctx context.Context, params *AjaxSpiderActionSetOptionScopeCheckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderActionStop request
	AjaxSpiderActionStop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewAllowedResources request
	AjaxSpiderViewAllowedResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewExcludedElements request
	AjaxSpiderViewExcludedElements(ctx context.Context, params *AjaxSpiderViewExcludedElementsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewFullResults request
	AjaxSpiderViewFullResults(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewNumberOfResults request
	AjaxSpiderViewNumberOfResults(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewOptionBrowserId request
	AjaxSpiderViewOptionBrowserId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewOptionClickDefaultElems request
	AjaxSpiderViewOptionClickDefaultElems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewOptionClickElemsOnce request
	AjaxSpiderViewOptionClickElemsOnce(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewOptionEnableExtensions request
	AjaxSpiderViewOptionEnableExtensions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewOptionEventWait request
	AjaxSpiderViewOptionEventWait(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewOptionLogoutAvoidance request
	AjaxSpiderViewOptionLogoutAvoidance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewOptionMaxCrawlDepth request
	AjaxSpiderViewOptionMaxCrawlDepth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewOptionMaxCrawlStates request
	AjaxSpiderViewOptionMaxCrawlStates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewOptionMaxDuration request
	AjaxSpiderViewOptionMaxDuration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewOptionNumberOfBrowsers request
	AjaxSpiderViewOptionNumberOfBrowsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewOptionRandomInputs request
	AjaxSpiderViewOptionRandomInputs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewOptionReloadWait request
	AjaxSpiderViewOptionReloadWait(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewOptionScopeCheck request
	AjaxSpiderViewOptionScopeCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewResults request
	AjaxSpiderViewResults(ctx context.Context, params *AjaxSpiderViewResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AjaxSpiderViewStatus request
	AjaxSpiderViewStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertActionAddAlert request
	AlertActionAddAlert(ctx context.Context, params *AlertActionAddAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertActionDeleteAlert request
	AlertActionDeleteAlert(ctx context.Context, params *AlertActionDeleteAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertActionDeleteAlerts request
	AlertActionDeleteAlerts(ctx context.Context, params *AlertActionDeleteAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertActionDeleteAllAlerts request
	AlertActionDeleteAllAlerts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertActionUpdateAlert request
	AlertActionUpdateAlert(ctx context.Context, params *AlertActionUpdateAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertActionUpdateAlertsConfidence request
	AlertActionUpdateAlertsConfidence(ctx context.Context, params *AlertActionUpdateAlertsConfidenceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertActionUpdateAlertsRisk request
	AlertActionUpdateAlertsRisk(ctx context.Context, params *AlertActionUpdateAlertsRiskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertViewAlert request
	AlertViewAlert(ctx context.Context, params *AlertViewAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertViewAlertCountsByRisk request
	AlertViewAlertCountsByRisk(ctx context.Context, params *AlertViewAlertCountsByRiskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertViewAlerts request
	AlertViewAlerts(ctx context.Context, params *AlertViewAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertViewAlertsByRisk request
	AlertViewAlertsByRisk(ctx context.Context, params *AlertViewAlertsByRiskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertViewAlertsSummary request
	AlertViewAlertsSummary(ctx context.Context, params *AlertViewAlertsSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertViewNumberOfAlerts request
	AlertViewNumberOfAlerts(ctx context.Context, params *AlertViewNumberOfAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertFilterActionAddAlertFilter request
	AlertFilterActionAddAlertFilter(ctx context.Context, params *AlertFilterActionAddAlertFilterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertFilterActionAddGlobalAlertFilter request
	AlertFilterActionAddGlobalAlertFilter(ctx context.Context, params *AlertFilterActionAddGlobalAlertFilterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertFilterActionApplyAll request
	AlertFilterActionApplyAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertFilterActionApplyContext request
	AlertFilterActionApplyContext(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertFilterActionApplyGlobal request
	AlertFilterActionApplyGlobal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertFilterActionRemoveAlertFilter request
	AlertFilterActionRemoveAlertFilter(ctx context.Context, params *AlertFilterActionRemoveAlertFilterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertFilterActionRemoveGlobalAlertFilter request
	AlertFilterActionRemoveGlobalAlertFilter(ctx context.Context, params *AlertFilterActionRemoveGlobalAlertFilterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertFilterActionTestAll request
	AlertFilterActionTestAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertFilterActionTestContext request
	AlertFilterActionTestContext(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertFilterActionTestGlobal request
	AlertFilterActionTestGlobal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertFilterViewAlertFilterList request
	AlertFilterViewAlertFilterList(ctx context.Context, params *AlertFilterViewAlertFilterListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertFilterViewGlobalAlertFilterList request
	AlertFilterViewGlobalAlertFilterList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionAddExcludedParam request
	AscanActionAddExcludedParam(ctx context.Context, params *AscanActionAddExcludedParamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionAddScanPolicy request
	AscanActionAddScanPolicy(ctx context.Context, params *AscanActionAddScanPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionClearExcludedFromScan request
	AscanActionClearExcludedFromScan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionDisableAllScanners request
	AscanActionDisableAllScanners(ctx context.Context, params *AscanActionDisableAllScannersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionDisableScanners request
	AscanActionDisableScanners(ctx context.Context, params *AscanActionDisableScannersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionEnableAllScanners request
	AscanActionEnableAllScanners(ctx context.Context, params *AscanActionEnableAllScannersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionEnableScanners request
	AscanActionEnableScanners(ctx context.Context, params *AscanActionEnableScannersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionExcludeFromScan request
	AscanActionExcludeFromScan(ctx context.Context, params *AscanActionExcludeFromScanParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionImportScanPolicy request
	AscanActionImportScanPolicy(ctx context.Context, params *AscanActionImportScanPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionModifyExcludedParam request
	AscanActionModifyExcludedParam(ctx context.Context, params *AscanActionModifyExcludedParamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionPause request
	AscanActionPause(ctx context.Context, params *AscanActionPauseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionPauseAllScans request
	AscanActionPauseAllScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionRemoveAllScans request
	AscanActionRemoveAllScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionRemoveExcludedParam request
	AscanActionRemoveExcludedParam(ctx context.Context, params *AscanActionRemoveExcludedParamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionRemoveScan request
	AscanActionRemoveScan(ctx context.Context, params *AscanActionRemoveScanParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionRemoveScanPolicy request
	AscanActionRemoveScanPolicy(ctx context.Context, params *AscanActionRemoveScanPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionResume request
	AscanActionResume(ctx context.Context, params *AscanActionResumeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionResumeAllScans request
	AscanActionResumeAllScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionScan request
	AscanActionScan(ctx context.Context, params *AscanActionScanParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionScanAsUser request
	AscanActionScanAsUser(ctx context.Context, params *AscanActionScanAsUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetEnabledPolicies request
	AscanActionSetEnabledPolicies(ctx context.Context, params *AscanActionSetEnabledPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionAddQueryParam request
	AscanActionSetOptionAddQueryParam(ctx context.Context, params *AscanActionSetOptionAddQueryParamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionAllowAttackOnStart request
	AscanActionSetOptionAllowAttackOnStart(ctx context.Context, params *AscanActionSetOptionAllowAttackOnStartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionAttackPolicy request
	AscanActionSetOptionAttackPolicy(ctx context.Context, params *AscanActionSetOptionAttackPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionDefaultPolicy request
	AscanActionSetOptionDefaultPolicy(ctx context.Context, params *AscanActionSetOptionDefaultPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionDelayInMs request
	AscanActionSetOptionDelayInMs(ctx context.Context, params *AscanActionSetOptionDelayInMsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionEncodeCookieValues request
	AscanActionSetOptionEncodeCookieValues(ctx context.Context, params *AscanActionSetOptionEncodeCookieValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionHandleAntiCSRFTokens request
	AscanActionSetOptionHandleAntiCSRFTokens(ctx context.Context, params *AscanActionSetOptionHandleAntiCSRFTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionHostPerScan request
	AscanActionSetOptionHostPerScan(ctx context.Context, params *AscanActionSetOptionHostPerScanParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionInjectPluginIdInHeader request
	AscanActionSetOptionInjectPluginIdInHeader(ctx context.Context, params *AscanActionSetOptionInjectPluginIdInHeaderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionMaxAlertsPerRule request
	AscanActionSetOptionMaxAlertsPerRule(ctx context.Context, params *AscanActionSetOptionMaxAlertsPerRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionMaxChartTimeInMins request
	AscanActionSetOptionMaxChartTimeInMins(ctx context.Context, params *AscanActionSetOptionMaxChartTimeInMinsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionMaxResultsToList request
	AscanActionSetOptionMaxResultsToList(ctx context.Context, params *AscanActionSetOptionMaxResultsToListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionMaxRuleDurationInMins request
	AscanActionSetOptionMaxRuleDurationInMins(ctx context.Context, params *AscanActionSetOptionMaxRuleDurationInMinsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionMaxScanDurationInMins request
	AscanActionSetOptionMaxScanDurationInMins(ctx context.Context, params *AscanActionSetOptionMaxScanDurationInMinsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionMaxScansInUI request
	AscanActionSetOptionMaxScansInUI(ctx context.Context, params *AscanActionSetOptionMaxScansInUIParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionPromptInAttackMode request
	AscanActionSetOptionPromptInAttackMode(ctx context.Context, params *AscanActionSetOptionPromptInAttackModeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionPromptToClearFinishedScans request
	AscanActionSetOptionPromptToClearFinishedScans(ctx context.Context, params *AscanActionSetOptionPromptToClearFinishedScansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionRescanInAttackMode request
	AscanActionSetOptionRescanInAttackMode(ctx context.Context, params *AscanActionSetOptionRescanInAttackModeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionScanHeadersAllRequests request
	AscanActionSetOptionScanHeadersAllRequests(ctx context.Context, params *AscanActionSetOptionScanHeadersAllRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionScanNullJsonValues request
	AscanActionSetOptionScanNullJsonValues(ctx context.Context, params *AscanActionSetOptionScanNullJsonValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionShowAdvancedDialog request
	AscanActionSetOptionShowAdvancedDialog(ctx context.Context, params *AscanActionSetOptionShowAdvancedDialogParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionTargetParamsEnabledRPC request
	AscanActionSetOptionTargetParamsEnabledRPC(ctx context.Context, params *AscanActionSetOptionTargetParamsEnabledRPCParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionTargetParamsInjectable request
	AscanActionSetOptionTargetParamsInjectable(ctx context.Context, params *AscanActionSetOptionTargetParamsInjectableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetOptionThreadPerHost request
	AscanActionSetOptionThreadPerHost(ctx context.Context, params *AscanActionSetOptionThreadPerHostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetPolicyAlertThreshold request
	AscanActionSetPolicyAlertThreshold(ctx context.Context, params *AscanActionSetPolicyAlertThresholdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetPolicyAttackStrength request
	AscanActionSetPolicyAttackStrength(ctx context.Context, params *AscanActionSetPolicyAttackStrengthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetScannerAlertThreshold request
	AscanActionSetScannerAlertThreshold(ctx context.Context, params *AscanActionSetScannerAlertThresholdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSetScannerAttackStrength request
	AscanActionSetScannerAttackStrength(ctx context.Context, params *AscanActionSetScannerAttackStrengthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionSkipScanner request
	AscanActionSkipScanner(ctx context.Context, params *AscanActionSkipScannerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionStop request
	AscanActionStop(ctx context.Context, params *AscanActionStopParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionStopAllScans request
	AscanActionStopAllScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanActionUpdateScanPolicy request
	AscanActionUpdateScanPolicy(ctx context.Context, params *AscanActionUpdateScanPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewAlertsIds request
	AscanViewAlertsIds(ctx context.Context, params *AscanViewAlertsIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewAttackModeQueue request
	AscanViewAttackModeQueue(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewExcludedFromScan request
	AscanViewExcludedFromScan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewExcludedParamTypes request
	AscanViewExcludedParamTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewExcludedParams request
	AscanViewExcludedParams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewMessagesIds request
	AscanViewMessagesIds(ctx context.Context, params *AscanViewMessagesIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionAddQueryParam request
	AscanViewOptionAddQueryParam(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionAllowAttackOnStart request
	AscanViewOptionAllowAttackOnStart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionAttackPolicy request
	AscanViewOptionAttackPolicy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionDefaultPolicy request
	AscanViewOptionDefaultPolicy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionDelayInMs request
	AscanViewOptionDelayInMs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionEncodeCookieValues request
	AscanViewOptionEncodeCookieValues(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionExcludedParamList request
	AscanViewOptionExcludedParamList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionHandleAntiCSRFTokens request
	AscanViewOptionHandleAntiCSRFTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionHostPerScan request
	AscanViewOptionHostPerScan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionInjectPluginIdInHeader request
	AscanViewOptionInjectPluginIdInHeader(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionMaxAlertsPerRule request
	AscanViewOptionMaxAlertsPerRule(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionMaxChartTimeInMins request
	AscanViewOptionMaxChartTimeInMins(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionMaxResultsToList request
	AscanViewOptionMaxResultsToList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionMaxRuleDurationInMins request
	AscanViewOptionMaxRuleDurationInMins(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionMaxScanDurationInMins request
	AscanViewOptionMaxScanDurationInMins(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionMaxScansInUI request
	AscanViewOptionMaxScansInUI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionPromptInAttackMode request
	AscanViewOptionPromptInAttackMode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionPromptToClearFinishedScans request
	AscanViewOptionPromptToClearFinishedScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionRescanInAttackMode request
	AscanViewOptionRescanInAttackMode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionScanHeadersAllRequests request
	AscanViewOptionScanHeadersAllRequests(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionScanNullJsonValues request
	AscanViewOptionScanNullJsonValues(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionShowAdvancedDialog request
	AscanViewOptionShowAdvancedDialog(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionTargetParamsEnabledRPC request
	AscanViewOptionTargetParamsEnabledRPC(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionTargetParamsInjectable request
	AscanViewOptionTargetParamsInjectable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewOptionThreadPerHost request
	AscanViewOptionThreadPerHost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewPolicies request
	AscanViewPolicies(ctx context.Context, params *AscanViewPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewScanPolicyNames request
	AscanViewScanPolicyNames(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewScanProgress request
	AscanViewScanProgress(ctx context.Context, params *AscanViewScanProgressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewScanners request
	AscanViewScanners(ctx context.Context, params *AscanViewScannersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewScans request
	AscanViewScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AscanViewStatus request
	AscanViewStatus(ctx context.Context, params *AscanViewStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthenticationActionSetAuthenticationMethod request
	AuthenticationActionSetAuthenticationMethod(ctx context.Context, params *AuthenticationActionSetAuthenticationMethodParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthenticationActionSetLoggedInIndicator request
	AuthenticationActionSetLoggedInIndicator(ctx context.Context, params *AuthenticationActionSetLoggedInIndicatorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthenticationActionSetLoggedOutIndicator request
	AuthenticationActionSetLoggedOutIndicator(ctx context.Context, params *AuthenticationActionSetLoggedOutIndicatorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthenticationViewGetAuthenticationMethod request
	AuthenticationViewGetAuthenticationMethod(ctx context.Context, params *AuthenticationViewGetAuthenticationMethodParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthenticationViewGetAuthenticationMethodConfigParams request
	AuthenticationViewGetAuthenticationMethodConfigParams(ctx context.Context, params *AuthenticationViewGetAuthenticationMethodConfigParamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthenticationViewGetLoggedInIndicator request
	AuthenticationViewGetLoggedInIndicator(ctx context.Context, params *AuthenticationViewGetLoggedInIndicatorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthenticationViewGetLoggedOutIndicator request
	AuthenticationViewGetLoggedOutIndicator(ctx context.Context, params *AuthenticationViewGetLoggedOutIndicatorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthenticationViewGetSupportedAuthenticationMethods request
	AuthenticationViewGetSupportedAuthenticationMethods(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthorizationActionSetBasicAuthorizationDetectionMethod request
	AuthorizationActionSetBasicAuthorizationDetectionMethod(ctx context.Context, params *AuthorizationActionSetBasicAuthorizationDetectionMethodParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthorizationViewGetAuthorizationDetectionMethod request
	AuthorizationViewGetAuthorizationDetectionMethod(ctx context.Context, params *AuthorizationViewGetAuthorizationDetectionMethodParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutomationActionEndDelayJob request
	AutomationActionEndDelayJob(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutomationActionRunPlan request
	AutomationActionRunPlan(ctx context.Context, params *AutomationActionRunPlanParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutomationViewPlanProgress request
	AutomationViewPlanProgress(ctx context.Context, params *AutomationViewPlanProgressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateActionDownloadLatestRelease request
	AutoupdateActionDownloadLatestRelease(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateActionInstallAddon request
	AutoupdateActionInstallAddon(ctx context.Context, params *AutoupdateActionInstallAddonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateActionInstallLocalAddon request
	AutoupdateActionInstallLocalAddon(ctx context.Context, params *AutoupdateActionInstallLocalAddonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateActionSetOptionCheckAddonUpdates request
	AutoupdateActionSetOptionCheckAddonUpdates(ctx context.Context, params *AutoupdateActionSetOptionCheckAddonUpdatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateActionSetOptionCheckOnStart request
	AutoupdateActionSetOptionCheckOnStart(ctx context.Context, params *AutoupdateActionSetOptionCheckOnStartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateActionSetOptionDownloadNewRelease request
	AutoupdateActionSetOptionDownloadNewRelease(ctx context.Context, params *AutoupdateActionSetOptionDownloadNewReleaseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateActionSetOptionInstallAddonUpdates request
	AutoupdateActionSetOptionInstallAddonUpdates(ctx context.Context, params *AutoupdateActionSetOptionInstallAddonUpdatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateActionSetOptionInstallScannerRules request
	AutoupdateActionSetOptionInstallScannerRules(ctx context.Context, params *AutoupdateActionSetOptionInstallScannerRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateActionSetOptionReportAlphaAddons request
	AutoupdateActionSetOptionReportAlphaAddons(ctx context.Context, params *AutoupdateActionSetOptionReportAlphaAddonsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateActionSetOptionReportBetaAddons request
	AutoupdateActionSetOptionReportBetaAddons(ctx context.Context, params *AutoupdateActionSetOptionReportBetaAddonsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateActionSetOptionReportReleaseAddons request
	AutoupdateActionSetOptionReportReleaseAddons(ctx context.Context, params *AutoupdateActionSetOptionReportReleaseAddonsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateActionUninstallAddon request
	AutoupdateActionUninstallAddon(ctx context.Context, params *AutoupdateActionUninstallAddonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewInstalledAddons request
	AutoupdateViewInstalledAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewIsLatestVersion request
	AutoupdateViewIsLatestVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewLatestVersionNumber request
	AutoupdateViewLatestVersionNumber(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewLocalAddons request
	AutoupdateViewLocalAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewMarketplaceAddons request
	AutoupdateViewMarketplaceAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewNewAddons request
	AutoupdateViewNewAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewOptionAddonDirectories request
	AutoupdateViewOptionAddonDirectories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewOptionCheckAddonUpdates request
	AutoupdateViewOptionCheckAddonUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewOptionCheckOnStart request
	AutoupdateViewOptionCheckOnStart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewOptionDayLastChecked request
	AutoupdateViewOptionDayLastChecked(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewOptionDayLastInstallWarned request
	AutoupdateViewOptionDayLastInstallWarned(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewOptionDayLastUpdateWarned request
	AutoupdateViewOptionDayLastUpdateWarned(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewOptionDownloadDirectory request
	AutoupdateViewOptionDownloadDirectory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewOptionDownloadNewRelease request
	AutoupdateViewOptionDownloadNewRelease(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewOptionInstallAddonUpdates request
	AutoupdateViewOptionInstallAddonUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewOptionInstallScannerRules request
	AutoupdateViewOptionInstallScannerRules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewOptionReportAlphaAddons request
	AutoupdateViewOptionReportAlphaAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewOptionReportBetaAddons request
	AutoupdateViewOptionReportBetaAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewOptionReportReleaseAddons request
	AutoupdateViewOptionReportReleaseAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoupdateViewUpdatedAddons request
	AutoupdateViewUpdatedAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BreakActionAddHttpBreakpoint request
	BreakActionAddHttpBreakpoint(ctx context.Context, params *BreakActionAddHttpBreakpointParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BreakActionBreak request
	BreakActionBreak(ctx context.Context, params *BreakActionBreakParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BreakActionContinue request
	BreakActionContinue(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BreakActionDrop request
	BreakActionDrop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BreakActionRemoveHttpBreakpoint request
	BreakActionRemoveHttpBreakpoint(ctx context.Context, params *BreakActionRemoveHttpBreakpointParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BreakActionSetHttpMessage request
	BreakActionSetHttpMessage(ctx context.Context, params *BreakActionSetHttpMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BreakActionStep request
	BreakActionStep(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BreakViewHttpMessage request
	BreakViewHttpMessage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BreakViewIsBreakAll request
	BreakViewIsBreakAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BreakViewIsBreakRequest request
	BreakViewIsBreakRequest(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BreakViewIsBreakResponse request
	BreakViewIsBreakResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClientActionExportClientMap request
	ClientActionExportClientMap(ctx context.Context, params *ClientActionExportClientMapParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClientActionReportEvent request
	ClientActionReportEvent(ctx context.Context, params *ClientActionReportEventParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClientActionReportObject request
	ClientActionReportObject(ctx context.Context, params *ClientActionReportObjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClientActionReportZestScript request
	ClientActionReportZestScript(ctx context.Context, params *ClientActionReportZestScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClientActionReportZestStatement request
	ClientActionReportZestStatement(ctx context.Context, params *ClientActionReportZestStatementParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClientSpiderActionScan request
	ClientSpiderActionScan(ctx context.Context, params *ClientSpiderActionScanParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClientSpiderActionStop request
	ClientSpiderActionStop(ctx context.Context, params *ClientSpiderActionStopParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClientSpiderViewStatus request
	ClientSpiderViewStatus(ctx context.Context, params *ClientSpiderViewStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextActionExcludeAllContextTechnologies request
	ContextActionExcludeAllContextTechnologies(ctx context.Context, params *ContextActionExcludeAllContextTechnologiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextActionExcludeContextTechnologies request
	ContextActionExcludeContextTechnologies(ctx context.Context, params *ContextActionExcludeContextTechnologiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextActionExcludeFromContext request
	ContextActionExcludeFromContext(ctx context.Context, params *ContextActionExcludeFromContextParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextActionExportContext request
	ContextActionExportContext(ctx context.Context, params *ContextActionExportContextParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextActionImportContext request
	ContextActionImportContext(ctx context.Context, params *ContextActionImportContextParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextActionIncludeAllContextTechnologies request
	ContextActionIncludeAllContextTechnologies(ctx context.Context, params *ContextActionIncludeAllContextTechnologiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextActionIncludeContextTechnologies request
	ContextActionIncludeContextTechnologies(ctx context.Context, params *ContextActionIncludeContextTechnologiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextActionIncludeInContext request
	ContextActionIncludeInContext(ctx context.Context, params *ContextActionIncludeInContextParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextActionNewContext request
	ContextActionNewContext(ctx context.Context, params *ContextActionNewContextParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextActionRemoveContext request
	ContextActionRemoveContext(ctx context.Context, params *ContextActionRemoveContextParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextActionSetContextCheckingStrategy request
	ContextActionSetContextCheckingStrategy(ctx context.Context, params *ContextActionSetContextCheckingStrategyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextActionSetContextInScope request
	ContextActionSetContextInScope(ctx context.Context, params *ContextActionSetContextInScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextActionSetContextRegexs request
	ContextActionSetContextRegexs(ctx context.Context, params *ContextActionSetContextRegexsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextViewContext request
	ContextViewContext(ctx context.Context, params *ContextViewContextParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextViewContextList request
	ContextViewContextList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextViewExcludeRegexs request
	ContextViewExcludeRegexs(ctx context.Context, params *ContextViewExcludeRegexsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextViewExcludedTechnologyList request
	ContextViewExcludedTechnologyList(ctx context.Context, params *ContextViewExcludedTechnologyListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextViewIncludeRegexs request
	ContextViewIncludeRegexs(ctx context.Context, params *ContextViewIncludeRegexsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextViewIncludedTechnologyList request
	ContextViewIncludedTechnologyList(ctx context.Context, params *ContextViewIncludedTechnologyListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextViewTechnologyList request
	ContextViewTechnologyList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextViewUrls request
	ContextViewUrls(ctx context.Context, params *ContextViewUrlsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionAccessUrl request
	CoreActionAccessUrl(ctx context.Context, params *CoreActionAccessUrlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionAddProxyChainExcludedDomain request
	CoreActionAddProxyChainExcludedDomain(ctx context.Context, params *CoreActionAddProxyChainExcludedDomainParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionClearExcludedFromProxy request
	CoreActionClearExcludedFromProxy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionCreateSbomZip request
	CoreActionCreateSbomZip(ctx context.Context, params *CoreActionCreateSbomZipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionDeleteAlert request
	CoreActionDeleteAlert(ctx context.Context, params *CoreActionDeleteAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionDeleteAllAlerts request
	CoreActionDeleteAllAlerts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionDeleteSiteNode request
	CoreActionDeleteSiteNode(ctx context.Context, params *CoreActionDeleteSiteNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionDisableAllProxyChainExcludedDomains request
	CoreActionDisableAllProxyChainExcludedDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionDisableClientCertificate request
	CoreActionDisableClientCertificate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionEnableAllProxyChainExcludedDomains request
	CoreActionEnableAllProxyChainExcludedDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionEnablePKCS12ClientCertificate request
	CoreActionEnablePKCS12ClientCertificate(ctx context.Context, params *CoreActionEnablePKCS12ClientCertificateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionExcludeFromProxy request
	CoreActionExcludeFromProxy(ctx context.Context, params *CoreActionExcludeFromProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionGenerateRootCA request
	CoreActionGenerateRootCA(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionLoadSession request
	CoreActionLoadSession(ctx context.Context, params *CoreActionLoadSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionModifyProxyChainExcludedDomain request
	CoreActionModifyProxyChainExcludedDomain(ctx context.Context, params *CoreActionModifyProxyChainExcludedDomainParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionNewSession request
	CoreActionNewSession(ctx context.Context, params *CoreActionNewSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionRemoveProxyChainExcludedDomain request
	CoreActionRemoveProxyChainExcludedDomain(ctx context.Context, params *CoreActionRemoveProxyChainExcludedDomainParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionRunGarbageCollection request
	CoreActionRunGarbageCollection(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSaveSession request
	CoreActionSaveSession(ctx context.Context, params *CoreActionSaveSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSendRequest request
	CoreActionSendRequest(ctx context.Context, params *CoreActionSendRequestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetHomeDirectory request
	CoreActionSetHomeDirectory(ctx context.Context, params *CoreActionSetHomeDirectoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetLogLevel request
	CoreActionSetLogLevel(ctx context.Context, params *CoreActionSetLogLevelParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetMode request
	CoreActionSetMode(ctx context.Context, params *CoreActionSetModeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionAlertOverridesFilePath request
	CoreActionSetOptionAlertOverridesFilePath(ctx context.Context, params *CoreActionSetOptionAlertOverridesFilePathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionDefaultUserAgent request
	CoreActionSetOptionDefaultUserAgent(ctx context.Context, params *CoreActionSetOptionDefaultUserAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionDnsTtlSuccessfulQueries request
	CoreActionSetOptionDnsTtlSuccessfulQueries(ctx context.Context, params *CoreActionSetOptionDnsTtlSuccessfulQueriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionHttpStateEnabled request
	CoreActionSetOptionHttpStateEnabled(ctx context.Context, params *CoreActionSetOptionHttpStateEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionMaximumAlertInstances request
	CoreActionSetOptionMaximumAlertInstances(ctx context.Context, params *CoreActionSetOptionMaximumAlertInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionMergeRelatedAlerts request
	CoreActionSetOptionMergeRelatedAlerts(ctx context.Context, params *CoreActionSetOptionMergeRelatedAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionProxyChainName request
	CoreActionSetOptionProxyChainName(ctx context.Context, params *CoreActionSetOptionProxyChainNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionProxyChainPassword request
	CoreActionSetOptionProxyChainPassword(ctx context.Context, params *CoreActionSetOptionProxyChainPasswordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionProxyChainPort request
	CoreActionSetOptionProxyChainPort(ctx context.Context, params *CoreActionSetOptionProxyChainPortParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionProxyChainPrompt request
	CoreActionSetOptionProxyChainPrompt(ctx context.Context, params *CoreActionSetOptionProxyChainPromptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionProxyChainRealm request
	CoreActionSetOptionProxyChainRealm(ctx context.Context, params *CoreActionSetOptionProxyChainRealmParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionProxyChainSkipName request
	CoreActionSetOptionProxyChainSkipName(ctx context.Context, params *CoreActionSetOptionProxyChainSkipNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionProxyChainUserName request
	CoreActionSetOptionProxyChainUserName(ctx context.Context, params *CoreActionSetOptionProxyChainUserNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionSingleCookieRequestHeader request
	CoreActionSetOptionSingleCookieRequestHeader(ctx context.Context, params *CoreActionSetOptionSingleCookieRequestHeaderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionTimeoutInSecs request
	CoreActionSetOptionTimeoutInSecs(ctx context.Context, params *CoreActionSetOptionTimeoutInSecsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionUseProxyChain request
	CoreActionSetOptionUseProxyChain(ctx context.Context, params *CoreActionSetOptionUseProxyChainParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionUseProxyChainAuth request
	CoreActionSetOptionUseProxyChainAuth(ctx context.Context, params *CoreActionSetOptionUseProxyChainAuthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSetOptionUseSocksProxy request
	CoreActionSetOptionUseSocksProxy(ctx context.Context, params *CoreActionSetOptionUseSocksProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionShutdown request
	CoreActionShutdown(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreActionSnapshotSession request
	CoreActionSnapshotSession(ctx context.Context, params *CoreActionSnapshotSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewAlert request
	CoreViewAlert(ctx context.Context, params *CoreViewAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewAlerts request
	CoreViewAlerts(ctx context.Context, params *CoreViewAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewAlertsSummary request
	CoreViewAlertsSummary(ctx context.Context, params *CoreViewAlertsSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewChildNodes request
	CoreViewChildNodes(ctx context.Context, params *CoreViewChildNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewExcludedFromProxy request
	CoreViewExcludedFromProxy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewGetLogLevel request
	CoreViewGetLogLevel(ctx context.Context, params *CoreViewGetLogLevelParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewHomeDirectory request
	CoreViewHomeDirectory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewHosts request
	CoreViewHosts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewMessage request
	CoreViewMessage(ctx context.Context, params *CoreViewMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewMessages request
	CoreViewMessages(ctx context.Context, params *CoreViewMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewMessagesById request
	CoreViewMessagesById(ctx context.Context, params *CoreViewMessagesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewMode request
	CoreViewMode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewNumberOfAlerts request
	CoreViewNumberOfAlerts(ctx context.Context, params *CoreViewNumberOfAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewNumberOfMessages request
	CoreViewNumberOfMessages(ctx context.Context, params *CoreViewNumberOfMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionAlertOverridesFilePath request
	CoreViewOptionAlertOverridesFilePath(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionDefaultUserAgent request
	CoreViewOptionDefaultUserAgent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionDnsTtlSuccessfulQueries request
	CoreViewOptionDnsTtlSuccessfulQueries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionHttpState request
	CoreViewOptionHttpState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionHttpStateEnabled request
	CoreViewOptionHttpStateEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionMaximumAlertInstances request
	CoreViewOptionMaximumAlertInstances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionMergeRelatedAlerts request
	CoreViewOptionMergeRelatedAlerts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionProxyChainName request
	CoreViewOptionProxyChainName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionProxyChainPassword request
	CoreViewOptionProxyChainPassword(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionProxyChainPort request
	CoreViewOptionProxyChainPort(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionProxyChainPrompt request
	CoreViewOptionProxyChainPrompt(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionProxyChainRealm request
	CoreViewOptionProxyChainRealm(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionProxyChainSkipName request
	CoreViewOptionProxyChainSkipName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionProxyChainUserName request
	CoreViewOptionProxyChainUserName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionProxyExcludedDomains request
	CoreViewOptionProxyExcludedDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionProxyExcludedDomainsEnabled request
	CoreViewOptionProxyExcludedDomainsEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionSingleCookieRequestHeader request
	CoreViewOptionSingleCookieRequestHeader(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionTimeoutInSecs request
	CoreViewOptionTimeoutInSecs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionUseProxyChain request
	CoreViewOptionUseProxyChain(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionUseProxyChainAuth request
	CoreViewOptionUseProxyChainAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewOptionUseSocksProxy request
	CoreViewOptionUseSocksProxy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewProxyChainExcludedDomains request
	CoreViewProxyChainExcludedDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewSessionLocation request
	CoreViewSessionLocation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewSites request
	CoreViewSites(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewUrls request
	CoreViewUrls(ctx context.Context, params *CoreViewUrlsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewVersion request
	CoreViewVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreViewZapHomePath request
	CoreViewZapHomePath(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustompayloadsActionAddCustomPayload request
	CustompayloadsActionAddCustomPayload(ctx context.Context, params *CustompayloadsActionAddCustomPayloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustompayloadsActionDisableCustomPayload request
	CustompayloadsActionDisableCustomPayload(ctx context.Context, params *CustompayloadsActionDisableCustomPayloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustompayloadsActionDisableCustomPayloads request
	CustompayloadsActionDisableCustomPayloads(ctx context.Context, params *CustompayloadsActionDisableCustomPayloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustompayloadsActionEnableCustomPayload request
	CustompayloadsActionEnableCustomPayload(ctx context.Context, params *CustompayloadsActionEnableCustomPayloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustompayloadsActionEnableCustomPayloads request
	CustompayloadsActionEnableCustomPayloads(ctx context.Context, params *CustompayloadsActionEnableCustomPayloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustompayloadsActionRemoveCustomPayload request
	CustompayloadsActionRemoveCustomPayload(ctx context.Context, params *CustompayloadsActionRemoveCustomPayloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustompayloadsViewCustomPayloads request
	CustompayloadsViewCustomPayloads(ctx context.Context, params *CustompayloadsViewCustomPayloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustompayloadsViewCustomPayloadsCategories request
	CustompayloadsViewCustomPayloadsCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EximActionExportSitesTree request
	EximActionExportSitesTree(ctx context.Context, params *EximActionExportSitesTreeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EximActionImportHar request
	EximActionImportHar(ctx context.Context, params *EximActionImportHarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EximActionImportModsec2Logs request
	EximActionImportModsec2Logs(ctx context.Context, params *EximActionImportModsec2LogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EximActionImportUrls request
	EximActionImportUrls(ctx context.Context, params *EximActionImportUrlsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EximActionImportZapLogs request
	EximActionImportZapLogs(ctx context.Context, params *EximActionImportZapLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EximActionPruneSitesTree request
	EximActionPruneSitesTree(ctx context.Context, params *EximActionPruneSitesTreeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ForcedUserActionSetForcedUser request
	ForcedUserActionSetForcedUser(ctx context.Context, params *ForcedUserActionSetForcedUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ForcedUserActionSetForcedUserModeEnabled request
	ForcedUserActionSetForcedUserModeEnabled(ctx context.Context, params *ForcedUserActionSetForcedUserModeEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ForcedUserViewGetForcedUser request
	ForcedUserViewGetForcedUser(ctx context.Context, params *ForcedUserViewGetForcedUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ForcedUserViewIsForcedUserModeEnabled request
	ForcedUserViewIsForcedUserModeEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlActionImportFile request
	GraphqlActionImportFile(ctx context.Context, params *GraphqlActionImportFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlActionImportUrl request
	GraphqlActionImportUrl(ctx context.Context, params *GraphqlActionImportUrlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlActionSetOptionArgsType request
	GraphqlActionSetOptionArgsType(ctx context.Context, params *GraphqlActionSetOptionArgsTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlActionSetOptionLenientMaxQueryDepthEnabled request
	GraphqlActionSetOptionLenientMaxQueryDepthEnabled(ctx context.Context, params *GraphqlActionSetOptionLenientMaxQueryDepthEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlActionSetOptionMaxAdditionalQueryDepth request
	GraphqlActionSetOptionMaxAdditionalQueryDepth(ctx context.Context, params *GraphqlActionSetOptionMaxAdditionalQueryDepthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlActionSetOptionMaxArgsDepth request
	GraphqlActionSetOptionMaxArgsDepth(ctx context.Context, params *GraphqlActionSetOptionMaxArgsDepthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlActionSetOptionMaxQueryDepth request
	GraphqlActionSetOptionMaxQueryDepth(ctx context.Context, params *GraphqlActionSetOptionMaxQueryDepthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlActionSetOptionOptionalArgsEnabled request
	GraphqlActionSetOptionOptionalArgsEnabled(ctx context.Context, params *GraphqlActionSetOptionOptionalArgsEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlActionSetOptionQueryGenEnabled request
	GraphqlActionSetOptionQueryGenEnabled(ctx context.Context, params *GraphqlActionSetOptionQueryGenEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlActionSetOptionQuerySplitType request
	GraphqlActionSetOptionQuerySplitType(ctx context.Context, params *GraphqlActionSetOptionQuerySplitTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlActionSetOptionRequestMethod request
	GraphqlActionSetOptionRequestMethod(ctx context.Context, params *GraphqlActionSetOptionRequestMethodParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlViewOptionArgsType request
	GraphqlViewOptionArgsType(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlViewOptionLenientMaxQueryDepthEnabled request
	GraphqlViewOptionLenientMaxQueryDepthEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlViewOptionMaxAdditionalQueryDepth request
	GraphqlViewOptionMaxAdditionalQueryDepth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlViewOptionMaxArgsDepth request
	GraphqlViewOptionMaxArgsDepth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlViewOptionMaxQueryDepth request
	GraphqlViewOptionMaxQueryDepth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlViewOptionOptionalArgsEnabled request
	GraphqlViewOptionOptionalArgsEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlViewOptionQueryGenEnabled request
	GraphqlViewOptionQueryGenEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlViewOptionQuerySplitType request
	GraphqlViewOptionQuerySplitType(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GraphqlViewOptionRequestMethod request
	GraphqlViewOptionRequestMethod(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HttpSessionsActionAddDefaultSessionToken request
	HttpSessionsActionAddDefaultSessionToken(ctx context.Context, params *HttpSessionsActionAddDefaultSessionTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HttpSessionsActionAddSessionToken request
	HttpSessionsActionAddSessionToken(ctx context.Context, params *HttpSessionsActionAddSessionTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HttpSessionsActionCreateEmptySession request
	HttpSessionsActionCreateEmptySession(ctx context.Context, params *HttpSessionsActionCreateEmptySessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HttpSessionsActionRemoveDefaultSessionToken request
	HttpSessionsActionRemoveDefaultSessionToken(ctx context.Context, params *HttpSessionsActionRemoveDefaultSessionTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HttpSessionsActionRemoveSession request
	HttpSessionsActionRemoveSession(ctx context.Context, params *HttpSessionsActionRemoveSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HttpSessionsActionRemoveSessionToken request
	HttpSessionsActionRemoveSessionToken(ctx context.Context, params *HttpSessionsActionRemoveSessionTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HttpSessionsActionRenameSession request
	HttpSessionsActionRenameSession(ctx context.Context, params *HttpSessionsActionRenameSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HttpSessionsActionSetActiveSession request
	HttpSessionsActionSetActiveSession(ctx context.Context, params *HttpSessionsActionSetActiveSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HttpSessionsActionSetDefaultSessionTokenEnabled request
	HttpSessionsActionSetDefaultSessionTokenEnabled(ctx context.Context, params *HttpSessionsActionSetDefaultSessionTokenEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HttpSessionsActionSetSessionTokenValue request
	HttpSessionsActionSetSessionTokenValue(ctx context.Context, params *HttpSessionsActionSetSessionTokenValueParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HttpSessionsActionUnsetActiveSession request
	HttpSessionsActionUnsetActiveSession(ctx context.Context, params *HttpSessionsActionUnsetActiveSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HttpSessionsViewActiveSession request
	HttpSessionsViewActiveSession(ctx context.Context, params *HttpSessionsViewActiveSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HttpSessionsViewDefaultSessionTokens request
	HttpSessionsViewDefaultSessionTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HttpSessionsViewSessionTokens request
	HttpSessionsViewSessionTokens(ctx context.Context, params *HttpSessionsViewSessionTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HttpSessionsViewSessions request
	HttpSessionsViewSessions(ctx context.Context, params *HttpSessionsViewSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HttpSessionsViewSites request
	HttpSessionsViewSites(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudActionLog request
	HudActionLog(ctx context.Context, params *HudActionLogParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudActionRecordRequest request
	HudActionRecordRequest(ctx context.Context, params *HudActionRecordRequestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudActionResetTutorialTasks request
	HudActionResetTutorialTasks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudActionSetOptionBaseDirectory request
	HudActionSetOptionBaseDirectory(ctx context.Context, params *HudActionSetOptionBaseDirectoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudActionSetOptionDevelopmentMode request
	HudActionSetOptionDevelopmentMode(ctx context.Context, params *HudActionSetOptionDevelopmentModeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudActionSetOptionEnableOnDomainMsgs request
	HudActionSetOptionEnableOnDomainMsgs(ctx context.Context, params *HudActionSetOptionEnableOnDomainMsgsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudActionSetOptionEnabledForDaemon request
	HudActionSetOptionEnabledForDaemon(ctx context.Context, params *HudActionSetOptionEnabledForDaemonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudActionSetOptionEnabledForDesktop request
	HudActionSetOptionEnabledForDesktop(ctx context.Context, params *HudActionSetOptionEnabledForDesktopParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudActionSetOptionInScopeOnly request
	HudActionSetOptionInScopeOnly(ctx context.Context, params *HudActionSetOptionInScopeOnlyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudActionSetOptionRemoveCSP request
	HudActionSetOptionRemoveCSP(ctx context.Context, params *HudActionSetOptionRemoveCSPParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudActionSetOptionShowWelcomeScreen request
	HudActionSetOptionShowWelcomeScreen(ctx context.Context, params *HudActionSetOptionShowWelcomeScreenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudActionSetOptionSkipTutorialTasks request
	HudActionSetOptionSkipTutorialTasks(ctx context.Context, params *HudActionSetOptionSkipTutorialTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudActionSetOptionTutorialTaskDone request
	HudActionSetOptionTutorialTaskDone(ctx context.Context, params *HudActionSetOptionTutorialTaskDoneParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudActionSetOptionTutorialTestMode request
	HudActionSetOptionTutorialTestMode(ctx context.Context, params *HudActionSetOptionTutorialTestModeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudActionSetUiOption request
	HudActionSetUiOption(ctx context.Context, params *HudActionSetUiOptionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewGetUiOption request
	HudViewGetUiOption(ctx context.Context, params *HudViewGetUiOptionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewHeartbeat request
	HudViewHeartbeat(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewHudAlertData request
	HudViewHudAlertData(ctx context.Context, params *HudViewHudAlertDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewOptionAllowUnsafeEval request
	HudViewOptionAllowUnsafeEval(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewOptionBaseDirectory request
	HudViewOptionBaseDirectory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewOptionDevelopmentMode request
	HudViewOptionDevelopmentMode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewOptionEnableOnDomainMsgs request
	HudViewOptionEnableOnDomainMsgs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewOptionEnableTelemetry request
	HudViewOptionEnableTelemetry(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewOptionEnabledForDaemon request
	HudViewOptionEnabledForDaemon(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewOptionEnabledForDesktop request
	HudViewOptionEnabledForDesktop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewOptionInScopeOnly request
	HudViewOptionInScopeOnly(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewOptionRemoveCSP request
	HudViewOptionRemoveCSP(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewOptionShowWelcomeScreen request
	HudViewOptionShowWelcomeScreen(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewOptionSkipTutorialTasks request
	HudViewOptionSkipTutorialTasks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewOptionTutorialHost request
	HudViewOptionTutorialHost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewOptionTutorialPort request
	HudViewOptionTutorialPort(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewOptionTutorialTasksDone request
	HudViewOptionTutorialTasksDone(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewOptionTutorialTestMode request
	HudViewOptionTutorialTestMode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewOptionTutorialUpdates request
	HudViewOptionTutorialUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewTutorialUpdates request
	HudViewTutorialUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudViewUpgradedDomains request
	HudViewUpgradedDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LocalProxiesActionAddAdditionalProxy request
	LocalProxiesActionAddAdditionalProxy(ctx context.Context, params *LocalProxiesActionAddAdditionalProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LocalProxiesActionRemoveAdditionalProxy request
	LocalProxiesActionRemoveAdditionalProxy(ctx context.Context, params *LocalProxiesActionRemoveAdditionalProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LocalProxiesViewAdditionalProxies request
	LocalProxiesViewAdditionalProxies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionAddAlias request
	NetworkActionAddAlias(ctx context.Context, params *NetworkActionAddAliasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionAddHttpProxyExclusion request
	NetworkActionAddHttpProxyExclusion(ctx context.Context, params *NetworkActionAddHttpProxyExclusionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionAddLocalServer request
	NetworkActionAddLocalServer(ctx context.Context, params *NetworkActionAddLocalServerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionAddPassThrough request
	NetworkActionAddPassThrough(ctx context.Context, params *NetworkActionAddPassThroughParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionAddPkcs12ClientCertificate request
	NetworkActionAddPkcs12ClientCertificate(ctx context.Context, params *NetworkActionAddPkcs12ClientCertificateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionAddRateLimitRule request
	NetworkActionAddRateLimitRule(ctx context.Context, params *NetworkActionAddRateLimitRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionGenerateRootCaCert request
	NetworkActionGenerateRootCaCert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionImportRootCaCert request
	NetworkActionImportRootCaCert(ctx context.Context, params *NetworkActionImportRootCaCertParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionRemoveAlias request
	NetworkActionRemoveAlias(ctx context.Context, params *NetworkActionRemoveAliasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionRemoveHttpProxyExclusion request
	NetworkActionRemoveHttpProxyExclusion(ctx context.Context, params *NetworkActionRemoveHttpProxyExclusionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionRemoveLocalServer request
	NetworkActionRemoveLocalServer(ctx context.Context, params *NetworkActionRemoveLocalServerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionRemovePassThrough request
	NetworkActionRemovePassThrough(ctx context.Context, params *NetworkActionRemovePassThroughParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionRemoveRateLimitRule request
	NetworkActionRemoveRateLimitRule(ctx context.Context, params *NetworkActionRemoveRateLimitRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionSetAliasEnabled request
	NetworkActionSetAliasEnabled(ctx context.Context, params *NetworkActionSetAliasEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionSetConnectionTimeout request
	NetworkActionSetConnectionTimeout(ctx context.Context, params *NetworkActionSetConnectionTimeoutParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionSetDefaultUserAgent request
	NetworkActionSetDefaultUserAgent(ctx context.Context, params *NetworkActionSetDefaultUserAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionSetDnsTtlSuccessfulQueries request
	NetworkActionSetDnsTtlSuccessfulQueries(ctx context.Context, params *NetworkActionSetDnsTtlSuccessfulQueriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionSetHttpProxy request
	NetworkActionSetHttpProxy(ctx context.Context, params *NetworkActionSetHttpProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionSetHttpProxyAuthEnabled request
	NetworkActionSetHttpProxyAuthEnabled(ctx context.Context, params *NetworkActionSetHttpProxyAuthEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionSetHttpProxyEnabled request
	NetworkActionSetHttpProxyEnabled(ctx context.Context, params *NetworkActionSetHttpProxyEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionSetHttpProxyExclusionEnabled request
	NetworkActionSetHttpProxyExclusionEnabled(ctx context.Context, params *NetworkActionSetHttpProxyExclusionEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionSetPassThroughEnabled request
	NetworkActionSetPassThroughEnabled(ctx context.Context, params *NetworkActionSetPassThroughEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionSetRateLimitRuleEnabled request
	NetworkActionSetRateLimitRuleEnabled(ctx context.Context, params *NetworkActionSetRateLimitRuleEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionSetRootCaCertValidity request
	NetworkActionSetRootCaCertValidity(ctx context.Context, params *NetworkActionSetRootCaCertValidityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionSetServerCertValidity request
	NetworkActionSetServerCertValidity(ctx context.Context, params *NetworkActionSetServerCertValidityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionSetSocksProxy request
	NetworkActionSetSocksProxy(ctx context.Context, params *NetworkActionSetSocksProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionSetSocksProxyEnabled request
	NetworkActionSetSocksProxyEnabled(ctx context.Context, params *NetworkActionSetSocksProxyEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionSetUseClientCertificate request
	NetworkActionSetUseClientCertificate(ctx context.Context, params *NetworkActionSetUseClientCertificateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkActionSetUseGlobalHttpState request
	NetworkActionSetUseGlobalHttpState(ctx context.Context, params *NetworkActionSetUseGlobalHttpStateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkViewGetAliases request
	NetworkViewGetAliases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkViewGetConnectionTimeout request
	NetworkViewGetConnectionTimeout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkViewGetDefaultUserAgent request
	NetworkViewGetDefaultUserAgent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkViewGetDnsTtlSuccessfulQueries request
	NetworkViewGetDnsTtlSuccessfulQueries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkViewGetHttpProxy request
	NetworkViewGetHttpProxy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkViewGetHttpProxyExclusions request
	NetworkViewGetHttpProxyExclusions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkViewGetLocalServers request
	NetworkViewGetLocalServers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkViewGetPassThroughs request
	NetworkViewGetPassThroughs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkViewGetRateLimitRules request
	NetworkViewGetRateLimitRules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkViewGetRootCaCertValidity request
	NetworkViewGetRootCaCertValidity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkViewGetServerCertValidity request
	NetworkViewGetServerCertValidity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkViewGetSocksProxy request
	NetworkViewGetSocksProxy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkViewIsHttpProxyAuthEnabled request
	NetworkViewIsHttpProxyAuthEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkViewIsHttpProxyEnabled request
	NetworkViewIsHttpProxyEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkViewIsSocksProxyEnabled request
	NetworkViewIsSocksProxyEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkViewIsUseGlobalHttpState request
	NetworkViewIsUseGlobalHttpState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OastActionSetActiveScanService request
	OastActionSetActiveScanService(ctx context.Context, params *OastActionSetActiveScanServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OastActionSetBoastOptions request
	OastActionSetBoastOptions(ctx context.Context, params *OastActionSetBoastOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OastActionSetCallbackOptions request
	OastActionSetCallbackOptions(ctx context.Context, params *OastActionSetCallbackOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OastActionSetDaysToKeepRecords request
	OastActionSetDaysToKeepRecords(ctx context.Context, params *OastActionSetDaysToKeepRecordsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OastActionSetInteractshOptions request
	OastActionSetInteractshOptions(ctx context.Context, params *OastActionSetInteractshOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OastViewGetActiveScanService request
	OastViewGetActiveScanService(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OastViewGetBoastOptions request
	OastViewGetBoastOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OastViewGetCallbackOptions request
	OastViewGetCallbackOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OastViewGetDaysToKeepRecords request
	OastViewGetDaysToKeepRecords(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OastViewGetInteractshOptions request
	OastViewGetInteractshOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OastViewGetServices request
	OastViewGetServices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OpenapiActionImportFile request
	OpenapiActionImportFile(ctx context.Context, params *OpenapiActionImportFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OpenapiActionImportUrl request
	OpenapiActionImportUrl(ctx context.Context, params *OpenapiActionImportUrlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ParamDiggerActionHelloWorld request
	ParamDiggerActionHelloWorld(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ParamsViewParams request
	ParamsViewParams(ctx context.Context, params *ParamsViewParamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PnhActionMonitor request
	PnhActionMonitor(ctx context.Context, params *PnhActionMonitorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PnhActionOracle request
	PnhActionOracle(ctx context.Context, params *PnhActionOracleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PnhActionStartMonitoring request
	PnhActionStartMonitoring(ctx context.Context, params *PnhActionStartMonitoringParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PnhActionStopMonitoring request
	PnhActionStopMonitoring(ctx context.Context, params *PnhActionStopMonitoringParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostmanActionImportFile request
	PostmanActionImportFile(ctx context.Context, params *PostmanActionImportFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostmanActionImportUrl request
	PostmanActionImportUrl(ctx context.Context, params *PostmanActionImportUrlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanActionClearQueue request
	PscanActionClearQueue(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanActionDisableAllScanners request
	PscanActionDisableAllScanners(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanActionDisableAllTags request
	PscanActionDisableAllTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanActionDisableScanners request
	PscanActionDisableScanners(ctx context.Context, params *PscanActionDisableScannersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanActionEnableAllScanners request
	PscanActionEnableAllScanners(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanActionEnableAllTags request
	PscanActionEnableAllTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanActionEnableScanners request
	PscanActionEnableScanners(ctx context.Context, params *PscanActionEnableScannersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanActionSetEnabled request
	PscanActionSetEnabled(ctx context.Context, params *PscanActionSetEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanActionSetMaxAlertsPerRule request
	PscanActionSetMaxAlertsPerRule(ctx context.Context, params *PscanActionSetMaxAlertsPerRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanActionSetScanOnlyInScope request
	PscanActionSetScanOnlyInScope(ctx context.Context, params *PscanActionSetScanOnlyInScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanActionSetScannerAlertThreshold request
	PscanActionSetScannerAlertThreshold(ctx context.Context, params *PscanActionSetScannerAlertThresholdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanViewCurrentRule request
	PscanViewCurrentRule(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanViewCurrentTasks request
	PscanViewCurrentTasks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanViewMaxAlertsPerRule request
	PscanViewMaxAlertsPerRule(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanViewRecordsToScan request
	PscanViewRecordsToScan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanViewScanOnlyInScope request
	PscanViewScanOnlyInScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PscanViewScanners request
	PscanViewScanners(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplacerActionAddRule request
	ReplacerActionAddRule(ctx context.Context, params *ReplacerActionAddRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplacerActionRemoveRule request
	ReplacerActionRemoveRule(ctx context.Context, params *ReplacerActionRemoveRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplacerActionSetEnabled request
	ReplacerActionSetEnabled(ctx context.Context, params *ReplacerActionSetEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplacerViewRules request
	ReplacerViewRules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportsActionGenerate request
	ReportsActionGenerate(ctx context.Context, params *ReportsActionGenerateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportsViewTemplateDetails request
	ReportsViewTemplateDetails(ctx context.Context, params *ReportsViewTemplateDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportsViewTemplates request
	ReportsViewTemplates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetestActionRetest request
	RetestActionRetest(ctx context.Context, params *RetestActionRetestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevealActionSetReveal request
	RevealActionSetReveal(ctx context.Context, params *RevealActionSetRevealParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevealViewReveal request
	RevealViewReveal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevisitActionRevisitSiteOff request
	RevisitActionRevisitSiteOff(ctx context.Context, params *RevisitActionRevisitSiteOffParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevisitActionRevisitSiteOn request
	RevisitActionRevisitSiteOn(ctx context.Context, params *RevisitActionRevisitSiteOnParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevisitViewRevisitList request
	RevisitViewRevisitList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleConfigActionResetAllRuleConfigValues request
	RuleConfigActionResetAllRuleConfigValues(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleConfigActionResetRuleConfigValue request
	RuleConfigActionResetRuleConfigValue(ctx context.Context, params *RuleConfigActionResetRuleConfigValueParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleConfigActionSetRuleConfigValue request
	RuleConfigActionSetRuleConfigValue(ctx context.Context, params *RuleConfigActionSetRuleConfigValueParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleConfigViewAllRuleConfigs request
	RuleConfigViewAllRuleConfigs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleConfigViewRuleConfigValue request
	RuleConfigViewRuleConfigValue(ctx context.Context, params *RuleConfigViewRuleConfigValueParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptActionClearGlobalCustomVar request
	ScriptActionClearGlobalCustomVar(ctx context.Context, params *ScriptActionClearGlobalCustomVarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptActionClearGlobalVar request
	ScriptActionClearGlobalVar(ctx context.Context, params *ScriptActionClearGlobalVarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptActionClearGlobalVars request
	ScriptActionClearGlobalVars(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptActionClearScriptCustomVar request
	ScriptActionClearScriptCustomVar(ctx context.Context, params *ScriptActionClearScriptCustomVarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptActionClearScriptVar request
	ScriptActionClearScriptVar(ctx context.Context, params *ScriptActionClearScriptVarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptActionClearScriptVars request
	ScriptActionClearScriptVars(ctx context.Context, params *ScriptActionClearScriptVarsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptActionDisable request
	ScriptActionDisable(ctx context.Context, params *ScriptActionDisableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptActionEnable request
	ScriptActionEnable(ctx context.Context, params *ScriptActionEnableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptActionLoad request
	ScriptActionLoad(ctx context.Context, params *ScriptActionLoadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptActionRemove request
	ScriptActionRemove(ctx context.Context, params *ScriptActionRemoveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptActionRunStandAloneScript request
	ScriptActionRunStandAloneScript(ctx context.Context, params *ScriptActionRunStandAloneScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptActionSetGlobalVar request
	ScriptActionSetGlobalVar(ctx context.Context, params *ScriptActionSetGlobalVarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptActionSetScriptVar request
	ScriptActionSetScriptVar(ctx context.Context, params *ScriptActionSetScriptVarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptViewGlobalCustomVar request
	ScriptViewGlobalCustomVar(ctx context.Context, params *ScriptViewGlobalCustomVarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptViewGlobalCustomVars request
	ScriptViewGlobalCustomVars(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptViewGlobalVar request
	ScriptViewGlobalVar(ctx context.Context, params *ScriptViewGlobalVarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptViewGlobalVars request
	ScriptViewGlobalVars(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptViewListEngines request
	ScriptViewListEngines(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptViewListScripts request
	ScriptViewListScripts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptViewListTypes request
	ScriptViewListTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptViewScriptCustomVar request
	ScriptViewScriptCustomVar(ctx context.Context, params *ScriptViewScriptCustomVarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptViewScriptCustomVars request
	ScriptViewScriptCustomVars(ctx context.Context, params *ScriptViewScriptCustomVarsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptViewScriptVar request
	ScriptViewScriptVar(ctx context.Context, params *ScriptViewScriptVarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScriptViewScriptVars request
	ScriptViewScriptVars(ctx context.Context, params *ScriptViewScriptVarsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchViewMessagesByHeaderRegex request
	SearchViewMessagesByHeaderRegex(ctx context.Context, params *SearchViewMessagesByHeaderRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchViewMessagesByNoteRegex request
	SearchViewMessagesByNoteRegex(ctx context.Context, params *SearchViewMessagesByNoteRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchViewMessagesByRequestRegex request
	SearchViewMessagesByRequestRegex(ctx context.Context, params *SearchViewMessagesByRequestRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchViewMessagesByResponseRegex request
	SearchViewMessagesByResponseRegex(ctx context.Context, params *SearchViewMessagesByResponseRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchViewMessagesByTagRegex request
	SearchViewMessagesByTagRegex(ctx context.Context, params *SearchViewMessagesByTagRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchViewMessagesByUrlRegex request
	SearchViewMessagesByUrlRegex(ctx context.Context, params *SearchViewMessagesByUrlRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchViewUrlsByHeaderRegex request
	SearchViewUrlsByHeaderRegex(ctx context.Context, params *SearchViewUrlsByHeaderRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchViewUrlsByNoteRegex request
	SearchViewUrlsByNoteRegex(ctx context.Context, params *SearchViewUrlsByNoteRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchViewUrlsByRequestRegex request
	SearchViewUrlsByRequestRegex(ctx context.Context, params *SearchViewUrlsByRequestRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchViewUrlsByResponseRegex request
	SearchViewUrlsByResponseRegex(ctx context.Context, params *SearchViewUrlsByResponseRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchViewUrlsByTagRegex request
	SearchViewUrlsByTagRegex(ctx context.Context, params *SearchViewUrlsByTagRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchViewUrlsByUrlRegex request
	SearchViewUrlsByUrlRegex(ctx context.Context, params *SearchViewUrlsByUrlRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumActionAddBrowserArgument request
	SeleniumActionAddBrowserArgument(ctx context.Context, params *SeleniumActionAddBrowserArgumentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumActionLaunchBrowser request
	SeleniumActionLaunchBrowser(ctx context.Context, params *SeleniumActionLaunchBrowserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumActionRemoveBrowserArgument request
	SeleniumActionRemoveBrowserArgument(ctx context.Context, params *SeleniumActionRemoveBrowserArgumentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumActionSetBrowserArgumentEnabled request
	SeleniumActionSetBrowserArgumentEnabled(ctx context.Context, params *SeleniumActionSetBrowserArgumentEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumActionSetOptionChromeBinaryPath request
	SeleniumActionSetOptionChromeBinaryPath(ctx context.Context, params *SeleniumActionSetOptionChromeBinaryPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumActionSetOptionChromeDriverPath request
	SeleniumActionSetOptionChromeDriverPath(ctx context.Context, params *SeleniumActionSetOptionChromeDriverPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumActionSetOptionFirefoxBinaryPath request
	SeleniumActionSetOptionFirefoxBinaryPath(ctx context.Context, params *SeleniumActionSetOptionFirefoxBinaryPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumActionSetOptionFirefoxDefaultProfile request
	SeleniumActionSetOptionFirefoxDefaultProfile(ctx context.Context, params *SeleniumActionSetOptionFirefoxDefaultProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumActionSetOptionFirefoxDriverPath request
	SeleniumActionSetOptionFirefoxDriverPath(ctx context.Context, params *SeleniumActionSetOptionFirefoxDriverPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumActionSetOptionIeDriverPath request
	SeleniumActionSetOptionIeDriverPath(ctx context.Context, params *SeleniumActionSetOptionIeDriverPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumActionSetOptionLastDirectory request
	SeleniumActionSetOptionLastDirectory(ctx context.Context, params *SeleniumActionSetOptionLastDirectoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumActionSetOptionPhantomJsBinaryPath request
	SeleniumActionSetOptionPhantomJsBinaryPath(ctx context.Context, params *SeleniumActionSetOptionPhantomJsBinaryPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumViewGetBrowserArguments request
	SeleniumViewGetBrowserArguments(ctx context.Context, params *SeleniumViewGetBrowserArgumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumViewOptionBrowserExtensions request
	SeleniumViewOptionBrowserExtensions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumViewOptionChromeBinaryPath request
	SeleniumViewOptionChromeBinaryPath(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumViewOptionChromeDriverPath request
	SeleniumViewOptionChromeDriverPath(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumViewOptionFirefoxBinaryPath request
	SeleniumViewOptionFirefoxBinaryPath(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumViewOptionFirefoxDefaultProfile request
	SeleniumViewOptionFirefoxDefaultProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumViewOptionFirefoxDriverPath request
	SeleniumViewOptionFirefoxDriverPath(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumViewOptionIeDriverPath request
	SeleniumViewOptionIeDriverPath(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumViewOptionLastDirectory request
	SeleniumViewOptionLastDirectory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeleniumViewOptionPhantomJsBinaryPath request
	SeleniumViewOptionPhantomJsBinaryPath(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SessionManagementActionSetSessionManagementMethod request
	SessionManagementActionSetSessionManagementMethod(ctx context.Context, params *SessionManagementActionSetSessionManagementMethodParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SessionManagementViewGetSessionManagementMethod request
	SessionManagementViewGetSessionManagementMethod(ctx context.Context, params *SessionManagementViewGetSessionManagementMethodParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SessionManagementViewGetSessionManagementMethodConfigParams request
	SessionManagementViewGetSessionManagementMethodConfigParams(ctx context.Context, params *SessionManagementViewGetSessionManagementMethodConfigParamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SessionManagementViewGetSupportedSessionManagementMethods request
	SessionManagementViewGetSupportedSessionManagementMethods(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SoapActionImportFile request
	SoapActionImportFile(ctx context.Context, params *SoapActionImportFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SoapActionImportUrl request
	SoapActionImportUrl(ctx context.Context, params *SoapActionImportUrlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionAddDomainAlwaysInScope request
	SpiderActionAddDomainAlwaysInScope(ctx context.Context, params *SpiderActionAddDomainAlwaysInScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionClearExcludedFromScan request
	SpiderActionClearExcludedFromScan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionDisableAllDomainsAlwaysInScope request
	SpiderActionDisableAllDomainsAlwaysInScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionEnableAllDomainsAlwaysInScope request
	SpiderActionEnableAllDomainsAlwaysInScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionExcludeFromScan request
	SpiderActionExcludeFromScan(ctx context.Context, params *SpiderActionExcludeFromScanParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionModifyDomainAlwaysInScope request
	SpiderActionModifyDomainAlwaysInScope(ctx context.Context, params *SpiderActionModifyDomainAlwaysInScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionPause request
	SpiderActionPause(ctx context.Context, params *SpiderActionPauseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionPauseAllScans request
	SpiderActionPauseAllScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionRemoveAllScans request
	SpiderActionRemoveAllScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionRemoveDomainAlwaysInScope request
	SpiderActionRemoveDomainAlwaysInScope(ctx context.Context, params *SpiderActionRemoveDomainAlwaysInScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionRemoveScan request
	SpiderActionRemoveScan(ctx context.Context, params *SpiderActionRemoveScanParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionResume request
	SpiderActionResume(ctx context.Context, params *SpiderActionResumeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionResumeAllScans request
	SpiderActionResumeAllScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionScan request
	SpiderActionScan(ctx context.Context, params *SpiderActionScanParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionScanAsUser request
	SpiderActionScanAsUser(ctx context.Context, params *SpiderActionScanAsUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionAcceptCookies request
	SpiderActionSetOptionAcceptCookies(ctx context.Context, params *SpiderActionSetOptionAcceptCookiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionHandleODataParametersVisited request
	SpiderActionSetOptionHandleODataParametersVisited(ctx context.Context, params *SpiderActionSetOptionHandleODataParametersVisitedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionHandleParameters request
	SpiderActionSetOptionHandleParameters(ctx context.Context, params *SpiderActionSetOptionHandleParametersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionLogoutAvoidance request
	SpiderActionSetOptionLogoutAvoidance(ctx context.Context, params *SpiderActionSetOptionLogoutAvoidanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionMaxChildren request
	SpiderActionSetOptionMaxChildren(ctx context.Context, params *SpiderActionSetOptionMaxChildrenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionMaxDepth request
	SpiderActionSetOptionMaxDepth(ctx context.Context, params *SpiderActionSetOptionMaxDepthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionMaxDuration request
	SpiderActionSetOptionMaxDuration(ctx context.Context, params *SpiderActionSetOptionMaxDurationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionMaxParseSizeBytes request
	SpiderActionSetOptionMaxParseSizeBytes(ctx context.Context, params *SpiderActionSetOptionMaxParseSizeBytesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionMaxScansInUI request
	SpiderActionSetOptionMaxScansInUI(ctx context.Context, params *SpiderActionSetOptionMaxScansInUIParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionParseComments request
	SpiderActionSetOptionParseComments(ctx context.Context, params *SpiderActionSetOptionParseCommentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionParseDsStore request
	SpiderActionSetOptionParseDsStore(ctx context.Context, params *SpiderActionSetOptionParseDsStoreParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionParseGit request
	SpiderActionSetOptionParseGit(ctx context.Context, params *SpiderActionSetOptionParseGitParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionParseRobotsTxt request
	SpiderActionSetOptionParseRobotsTxt(ctx context.Context, params *SpiderActionSetOptionParseRobotsTxtParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionParseSVNEntries request
	SpiderActionSetOptionParseSVNEntries(ctx context.Context, params *SpiderActionSetOptionParseSVNEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionParseSitemapXml request
	SpiderActionSetOptionParseSitemapXml(ctx context.Context, params *SpiderActionSetOptionParseSitemapXmlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionPostForm request
	SpiderActionSetOptionPostForm(ctx context.Context, params *SpiderActionSetOptionPostFormParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionProcessForm request
	SpiderActionSetOptionProcessForm(ctx context.Context, params *SpiderActionSetOptionProcessFormParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionSendRefererHeader request
	SpiderActionSetOptionSendRefererHeader(ctx context.Context, params *SpiderActionSetOptionSendRefererHeaderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionShowAdvancedDialog request
	SpiderActionSetOptionShowAdvancedDialog(ctx context.Context, params *SpiderActionSetOptionShowAdvancedDialogParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionSkipURLString request
	SpiderActionSetOptionSkipURLString(ctx context.Context, params *SpiderActionSetOptionSkipURLStringParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionThreadCount request
	SpiderActionSetOptionThreadCount(ctx context.Context, params *SpiderActionSetOptionThreadCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionSetOptionUserAgent request
	SpiderActionSetOptionUserAgent(ctx context.Context, params *SpiderActionSetOptionUserAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionStop request
	SpiderActionStop(ctx context.Context, params *SpiderActionStopParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderActionStopAllScans request
	SpiderActionStopAllScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewAddedNodes request
	SpiderViewAddedNodes(ctx context.Context, params *SpiderViewAddedNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewAllUrls request
	SpiderViewAllUrls(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewDomainsAlwaysInScope request
	SpiderViewDomainsAlwaysInScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewExcludedFromScan request
	SpiderViewExcludedFromScan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewFullResults request
	SpiderViewFullResults(ctx context.Context, params *SpiderViewFullResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionAcceptCookies request
	SpiderViewOptionAcceptCookies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionDomainsAlwaysInScope request
	SpiderViewOptionDomainsAlwaysInScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionDomainsAlwaysInScopeEnabled request
	SpiderViewOptionDomainsAlwaysInScopeEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionHandleODataParametersVisited request
	SpiderViewOptionHandleODataParametersVisited(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionHandleParameters request
	SpiderViewOptionHandleParameters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionLogoutAvoidance request
	SpiderViewOptionLogoutAvoidance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionMaxChildren request
	SpiderViewOptionMaxChildren(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionMaxDepth request
	SpiderViewOptionMaxDepth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionMaxDuration request
	SpiderViewOptionMaxDuration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionMaxParseSizeBytes request
	SpiderViewOptionMaxParseSizeBytes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionMaxScansInUI request
	SpiderViewOptionMaxScansInUI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionParseComments request
	SpiderViewOptionParseComments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionParseDsStore request
	SpiderViewOptionParseDsStore(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionParseGit request
	SpiderViewOptionParseGit(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionParseRobotsTxt request
	SpiderViewOptionParseRobotsTxt(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionParseSVNEntries request
	SpiderViewOptionParseSVNEntries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionParseSitemapXml request
	SpiderViewOptionParseSitemapXml(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionPostForm request
	SpiderViewOptionPostForm(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionProcessForm request
	SpiderViewOptionProcessForm(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionSendRefererHeader request
	SpiderViewOptionSendRefererHeader(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionShowAdvancedDialog request
	SpiderViewOptionShowAdvancedDialog(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionSkipURLString request
	SpiderViewOptionSkipURLString(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionThreadCount request
	SpiderViewOptionThreadCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewOptionUserAgent request
	SpiderViewOptionUserAgent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewResults request
	SpiderViewResults(ctx context.Context, params *SpiderViewResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewScans request
	SpiderViewScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpiderViewStatus request
	SpiderViewStatus(ctx context.Context, params *SpiderViewStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatsActionClearStats request
	StatsActionClearStats(ctx context.Context, params *StatsActionClearStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatsActionSetOptionInMemoryEnabled request
	StatsActionSetOptionInMemoryEnabled(ctx context.Context, params *StatsActionSetOptionInMemoryEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatsActionSetOptionStatsdHost request
	StatsActionSetOptionStatsdHost(ctx context.Context, params *StatsActionSetOptionStatsdHostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatsActionSetOptionStatsdPort request
	StatsActionSetOptionStatsdPort(ctx context.Context, params *StatsActionSetOptionStatsdPortParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatsActionSetOptionStatsdPrefix request
	StatsActionSetOptionStatsdPrefix(ctx context.Context, params *StatsActionSetOptionStatsdPrefixParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatsViewAllSitesStats request
	StatsViewAllSitesStats(ctx context.Context, params *StatsViewAllSitesStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatsViewOptionInMemoryEnabled request
	StatsViewOptionInMemoryEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatsViewOptionStatsdEnabled request
	StatsViewOptionStatsdEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatsViewOptionStatsdHost request
	StatsViewOptionStatsdHost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatsViewOptionStatsdPort request
	StatsViewOptionStatsdPort(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatsViewOptionStatsdPrefix request
	StatsViewOptionStatsdPrefix(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatsViewSiteStats request
	StatsViewSiteStats(ctx context.Context, params *StatsViewSiteStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatsViewStats request
	StatsViewStats(ctx context.Context, params *StatsViewStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersActionAuthenticateAsUser request
	UsersActionAuthenticateAsUser(ctx context.Context, params *UsersActionAuthenticateAsUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersActionNewUser request
	UsersActionNewUser(ctx context.Context, params *UsersActionNewUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersActionPollAsUser request
	UsersActionPollAsUser(ctx context.Context, params *UsersActionPollAsUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersActionRemoveUser request
	UsersActionRemoveUser(ctx context.Context, params *UsersActionRemoveUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersActionSetAuthenticationCredentials request
	UsersActionSetAuthenticationCredentials(ctx context.Context, params *UsersActionSetAuthenticationCredentialsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersActionSetAuthenticationState request
	UsersActionSetAuthenticationState(ctx context.Context, params *UsersActionSetAuthenticationStateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersActionSetCookie request
	UsersActionSetCookie(ctx context.Context, params *UsersActionSetCookieParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersActionSetUserEnabled request
	UsersActionSetUserEnabled(ctx context.Context, params *UsersActionSetUserEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersActionSetUserName request
	UsersActionSetUserName(ctx context.Context, params *UsersActionSetUserNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersViewGetAuthenticationCredentials request
	UsersViewGetAuthenticationCredentials(ctx context.Context, params *UsersViewGetAuthenticationCredentialsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersViewGetAuthenticationCredentialsConfigParams request
	UsersViewGetAuthenticationCredentialsConfigParams(ctx context.Context, params *UsersViewGetAuthenticationCredentialsConfigParamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersViewGetAuthenticationSession request
	UsersViewGetAuthenticationSession(ctx context.Context, params *UsersViewGetAuthenticationSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersViewGetAuthenticationState request
	UsersViewGetAuthenticationState(ctx context.Context, params *UsersViewGetAuthenticationStateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersViewGetUserById request
	UsersViewGetUserById(ctx context.Context, params *UsersViewGetUserByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersViewUsersList request
	UsersViewUsersList(ctx context.Context, params *UsersViewUsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WappalyzerViewListAll request
	WappalyzerViewListAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WappalyzerViewListSite request
	WappalyzerViewListSite(ctx context.Context, params *WappalyzerViewListSiteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WappalyzerViewListSites request
	WappalyzerViewListSites(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebsocketActionSendTextMessage request
	WebsocketActionSendTextMessage(ctx context.Context, params *WebsocketActionSendTextMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebsocketActionSetBreakTextMessage request
	WebsocketActionSetBreakTextMessage(ctx context.Context, params *WebsocketActionSetBreakTextMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebsocketViewBreakTextMessage request
	WebsocketViewBreakTextMessage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebsocketViewChannels request
	WebsocketViewChannels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebsocketViewMessage request
	WebsocketViewMessage(ctx context.Context, params *WebsocketViewMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebsocketViewMessages request
	WebsocketViewMessages(ctx context.Context, params *WebsocketViewMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcsrfOtherGenForm request
	AcsrfOtherGenForm(ctx context.Context, params *AcsrfOtherGenFormParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreOtherFileDownload request
	CoreOtherFileDownload(ctx context.Context, params *CoreOtherFileDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreOtherFileUpload request
	CoreOtherFileUpload(ctx context.Context, params *CoreOtherFileUploadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreOtherHtmlreport request
	CoreOtherHtmlreport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreOtherJsonreport request
	CoreOtherJsonreport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreOtherMdreport request
	CoreOtherMdreport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreOtherMessageHar request
	CoreOtherMessageHar(ctx context.Context, params *CoreOtherMessageHarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreOtherMessagesHar request
	CoreOtherMessagesHar(ctx context.Context, params *CoreOtherMessagesHarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreOtherMessagesHarById request
	CoreOtherMessagesHarById(ctx context.Context, params *CoreOtherMessagesHarByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreOtherProxyPac request
	CoreOtherProxyPac(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreOtherRootcert request
	CoreOtherRootcert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreOtherSendHarRequest request
	CoreOtherSendHarRequest(ctx context.Context, params *CoreOtherSendHarRequestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreOtherSetproxy request
	CoreOtherSetproxy(ctx context.Context, params *CoreOtherSetproxyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CoreOtherXmlreport request
	CoreOtherXmlreport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevOtherOpenapi request
	DevOtherOpenapi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EximOtherExportHar request
	EximOtherExportHar(ctx context.Context, params *EximOtherExportHarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EximOtherExportHarById request
	EximOtherExportHarById(ctx context.Context, params *EximOtherExportHarByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EximOtherSendHarRequest request
	EximOtherSendHarRequest(ctx context.Context, params *EximOtherSendHarRequestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HudOtherChangesInHtml request
	HudOtherChangesInHtml(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeyboardOtherCheatsheetActionOrder request
	KeyboardOtherCheatsheetActionOrder(ctx context.Context, params *KeyboardOtherCheatsheetActionOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeyboardOtherCheatsheetKeyOrder request
	KeyboardOtherCheatsheetKeyOrder(ctx context.Context, params *KeyboardOtherCheatsheetKeyOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkOtherProxyPac request
	NetworkOtherProxyPac(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkOtherRootCaCert request
	NetworkOtherRootCaCert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkOtherSetProxy request
	NetworkOtherSetProxy(ctx context.Context, params *NetworkOtherSetProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PnhOtherFxPnhXpi request
	PnhOtherFxPnhXpi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PnhOtherManifest request
	PnhOtherManifest(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PnhOtherPnh request
	PnhOtherPnh(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PnhOtherService request
	PnhOtherService(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuickstartlaunchOtherStartPage request
	QuickstartlaunchOtherStartPage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchOtherHarByHeaderRegex request
	SearchOtherHarByHeaderRegex(ctx context.Context, params *SearchOtherHarByHeaderRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchOtherHarByNoteRegex request
	SearchOtherHarByNoteRegex(ctx context.Context, params *SearchOtherHarByNoteRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchOtherHarByRequestRegex request
	SearchOtherHarByRequestRegex(ctx context.Context, params *SearchOtherHarByRequestRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchOtherHarByResponseRegex request
	SearchOtherHarByResponseRegex(ctx context.Context, params *SearchOtherHarByResponseRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchOtherHarByTagRegex request
	SearchOtherHarByTagRegex(ctx context.Context, params *SearchOtherHarByTagRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchOtherHarByUrlRegex request
	SearchOtherHarByUrlRegex(ctx context.Context, params *SearchOtherHarByUrlRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AccessControlActionScan(ctx context.Context, params *AccessControlActionScanParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessControlActionScanRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessControlActionWriteHTMLreport(ctx context.Context, params *AccessControlActionWriteHTMLreportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessControlActionWriteHTMLreportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessControlViewGetScanProgress(ctx context.Context, params *AccessControlViewGetScanProgressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessControlViewGetScanProgressRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessControlViewGetScanStatus(ctx context.Context, params *AccessControlViewGetScanStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessControlViewGetScanStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcsrfActionAddOptionToken(ctx context.Context, params *AcsrfActionAddOptionTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcsrfActionAddOptionTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcsrfActionRemoveOptionToken(ctx context.Context, params *AcsrfActionRemoveOptionTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcsrfActionRemoveOptionTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcsrfActionSetOptionPartialMatchingEnabled(ctx context.Context, params *AcsrfActionSetOptionPartialMatchingEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcsrfActionSetOptionPartialMatchingEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcsrfViewOptionPartialMatchingEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcsrfViewOptionPartialMatchingEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcsrfViewOptionTokensNames(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcsrfViewOptionTokensNamesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionAddAllowedResource(ctx context.Context, params *AjaxSpiderActionAddAllowedResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionAddAllowedResourceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionAddExcludedElement(ctx context.Context, params *AjaxSpiderActionAddExcludedElementParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionAddExcludedElementRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionModifyExcludedElement(ctx context.Context, params *AjaxSpiderActionModifyExcludedElementParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionModifyExcludedElementRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionRemoveAllowedResource(ctx context.Context, params *AjaxSpiderActionRemoveAllowedResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionRemoveAllowedResourceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionRemoveExcludedElement(ctx context.Context, params *AjaxSpiderActionRemoveExcludedElementParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionRemoveExcludedElementRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionScan(ctx context.Context, params *AjaxSpiderActionScanParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionScanRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionScanAsUser(ctx context.Context, params *AjaxSpiderActionScanAsUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionScanAsUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionSetEnabledAllowedResource(ctx context.Context, params *AjaxSpiderActionSetEnabledAllowedResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionSetEnabledAllowedResourceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionSetOptionBrowserId(ctx context.Context, params *AjaxSpiderActionSetOptionBrowserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionSetOptionBrowserIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionSetOptionClickDefaultElems(ctx context.Context, params *AjaxSpiderActionSetOptionClickDefaultElemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionSetOptionClickDefaultElemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionSetOptionClickElemsOnce(ctx context.Context, params *AjaxSpiderActionSetOptionClickElemsOnceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionSetOptionClickElemsOnceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionSetOptionEnableExtensions(ctx context.Context, params *AjaxSpiderActionSetOptionEnableExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionSetOptionEnableExtensionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionSetOptionEventWait(ctx context.Context, params *AjaxSpiderActionSetOptionEventWaitParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionSetOptionEventWaitRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionSetOptionLogoutAvoidance(ctx context.Context, params *AjaxSpiderActionSetOptionLogoutAvoidanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionSetOptionLogoutAvoidanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionSetOptionMaxCrawlDepth(ctx context.Context, params *AjaxSpiderActionSetOptionMaxCrawlDepthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionSetOptionMaxCrawlDepthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionSetOptionMaxCrawlStates(ctx context.Context, params *AjaxSpiderActionSetOptionMaxCrawlStatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionSetOptionMaxCrawlStatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionSetOptionMaxDuration(ctx context.Context, params *AjaxSpiderActionSetOptionMaxDurationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionSetOptionMaxDurationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionSetOptionNumberOfBrowsers(ctx context.Context, params *AjaxSpiderActionSetOptionNumberOfBrowsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionSetOptionNumberOfBrowsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionSetOptionRandomInputs(ctx context.Context, params *AjaxSpiderActionSetOptionRandomInputsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionSetOptionRandomInputsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionSetOptionReloadWait(ctx context.Context, params *AjaxSpiderActionSetOptionReloadWaitParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionSetOptionReloadWaitRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionSetOptionScopeCheck(ctx context.Context, params *AjaxSpiderActionSetOptionScopeCheckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionSetOptionScopeCheckRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderActionStop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderActionStopRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewAllowedResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewAllowedResourcesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewExcludedElements(ctx context.Context, params *AjaxSpiderViewExcludedElementsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewExcludedElementsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewFullResults(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewFullResultsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewNumberOfResults(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewNumberOfResultsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewOptionBrowserId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewOptionBrowserIdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewOptionClickDefaultElems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewOptionClickDefaultElemsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewOptionClickElemsOnce(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewOptionClickElemsOnceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewOptionEnableExtensions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewOptionEnableExtensionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewOptionEventWait(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewOptionEventWaitRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewOptionLogoutAvoidance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewOptionLogoutAvoidanceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewOptionMaxCrawlDepth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewOptionMaxCrawlDepthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewOptionMaxCrawlStates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewOptionMaxCrawlStatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewOptionMaxDuration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewOptionMaxDurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewOptionNumberOfBrowsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewOptionNumberOfBrowsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewOptionRandomInputs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewOptionRandomInputsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewOptionReloadWait(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewOptionReloadWaitRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewOptionScopeCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewOptionScopeCheckRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewResults(ctx context.Context, params *AjaxSpiderViewResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewResultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AjaxSpiderViewStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAjaxSpiderViewStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertActionAddAlert(ctx context.Context, params *AlertActionAddAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertActionAddAlertRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertActionDeleteAlert(ctx context.Context, params *AlertActionDeleteAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertActionDeleteAlertRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertActionDeleteAlerts(ctx context.Context, params *AlertActionDeleteAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertActionDeleteAlertsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertActionDeleteAllAlerts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertActionDeleteAllAlertsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertActionUpdateAlert(ctx context.Context, params *AlertActionUpdateAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertActionUpdateAlertRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertActionUpdateAlertsConfidence(ctx context.Context, params *AlertActionUpdateAlertsConfidenceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertActionUpdateAlertsConfidenceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertActionUpdateAlertsRisk(ctx context.Context, params *AlertActionUpdateAlertsRiskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertActionUpdateAlertsRiskRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertViewAlert(ctx context.Context, params *AlertViewAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertViewAlertRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertViewAlertCountsByRisk(ctx context.Context, params *AlertViewAlertCountsByRiskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertViewAlertCountsByRiskRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertViewAlerts(ctx context.Context, params *AlertViewAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertViewAlertsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertViewAlertsByRisk(ctx context.Context, params *AlertViewAlertsByRiskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertViewAlertsByRiskRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertViewAlertsSummary(ctx context.Context, params *AlertViewAlertsSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertViewAlertsSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertViewNumberOfAlerts(ctx context.Context, params *AlertViewNumberOfAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertViewNumberOfAlertsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertFilterActionAddAlertFilter(ctx context.Context, params *AlertFilterActionAddAlertFilterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertFilterActionAddAlertFilterRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertFilterActionAddGlobalAlertFilter(ctx context.Context, params *AlertFilterActionAddGlobalAlertFilterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertFilterActionAddGlobalAlertFilterRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertFilterActionApplyAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertFilterActionApplyAllRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertFilterActionApplyContext(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertFilterActionApplyContextRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertFilterActionApplyGlobal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertFilterActionApplyGlobalRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertFilterActionRemoveAlertFilter(ctx context.Context, params *AlertFilterActionRemoveAlertFilterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertFilterActionRemoveAlertFilterRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertFilterActionRemoveGlobalAlertFilter(ctx context.Context, params *AlertFilterActionRemoveGlobalAlertFilterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertFilterActionRemoveGlobalAlertFilterRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertFilterActionTestAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertFilterActionTestAllRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertFilterActionTestContext(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertFilterActionTestContextRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertFilterActionTestGlobal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertFilterActionTestGlobalRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertFilterViewAlertFilterList(ctx context.Context, params *AlertFilterViewAlertFilterListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertFilterViewAlertFilterListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertFilterViewGlobalAlertFilterList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertFilterViewGlobalAlertFilterListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionAddExcludedParam(ctx context.Context, params *AscanActionAddExcludedParamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionAddExcludedParamRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionAddScanPolicy(ctx context.Context, params *AscanActionAddScanPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionAddScanPolicyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionClearExcludedFromScan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionClearExcludedFromScanRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionDisableAllScanners(ctx context.Context, params *AscanActionDisableAllScannersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionDisableAllScannersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionDisableScanners(ctx context.Context, params *AscanActionDisableScannersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionDisableScannersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionEnableAllScanners(ctx context.Context, params *AscanActionEnableAllScannersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionEnableAllScannersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionEnableScanners(ctx context.Context, params *AscanActionEnableScannersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionEnableScannersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionExcludeFromScan(ctx context.Context, params *AscanActionExcludeFromScanParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionExcludeFromScanRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionImportScanPolicy(ctx context.Context, params *AscanActionImportScanPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionImportScanPolicyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionModifyExcludedParam(ctx context.Context, params *AscanActionModifyExcludedParamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionModifyExcludedParamRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionPause(ctx context.Context, params *AscanActionPauseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionPauseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionPauseAllScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionPauseAllScansRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionRemoveAllScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionRemoveAllScansRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionRemoveExcludedParam(ctx context.Context, params *AscanActionRemoveExcludedParamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionRemoveExcludedParamRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionRemoveScan(ctx context.Context, params *AscanActionRemoveScanParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionRemoveScanRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionRemoveScanPolicy(ctx context.Context, params *AscanActionRemoveScanPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionRemoveScanPolicyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionResume(ctx context.Context, params *AscanActionResumeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionResumeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionResumeAllScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionResumeAllScansRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionScan(ctx context.Context, params *AscanActionScanParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionScanRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionScanAsUser(ctx context.Context, params *AscanActionScanAsUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionScanAsUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetEnabledPolicies(ctx context.Context, params *AscanActionSetEnabledPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetEnabledPoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionAddQueryParam(ctx context.Context, params *AscanActionSetOptionAddQueryParamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionAddQueryParamRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionAllowAttackOnStart(ctx context.Context, params *AscanActionSetOptionAllowAttackOnStartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionAllowAttackOnStartRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionAttackPolicy(ctx context.Context, params *AscanActionSetOptionAttackPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionAttackPolicyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionDefaultPolicy(ctx context.Context, params *AscanActionSetOptionDefaultPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionDefaultPolicyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionDelayInMs(ctx context.Context, params *AscanActionSetOptionDelayInMsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionDelayInMsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionEncodeCookieValues(ctx context.Context, params *AscanActionSetOptionEncodeCookieValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionEncodeCookieValuesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionHandleAntiCSRFTokens(ctx context.Context, params *AscanActionSetOptionHandleAntiCSRFTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionHandleAntiCSRFTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionHostPerScan(ctx context.Context, params *AscanActionSetOptionHostPerScanParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionHostPerScanRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionInjectPluginIdInHeader(ctx context.Context, params *AscanActionSetOptionInjectPluginIdInHeaderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionInjectPluginIdInHeaderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionMaxAlertsPerRule(ctx context.Context, params *AscanActionSetOptionMaxAlertsPerRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionMaxAlertsPerRuleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionMaxChartTimeInMins(ctx context.Context, params *AscanActionSetOptionMaxChartTimeInMinsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionMaxChartTimeInMinsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionMaxResultsToList(ctx context.Context, params *AscanActionSetOptionMaxResultsToListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionMaxResultsToListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionMaxRuleDurationInMins(ctx context.Context, params *AscanActionSetOptionMaxRuleDurationInMinsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionMaxRuleDurationInMinsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionMaxScanDurationInMins(ctx context.Context, params *AscanActionSetOptionMaxScanDurationInMinsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionMaxScanDurationInMinsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionMaxScansInUI(ctx context.Context, params *AscanActionSetOptionMaxScansInUIParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionMaxScansInUIRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionPromptInAttackMode(ctx context.Context, params *AscanActionSetOptionPromptInAttackModeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionPromptInAttackModeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionPromptToClearFinishedScans(ctx context.Context, params *AscanActionSetOptionPromptToClearFinishedScansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionPromptToClearFinishedScansRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionRescanInAttackMode(ctx context.Context, params *AscanActionSetOptionRescanInAttackModeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionRescanInAttackModeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionScanHeadersAllRequests(ctx context.Context, params *AscanActionSetOptionScanHeadersAllRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionScanHeadersAllRequestsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionScanNullJsonValues(ctx context.Context, params *AscanActionSetOptionScanNullJsonValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionScanNullJsonValuesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionShowAdvancedDialog(ctx context.Context, params *AscanActionSetOptionShowAdvancedDialogParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionShowAdvancedDialogRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionTargetParamsEnabledRPC(ctx context.Context, params *AscanActionSetOptionTargetParamsEnabledRPCParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionTargetParamsEnabledRPCRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionTargetParamsInjectable(ctx context.Context, params *AscanActionSetOptionTargetParamsInjectableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionTargetParamsInjectableRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetOptionThreadPerHost(ctx context.Context, params *AscanActionSetOptionThreadPerHostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetOptionThreadPerHostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetPolicyAlertThreshold(ctx context.Context, params *AscanActionSetPolicyAlertThresholdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetPolicyAlertThresholdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetPolicyAttackStrength(ctx context.Context, params *AscanActionSetPolicyAttackStrengthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetPolicyAttackStrengthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetScannerAlertThreshold(ctx context.Context, params *AscanActionSetScannerAlertThresholdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetScannerAlertThresholdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSetScannerAttackStrength(ctx context.Context, params *AscanActionSetScannerAttackStrengthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSetScannerAttackStrengthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionSkipScanner(ctx context.Context, params *AscanActionSkipScannerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionSkipScannerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionStop(ctx context.Context, params *AscanActionStopParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionStopRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionStopAllScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionStopAllScansRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanActionUpdateScanPolicy(ctx context.Context, params *AscanActionUpdateScanPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanActionUpdateScanPolicyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewAlertsIds(ctx context.Context, params *AscanViewAlertsIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewAlertsIdsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewAttackModeQueue(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewAttackModeQueueRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewExcludedFromScan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewExcludedFromScanRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewExcludedParamTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewExcludedParamTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewExcludedParams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewExcludedParamsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewMessagesIds(ctx context.Context, params *AscanViewMessagesIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewMessagesIdsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionAddQueryParam(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionAddQueryParamRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionAllowAttackOnStart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionAllowAttackOnStartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionAttackPolicy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionAttackPolicyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionDefaultPolicy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionDefaultPolicyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionDelayInMs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionDelayInMsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionEncodeCookieValues(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionEncodeCookieValuesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionExcludedParamList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionExcludedParamListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionHandleAntiCSRFTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionHandleAntiCSRFTokensRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionHostPerScan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionHostPerScanRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionInjectPluginIdInHeader(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionInjectPluginIdInHeaderRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionMaxAlertsPerRule(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionMaxAlertsPerRuleRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionMaxChartTimeInMins(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionMaxChartTimeInMinsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionMaxResultsToList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionMaxResultsToListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionMaxRuleDurationInMins(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionMaxRuleDurationInMinsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionMaxScanDurationInMins(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionMaxScanDurationInMinsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionMaxScansInUI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionMaxScansInUIRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionPromptInAttackMode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionPromptInAttackModeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionPromptToClearFinishedScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionPromptToClearFinishedScansRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionRescanInAttackMode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionRescanInAttackModeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionScanHeadersAllRequests(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionScanHeadersAllRequestsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionScanNullJsonValues(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionScanNullJsonValuesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionShowAdvancedDialog(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionShowAdvancedDialogRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionTargetParamsEnabledRPC(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionTargetParamsEnabledRPCRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionTargetParamsInjectable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionTargetParamsInjectableRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewOptionThreadPerHost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewOptionThreadPerHostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewPolicies(ctx context.Context, params *AscanViewPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewPoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewScanPolicyNames(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewScanPolicyNamesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewScanProgress(ctx context.Context, params *AscanViewScanProgressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewScanProgressRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewScanners(ctx context.Context, params *AscanViewScannersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewScannersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewScansRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AscanViewStatus(ctx context.Context, params *AscanViewStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAscanViewStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthenticationActionSetAuthenticationMethod(ctx context.Context, params *AuthenticationActionSetAuthenticationMethodParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthenticationActionSetAuthenticationMethodRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthenticationActionSetLoggedInIndicator(ctx context.Context, params *AuthenticationActionSetLoggedInIndicatorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthenticationActionSetLoggedInIndicatorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthenticationActionSetLoggedOutIndicator(ctx context.Context, params *AuthenticationActionSetLoggedOutIndicatorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthenticationActionSetLoggedOutIndicatorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthenticationViewGetAuthenticationMethod(ctx context.Context, params *AuthenticationViewGetAuthenticationMethodParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthenticationViewGetAuthenticationMethodRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthenticationViewGetAuthenticationMethodConfigParams(ctx context.Context, params *AuthenticationViewGetAuthenticationMethodConfigParamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthenticationViewGetAuthenticationMethodConfigParamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthenticationViewGetLoggedInIndicator(ctx context.Context, params *AuthenticationViewGetLoggedInIndicatorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthenticationViewGetLoggedInIndicatorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthenticationViewGetLoggedOutIndicator(ctx context.Context, params *AuthenticationViewGetLoggedOutIndicatorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthenticationViewGetLoggedOutIndicatorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthenticationViewGetSupportedAuthenticationMethods(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthenticationViewGetSupportedAuthenticationMethodsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthorizationActionSetBasicAuthorizationDetectionMethod(ctx context.Context, params *AuthorizationActionSetBasicAuthorizationDetectionMethodParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthorizationActionSetBasicAuthorizationDetectionMethodRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthorizationViewGetAuthorizationDetectionMethod(ctx context.Context, params *AuthorizationViewGetAuthorizationDetectionMethodParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthorizationViewGetAuthorizationDetectionMethodRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutomationActionEndDelayJob(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutomationActionEndDelayJobRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutomationActionRunPlan(ctx context.Context, params *AutomationActionRunPlanParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutomationActionRunPlanRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutomationViewPlanProgress(ctx context.Context, params *AutomationViewPlanProgressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutomationViewPlanProgressRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateActionDownloadLatestRelease(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateActionDownloadLatestReleaseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateActionInstallAddon(ctx context.Context, params *AutoupdateActionInstallAddonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateActionInstallAddonRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateActionInstallLocalAddon(ctx context.Context, params *AutoupdateActionInstallLocalAddonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateActionInstallLocalAddonRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateActionSetOptionCheckAddonUpdates(ctx context.Context, params *AutoupdateActionSetOptionCheckAddonUpdatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateActionSetOptionCheckAddonUpdatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateActionSetOptionCheckOnStart(ctx context.Context, params *AutoupdateActionSetOptionCheckOnStartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateActionSetOptionCheckOnStartRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateActionSetOptionDownloadNewRelease(ctx context.Context, params *AutoupdateActionSetOptionDownloadNewReleaseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateActionSetOptionDownloadNewReleaseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateActionSetOptionInstallAddonUpdates(ctx context.Context, params *AutoupdateActionSetOptionInstallAddonUpdatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateActionSetOptionInstallAddonUpdatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateActionSetOptionInstallScannerRules(ctx context.Context, params *AutoupdateActionSetOptionInstallScannerRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateActionSetOptionInstallScannerRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateActionSetOptionReportAlphaAddons(ctx context.Context, params *AutoupdateActionSetOptionReportAlphaAddonsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateActionSetOptionReportAlphaAddonsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateActionSetOptionReportBetaAddons(ctx context.Context, params *AutoupdateActionSetOptionReportBetaAddonsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateActionSetOptionReportBetaAddonsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateActionSetOptionReportReleaseAddons(ctx context.Context, params *AutoupdateActionSetOptionReportReleaseAddonsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateActionSetOptionReportReleaseAddonsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateActionUninstallAddon(ctx context.Context, params *AutoupdateActionUninstallAddonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateActionUninstallAddonRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewInstalledAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewInstalledAddonsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewIsLatestVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewIsLatestVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewLatestVersionNumber(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewLatestVersionNumberRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewLocalAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewLocalAddonsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewMarketplaceAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewMarketplaceAddonsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewNewAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewNewAddonsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewOptionAddonDirectories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewOptionAddonDirectoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewOptionCheckAddonUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewOptionCheckAddonUpdatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewOptionCheckOnStart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewOptionCheckOnStartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewOptionDayLastChecked(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewOptionDayLastCheckedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewOptionDayLastInstallWarned(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewOptionDayLastInstallWarnedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewOptionDayLastUpdateWarned(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewOptionDayLastUpdateWarnedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewOptionDownloadDirectory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewOptionDownloadDirectoryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewOptionDownloadNewRelease(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewOptionDownloadNewReleaseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewOptionInstallAddonUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewOptionInstallAddonUpdatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewOptionInstallScannerRules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewOptionInstallScannerRulesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewOptionReportAlphaAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewOptionReportAlphaAddonsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewOptionReportBetaAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewOptionReportBetaAddonsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewOptionReportReleaseAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewOptionReportReleaseAddonsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoupdateViewUpdatedAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoupdateViewUpdatedAddonsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BreakActionAddHttpBreakpoint(ctx context.Context, params *BreakActionAddHttpBreakpointParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBreakActionAddHttpBreakpointRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BreakActionBreak(ctx context.Context, params *BreakActionBreakParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBreakActionBreakRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BreakActionContinue(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBreakActionContinueRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BreakActionDrop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBreakActionDropRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BreakActionRemoveHttpBreakpoint(ctx context.Context, params *BreakActionRemoveHttpBreakpointParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBreakActionRemoveHttpBreakpointRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BreakActionSetHttpMessage(ctx context.Context, params *BreakActionSetHttpMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBreakActionSetHttpMessageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BreakActionStep(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBreakActionStepRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BreakViewHttpMessage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBreakViewHttpMessageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BreakViewIsBreakAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBreakViewIsBreakAllRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BreakViewIsBreakRequest(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBreakViewIsBreakRequestRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BreakViewIsBreakResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBreakViewIsBreakResponseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClientActionExportClientMap(ctx context.Context, params *ClientActionExportClientMapParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClientActionExportClientMapRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClientActionReportEvent(ctx context.Context, params *ClientActionReportEventParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClientActionReportEventRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClientActionReportObject(ctx context.Context, params *ClientActionReportObjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClientActionReportObjectRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClientActionReportZestScript(ctx context.Context, params *ClientActionReportZestScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClientActionReportZestScriptRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClientActionReportZestStatement(ctx context.Context, params *ClientActionReportZestStatementParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClientActionReportZestStatementRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClientSpiderActionScan(ctx context.Context, params *ClientSpiderActionScanParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClientSpiderActionScanRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClientSpiderActionStop(ctx context.Context, params *ClientSpiderActionStopParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClientSpiderActionStopRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClientSpiderViewStatus(ctx context.Context, params *ClientSpiderViewStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClientSpiderViewStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextActionExcludeAllContextTechnologies(ctx context.Context, params *ContextActionExcludeAllContextTechnologiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextActionExcludeAllContextTechnologiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextActionExcludeContextTechnologies(ctx context.Context, params *ContextActionExcludeContextTechnologiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextActionExcludeContextTechnologiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextActionExcludeFromContext(ctx context.Context, params *ContextActionExcludeFromContextParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextActionExcludeFromContextRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextActionExportContext(ctx context.Context, params *ContextActionExportContextParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextActionExportContextRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextActionImportContext(ctx context.Context, params *ContextActionImportContextParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextActionImportContextRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextActionIncludeAllContextTechnologies(ctx context.Context, params *ContextActionIncludeAllContextTechnologiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextActionIncludeAllContextTechnologiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextActionIncludeContextTechnologies(ctx context.Context, params *ContextActionIncludeContextTechnologiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextActionIncludeContextTechnologiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextActionIncludeInContext(ctx context.Context, params *ContextActionIncludeInContextParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextActionIncludeInContextRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextActionNewContext(ctx context.Context, params *ContextActionNewContextParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextActionNewContextRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextActionRemoveContext(ctx context.Context, params *ContextActionRemoveContextParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextActionRemoveContextRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextActionSetContextCheckingStrategy(ctx context.Context, params *ContextActionSetContextCheckingStrategyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextActionSetContextCheckingStrategyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextActionSetContextInScope(ctx context.Context, params *ContextActionSetContextInScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextActionSetContextInScopeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextActionSetContextRegexs(ctx context.Context, params *ContextActionSetContextRegexsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextActionSetContextRegexsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextViewContext(ctx context.Context, params *ContextViewContextParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextViewContextRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextViewContextList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextViewContextListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextViewExcludeRegexs(ctx context.Context, params *ContextViewExcludeRegexsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextViewExcludeRegexsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextViewExcludedTechnologyList(ctx context.Context, params *ContextViewExcludedTechnologyListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextViewExcludedTechnologyListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextViewIncludeRegexs(ctx context.Context, params *ContextViewIncludeRegexsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextViewIncludeRegexsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextViewIncludedTechnologyList(ctx context.Context, params *ContextViewIncludedTechnologyListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextViewIncludedTechnologyListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextViewTechnologyList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextViewTechnologyListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextViewUrls(ctx context.Context, params *ContextViewUrlsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextViewUrlsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionAccessUrl(ctx context.Context, params *CoreActionAccessUrlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionAccessUrlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionAddProxyChainExcludedDomain(ctx context.Context, params *CoreActionAddProxyChainExcludedDomainParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionAddProxyChainExcludedDomainRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionClearExcludedFromProxy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionClearExcludedFromProxyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionCreateSbomZip(ctx context.Context, params *CoreActionCreateSbomZipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionCreateSbomZipRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionDeleteAlert(ctx context.Context, params *CoreActionDeleteAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionDeleteAlertRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionDeleteAllAlerts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionDeleteAllAlertsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionDeleteSiteNode(ctx context.Context, params *CoreActionDeleteSiteNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionDeleteSiteNodeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionDisableAllProxyChainExcludedDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionDisableAllProxyChainExcludedDomainsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionDisableClientCertificate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionDisableClientCertificateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionEnableAllProxyChainExcludedDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionEnableAllProxyChainExcludedDomainsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionEnablePKCS12ClientCertificate(ctx context.Context, params *CoreActionEnablePKCS12ClientCertificateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionEnablePKCS12ClientCertificateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionExcludeFromProxy(ctx context.Context, params *CoreActionExcludeFromProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionExcludeFromProxyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionGenerateRootCA(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionGenerateRootCARequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionLoadSession(ctx context.Context, params *CoreActionLoadSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionLoadSessionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionModifyProxyChainExcludedDomain(ctx context.Context, params *CoreActionModifyProxyChainExcludedDomainParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionModifyProxyChainExcludedDomainRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionNewSession(ctx context.Context, params *CoreActionNewSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionNewSessionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionRemoveProxyChainExcludedDomain(ctx context.Context, params *CoreActionRemoveProxyChainExcludedDomainParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionRemoveProxyChainExcludedDomainRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionRunGarbageCollection(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionRunGarbageCollectionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSaveSession(ctx context.Context, params *CoreActionSaveSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSaveSessionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSendRequest(ctx context.Context, params *CoreActionSendRequestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSendRequestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetHomeDirectory(ctx context.Context, params *CoreActionSetHomeDirectoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetHomeDirectoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetLogLevel(ctx context.Context, params *CoreActionSetLogLevelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetLogLevelRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetMode(ctx context.Context, params *CoreActionSetModeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetModeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionAlertOverridesFilePath(ctx context.Context, params *CoreActionSetOptionAlertOverridesFilePathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionAlertOverridesFilePathRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionDefaultUserAgent(ctx context.Context, params *CoreActionSetOptionDefaultUserAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionDefaultUserAgentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionDnsTtlSuccessfulQueries(ctx context.Context, params *CoreActionSetOptionDnsTtlSuccessfulQueriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionDnsTtlSuccessfulQueriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionHttpStateEnabled(ctx context.Context, params *CoreActionSetOptionHttpStateEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionHttpStateEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionMaximumAlertInstances(ctx context.Context, params *CoreActionSetOptionMaximumAlertInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionMaximumAlertInstancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionMergeRelatedAlerts(ctx context.Context, params *CoreActionSetOptionMergeRelatedAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionMergeRelatedAlertsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionProxyChainName(ctx context.Context, params *CoreActionSetOptionProxyChainNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionProxyChainNameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionProxyChainPassword(ctx context.Context, params *CoreActionSetOptionProxyChainPasswordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionProxyChainPasswordRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionProxyChainPort(ctx context.Context, params *CoreActionSetOptionProxyChainPortParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionProxyChainPortRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionProxyChainPrompt(ctx context.Context, params *CoreActionSetOptionProxyChainPromptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionProxyChainPromptRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionProxyChainRealm(ctx context.Context, params *CoreActionSetOptionProxyChainRealmParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionProxyChainRealmRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionProxyChainSkipName(ctx context.Context, params *CoreActionSetOptionProxyChainSkipNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionProxyChainSkipNameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionProxyChainUserName(ctx context.Context, params *CoreActionSetOptionProxyChainUserNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionProxyChainUserNameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionSingleCookieRequestHeader(ctx context.Context, params *CoreActionSetOptionSingleCookieRequestHeaderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionSingleCookieRequestHeaderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionTimeoutInSecs(ctx context.Context, params *CoreActionSetOptionTimeoutInSecsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionTimeoutInSecsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionUseProxyChain(ctx context.Context, params *CoreActionSetOptionUseProxyChainParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionUseProxyChainRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionUseProxyChainAuth(ctx context.Context, params *CoreActionSetOptionUseProxyChainAuthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionUseProxyChainAuthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSetOptionUseSocksProxy(ctx context.Context, params *CoreActionSetOptionUseSocksProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSetOptionUseSocksProxyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionShutdown(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionShutdownRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreActionSnapshotSession(ctx context.Context, params *CoreActionSnapshotSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreActionSnapshotSessionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewAlert(ctx context.Context, params *CoreViewAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewAlertRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewAlerts(ctx context.Context, params *CoreViewAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewAlertsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewAlertsSummary(ctx context.Context, params *CoreViewAlertsSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewAlertsSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewChildNodes(ctx context.Context, params *CoreViewChildNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewChildNodesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewExcludedFromProxy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewExcludedFromProxyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewGetLogLevel(ctx context.Context, params *CoreViewGetLogLevelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewGetLogLevelRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewHomeDirectory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewHomeDirectoryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewHosts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewHostsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewMessage(ctx context.Context, params *CoreViewMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewMessageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewMessages(ctx context.Context, params *CoreViewMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewMessagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewMessagesById(ctx context.Context, params *CoreViewMessagesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewMessagesByIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewMode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewModeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewNumberOfAlerts(ctx context.Context, params *CoreViewNumberOfAlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewNumberOfAlertsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewNumberOfMessages(ctx context.Context, params *CoreViewNumberOfMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewNumberOfMessagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionAlertOverridesFilePath(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionAlertOverridesFilePathRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionDefaultUserAgent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionDefaultUserAgentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionDnsTtlSuccessfulQueries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionDnsTtlSuccessfulQueriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionHttpState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionHttpStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionHttpStateEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionHttpStateEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionMaximumAlertInstances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionMaximumAlertInstancesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionMergeRelatedAlerts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionMergeRelatedAlertsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionProxyChainName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionProxyChainNameRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionProxyChainPassword(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionProxyChainPasswordRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionProxyChainPort(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionProxyChainPortRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionProxyChainPrompt(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionProxyChainPromptRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionProxyChainRealm(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionProxyChainRealmRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionProxyChainSkipName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionProxyChainSkipNameRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionProxyChainUserName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionProxyChainUserNameRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionProxyExcludedDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionProxyExcludedDomainsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionProxyExcludedDomainsEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionProxyExcludedDomainsEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionSingleCookieRequestHeader(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionSingleCookieRequestHeaderRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionTimeoutInSecs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionTimeoutInSecsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionUseProxyChain(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionUseProxyChainRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionUseProxyChainAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionUseProxyChainAuthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewOptionUseSocksProxy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewOptionUseSocksProxyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewProxyChainExcludedDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewProxyChainExcludedDomainsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewSessionLocation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewSessionLocationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewSites(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewSitesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewUrls(ctx context.Context, params *CoreViewUrlsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewUrlsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreViewZapHomePath(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreViewZapHomePathRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustompayloadsActionAddCustomPayload(ctx context.Context, params *CustompayloadsActionAddCustomPayloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustompayloadsActionAddCustomPayloadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustompayloadsActionDisableCustomPayload(ctx context.Context, params *CustompayloadsActionDisableCustomPayloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustompayloadsActionDisableCustomPayloadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustompayloadsActionDisableCustomPayloads(ctx context.Context, params *CustompayloadsActionDisableCustomPayloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustompayloadsActionDisableCustomPayloadsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustompayloadsActionEnableCustomPayload(ctx context.Context, params *CustompayloadsActionEnableCustomPayloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustompayloadsActionEnableCustomPayloadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustompayloadsActionEnableCustomPayloads(ctx context.Context, params *CustompayloadsActionEnableCustomPayloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustompayloadsActionEnableCustomPayloadsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustompayloadsActionRemoveCustomPayload(ctx context.Context, params *CustompayloadsActionRemoveCustomPayloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustompayloadsActionRemoveCustomPayloadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustompayloadsViewCustomPayloads(ctx context.Context, params *CustompayloadsViewCustomPayloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustompayloadsViewCustomPayloadsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustompayloadsViewCustomPayloadsCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustompayloadsViewCustomPayloadsCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EximActionExportSitesTree(ctx context.Context, params *EximActionExportSitesTreeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEximActionExportSitesTreeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EximActionImportHar(ctx context.Context, params *EximActionImportHarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEximActionImportHarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EximActionImportModsec2Logs(ctx context.Context, params *EximActionImportModsec2LogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEximActionImportModsec2LogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EximActionImportUrls(ctx context.Context, params *EximActionImportUrlsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEximActionImportUrlsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EximActionImportZapLogs(ctx context.Context, params *EximActionImportZapLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEximActionImportZapLogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EximActionPruneSitesTree(ctx context.Context, params *EximActionPruneSitesTreeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEximActionPruneSitesTreeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ForcedUserActionSetForcedUser(ctx context.Context, params *ForcedUserActionSetForcedUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewForcedUserActionSetForcedUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ForcedUserActionSetForcedUserModeEnabled(ctx context.Context, params *ForcedUserActionSetForcedUserModeEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewForcedUserActionSetForcedUserModeEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ForcedUserViewGetForcedUser(ctx context.Context, params *ForcedUserViewGetForcedUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewForcedUserViewGetForcedUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ForcedUserViewIsForcedUserModeEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewForcedUserViewIsForcedUserModeEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlActionImportFile(ctx context.Context, params *GraphqlActionImportFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlActionImportFileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlActionImportUrl(ctx context.Context, params *GraphqlActionImportUrlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlActionImportUrlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlActionSetOptionArgsType(ctx context.Context, params *GraphqlActionSetOptionArgsTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlActionSetOptionArgsTypeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlActionSetOptionLenientMaxQueryDepthEnabled(ctx context.Context, params *GraphqlActionSetOptionLenientMaxQueryDepthEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlActionSetOptionLenientMaxQueryDepthEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlActionSetOptionMaxAdditionalQueryDepth(ctx context.Context, params *GraphqlActionSetOptionMaxAdditionalQueryDepthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlActionSetOptionMaxAdditionalQueryDepthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlActionSetOptionMaxArgsDepth(ctx context.Context, params *GraphqlActionSetOptionMaxArgsDepthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlActionSetOptionMaxArgsDepthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlActionSetOptionMaxQueryDepth(ctx context.Context, params *GraphqlActionSetOptionMaxQueryDepthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlActionSetOptionMaxQueryDepthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlActionSetOptionOptionalArgsEnabled(ctx context.Context, params *GraphqlActionSetOptionOptionalArgsEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlActionSetOptionOptionalArgsEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlActionSetOptionQueryGenEnabled(ctx context.Context, params *GraphqlActionSetOptionQueryGenEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlActionSetOptionQueryGenEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlActionSetOptionQuerySplitType(ctx context.Context, params *GraphqlActionSetOptionQuerySplitTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlActionSetOptionQuerySplitTypeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlActionSetOptionRequestMethod(ctx context.Context, params *GraphqlActionSetOptionRequestMethodParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlActionSetOptionRequestMethodRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlViewOptionArgsType(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlViewOptionArgsTypeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlViewOptionLenientMaxQueryDepthEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlViewOptionLenientMaxQueryDepthEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlViewOptionMaxAdditionalQueryDepth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlViewOptionMaxAdditionalQueryDepthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlViewOptionMaxArgsDepth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlViewOptionMaxArgsDepthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlViewOptionMaxQueryDepth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlViewOptionMaxQueryDepthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlViewOptionOptionalArgsEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlViewOptionOptionalArgsEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlViewOptionQueryGenEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlViewOptionQueryGenEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlViewOptionQuerySplitType(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlViewOptionQuerySplitTypeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GraphqlViewOptionRequestMethod(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGraphqlViewOptionRequestMethodRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HttpSessionsActionAddDefaultSessionToken(ctx context.Context, params *HttpSessionsActionAddDefaultSessionTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHttpSessionsActionAddDefaultSessionTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HttpSessionsActionAddSessionToken(ctx context.Context, params *HttpSessionsActionAddSessionTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHttpSessionsActionAddSessionTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HttpSessionsActionCreateEmptySession(ctx context.Context, params *HttpSessionsActionCreateEmptySessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHttpSessionsActionCreateEmptySessionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HttpSessionsActionRemoveDefaultSessionToken(ctx context.Context, params *HttpSessionsActionRemoveDefaultSessionTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHttpSessionsActionRemoveDefaultSessionTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HttpSessionsActionRemoveSession(ctx context.Context, params *HttpSessionsActionRemoveSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHttpSessionsActionRemoveSessionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HttpSessionsActionRemoveSessionToken(ctx context.Context, params *HttpSessionsActionRemoveSessionTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHttpSessionsActionRemoveSessionTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HttpSessionsActionRenameSession(ctx context.Context, params *HttpSessionsActionRenameSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHttpSessionsActionRenameSessionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HttpSessionsActionSetActiveSession(ctx context.Context, params *HttpSessionsActionSetActiveSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHttpSessionsActionSetActiveSessionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HttpSessionsActionSetDefaultSessionTokenEnabled(ctx context.Context, params *HttpSessionsActionSetDefaultSessionTokenEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHttpSessionsActionSetDefaultSessionTokenEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HttpSessionsActionSetSessionTokenValue(ctx context.Context, params *HttpSessionsActionSetSessionTokenValueParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHttpSessionsActionSetSessionTokenValueRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HttpSessionsActionUnsetActiveSession(ctx context.Context, params *HttpSessionsActionUnsetActiveSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHttpSessionsActionUnsetActiveSessionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HttpSessionsViewActiveSession(ctx context.Context, params *HttpSessionsViewActiveSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHttpSessionsViewActiveSessionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HttpSessionsViewDefaultSessionTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHttpSessionsViewDefaultSessionTokensRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HttpSessionsViewSessionTokens(ctx context.Context, params *HttpSessionsViewSessionTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHttpSessionsViewSessionTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HttpSessionsViewSessions(ctx context.Context, params *HttpSessionsViewSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHttpSessionsViewSessionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HttpSessionsViewSites(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHttpSessionsViewSitesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudActionLog(ctx context.Context, params *HudActionLogParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudActionLogRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudActionRecordRequest(ctx context.Context, params *HudActionRecordRequestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudActionRecordRequestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudActionResetTutorialTasks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudActionResetTutorialTasksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudActionSetOptionBaseDirectory(ctx context.Context, params *HudActionSetOptionBaseDirectoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudActionSetOptionBaseDirectoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudActionSetOptionDevelopmentMode(ctx context.Context, params *HudActionSetOptionDevelopmentModeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudActionSetOptionDevelopmentModeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudActionSetOptionEnableOnDomainMsgs(ctx context.Context, params *HudActionSetOptionEnableOnDomainMsgsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudActionSetOptionEnableOnDomainMsgsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudActionSetOptionEnabledForDaemon(ctx context.Context, params *HudActionSetOptionEnabledForDaemonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudActionSetOptionEnabledForDaemonRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudActionSetOptionEnabledForDesktop(ctx context.Context, params *HudActionSetOptionEnabledForDesktopParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudActionSetOptionEnabledForDesktopRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudActionSetOptionInScopeOnly(ctx context.Context, params *HudActionSetOptionInScopeOnlyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudActionSetOptionInScopeOnlyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudActionSetOptionRemoveCSP(ctx context.Context, params *HudActionSetOptionRemoveCSPParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudActionSetOptionRemoveCSPRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudActionSetOptionShowWelcomeScreen(ctx context.Context, params *HudActionSetOptionShowWelcomeScreenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudActionSetOptionShowWelcomeScreenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudActionSetOptionSkipTutorialTasks(ctx context.Context, params *HudActionSetOptionSkipTutorialTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudActionSetOptionSkipTutorialTasksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudActionSetOptionTutorialTaskDone(ctx context.Context, params *HudActionSetOptionTutorialTaskDoneParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudActionSetOptionTutorialTaskDoneRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudActionSetOptionTutorialTestMode(ctx context.Context, params *HudActionSetOptionTutorialTestModeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudActionSetOptionTutorialTestModeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudActionSetUiOption(ctx context.Context, params *HudActionSetUiOptionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudActionSetUiOptionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewGetUiOption(ctx context.Context, params *HudViewGetUiOptionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewGetUiOptionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewHeartbeat(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewHeartbeatRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewHudAlertData(ctx context.Context, params *HudViewHudAlertDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewHudAlertDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewOptionAllowUnsafeEval(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewOptionAllowUnsafeEvalRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewOptionBaseDirectory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewOptionBaseDirectoryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewOptionDevelopmentMode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewOptionDevelopmentModeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewOptionEnableOnDomainMsgs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewOptionEnableOnDomainMsgsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewOptionEnableTelemetry(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewOptionEnableTelemetryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewOptionEnabledForDaemon(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewOptionEnabledForDaemonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewOptionEnabledForDesktop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewOptionEnabledForDesktopRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewOptionInScopeOnly(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewOptionInScopeOnlyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewOptionRemoveCSP(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewOptionRemoveCSPRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewOptionShowWelcomeScreen(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewOptionShowWelcomeScreenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewOptionSkipTutorialTasks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewOptionSkipTutorialTasksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewOptionTutorialHost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewOptionTutorialHostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewOptionTutorialPort(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewOptionTutorialPortRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewOptionTutorialTasksDone(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewOptionTutorialTasksDoneRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewOptionTutorialTestMode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewOptionTutorialTestModeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewOptionTutorialUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewOptionTutorialUpdatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewTutorialUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewTutorialUpdatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudViewUpgradedDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudViewUpgradedDomainsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LocalProxiesActionAddAdditionalProxy(ctx context.Context, params *LocalProxiesActionAddAdditionalProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocalProxiesActionAddAdditionalProxyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LocalProxiesActionRemoveAdditionalProxy(ctx context.Context, params *LocalProxiesActionRemoveAdditionalProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocalProxiesActionRemoveAdditionalProxyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LocalProxiesViewAdditionalProxies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocalProxiesViewAdditionalProxiesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionAddAlias(ctx context.Context, params *NetworkActionAddAliasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionAddAliasRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionAddHttpProxyExclusion(ctx context.Context, params *NetworkActionAddHttpProxyExclusionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionAddHttpProxyExclusionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionAddLocalServer(ctx context.Context, params *NetworkActionAddLocalServerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionAddLocalServerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionAddPassThrough(ctx context.Context, params *NetworkActionAddPassThroughParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionAddPassThroughRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionAddPkcs12ClientCertificate(ctx context.Context, params *NetworkActionAddPkcs12ClientCertificateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionAddPkcs12ClientCertificateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionAddRateLimitRule(ctx context.Context, params *NetworkActionAddRateLimitRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionAddRateLimitRuleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionGenerateRootCaCert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionGenerateRootCaCertRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionImportRootCaCert(ctx context.Context, params *NetworkActionImportRootCaCertParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionImportRootCaCertRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionRemoveAlias(ctx context.Context, params *NetworkActionRemoveAliasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionRemoveAliasRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionRemoveHttpProxyExclusion(ctx context.Context, params *NetworkActionRemoveHttpProxyExclusionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionRemoveHttpProxyExclusionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionRemoveLocalServer(ctx context.Context, params *NetworkActionRemoveLocalServerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionRemoveLocalServerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionRemovePassThrough(ctx context.Context, params *NetworkActionRemovePassThroughParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionRemovePassThroughRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionRemoveRateLimitRule(ctx context.Context, params *NetworkActionRemoveRateLimitRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionRemoveRateLimitRuleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionSetAliasEnabled(ctx context.Context, params *NetworkActionSetAliasEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionSetAliasEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionSetConnectionTimeout(ctx context.Context, params *NetworkActionSetConnectionTimeoutParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionSetConnectionTimeoutRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionSetDefaultUserAgent(ctx context.Context, params *NetworkActionSetDefaultUserAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionSetDefaultUserAgentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionSetDnsTtlSuccessfulQueries(ctx context.Context, params *NetworkActionSetDnsTtlSuccessfulQueriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionSetDnsTtlSuccessfulQueriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionSetHttpProxy(ctx context.Context, params *NetworkActionSetHttpProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionSetHttpProxyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionSetHttpProxyAuthEnabled(ctx context.Context, params *NetworkActionSetHttpProxyAuthEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionSetHttpProxyAuthEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionSetHttpProxyEnabled(ctx context.Context, params *NetworkActionSetHttpProxyEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionSetHttpProxyEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionSetHttpProxyExclusionEnabled(ctx context.Context, params *NetworkActionSetHttpProxyExclusionEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionSetHttpProxyExclusionEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionSetPassThroughEnabled(ctx context.Context, params *NetworkActionSetPassThroughEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionSetPassThroughEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionSetRateLimitRuleEnabled(ctx context.Context, params *NetworkActionSetRateLimitRuleEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionSetRateLimitRuleEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionSetRootCaCertValidity(ctx context.Context, params *NetworkActionSetRootCaCertValidityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionSetRootCaCertValidityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionSetServerCertValidity(ctx context.Context, params *NetworkActionSetServerCertValidityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionSetServerCertValidityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionSetSocksProxy(ctx context.Context, params *NetworkActionSetSocksProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionSetSocksProxyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionSetSocksProxyEnabled(ctx context.Context, params *NetworkActionSetSocksProxyEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionSetSocksProxyEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionSetUseClientCertificate(ctx context.Context, params *NetworkActionSetUseClientCertificateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionSetUseClientCertificateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkActionSetUseGlobalHttpState(ctx context.Context, params *NetworkActionSetUseGlobalHttpStateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkActionSetUseGlobalHttpStateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkViewGetAliases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkViewGetAliasesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkViewGetConnectionTimeout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkViewGetConnectionTimeoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkViewGetDefaultUserAgent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkViewGetDefaultUserAgentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkViewGetDnsTtlSuccessfulQueries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkViewGetDnsTtlSuccessfulQueriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkViewGetHttpProxy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkViewGetHttpProxyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkViewGetHttpProxyExclusions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkViewGetHttpProxyExclusionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkViewGetLocalServers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkViewGetLocalServersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkViewGetPassThroughs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkViewGetPassThroughsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkViewGetRateLimitRules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkViewGetRateLimitRulesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkViewGetRootCaCertValidity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkViewGetRootCaCertValidityRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkViewGetServerCertValidity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkViewGetServerCertValidityRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkViewGetSocksProxy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkViewGetSocksProxyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkViewIsHttpProxyAuthEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkViewIsHttpProxyAuthEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkViewIsHttpProxyEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkViewIsHttpProxyEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkViewIsSocksProxyEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkViewIsSocksProxyEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkViewIsUseGlobalHttpState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkViewIsUseGlobalHttpStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OastActionSetActiveScanService(ctx context.Context, params *OastActionSetActiveScanServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOastActionSetActiveScanServiceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OastActionSetBoastOptions(ctx context.Context, params *OastActionSetBoastOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOastActionSetBoastOptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OastActionSetCallbackOptions(ctx context.Context, params *OastActionSetCallbackOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOastActionSetCallbackOptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OastActionSetDaysToKeepRecords(ctx context.Context, params *OastActionSetDaysToKeepRecordsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOastActionSetDaysToKeepRecordsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OastActionSetInteractshOptions(ctx context.Context, params *OastActionSetInteractshOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOastActionSetInteractshOptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OastViewGetActiveScanService(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOastViewGetActiveScanServiceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OastViewGetBoastOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOastViewGetBoastOptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OastViewGetCallbackOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOastViewGetCallbackOptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OastViewGetDaysToKeepRecords(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOastViewGetDaysToKeepRecordsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OastViewGetInteractshOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOastViewGetInteractshOptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OastViewGetServices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOastViewGetServicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpenapiActionImportFile(ctx context.Context, params *OpenapiActionImportFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpenapiActionImportFileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpenapiActionImportUrl(ctx context.Context, params *OpenapiActionImportUrlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpenapiActionImportUrlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ParamDiggerActionHelloWorld(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewParamDiggerActionHelloWorldRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ParamsViewParams(ctx context.Context, params *ParamsViewParamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewParamsViewParamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PnhActionMonitor(ctx context.Context, params *PnhActionMonitorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPnhActionMonitorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PnhActionOracle(ctx context.Context, params *PnhActionOracleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPnhActionOracleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PnhActionStartMonitoring(ctx context.Context, params *PnhActionStartMonitoringParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPnhActionStartMonitoringRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PnhActionStopMonitoring(ctx context.Context, params *PnhActionStopMonitoringParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPnhActionStopMonitoringRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostmanActionImportFile(ctx context.Context, params *PostmanActionImportFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmanActionImportFileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostmanActionImportUrl(ctx context.Context, params *PostmanActionImportUrlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmanActionImportUrlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanActionClearQueue(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanActionClearQueueRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanActionDisableAllScanners(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanActionDisableAllScannersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanActionDisableAllTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanActionDisableAllTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanActionDisableScanners(ctx context.Context, params *PscanActionDisableScannersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanActionDisableScannersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanActionEnableAllScanners(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanActionEnableAllScannersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanActionEnableAllTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanActionEnableAllTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanActionEnableScanners(ctx context.Context, params *PscanActionEnableScannersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanActionEnableScannersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanActionSetEnabled(ctx context.Context, params *PscanActionSetEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanActionSetEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanActionSetMaxAlertsPerRule(ctx context.Context, params *PscanActionSetMaxAlertsPerRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanActionSetMaxAlertsPerRuleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanActionSetScanOnlyInScope(ctx context.Context, params *PscanActionSetScanOnlyInScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanActionSetScanOnlyInScopeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanActionSetScannerAlertThreshold(ctx context.Context, params *PscanActionSetScannerAlertThresholdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanActionSetScannerAlertThresholdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanViewCurrentRule(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanViewCurrentRuleRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanViewCurrentTasks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanViewCurrentTasksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanViewMaxAlertsPerRule(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanViewMaxAlertsPerRuleRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanViewRecordsToScan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanViewRecordsToScanRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanViewScanOnlyInScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanViewScanOnlyInScopeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PscanViewScanners(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPscanViewScannersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacerActionAddRule(ctx context.Context, params *ReplacerActionAddRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplacerActionAddRuleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacerActionRemoveRule(ctx context.Context, params *ReplacerActionRemoveRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplacerActionRemoveRuleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacerActionSetEnabled(ctx context.Context, params *ReplacerActionSetEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplacerActionSetEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacerViewRules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplacerViewRulesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportsActionGenerate(ctx context.Context, params *ReportsActionGenerateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportsActionGenerateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportsViewTemplateDetails(ctx context.Context, params *ReportsViewTemplateDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportsViewTemplateDetailsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportsViewTemplates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportsViewTemplatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetestActionRetest(ctx context.Context, params *RetestActionRetestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetestActionRetestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevealActionSetReveal(ctx context.Context, params *RevealActionSetRevealParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevealActionSetRevealRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevealViewReveal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevealViewRevealRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevisitActionRevisitSiteOff(ctx context.Context, params *RevisitActionRevisitSiteOffParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevisitActionRevisitSiteOffRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevisitActionRevisitSiteOn(ctx context.Context, params *RevisitActionRevisitSiteOnParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevisitActionRevisitSiteOnRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevisitViewRevisitList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevisitViewRevisitListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleConfigActionResetAllRuleConfigValues(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleConfigActionResetAllRuleConfigValuesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleConfigActionResetRuleConfigValue(ctx context.Context, params *RuleConfigActionResetRuleConfigValueParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleConfigActionResetRuleConfigValueRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleConfigActionSetRuleConfigValue(ctx context.Context, params *RuleConfigActionSetRuleConfigValueParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleConfigActionSetRuleConfigValueRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleConfigViewAllRuleConfigs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleConfigViewAllRuleConfigsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleConfigViewRuleConfigValue(ctx context.Context, params *RuleConfigViewRuleConfigValueParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleConfigViewRuleConfigValueRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptActionClearGlobalCustomVar(ctx context.Context, params *ScriptActionClearGlobalCustomVarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptActionClearGlobalCustomVarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptActionClearGlobalVar(ctx context.Context, params *ScriptActionClearGlobalVarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptActionClearGlobalVarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptActionClearGlobalVars(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptActionClearGlobalVarsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptActionClearScriptCustomVar(ctx context.Context, params *ScriptActionClearScriptCustomVarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptActionClearScriptCustomVarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptActionClearScriptVar(ctx context.Context, params *ScriptActionClearScriptVarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptActionClearScriptVarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptActionClearScriptVars(ctx context.Context, params *ScriptActionClearScriptVarsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptActionClearScriptVarsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptActionDisable(ctx context.Context, params *ScriptActionDisableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptActionDisableRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptActionEnable(ctx context.Context, params *ScriptActionEnableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptActionEnableRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptActionLoad(ctx context.Context, params *ScriptActionLoadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptActionLoadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptActionRemove(ctx context.Context, params *ScriptActionRemoveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptActionRemoveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptActionRunStandAloneScript(ctx context.Context, params *ScriptActionRunStandAloneScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptActionRunStandAloneScriptRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptActionSetGlobalVar(ctx context.Context, params *ScriptActionSetGlobalVarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptActionSetGlobalVarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptActionSetScriptVar(ctx context.Context, params *ScriptActionSetScriptVarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptActionSetScriptVarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptViewGlobalCustomVar(ctx context.Context, params *ScriptViewGlobalCustomVarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptViewGlobalCustomVarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptViewGlobalCustomVars(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptViewGlobalCustomVarsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptViewGlobalVar(ctx context.Context, params *ScriptViewGlobalVarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptViewGlobalVarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptViewGlobalVars(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptViewGlobalVarsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptViewListEngines(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptViewListEnginesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptViewListScripts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptViewListScriptsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptViewListTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptViewListTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptViewScriptCustomVar(ctx context.Context, params *ScriptViewScriptCustomVarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptViewScriptCustomVarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptViewScriptCustomVars(ctx context.Context, params *ScriptViewScriptCustomVarsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptViewScriptCustomVarsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptViewScriptVar(ctx context.Context, params *ScriptViewScriptVarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptViewScriptVarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScriptViewScriptVars(ctx context.Context, params *ScriptViewScriptVarsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScriptViewScriptVarsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchViewMessagesByHeaderRegex(ctx context.Context, params *SearchViewMessagesByHeaderRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchViewMessagesByHeaderRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchViewMessagesByNoteRegex(ctx context.Context, params *SearchViewMessagesByNoteRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchViewMessagesByNoteRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchViewMessagesByRequestRegex(ctx context.Context, params *SearchViewMessagesByRequestRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchViewMessagesByRequestRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchViewMessagesByResponseRegex(ctx context.Context, params *SearchViewMessagesByResponseRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchViewMessagesByResponseRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchViewMessagesByTagRegex(ctx context.Context, params *SearchViewMessagesByTagRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchViewMessagesByTagRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchViewMessagesByUrlRegex(ctx context.Context, params *SearchViewMessagesByUrlRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchViewMessagesByUrlRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchViewUrlsByHeaderRegex(ctx context.Context, params *SearchViewUrlsByHeaderRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchViewUrlsByHeaderRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchViewUrlsByNoteRegex(ctx context.Context, params *SearchViewUrlsByNoteRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchViewUrlsByNoteRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchViewUrlsByRequestRegex(ctx context.Context, params *SearchViewUrlsByRequestRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchViewUrlsByRequestRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchViewUrlsByResponseRegex(ctx context.Context, params *SearchViewUrlsByResponseRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchViewUrlsByResponseRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchViewUrlsByTagRegex(ctx context.Context, params *SearchViewUrlsByTagRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchViewUrlsByTagRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchViewUrlsByUrlRegex(ctx context.Context, params *SearchViewUrlsByUrlRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchViewUrlsByUrlRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumActionAddBrowserArgument(ctx context.Context, params *SeleniumActionAddBrowserArgumentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumActionAddBrowserArgumentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumActionLaunchBrowser(ctx context.Context, params *SeleniumActionLaunchBrowserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumActionLaunchBrowserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumActionRemoveBrowserArgument(ctx context.Context, params *SeleniumActionRemoveBrowserArgumentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumActionRemoveBrowserArgumentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumActionSetBrowserArgumentEnabled(ctx context.Context, params *SeleniumActionSetBrowserArgumentEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumActionSetBrowserArgumentEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumActionSetOptionChromeBinaryPath(ctx context.Context, params *SeleniumActionSetOptionChromeBinaryPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumActionSetOptionChromeBinaryPathRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumActionSetOptionChromeDriverPath(ctx context.Context, params *SeleniumActionSetOptionChromeDriverPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumActionSetOptionChromeDriverPathRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumActionSetOptionFirefoxBinaryPath(ctx context.Context, params *SeleniumActionSetOptionFirefoxBinaryPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumActionSetOptionFirefoxBinaryPathRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumActionSetOptionFirefoxDefaultProfile(ctx context.Context, params *SeleniumActionSetOptionFirefoxDefaultProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumActionSetOptionFirefoxDefaultProfileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumActionSetOptionFirefoxDriverPath(ctx context.Context, params *SeleniumActionSetOptionFirefoxDriverPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumActionSetOptionFirefoxDriverPathRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumActionSetOptionIeDriverPath(ctx context.Context, params *SeleniumActionSetOptionIeDriverPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumActionSetOptionIeDriverPathRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumActionSetOptionLastDirectory(ctx context.Context, params *SeleniumActionSetOptionLastDirectoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumActionSetOptionLastDirectoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumActionSetOptionPhantomJsBinaryPath(ctx context.Context, params *SeleniumActionSetOptionPhantomJsBinaryPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumActionSetOptionPhantomJsBinaryPathRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumViewGetBrowserArguments(ctx context.Context, params *SeleniumViewGetBrowserArgumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumViewGetBrowserArgumentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumViewOptionBrowserExtensions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumViewOptionBrowserExtensionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumViewOptionChromeBinaryPath(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumViewOptionChromeBinaryPathRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumViewOptionChromeDriverPath(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumViewOptionChromeDriverPathRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumViewOptionFirefoxBinaryPath(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumViewOptionFirefoxBinaryPathRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumViewOptionFirefoxDefaultProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumViewOptionFirefoxDefaultProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumViewOptionFirefoxDriverPath(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumViewOptionFirefoxDriverPathRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumViewOptionIeDriverPath(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumViewOptionIeDriverPathRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumViewOptionLastDirectory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumViewOptionLastDirectoryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeleniumViewOptionPhantomJsBinaryPath(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeleniumViewOptionPhantomJsBinaryPathRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SessionManagementActionSetSessionManagementMethod(ctx context.Context, params *SessionManagementActionSetSessionManagementMethodParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSessionManagementActionSetSessionManagementMethodRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SessionManagementViewGetSessionManagementMethod(ctx context.Context, params *SessionManagementViewGetSessionManagementMethodParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSessionManagementViewGetSessionManagementMethodRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SessionManagementViewGetSessionManagementMethodConfigParams(ctx context.Context, params *SessionManagementViewGetSessionManagementMethodConfigParamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSessionManagementViewGetSessionManagementMethodConfigParamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SessionManagementViewGetSupportedSessionManagementMethods(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSessionManagementViewGetSupportedSessionManagementMethodsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SoapActionImportFile(ctx context.Context, params *SoapActionImportFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSoapActionImportFileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SoapActionImportUrl(ctx context.Context, params *SoapActionImportUrlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSoapActionImportUrlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionAddDomainAlwaysInScope(ctx context.Context, params *SpiderActionAddDomainAlwaysInScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionAddDomainAlwaysInScopeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionClearExcludedFromScan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionClearExcludedFromScanRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionDisableAllDomainsAlwaysInScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionDisableAllDomainsAlwaysInScopeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionEnableAllDomainsAlwaysInScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionEnableAllDomainsAlwaysInScopeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionExcludeFromScan(ctx context.Context, params *SpiderActionExcludeFromScanParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionExcludeFromScanRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionModifyDomainAlwaysInScope(ctx context.Context, params *SpiderActionModifyDomainAlwaysInScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionModifyDomainAlwaysInScopeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionPause(ctx context.Context, params *SpiderActionPauseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionPauseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionPauseAllScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionPauseAllScansRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionRemoveAllScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionRemoveAllScansRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionRemoveDomainAlwaysInScope(ctx context.Context, params *SpiderActionRemoveDomainAlwaysInScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionRemoveDomainAlwaysInScopeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionRemoveScan(ctx context.Context, params *SpiderActionRemoveScanParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionRemoveScanRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionResume(ctx context.Context, params *SpiderActionResumeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionResumeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionResumeAllScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionResumeAllScansRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionScan(ctx context.Context, params *SpiderActionScanParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionScanRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionScanAsUser(ctx context.Context, params *SpiderActionScanAsUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionScanAsUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionAcceptCookies(ctx context.Context, params *SpiderActionSetOptionAcceptCookiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionAcceptCookiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionHandleODataParametersVisited(ctx context.Context, params *SpiderActionSetOptionHandleODataParametersVisitedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionHandleODataParametersVisitedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionHandleParameters(ctx context.Context, params *SpiderActionSetOptionHandleParametersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionHandleParametersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionLogoutAvoidance(ctx context.Context, params *SpiderActionSetOptionLogoutAvoidanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionLogoutAvoidanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionMaxChildren(ctx context.Context, params *SpiderActionSetOptionMaxChildrenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionMaxChildrenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionMaxDepth(ctx context.Context, params *SpiderActionSetOptionMaxDepthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionMaxDepthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionMaxDuration(ctx context.Context, params *SpiderActionSetOptionMaxDurationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionMaxDurationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionMaxParseSizeBytes(ctx context.Context, params *SpiderActionSetOptionMaxParseSizeBytesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionMaxParseSizeBytesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionMaxScansInUI(ctx context.Context, params *SpiderActionSetOptionMaxScansInUIParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionMaxScansInUIRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionParseComments(ctx context.Context, params *SpiderActionSetOptionParseCommentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionParseCommentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionParseDsStore(ctx context.Context, params *SpiderActionSetOptionParseDsStoreParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionParseDsStoreRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionParseGit(ctx context.Context, params *SpiderActionSetOptionParseGitParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionParseGitRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionParseRobotsTxt(ctx context.Context, params *SpiderActionSetOptionParseRobotsTxtParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionParseRobotsTxtRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionParseSVNEntries(ctx context.Context, params *SpiderActionSetOptionParseSVNEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionParseSVNEntriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionParseSitemapXml(ctx context.Context, params *SpiderActionSetOptionParseSitemapXmlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionParseSitemapXmlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionPostForm(ctx context.Context, params *SpiderActionSetOptionPostFormParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionPostFormRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionProcessForm(ctx context.Context, params *SpiderActionSetOptionProcessFormParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionProcessFormRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionSendRefererHeader(ctx context.Context, params *SpiderActionSetOptionSendRefererHeaderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionSendRefererHeaderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionShowAdvancedDialog(ctx context.Context, params *SpiderActionSetOptionShowAdvancedDialogParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionShowAdvancedDialogRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionSkipURLString(ctx context.Context, params *SpiderActionSetOptionSkipURLStringParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionSkipURLStringRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionThreadCount(ctx context.Context, params *SpiderActionSetOptionThreadCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionThreadCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionSetOptionUserAgent(ctx context.Context, params *SpiderActionSetOptionUserAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionSetOptionUserAgentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionStop(ctx context.Context, params *SpiderActionStopParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionStopRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderActionStopAllScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderActionStopAllScansRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewAddedNodes(ctx context.Context, params *SpiderViewAddedNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewAddedNodesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewAllUrls(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewAllUrlsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewDomainsAlwaysInScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewDomainsAlwaysInScopeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewExcludedFromScan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewExcludedFromScanRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewFullResults(ctx context.Context, params *SpiderViewFullResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewFullResultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionAcceptCookies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionAcceptCookiesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionDomainsAlwaysInScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionDomainsAlwaysInScopeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionDomainsAlwaysInScopeEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionDomainsAlwaysInScopeEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionHandleODataParametersVisited(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionHandleODataParametersVisitedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionHandleParameters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionHandleParametersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionLogoutAvoidance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionLogoutAvoidanceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionMaxChildren(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionMaxChildrenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionMaxDepth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionMaxDepthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionMaxDuration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionMaxDurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionMaxParseSizeBytes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionMaxParseSizeBytesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionMaxScansInUI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionMaxScansInUIRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionParseComments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionParseCommentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionParseDsStore(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionParseDsStoreRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionParseGit(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionParseGitRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionParseRobotsTxt(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionParseRobotsTxtRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionParseSVNEntries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionParseSVNEntriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionParseSitemapXml(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionParseSitemapXmlRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionPostForm(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionPostFormRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionProcessForm(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionProcessFormRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionSendRefererHeader(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionSendRefererHeaderRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionShowAdvancedDialog(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionShowAdvancedDialogRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionSkipURLString(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionSkipURLStringRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionThreadCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionThreadCountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewOptionUserAgent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewOptionUserAgentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewResults(ctx context.Context, params *SpiderViewResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewResultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewScans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewScansRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpiderViewStatus(ctx context.Context, params *SpiderViewStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpiderViewStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatsActionClearStats(ctx context.Context, params *StatsActionClearStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatsActionClearStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatsActionSetOptionInMemoryEnabled(ctx context.Context, params *StatsActionSetOptionInMemoryEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatsActionSetOptionInMemoryEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatsActionSetOptionStatsdHost(ctx context.Context, params *StatsActionSetOptionStatsdHostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatsActionSetOptionStatsdHostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatsActionSetOptionStatsdPort(ctx context.Context, params *StatsActionSetOptionStatsdPortParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatsActionSetOptionStatsdPortRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatsActionSetOptionStatsdPrefix(ctx context.Context, params *StatsActionSetOptionStatsdPrefixParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatsActionSetOptionStatsdPrefixRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatsViewAllSitesStats(ctx context.Context, params *StatsViewAllSitesStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatsViewAllSitesStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatsViewOptionInMemoryEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatsViewOptionInMemoryEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatsViewOptionStatsdEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatsViewOptionStatsdEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatsViewOptionStatsdHost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatsViewOptionStatsdHostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatsViewOptionStatsdPort(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatsViewOptionStatsdPortRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatsViewOptionStatsdPrefix(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatsViewOptionStatsdPrefixRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatsViewSiteStats(ctx context.Context, params *StatsViewSiteStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatsViewSiteStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatsViewStats(ctx context.Context, params *StatsViewStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatsViewStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersActionAuthenticateAsUser(ctx context.Context, params *UsersActionAuthenticateAsUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersActionAuthenticateAsUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersActionNewUser(ctx context.Context, params *UsersActionNewUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersActionNewUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersActionPollAsUser(ctx context.Context, params *UsersActionPollAsUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersActionPollAsUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersActionRemoveUser(ctx context.Context, params *UsersActionRemoveUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersActionRemoveUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersActionSetAuthenticationCredentials(ctx context.Context, params *UsersActionSetAuthenticationCredentialsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersActionSetAuthenticationCredentialsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersActionSetAuthenticationState(ctx context.Context, params *UsersActionSetAuthenticationStateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersActionSetAuthenticationStateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersActionSetCookie(ctx context.Context, params *UsersActionSetCookieParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersActionSetCookieRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersActionSetUserEnabled(ctx context.Context, params *UsersActionSetUserEnabledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersActionSetUserEnabledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersActionSetUserName(ctx context.Context, params *UsersActionSetUserNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersActionSetUserNameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersViewGetAuthenticationCredentials(ctx context.Context, params *UsersViewGetAuthenticationCredentialsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersViewGetAuthenticationCredentialsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersViewGetAuthenticationCredentialsConfigParams(ctx context.Context, params *UsersViewGetAuthenticationCredentialsConfigParamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersViewGetAuthenticationCredentialsConfigParamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersViewGetAuthenticationSession(ctx context.Context, params *UsersViewGetAuthenticationSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersViewGetAuthenticationSessionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersViewGetAuthenticationState(ctx context.Context, params *UsersViewGetAuthenticationStateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersViewGetAuthenticationStateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersViewGetUserById(ctx context.Context, params *UsersViewGetUserByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersViewGetUserByIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersViewUsersList(ctx context.Context, params *UsersViewUsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersViewUsersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WappalyzerViewListAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWappalyzerViewListAllRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WappalyzerViewListSite(ctx context.Context, params *WappalyzerViewListSiteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWappalyzerViewListSiteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WappalyzerViewListSites(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWappalyzerViewListSitesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebsocketActionSendTextMessage(ctx context.Context, params *WebsocketActionSendTextMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebsocketActionSendTextMessageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebsocketActionSetBreakTextMessage(ctx context.Context, params *WebsocketActionSetBreakTextMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebsocketActionSetBreakTextMessageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebsocketViewBreakTextMessage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebsocketViewBreakTextMessageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebsocketViewChannels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebsocketViewChannelsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebsocketViewMessage(ctx context.Context, params *WebsocketViewMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebsocketViewMessageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebsocketViewMessages(ctx context.Context, params *WebsocketViewMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebsocketViewMessagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcsrfOtherGenForm(ctx context.Context, params *AcsrfOtherGenFormParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcsrfOtherGenFormRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreOtherFileDownload(ctx context.Context, params *CoreOtherFileDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreOtherFileDownloadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreOtherFileUpload(ctx context.Context, params *CoreOtherFileUploadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreOtherFileUploadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreOtherHtmlreport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreOtherHtmlreportRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreOtherJsonreport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreOtherJsonreportRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreOtherMdreport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreOtherMdreportRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreOtherMessageHar(ctx context.Context, params *CoreOtherMessageHarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreOtherMessageHarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreOtherMessagesHar(ctx context.Context, params *CoreOtherMessagesHarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreOtherMessagesHarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreOtherMessagesHarById(ctx context.Context, params *CoreOtherMessagesHarByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreOtherMessagesHarByIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreOtherProxyPac(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreOtherProxyPacRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreOtherRootcert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreOtherRootcertRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreOtherSendHarRequest(ctx context.Context, params *CoreOtherSendHarRequestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreOtherSendHarRequestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreOtherSetproxy(ctx context.Context, params *CoreOtherSetproxyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreOtherSetproxyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CoreOtherXmlreport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCoreOtherXmlreportRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevOtherOpenapi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevOtherOpenapiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EximOtherExportHar(ctx context.Context, params *EximOtherExportHarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEximOtherExportHarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EximOtherExportHarById(ctx context.Context, params *EximOtherExportHarByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEximOtherExportHarByIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EximOtherSendHarRequest(ctx context.Context, params *EximOtherSendHarRequestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEximOtherSendHarRequestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HudOtherChangesInHtml(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHudOtherChangesInHtmlRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeyboardOtherCheatsheetActionOrder(ctx context.Context, params *KeyboardOtherCheatsheetActionOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeyboardOtherCheatsheetActionOrderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeyboardOtherCheatsheetKeyOrder(ctx context.Context, params *KeyboardOtherCheatsheetKeyOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeyboardOtherCheatsheetKeyOrderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkOtherProxyPac(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkOtherProxyPacRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkOtherRootCaCert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkOtherRootCaCertRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkOtherSetProxy(ctx context.Context, params *NetworkOtherSetProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkOtherSetProxyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PnhOtherFxPnhXpi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPnhOtherFxPnhXpiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PnhOtherManifest(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPnhOtherManifestRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PnhOtherPnh(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPnhOtherPnhRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PnhOtherService(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPnhOtherServiceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuickstartlaunchOtherStartPage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuickstartlaunchOtherStartPageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchOtherHarByHeaderRegex(ctx context.Context, params *SearchOtherHarByHeaderRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchOtherHarByHeaderRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchOtherHarByNoteRegex(ctx context.Context, params *SearchOtherHarByNoteRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchOtherHarByNoteRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchOtherHarByRequestRegex(ctx context.Context, params *SearchOtherHarByRequestRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchOtherHarByRequestRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchOtherHarByResponseRegex(ctx context.Context, params *SearchOtherHarByResponseRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchOtherHarByResponseRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchOtherHarByTagRegex(ctx context.Context, params *SearchOtherHarByTagRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchOtherHarByTagRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchOtherHarByUrlRegex(ctx context.Context, params *SearchOtherHarByUrlRegexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchOtherHarByUrlRegexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAccessControlActionScanRequest generates requests for AccessControlActionScan
func NewAccessControlActionScanRequest(server string, params *AccessControlActionScanParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/accessControl/action/scan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ScanAsUnAuthUser != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanAsUnAuthUser", runtime.ParamLocationQuery, *params.ScanAsUnAuthUser); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RaiseAlert != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "raiseAlert", runtime.ParamLocationQuery, *params.RaiseAlert); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AlertRiskLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alertRiskLevel", runtime.ParamLocationQuery, *params.AlertRiskLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessControlActionWriteHTMLreportRequest generates requests for AccessControlActionWriteHTMLreport
func NewAccessControlActionWriteHTMLreportRequest(server string, params *AccessControlActionWriteHTMLreportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/accessControl/action/writeHTMLreport/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fileName", runtime.ParamLocationQuery, params.FileName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessControlViewGetScanProgressRequest generates requests for AccessControlViewGetScanProgress
func NewAccessControlViewGetScanProgressRequest(server string, params *AccessControlViewGetScanProgressParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/accessControl/view/getScanProgress/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessControlViewGetScanStatusRequest generates requests for AccessControlViewGetScanStatus
func NewAccessControlViewGetScanStatusRequest(server string, params *AccessControlViewGetScanStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/accessControl/view/getScanStatus/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcsrfActionAddOptionTokenRequest generates requests for AcsrfActionAddOptionToken
func NewAcsrfActionAddOptionTokenRequest(server string, params *AcsrfActionAddOptionTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/acsrf/action/addOptionToken/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcsrfActionRemoveOptionTokenRequest generates requests for AcsrfActionRemoveOptionToken
func NewAcsrfActionRemoveOptionTokenRequest(server string, params *AcsrfActionRemoveOptionTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/acsrf/action/removeOptionToken/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcsrfActionSetOptionPartialMatchingEnabledRequest generates requests for AcsrfActionSetOptionPartialMatchingEnabled
func NewAcsrfActionSetOptionPartialMatchingEnabledRequest(server string, params *AcsrfActionSetOptionPartialMatchingEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/acsrf/action/setOptionPartialMatchingEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcsrfViewOptionPartialMatchingEnabledRequest generates requests for AcsrfViewOptionPartialMatchingEnabled
func NewAcsrfViewOptionPartialMatchingEnabledRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/acsrf/view/optionPartialMatchingEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcsrfViewOptionTokensNamesRequest generates requests for AcsrfViewOptionTokensNames
func NewAcsrfViewOptionTokensNamesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/acsrf/view/optionTokensNames/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionAddAllowedResourceRequest generates requests for AjaxSpiderActionAddAllowedResource
func NewAjaxSpiderActionAddAllowedResourceRequest(server string, params *AjaxSpiderActionAddAllowedResourceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/addAllowedResource/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionAddExcludedElementRequest generates requests for AjaxSpiderActionAddExcludedElement
func NewAjaxSpiderActionAddExcludedElementRequest(server string, params *AjaxSpiderActionAddExcludedElementParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/addExcludedElement/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "element", runtime.ParamLocationQuery, params.Element); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Xpath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "xpath", runtime.ParamLocationQuery, *params.Xpath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Text != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, *params.Text); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AttributeName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attributeName", runtime.ParamLocationQuery, *params.AttributeName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AttributeValue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attributeValue", runtime.ParamLocationQuery, *params.AttributeValue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionModifyExcludedElementRequest generates requests for AjaxSpiderActionModifyExcludedElement
func NewAjaxSpiderActionModifyExcludedElementRequest(server string, params *AjaxSpiderActionModifyExcludedElementParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/modifyExcludedElement/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "element", runtime.ParamLocationQuery, params.Element); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.DescriptionNew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "descriptionNew", runtime.ParamLocationQuery, *params.DescriptionNew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Xpath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "xpath", runtime.ParamLocationQuery, *params.Xpath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Text != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, *params.Text); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AttributeName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attributeName", runtime.ParamLocationQuery, *params.AttributeName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AttributeValue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attributeValue", runtime.ParamLocationQuery, *params.AttributeValue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionRemoveAllowedResourceRequest generates requests for AjaxSpiderActionRemoveAllowedResource
func NewAjaxSpiderActionRemoveAllowedResourceRequest(server string, params *AjaxSpiderActionRemoveAllowedResourceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/removeAllowedResource/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionRemoveExcludedElementRequest generates requests for AjaxSpiderActionRemoveExcludedElement
func NewAjaxSpiderActionRemoveExcludedElementRequest(server string, params *AjaxSpiderActionRemoveExcludedElementParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/removeExcludedElement/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionScanRequest generates requests for AjaxSpiderActionScan
func NewAjaxSpiderActionScanRequest(server string, params *AjaxSpiderActionScanParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/scan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InScope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inScope", runtime.ParamLocationQuery, *params.InScope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContextName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, *params.ContextName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubtreeOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subtreeOnly", runtime.ParamLocationQuery, *params.SubtreeOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionScanAsUserRequest generates requests for AjaxSpiderActionScanAsUser
func NewAjaxSpiderActionScanAsUserRequest(server string, params *AjaxSpiderActionScanAsUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/scanAsUser/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userName", runtime.ParamLocationQuery, params.UserName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubtreeOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subtreeOnly", runtime.ParamLocationQuery, *params.SubtreeOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionSetEnabledAllowedResourceRequest generates requests for AjaxSpiderActionSetEnabledAllowedResource
func NewAjaxSpiderActionSetEnabledAllowedResourceRequest(server string, params *AjaxSpiderActionSetEnabledAllowedResourceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/setEnabledAllowedResource/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionSetOptionBrowserIdRequest generates requests for AjaxSpiderActionSetOptionBrowserId
func NewAjaxSpiderActionSetOptionBrowserIdRequest(server string, params *AjaxSpiderActionSetOptionBrowserIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/setOptionBrowserId/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionSetOptionClickDefaultElemsRequest generates requests for AjaxSpiderActionSetOptionClickDefaultElems
func NewAjaxSpiderActionSetOptionClickDefaultElemsRequest(server string, params *AjaxSpiderActionSetOptionClickDefaultElemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/setOptionClickDefaultElems/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionSetOptionClickElemsOnceRequest generates requests for AjaxSpiderActionSetOptionClickElemsOnce
func NewAjaxSpiderActionSetOptionClickElemsOnceRequest(server string, params *AjaxSpiderActionSetOptionClickElemsOnceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/setOptionClickElemsOnce/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionSetOptionEnableExtensionsRequest generates requests for AjaxSpiderActionSetOptionEnableExtensions
func NewAjaxSpiderActionSetOptionEnableExtensionsRequest(server string, params *AjaxSpiderActionSetOptionEnableExtensionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/setOptionEnableExtensions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionSetOptionEventWaitRequest generates requests for AjaxSpiderActionSetOptionEventWait
func NewAjaxSpiderActionSetOptionEventWaitRequest(server string, params *AjaxSpiderActionSetOptionEventWaitParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/setOptionEventWait/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionSetOptionLogoutAvoidanceRequest generates requests for AjaxSpiderActionSetOptionLogoutAvoidance
func NewAjaxSpiderActionSetOptionLogoutAvoidanceRequest(server string, params *AjaxSpiderActionSetOptionLogoutAvoidanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/setOptionLogoutAvoidance/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionSetOptionMaxCrawlDepthRequest generates requests for AjaxSpiderActionSetOptionMaxCrawlDepth
func NewAjaxSpiderActionSetOptionMaxCrawlDepthRequest(server string, params *AjaxSpiderActionSetOptionMaxCrawlDepthParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/setOptionMaxCrawlDepth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionSetOptionMaxCrawlStatesRequest generates requests for AjaxSpiderActionSetOptionMaxCrawlStates
func NewAjaxSpiderActionSetOptionMaxCrawlStatesRequest(server string, params *AjaxSpiderActionSetOptionMaxCrawlStatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/setOptionMaxCrawlStates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionSetOptionMaxDurationRequest generates requests for AjaxSpiderActionSetOptionMaxDuration
func NewAjaxSpiderActionSetOptionMaxDurationRequest(server string, params *AjaxSpiderActionSetOptionMaxDurationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/setOptionMaxDuration/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionSetOptionNumberOfBrowsersRequest generates requests for AjaxSpiderActionSetOptionNumberOfBrowsers
func NewAjaxSpiderActionSetOptionNumberOfBrowsersRequest(server string, params *AjaxSpiderActionSetOptionNumberOfBrowsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/setOptionNumberOfBrowsers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionSetOptionRandomInputsRequest generates requests for AjaxSpiderActionSetOptionRandomInputs
func NewAjaxSpiderActionSetOptionRandomInputsRequest(server string, params *AjaxSpiderActionSetOptionRandomInputsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/setOptionRandomInputs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionSetOptionReloadWaitRequest generates requests for AjaxSpiderActionSetOptionReloadWait
func NewAjaxSpiderActionSetOptionReloadWaitRequest(server string, params *AjaxSpiderActionSetOptionReloadWaitParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/setOptionReloadWait/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionSetOptionScopeCheckRequest generates requests for AjaxSpiderActionSetOptionScopeCheck
func NewAjaxSpiderActionSetOptionScopeCheckRequest(server string, params *AjaxSpiderActionSetOptionScopeCheckParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/setOptionScopeCheck/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderActionStopRequest generates requests for AjaxSpiderActionStop
func NewAjaxSpiderActionStopRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/action/stop/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewAllowedResourcesRequest generates requests for AjaxSpiderViewAllowedResources
func NewAjaxSpiderViewAllowedResourcesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/allowedResources/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewExcludedElementsRequest generates requests for AjaxSpiderViewExcludedElements
func NewAjaxSpiderViewExcludedElementsRequest(server string, params *AjaxSpiderViewExcludedElementsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/excludedElements/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewFullResultsRequest generates requests for AjaxSpiderViewFullResults
func NewAjaxSpiderViewFullResultsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/fullResults/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewNumberOfResultsRequest generates requests for AjaxSpiderViewNumberOfResults
func NewAjaxSpiderViewNumberOfResultsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/numberOfResults/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewOptionBrowserIdRequest generates requests for AjaxSpiderViewOptionBrowserId
func NewAjaxSpiderViewOptionBrowserIdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/optionBrowserId/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewOptionClickDefaultElemsRequest generates requests for AjaxSpiderViewOptionClickDefaultElems
func NewAjaxSpiderViewOptionClickDefaultElemsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/optionClickDefaultElems/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewOptionClickElemsOnceRequest generates requests for AjaxSpiderViewOptionClickElemsOnce
func NewAjaxSpiderViewOptionClickElemsOnceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/optionClickElemsOnce/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewOptionEnableExtensionsRequest generates requests for AjaxSpiderViewOptionEnableExtensions
func NewAjaxSpiderViewOptionEnableExtensionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/optionEnableExtensions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewOptionEventWaitRequest generates requests for AjaxSpiderViewOptionEventWait
func NewAjaxSpiderViewOptionEventWaitRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/optionEventWait/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewOptionLogoutAvoidanceRequest generates requests for AjaxSpiderViewOptionLogoutAvoidance
func NewAjaxSpiderViewOptionLogoutAvoidanceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/optionLogoutAvoidance/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewOptionMaxCrawlDepthRequest generates requests for AjaxSpiderViewOptionMaxCrawlDepth
func NewAjaxSpiderViewOptionMaxCrawlDepthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/optionMaxCrawlDepth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewOptionMaxCrawlStatesRequest generates requests for AjaxSpiderViewOptionMaxCrawlStates
func NewAjaxSpiderViewOptionMaxCrawlStatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/optionMaxCrawlStates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewOptionMaxDurationRequest generates requests for AjaxSpiderViewOptionMaxDuration
func NewAjaxSpiderViewOptionMaxDurationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/optionMaxDuration/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewOptionNumberOfBrowsersRequest generates requests for AjaxSpiderViewOptionNumberOfBrowsers
func NewAjaxSpiderViewOptionNumberOfBrowsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/optionNumberOfBrowsers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewOptionRandomInputsRequest generates requests for AjaxSpiderViewOptionRandomInputs
func NewAjaxSpiderViewOptionRandomInputsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/optionRandomInputs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewOptionReloadWaitRequest generates requests for AjaxSpiderViewOptionReloadWait
func NewAjaxSpiderViewOptionReloadWaitRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/optionReloadWait/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewOptionScopeCheckRequest generates requests for AjaxSpiderViewOptionScopeCheck
func NewAjaxSpiderViewOptionScopeCheckRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/optionScopeCheck/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewResultsRequest generates requests for AjaxSpiderViewResults
func NewAjaxSpiderViewResultsRequest(server string, params *AjaxSpiderViewResultsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/results/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAjaxSpiderViewStatusRequest generates requests for AjaxSpiderViewStatus
func NewAjaxSpiderViewStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ajaxSpider/view/status/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertActionAddAlertRequest generates requests for AlertActionAddAlert
func NewAlertActionAddAlertRequest(server string, params *AlertActionAddAlertParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alert/action/addAlert/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "messageId", runtime.ParamLocationQuery, params.MessageId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "riskId", runtime.ParamLocationQuery, params.RiskId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "confidenceId", runtime.ParamLocationQuery, params.ConfidenceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Param != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "param", runtime.ParamLocationQuery, *params.Param); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Attack != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attack", runtime.ParamLocationQuery, *params.Attack); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OtherInfo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "otherInfo", runtime.ParamLocationQuery, *params.OtherInfo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Solution != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "solution", runtime.ParamLocationQuery, *params.Solution); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.References != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "references", runtime.ParamLocationQuery, *params.References); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Evidence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evidence", runtime.ParamLocationQuery, *params.Evidence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CweId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cweId", runtime.ParamLocationQuery, *params.CweId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WascId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wascId", runtime.ParamLocationQuery, *params.WascId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertActionDeleteAlertRequest generates requests for AlertActionDeleteAlert
func NewAlertActionDeleteAlertRequest(server string, params *AlertActionDeleteAlertParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alert/action/deleteAlert/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertActionDeleteAlertsRequest generates requests for AlertActionDeleteAlerts
func NewAlertActionDeleteAlertsRequest(server string, params *AlertActionDeleteAlertsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alert/action/deleteAlerts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ContextName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, *params.ContextName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RiskId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "riskId", runtime.ParamLocationQuery, *params.RiskId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertActionDeleteAllAlertsRequest generates requests for AlertActionDeleteAllAlerts
func NewAlertActionDeleteAllAlertsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alert/action/deleteAllAlerts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertActionUpdateAlertRequest generates requests for AlertActionUpdateAlert
func NewAlertActionUpdateAlertRequest(server string, params *AlertActionUpdateAlertParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alert/action/updateAlert/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "riskId", runtime.ParamLocationQuery, params.RiskId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "confidenceId", runtime.ParamLocationQuery, params.ConfidenceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Param != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "param", runtime.ParamLocationQuery, *params.Param); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Attack != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attack", runtime.ParamLocationQuery, *params.Attack); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OtherInfo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "otherInfo", runtime.ParamLocationQuery, *params.OtherInfo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Solution != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "solution", runtime.ParamLocationQuery, *params.Solution); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.References != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "references", runtime.ParamLocationQuery, *params.References); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Evidence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evidence", runtime.ParamLocationQuery, *params.Evidence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CweId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cweId", runtime.ParamLocationQuery, *params.CweId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WascId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wascId", runtime.ParamLocationQuery, *params.WascId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertActionUpdateAlertsConfidenceRequest generates requests for AlertActionUpdateAlertsConfidence
func NewAlertActionUpdateAlertsConfidenceRequest(server string, params *AlertActionUpdateAlertsConfidenceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alert/action/updateAlertsConfidence/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "confidenceId", runtime.ParamLocationQuery, params.ConfidenceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertActionUpdateAlertsRiskRequest generates requests for AlertActionUpdateAlertsRisk
func NewAlertActionUpdateAlertsRiskRequest(server string, params *AlertActionUpdateAlertsRiskParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alert/action/updateAlertsRisk/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "riskId", runtime.ParamLocationQuery, params.RiskId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertViewAlertRequest generates requests for AlertViewAlert
func NewAlertViewAlertRequest(server string, params *AlertViewAlertParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alert/view/alert/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertViewAlertCountsByRiskRequest generates requests for AlertViewAlertCountsByRisk
func NewAlertViewAlertCountsByRiskRequest(server string, params *AlertViewAlertCountsByRiskParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alert/view/alertCountsByRisk/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Recurse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recurse", runtime.ParamLocationQuery, *params.Recurse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertViewAlertsRequest generates requests for AlertViewAlerts
func NewAlertViewAlertsRequest(server string, params *AlertViewAlertsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alert/view/alerts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RiskId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "riskId", runtime.ParamLocationQuery, *params.RiskId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContextName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, *params.ContextName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertViewAlertsByRiskRequest generates requests for AlertViewAlertsByRisk
func NewAlertViewAlertsByRiskRequest(server string, params *AlertViewAlertsByRiskParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alert/view/alertsByRisk/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Recurse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recurse", runtime.ParamLocationQuery, *params.Recurse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertViewAlertsSummaryRequest generates requests for AlertViewAlertsSummary
func NewAlertViewAlertsSummaryRequest(server string, params *AlertViewAlertsSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alert/view/alertsSummary/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertViewNumberOfAlertsRequest generates requests for AlertViewNumberOfAlerts
func NewAlertViewNumberOfAlertsRequest(server string, params *AlertViewNumberOfAlertsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alert/view/numberOfAlerts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RiskId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "riskId", runtime.ParamLocationQuery, *params.RiskId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertFilterActionAddAlertFilterRequest generates requests for AlertFilterActionAddAlertFilter
func NewAlertFilterActionAddAlertFilterRequest(server string, params *AlertFilterActionAddAlertFilterParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alertFilter/action/addAlertFilter/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ruleId", runtime.ParamLocationQuery, params.RuleId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "newLevel", runtime.ParamLocationQuery, params.NewLevel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UrlIsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "urlIsRegex", runtime.ParamLocationQuery, *params.UrlIsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Parameter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameter", runtime.ParamLocationQuery, *params.Parameter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParameterIsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameterIsRegex", runtime.ParamLocationQuery, *params.ParameterIsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Attack != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attack", runtime.ParamLocationQuery, *params.Attack); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AttackIsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attackIsRegex", runtime.ParamLocationQuery, *params.AttackIsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Evidence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evidence", runtime.ParamLocationQuery, *params.Evidence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EvidenceIsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evidenceIsRegex", runtime.ParamLocationQuery, *params.EvidenceIsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Methods != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "methods", runtime.ParamLocationQuery, *params.Methods); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertFilterActionAddGlobalAlertFilterRequest generates requests for AlertFilterActionAddGlobalAlertFilter
func NewAlertFilterActionAddGlobalAlertFilterRequest(server string, params *AlertFilterActionAddGlobalAlertFilterParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alertFilter/action/addGlobalAlertFilter/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ruleId", runtime.ParamLocationQuery, params.RuleId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "newLevel", runtime.ParamLocationQuery, params.NewLevel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UrlIsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "urlIsRegex", runtime.ParamLocationQuery, *params.UrlIsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Parameter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameter", runtime.ParamLocationQuery, *params.Parameter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParameterIsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameterIsRegex", runtime.ParamLocationQuery, *params.ParameterIsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Attack != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attack", runtime.ParamLocationQuery, *params.Attack); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AttackIsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attackIsRegex", runtime.ParamLocationQuery, *params.AttackIsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Evidence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evidence", runtime.ParamLocationQuery, *params.Evidence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EvidenceIsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evidenceIsRegex", runtime.ParamLocationQuery, *params.EvidenceIsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Methods != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "methods", runtime.ParamLocationQuery, *params.Methods); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertFilterActionApplyAllRequest generates requests for AlertFilterActionApplyAll
func NewAlertFilterActionApplyAllRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alertFilter/action/applyAll/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertFilterActionApplyContextRequest generates requests for AlertFilterActionApplyContext
func NewAlertFilterActionApplyContextRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alertFilter/action/applyContext/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertFilterActionApplyGlobalRequest generates requests for AlertFilterActionApplyGlobal
func NewAlertFilterActionApplyGlobalRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alertFilter/action/applyGlobal/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertFilterActionRemoveAlertFilterRequest generates requests for AlertFilterActionRemoveAlertFilter
func NewAlertFilterActionRemoveAlertFilterRequest(server string, params *AlertFilterActionRemoveAlertFilterParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alertFilter/action/removeAlertFilter/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ruleId", runtime.ParamLocationQuery, params.RuleId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "newLevel", runtime.ParamLocationQuery, params.NewLevel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UrlIsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "urlIsRegex", runtime.ParamLocationQuery, *params.UrlIsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Parameter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameter", runtime.ParamLocationQuery, *params.Parameter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParameterIsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameterIsRegex", runtime.ParamLocationQuery, *params.ParameterIsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Attack != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attack", runtime.ParamLocationQuery, *params.Attack); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AttackIsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attackIsRegex", runtime.ParamLocationQuery, *params.AttackIsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Evidence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evidence", runtime.ParamLocationQuery, *params.Evidence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EvidenceIsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evidenceIsRegex", runtime.ParamLocationQuery, *params.EvidenceIsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Methods != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "methods", runtime.ParamLocationQuery, *params.Methods); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertFilterActionRemoveGlobalAlertFilterRequest generates requests for AlertFilterActionRemoveGlobalAlertFilter
func NewAlertFilterActionRemoveGlobalAlertFilterRequest(server string, params *AlertFilterActionRemoveGlobalAlertFilterParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alertFilter/action/removeGlobalAlertFilter/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ruleId", runtime.ParamLocationQuery, params.RuleId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "newLevel", runtime.ParamLocationQuery, params.NewLevel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UrlIsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "urlIsRegex", runtime.ParamLocationQuery, *params.UrlIsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Parameter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameter", runtime.ParamLocationQuery, *params.Parameter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParameterIsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameterIsRegex", runtime.ParamLocationQuery, *params.ParameterIsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Attack != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attack", runtime.ParamLocationQuery, *params.Attack); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AttackIsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attackIsRegex", runtime.ParamLocationQuery, *params.AttackIsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Evidence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evidence", runtime.ParamLocationQuery, *params.Evidence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EvidenceIsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evidenceIsRegex", runtime.ParamLocationQuery, *params.EvidenceIsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Methods != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "methods", runtime.ParamLocationQuery, *params.Methods); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertFilterActionTestAllRequest generates requests for AlertFilterActionTestAll
func NewAlertFilterActionTestAllRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alertFilter/action/testAll/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertFilterActionTestContextRequest generates requests for AlertFilterActionTestContext
func NewAlertFilterActionTestContextRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alertFilter/action/testContext/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertFilterActionTestGlobalRequest generates requests for AlertFilterActionTestGlobal
func NewAlertFilterActionTestGlobalRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alertFilter/action/testGlobal/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertFilterViewAlertFilterListRequest generates requests for AlertFilterViewAlertFilterList
func NewAlertFilterViewAlertFilterListRequest(server string, params *AlertFilterViewAlertFilterListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alertFilter/view/alertFilterList/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertFilterViewGlobalAlertFilterListRequest generates requests for AlertFilterViewGlobalAlertFilterList
func NewAlertFilterViewGlobalAlertFilterListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/alertFilter/view/globalAlertFilterList/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionAddExcludedParamRequest generates requests for AscanActionAddExcludedParam
func NewAscanActionAddExcludedParamRequest(server string, params *AscanActionAddExcludedParamParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/addExcludedParam/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionAddScanPolicyRequest generates requests for AscanActionAddScanPolicy
func NewAscanActionAddScanPolicyRequest(server string, params *AscanActionAddScanPolicyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/addScanPolicy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanPolicyName", runtime.ParamLocationQuery, params.ScanPolicyName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.AlertThreshold != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alertThreshold", runtime.ParamLocationQuery, *params.AlertThreshold); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AttackStrength != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attackStrength", runtime.ParamLocationQuery, *params.AttackStrength); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionClearExcludedFromScanRequest generates requests for AscanActionClearExcludedFromScan
func NewAscanActionClearExcludedFromScanRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/clearExcludedFromScan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionDisableAllScannersRequest generates requests for AscanActionDisableAllScanners
func NewAscanActionDisableAllScannersRequest(server string, params *AscanActionDisableAllScannersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/disableAllScanners/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ScanPolicyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanPolicyName", runtime.ParamLocationQuery, *params.ScanPolicyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionDisableScannersRequest generates requests for AscanActionDisableScanners
func NewAscanActionDisableScannersRequest(server string, params *AscanActionDisableScannersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/disableScanners/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ScanPolicyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanPolicyName", runtime.ParamLocationQuery, *params.ScanPolicyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionEnableAllScannersRequest generates requests for AscanActionEnableAllScanners
func NewAscanActionEnableAllScannersRequest(server string, params *AscanActionEnableAllScannersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/enableAllScanners/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ScanPolicyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanPolicyName", runtime.ParamLocationQuery, *params.ScanPolicyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionEnableScannersRequest generates requests for AscanActionEnableScanners
func NewAscanActionEnableScannersRequest(server string, params *AscanActionEnableScannersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/enableScanners/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ScanPolicyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanPolicyName", runtime.ParamLocationQuery, *params.ScanPolicyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionExcludeFromScanRequest generates requests for AscanActionExcludeFromScan
func NewAscanActionExcludeFromScanRequest(server string, params *AscanActionExcludeFromScanParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/excludeFromScan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionImportScanPolicyRequest generates requests for AscanActionImportScanPolicy
func NewAscanActionImportScanPolicyRequest(server string, params *AscanActionImportScanPolicyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/importScanPolicy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionModifyExcludedParamRequest generates requests for AscanActionModifyExcludedParam
func NewAscanActionModifyExcludedParamRequest(server string, params *AscanActionModifyExcludedParamParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/modifyExcludedParam/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idx", runtime.ParamLocationQuery, params.Idx); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionPauseRequest generates requests for AscanActionPause
func NewAscanActionPauseRequest(server string, params *AscanActionPauseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/pause/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, params.ScanId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionPauseAllScansRequest generates requests for AscanActionPauseAllScans
func NewAscanActionPauseAllScansRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/pauseAllScans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionRemoveAllScansRequest generates requests for AscanActionRemoveAllScans
func NewAscanActionRemoveAllScansRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/removeAllScans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionRemoveExcludedParamRequest generates requests for AscanActionRemoveExcludedParam
func NewAscanActionRemoveExcludedParamRequest(server string, params *AscanActionRemoveExcludedParamParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/removeExcludedParam/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idx", runtime.ParamLocationQuery, params.Idx); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionRemoveScanRequest generates requests for AscanActionRemoveScan
func NewAscanActionRemoveScanRequest(server string, params *AscanActionRemoveScanParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/removeScan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, params.ScanId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionRemoveScanPolicyRequest generates requests for AscanActionRemoveScanPolicy
func NewAscanActionRemoveScanPolicyRequest(server string, params *AscanActionRemoveScanPolicyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/removeScanPolicy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanPolicyName", runtime.ParamLocationQuery, params.ScanPolicyName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionResumeRequest generates requests for AscanActionResume
func NewAscanActionResumeRequest(server string, params *AscanActionResumeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/resume/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, params.ScanId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionResumeAllScansRequest generates requests for AscanActionResumeAllScans
func NewAscanActionResumeAllScansRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/resumeAllScans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionScanRequest generates requests for AscanActionScan
func NewAscanActionScanRequest(server string, params *AscanActionScanParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/scan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Recurse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recurse", runtime.ParamLocationQuery, *params.Recurse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InScopeOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inScopeOnly", runtime.ParamLocationQuery, *params.InScopeOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScanPolicyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanPolicyName", runtime.ParamLocationQuery, *params.ScanPolicyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Method != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "method", runtime.ParamLocationQuery, *params.Method); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostData != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postData", runtime.ParamLocationQuery, *params.PostData); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContextId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, *params.ContextId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionScanAsUserRequest generates requests for AscanActionScanAsUser
func NewAscanActionScanAsUserRequest(server string, params *AscanActionScanAsUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/scanAsUser/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContextId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, *params.ContextId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Recurse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recurse", runtime.ParamLocationQuery, *params.Recurse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScanPolicyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanPolicyName", runtime.ParamLocationQuery, *params.ScanPolicyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Method != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "method", runtime.ParamLocationQuery, *params.Method); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostData != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postData", runtime.ParamLocationQuery, *params.PostData); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetEnabledPoliciesRequest generates requests for AscanActionSetEnabledPolicies
func NewAscanActionSetEnabledPoliciesRequest(server string, params *AscanActionSetEnabledPoliciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setEnabledPolicies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ScanPolicyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanPolicyName", runtime.ParamLocationQuery, *params.ScanPolicyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionAddQueryParamRequest generates requests for AscanActionSetOptionAddQueryParam
func NewAscanActionSetOptionAddQueryParamRequest(server string, params *AscanActionSetOptionAddQueryParamParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionAddQueryParam/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionAllowAttackOnStartRequest generates requests for AscanActionSetOptionAllowAttackOnStart
func NewAscanActionSetOptionAllowAttackOnStartRequest(server string, params *AscanActionSetOptionAllowAttackOnStartParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionAllowAttackOnStart/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionAttackPolicyRequest generates requests for AscanActionSetOptionAttackPolicy
func NewAscanActionSetOptionAttackPolicyRequest(server string, params *AscanActionSetOptionAttackPolicyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionAttackPolicy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionDefaultPolicyRequest generates requests for AscanActionSetOptionDefaultPolicy
func NewAscanActionSetOptionDefaultPolicyRequest(server string, params *AscanActionSetOptionDefaultPolicyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionDefaultPolicy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionDelayInMsRequest generates requests for AscanActionSetOptionDelayInMs
func NewAscanActionSetOptionDelayInMsRequest(server string, params *AscanActionSetOptionDelayInMsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionDelayInMs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionEncodeCookieValuesRequest generates requests for AscanActionSetOptionEncodeCookieValues
func NewAscanActionSetOptionEncodeCookieValuesRequest(server string, params *AscanActionSetOptionEncodeCookieValuesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionEncodeCookieValues/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionHandleAntiCSRFTokensRequest generates requests for AscanActionSetOptionHandleAntiCSRFTokens
func NewAscanActionSetOptionHandleAntiCSRFTokensRequest(server string, params *AscanActionSetOptionHandleAntiCSRFTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionHandleAntiCSRFTokens/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionHostPerScanRequest generates requests for AscanActionSetOptionHostPerScan
func NewAscanActionSetOptionHostPerScanRequest(server string, params *AscanActionSetOptionHostPerScanParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionHostPerScan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionInjectPluginIdInHeaderRequest generates requests for AscanActionSetOptionInjectPluginIdInHeader
func NewAscanActionSetOptionInjectPluginIdInHeaderRequest(server string, params *AscanActionSetOptionInjectPluginIdInHeaderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionInjectPluginIdInHeader/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionMaxAlertsPerRuleRequest generates requests for AscanActionSetOptionMaxAlertsPerRule
func NewAscanActionSetOptionMaxAlertsPerRuleRequest(server string, params *AscanActionSetOptionMaxAlertsPerRuleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionMaxAlertsPerRule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionMaxChartTimeInMinsRequest generates requests for AscanActionSetOptionMaxChartTimeInMins
func NewAscanActionSetOptionMaxChartTimeInMinsRequest(server string, params *AscanActionSetOptionMaxChartTimeInMinsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionMaxChartTimeInMins/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionMaxResultsToListRequest generates requests for AscanActionSetOptionMaxResultsToList
func NewAscanActionSetOptionMaxResultsToListRequest(server string, params *AscanActionSetOptionMaxResultsToListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionMaxResultsToList/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionMaxRuleDurationInMinsRequest generates requests for AscanActionSetOptionMaxRuleDurationInMins
func NewAscanActionSetOptionMaxRuleDurationInMinsRequest(server string, params *AscanActionSetOptionMaxRuleDurationInMinsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionMaxRuleDurationInMins/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionMaxScanDurationInMinsRequest generates requests for AscanActionSetOptionMaxScanDurationInMins
func NewAscanActionSetOptionMaxScanDurationInMinsRequest(server string, params *AscanActionSetOptionMaxScanDurationInMinsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionMaxScanDurationInMins/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionMaxScansInUIRequest generates requests for AscanActionSetOptionMaxScansInUI
func NewAscanActionSetOptionMaxScansInUIRequest(server string, params *AscanActionSetOptionMaxScansInUIParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionMaxScansInUI/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionPromptInAttackModeRequest generates requests for AscanActionSetOptionPromptInAttackMode
func NewAscanActionSetOptionPromptInAttackModeRequest(server string, params *AscanActionSetOptionPromptInAttackModeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionPromptInAttackMode/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionPromptToClearFinishedScansRequest generates requests for AscanActionSetOptionPromptToClearFinishedScans
func NewAscanActionSetOptionPromptToClearFinishedScansRequest(server string, params *AscanActionSetOptionPromptToClearFinishedScansParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionPromptToClearFinishedScans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionRescanInAttackModeRequest generates requests for AscanActionSetOptionRescanInAttackMode
func NewAscanActionSetOptionRescanInAttackModeRequest(server string, params *AscanActionSetOptionRescanInAttackModeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionRescanInAttackMode/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionScanHeadersAllRequestsRequest generates requests for AscanActionSetOptionScanHeadersAllRequests
func NewAscanActionSetOptionScanHeadersAllRequestsRequest(server string, params *AscanActionSetOptionScanHeadersAllRequestsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionScanHeadersAllRequests/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionScanNullJsonValuesRequest generates requests for AscanActionSetOptionScanNullJsonValues
func NewAscanActionSetOptionScanNullJsonValuesRequest(server string, params *AscanActionSetOptionScanNullJsonValuesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionScanNullJsonValues/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionShowAdvancedDialogRequest generates requests for AscanActionSetOptionShowAdvancedDialog
func NewAscanActionSetOptionShowAdvancedDialogRequest(server string, params *AscanActionSetOptionShowAdvancedDialogParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionShowAdvancedDialog/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionTargetParamsEnabledRPCRequest generates requests for AscanActionSetOptionTargetParamsEnabledRPC
func NewAscanActionSetOptionTargetParamsEnabledRPCRequest(server string, params *AscanActionSetOptionTargetParamsEnabledRPCParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionTargetParamsEnabledRPC/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionTargetParamsInjectableRequest generates requests for AscanActionSetOptionTargetParamsInjectable
func NewAscanActionSetOptionTargetParamsInjectableRequest(server string, params *AscanActionSetOptionTargetParamsInjectableParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionTargetParamsInjectable/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetOptionThreadPerHostRequest generates requests for AscanActionSetOptionThreadPerHost
func NewAscanActionSetOptionThreadPerHostRequest(server string, params *AscanActionSetOptionThreadPerHostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setOptionThreadPerHost/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetPolicyAlertThresholdRequest generates requests for AscanActionSetPolicyAlertThreshold
func NewAscanActionSetPolicyAlertThresholdRequest(server string, params *AscanActionSetPolicyAlertThresholdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setPolicyAlertThreshold/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alertThreshold", runtime.ParamLocationQuery, params.AlertThreshold); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ScanPolicyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanPolicyName", runtime.ParamLocationQuery, *params.ScanPolicyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetPolicyAttackStrengthRequest generates requests for AscanActionSetPolicyAttackStrength
func NewAscanActionSetPolicyAttackStrengthRequest(server string, params *AscanActionSetPolicyAttackStrengthParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setPolicyAttackStrength/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attackStrength", runtime.ParamLocationQuery, params.AttackStrength); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ScanPolicyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanPolicyName", runtime.ParamLocationQuery, *params.ScanPolicyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetScannerAlertThresholdRequest generates requests for AscanActionSetScannerAlertThreshold
func NewAscanActionSetScannerAlertThresholdRequest(server string, params *AscanActionSetScannerAlertThresholdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setScannerAlertThreshold/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alertThreshold", runtime.ParamLocationQuery, params.AlertThreshold); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ScanPolicyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanPolicyName", runtime.ParamLocationQuery, *params.ScanPolicyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSetScannerAttackStrengthRequest generates requests for AscanActionSetScannerAttackStrength
func NewAscanActionSetScannerAttackStrengthRequest(server string, params *AscanActionSetScannerAttackStrengthParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/setScannerAttackStrength/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attackStrength", runtime.ParamLocationQuery, params.AttackStrength); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ScanPolicyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanPolicyName", runtime.ParamLocationQuery, *params.ScanPolicyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionSkipScannerRequest generates requests for AscanActionSkipScanner
func NewAscanActionSkipScannerRequest(server string, params *AscanActionSkipScannerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/skipScanner/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, params.ScanId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scannerId", runtime.ParamLocationQuery, params.ScannerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionStopRequest generates requests for AscanActionStop
func NewAscanActionStopRequest(server string, params *AscanActionStopParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/stop/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, params.ScanId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionStopAllScansRequest generates requests for AscanActionStopAllScans
func NewAscanActionStopAllScansRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/stopAllScans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanActionUpdateScanPolicyRequest generates requests for AscanActionUpdateScanPolicy
func NewAscanActionUpdateScanPolicyRequest(server string, params *AscanActionUpdateScanPolicyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/action/updateScanPolicy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanPolicyName", runtime.ParamLocationQuery, params.ScanPolicyName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.AlertThreshold != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alertThreshold", runtime.ParamLocationQuery, *params.AlertThreshold); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AttackStrength != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attackStrength", runtime.ParamLocationQuery, *params.AttackStrength); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewAlertsIdsRequest generates requests for AscanViewAlertsIds
func NewAscanViewAlertsIdsRequest(server string, params *AscanViewAlertsIdsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/alertsIds/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, params.ScanId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewAttackModeQueueRequest generates requests for AscanViewAttackModeQueue
func NewAscanViewAttackModeQueueRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/attackModeQueue/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewExcludedFromScanRequest generates requests for AscanViewExcludedFromScan
func NewAscanViewExcludedFromScanRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/excludedFromScan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewExcludedParamTypesRequest generates requests for AscanViewExcludedParamTypes
func NewAscanViewExcludedParamTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/excludedParamTypes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewExcludedParamsRequest generates requests for AscanViewExcludedParams
func NewAscanViewExcludedParamsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/excludedParams/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewMessagesIdsRequest generates requests for AscanViewMessagesIds
func NewAscanViewMessagesIdsRequest(server string, params *AscanViewMessagesIdsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/messagesIds/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, params.ScanId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionAddQueryParamRequest generates requests for AscanViewOptionAddQueryParam
func NewAscanViewOptionAddQueryParamRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionAddQueryParam/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionAllowAttackOnStartRequest generates requests for AscanViewOptionAllowAttackOnStart
func NewAscanViewOptionAllowAttackOnStartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionAllowAttackOnStart/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionAttackPolicyRequest generates requests for AscanViewOptionAttackPolicy
func NewAscanViewOptionAttackPolicyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionAttackPolicy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionDefaultPolicyRequest generates requests for AscanViewOptionDefaultPolicy
func NewAscanViewOptionDefaultPolicyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionDefaultPolicy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionDelayInMsRequest generates requests for AscanViewOptionDelayInMs
func NewAscanViewOptionDelayInMsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionDelayInMs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionEncodeCookieValuesRequest generates requests for AscanViewOptionEncodeCookieValues
func NewAscanViewOptionEncodeCookieValuesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionEncodeCookieValues/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionExcludedParamListRequest generates requests for AscanViewOptionExcludedParamList
func NewAscanViewOptionExcludedParamListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionExcludedParamList/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionHandleAntiCSRFTokensRequest generates requests for AscanViewOptionHandleAntiCSRFTokens
func NewAscanViewOptionHandleAntiCSRFTokensRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionHandleAntiCSRFTokens/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionHostPerScanRequest generates requests for AscanViewOptionHostPerScan
func NewAscanViewOptionHostPerScanRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionHostPerScan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionInjectPluginIdInHeaderRequest generates requests for AscanViewOptionInjectPluginIdInHeader
func NewAscanViewOptionInjectPluginIdInHeaderRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionInjectPluginIdInHeader/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionMaxAlertsPerRuleRequest generates requests for AscanViewOptionMaxAlertsPerRule
func NewAscanViewOptionMaxAlertsPerRuleRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionMaxAlertsPerRule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionMaxChartTimeInMinsRequest generates requests for AscanViewOptionMaxChartTimeInMins
func NewAscanViewOptionMaxChartTimeInMinsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionMaxChartTimeInMins/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionMaxResultsToListRequest generates requests for AscanViewOptionMaxResultsToList
func NewAscanViewOptionMaxResultsToListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionMaxResultsToList/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionMaxRuleDurationInMinsRequest generates requests for AscanViewOptionMaxRuleDurationInMins
func NewAscanViewOptionMaxRuleDurationInMinsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionMaxRuleDurationInMins/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionMaxScanDurationInMinsRequest generates requests for AscanViewOptionMaxScanDurationInMins
func NewAscanViewOptionMaxScanDurationInMinsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionMaxScanDurationInMins/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionMaxScansInUIRequest generates requests for AscanViewOptionMaxScansInUI
func NewAscanViewOptionMaxScansInUIRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionMaxScansInUI/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionPromptInAttackModeRequest generates requests for AscanViewOptionPromptInAttackMode
func NewAscanViewOptionPromptInAttackModeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionPromptInAttackMode/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionPromptToClearFinishedScansRequest generates requests for AscanViewOptionPromptToClearFinishedScans
func NewAscanViewOptionPromptToClearFinishedScansRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionPromptToClearFinishedScans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionRescanInAttackModeRequest generates requests for AscanViewOptionRescanInAttackMode
func NewAscanViewOptionRescanInAttackModeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionRescanInAttackMode/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionScanHeadersAllRequestsRequest generates requests for AscanViewOptionScanHeadersAllRequests
func NewAscanViewOptionScanHeadersAllRequestsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionScanHeadersAllRequests/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionScanNullJsonValuesRequest generates requests for AscanViewOptionScanNullJsonValues
func NewAscanViewOptionScanNullJsonValuesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionScanNullJsonValues/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionShowAdvancedDialogRequest generates requests for AscanViewOptionShowAdvancedDialog
func NewAscanViewOptionShowAdvancedDialogRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionShowAdvancedDialog/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionTargetParamsEnabledRPCRequest generates requests for AscanViewOptionTargetParamsEnabledRPC
func NewAscanViewOptionTargetParamsEnabledRPCRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionTargetParamsEnabledRPC/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionTargetParamsInjectableRequest generates requests for AscanViewOptionTargetParamsInjectable
func NewAscanViewOptionTargetParamsInjectableRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionTargetParamsInjectable/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewOptionThreadPerHostRequest generates requests for AscanViewOptionThreadPerHost
func NewAscanViewOptionThreadPerHostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/optionThreadPerHost/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewPoliciesRequest generates requests for AscanViewPolicies
func NewAscanViewPoliciesRequest(server string, params *AscanViewPoliciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/policies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ScanPolicyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanPolicyName", runtime.ParamLocationQuery, *params.ScanPolicyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PolicyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policyId", runtime.ParamLocationQuery, *params.PolicyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewScanPolicyNamesRequest generates requests for AscanViewScanPolicyNames
func NewAscanViewScanPolicyNamesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/scanPolicyNames/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewScanProgressRequest generates requests for AscanViewScanProgress
func NewAscanViewScanProgressRequest(server string, params *AscanViewScanProgressParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/scanProgress/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ScanId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, *params.ScanId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewScannersRequest generates requests for AscanViewScanners
func NewAscanViewScannersRequest(server string, params *AscanViewScannersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/scanners/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ScanPolicyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanPolicyName", runtime.ParamLocationQuery, *params.ScanPolicyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PolicyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policyId", runtime.ParamLocationQuery, *params.PolicyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewScansRequest generates requests for AscanViewScans
func NewAscanViewScansRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/scans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAscanViewStatusRequest generates requests for AscanViewStatus
func NewAscanViewStatusRequest(server string, params *AscanViewStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ascan/view/status/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ScanId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, *params.ScanId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthenticationActionSetAuthenticationMethodRequest generates requests for AuthenticationActionSetAuthenticationMethod
func NewAuthenticationActionSetAuthenticationMethodRequest(server string, params *AuthenticationActionSetAuthenticationMethodParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/authentication/action/setAuthenticationMethod/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authMethodName", runtime.ParamLocationQuery, params.AuthMethodName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.AuthMethodConfigParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authMethodConfigParams", runtime.ParamLocationQuery, *params.AuthMethodConfigParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthenticationActionSetLoggedInIndicatorRequest generates requests for AuthenticationActionSetLoggedInIndicator
func NewAuthenticationActionSetLoggedInIndicatorRequest(server string, params *AuthenticationActionSetLoggedInIndicatorParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/authentication/action/setLoggedInIndicator/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "loggedInIndicatorRegex", runtime.ParamLocationQuery, params.LoggedInIndicatorRegex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthenticationActionSetLoggedOutIndicatorRequest generates requests for AuthenticationActionSetLoggedOutIndicator
func NewAuthenticationActionSetLoggedOutIndicatorRequest(server string, params *AuthenticationActionSetLoggedOutIndicatorParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/authentication/action/setLoggedOutIndicator/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "loggedOutIndicatorRegex", runtime.ParamLocationQuery, params.LoggedOutIndicatorRegex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthenticationViewGetAuthenticationMethodRequest generates requests for AuthenticationViewGetAuthenticationMethod
func NewAuthenticationViewGetAuthenticationMethodRequest(server string, params *AuthenticationViewGetAuthenticationMethodParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/authentication/view/getAuthenticationMethod/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthenticationViewGetAuthenticationMethodConfigParamsRequest generates requests for AuthenticationViewGetAuthenticationMethodConfigParams
func NewAuthenticationViewGetAuthenticationMethodConfigParamsRequest(server string, params *AuthenticationViewGetAuthenticationMethodConfigParamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/authentication/view/getAuthenticationMethodConfigParams/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authMethodName", runtime.ParamLocationQuery, params.AuthMethodName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthenticationViewGetLoggedInIndicatorRequest generates requests for AuthenticationViewGetLoggedInIndicator
func NewAuthenticationViewGetLoggedInIndicatorRequest(server string, params *AuthenticationViewGetLoggedInIndicatorParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/authentication/view/getLoggedInIndicator/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthenticationViewGetLoggedOutIndicatorRequest generates requests for AuthenticationViewGetLoggedOutIndicator
func NewAuthenticationViewGetLoggedOutIndicatorRequest(server string, params *AuthenticationViewGetLoggedOutIndicatorParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/authentication/view/getLoggedOutIndicator/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthenticationViewGetSupportedAuthenticationMethodsRequest generates requests for AuthenticationViewGetSupportedAuthenticationMethods
func NewAuthenticationViewGetSupportedAuthenticationMethodsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/authentication/view/getSupportedAuthenticationMethods/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthorizationActionSetBasicAuthorizationDetectionMethodRequest generates requests for AuthorizationActionSetBasicAuthorizationDetectionMethod
func NewAuthorizationActionSetBasicAuthorizationDetectionMethodRequest(server string, params *AuthorizationActionSetBasicAuthorizationDetectionMethodParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/authorization/action/setBasicAuthorizationDetectionMethod/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.HeaderRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "headerRegex", runtime.ParamLocationQuery, *params.HeaderRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BodyRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bodyRegex", runtime.ParamLocationQuery, *params.BodyRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusCode", runtime.ParamLocationQuery, *params.StatusCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LogicalOperator != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "logicalOperator", runtime.ParamLocationQuery, *params.LogicalOperator); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthorizationViewGetAuthorizationDetectionMethodRequest generates requests for AuthorizationViewGetAuthorizationDetectionMethod
func NewAuthorizationViewGetAuthorizationDetectionMethodRequest(server string, params *AuthorizationViewGetAuthorizationDetectionMethodParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/authorization/view/getAuthorizationDetectionMethod/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutomationActionEndDelayJobRequest generates requests for AutomationActionEndDelayJob
func NewAutomationActionEndDelayJobRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/automation/action/endDelayJob/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutomationActionRunPlanRequest generates requests for AutomationActionRunPlan
func NewAutomationActionRunPlanRequest(server string, params *AutomationActionRunPlanParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/automation/action/runPlan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filePath", runtime.ParamLocationQuery, params.FilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutomationViewPlanProgressRequest generates requests for AutomationViewPlanProgress
func NewAutomationViewPlanProgressRequest(server string, params *AutomationViewPlanProgressParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/automation/view/planProgress/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "planId", runtime.ParamLocationQuery, params.PlanId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateActionDownloadLatestReleaseRequest generates requests for AutoupdateActionDownloadLatestRelease
func NewAutoupdateActionDownloadLatestReleaseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/action/downloadLatestRelease/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateActionInstallAddonRequest generates requests for AutoupdateActionInstallAddon
func NewAutoupdateActionInstallAddonRequest(server string, params *AutoupdateActionInstallAddonParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/action/installAddon/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateActionInstallLocalAddonRequest generates requests for AutoupdateActionInstallLocalAddon
func NewAutoupdateActionInstallLocalAddonRequest(server string, params *AutoupdateActionInstallLocalAddonParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/action/installLocalAddon/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, params.File); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateActionSetOptionCheckAddonUpdatesRequest generates requests for AutoupdateActionSetOptionCheckAddonUpdates
func NewAutoupdateActionSetOptionCheckAddonUpdatesRequest(server string, params *AutoupdateActionSetOptionCheckAddonUpdatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/action/setOptionCheckAddonUpdates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateActionSetOptionCheckOnStartRequest generates requests for AutoupdateActionSetOptionCheckOnStart
func NewAutoupdateActionSetOptionCheckOnStartRequest(server string, params *AutoupdateActionSetOptionCheckOnStartParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/action/setOptionCheckOnStart/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateActionSetOptionDownloadNewReleaseRequest generates requests for AutoupdateActionSetOptionDownloadNewRelease
func NewAutoupdateActionSetOptionDownloadNewReleaseRequest(server string, params *AutoupdateActionSetOptionDownloadNewReleaseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/action/setOptionDownloadNewRelease/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateActionSetOptionInstallAddonUpdatesRequest generates requests for AutoupdateActionSetOptionInstallAddonUpdates
func NewAutoupdateActionSetOptionInstallAddonUpdatesRequest(server string, params *AutoupdateActionSetOptionInstallAddonUpdatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/action/setOptionInstallAddonUpdates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateActionSetOptionInstallScannerRulesRequest generates requests for AutoupdateActionSetOptionInstallScannerRules
func NewAutoupdateActionSetOptionInstallScannerRulesRequest(server string, params *AutoupdateActionSetOptionInstallScannerRulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/action/setOptionInstallScannerRules/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateActionSetOptionReportAlphaAddonsRequest generates requests for AutoupdateActionSetOptionReportAlphaAddons
func NewAutoupdateActionSetOptionReportAlphaAddonsRequest(server string, params *AutoupdateActionSetOptionReportAlphaAddonsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/action/setOptionReportAlphaAddons/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateActionSetOptionReportBetaAddonsRequest generates requests for AutoupdateActionSetOptionReportBetaAddons
func NewAutoupdateActionSetOptionReportBetaAddonsRequest(server string, params *AutoupdateActionSetOptionReportBetaAddonsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/action/setOptionReportBetaAddons/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateActionSetOptionReportReleaseAddonsRequest generates requests for AutoupdateActionSetOptionReportReleaseAddons
func NewAutoupdateActionSetOptionReportReleaseAddonsRequest(server string, params *AutoupdateActionSetOptionReportReleaseAddonsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/action/setOptionReportReleaseAddons/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateActionUninstallAddonRequest generates requests for AutoupdateActionUninstallAddon
func NewAutoupdateActionUninstallAddonRequest(server string, params *AutoupdateActionUninstallAddonParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/action/uninstallAddon/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewInstalledAddonsRequest generates requests for AutoupdateViewInstalledAddons
func NewAutoupdateViewInstalledAddonsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/installedAddons/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewIsLatestVersionRequest generates requests for AutoupdateViewIsLatestVersion
func NewAutoupdateViewIsLatestVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/isLatestVersion/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewLatestVersionNumberRequest generates requests for AutoupdateViewLatestVersionNumber
func NewAutoupdateViewLatestVersionNumberRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/latestVersionNumber/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewLocalAddonsRequest generates requests for AutoupdateViewLocalAddons
func NewAutoupdateViewLocalAddonsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/localAddons/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewMarketplaceAddonsRequest generates requests for AutoupdateViewMarketplaceAddons
func NewAutoupdateViewMarketplaceAddonsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/marketplaceAddons/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewNewAddonsRequest generates requests for AutoupdateViewNewAddons
func NewAutoupdateViewNewAddonsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/newAddons/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewOptionAddonDirectoriesRequest generates requests for AutoupdateViewOptionAddonDirectories
func NewAutoupdateViewOptionAddonDirectoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/optionAddonDirectories/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewOptionCheckAddonUpdatesRequest generates requests for AutoupdateViewOptionCheckAddonUpdates
func NewAutoupdateViewOptionCheckAddonUpdatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/optionCheckAddonUpdates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewOptionCheckOnStartRequest generates requests for AutoupdateViewOptionCheckOnStart
func NewAutoupdateViewOptionCheckOnStartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/optionCheckOnStart/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewOptionDayLastCheckedRequest generates requests for AutoupdateViewOptionDayLastChecked
func NewAutoupdateViewOptionDayLastCheckedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/optionDayLastChecked/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewOptionDayLastInstallWarnedRequest generates requests for AutoupdateViewOptionDayLastInstallWarned
func NewAutoupdateViewOptionDayLastInstallWarnedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/optionDayLastInstallWarned/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewOptionDayLastUpdateWarnedRequest generates requests for AutoupdateViewOptionDayLastUpdateWarned
func NewAutoupdateViewOptionDayLastUpdateWarnedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/optionDayLastUpdateWarned/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewOptionDownloadDirectoryRequest generates requests for AutoupdateViewOptionDownloadDirectory
func NewAutoupdateViewOptionDownloadDirectoryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/optionDownloadDirectory/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewOptionDownloadNewReleaseRequest generates requests for AutoupdateViewOptionDownloadNewRelease
func NewAutoupdateViewOptionDownloadNewReleaseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/optionDownloadNewRelease/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewOptionInstallAddonUpdatesRequest generates requests for AutoupdateViewOptionInstallAddonUpdates
func NewAutoupdateViewOptionInstallAddonUpdatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/optionInstallAddonUpdates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewOptionInstallScannerRulesRequest generates requests for AutoupdateViewOptionInstallScannerRules
func NewAutoupdateViewOptionInstallScannerRulesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/optionInstallScannerRules/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewOptionReportAlphaAddonsRequest generates requests for AutoupdateViewOptionReportAlphaAddons
func NewAutoupdateViewOptionReportAlphaAddonsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/optionReportAlphaAddons/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewOptionReportBetaAddonsRequest generates requests for AutoupdateViewOptionReportBetaAddons
func NewAutoupdateViewOptionReportBetaAddonsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/optionReportBetaAddons/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewOptionReportReleaseAddonsRequest generates requests for AutoupdateViewOptionReportReleaseAddons
func NewAutoupdateViewOptionReportReleaseAddonsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/optionReportReleaseAddons/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoupdateViewUpdatedAddonsRequest generates requests for AutoupdateViewUpdatedAddons
func NewAutoupdateViewUpdatedAddonsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/autoupdate/view/updatedAddons/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBreakActionAddHttpBreakpointRequest generates requests for BreakActionAddHttpBreakpoint
func NewBreakActionAddHttpBreakpointRequest(server string, params *BreakActionAddHttpBreakpointParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/break/action/addHttpBreakpoint/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "string", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location", runtime.ParamLocationQuery, params.Location); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "match", runtime.ParamLocationQuery, params.Match); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inverse", runtime.ParamLocationQuery, params.Inverse); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignorecase", runtime.ParamLocationQuery, params.Ignorecase); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBreakActionBreakRequest generates requests for BreakActionBreak
func NewBreakActionBreakRequest(server string, params *BreakActionBreakParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/break/action/break/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBreakActionContinueRequest generates requests for BreakActionContinue
func NewBreakActionContinueRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/break/action/continue/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBreakActionDropRequest generates requests for BreakActionDrop
func NewBreakActionDropRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/break/action/drop/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBreakActionRemoveHttpBreakpointRequest generates requests for BreakActionRemoveHttpBreakpoint
func NewBreakActionRemoveHttpBreakpointRequest(server string, params *BreakActionRemoveHttpBreakpointParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/break/action/removeHttpBreakpoint/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "string", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location", runtime.ParamLocationQuery, params.Location); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "match", runtime.ParamLocationQuery, params.Match); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inverse", runtime.ParamLocationQuery, params.Inverse); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignorecase", runtime.ParamLocationQuery, params.Ignorecase); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBreakActionSetHttpMessageRequest generates requests for BreakActionSetHttpMessage
func NewBreakActionSetHttpMessageRequest(server string, params *BreakActionSetHttpMessageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/break/action/setHttpMessage/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "httpHeader", runtime.ParamLocationQuery, params.HttpHeader); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.HttpBody != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "httpBody", runtime.ParamLocationQuery, *params.HttpBody); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBreakActionStepRequest generates requests for BreakActionStep
func NewBreakActionStepRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/break/action/step/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBreakViewHttpMessageRequest generates requests for BreakViewHttpMessage
func NewBreakViewHttpMessageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/break/view/httpMessage/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBreakViewIsBreakAllRequest generates requests for BreakViewIsBreakAll
func NewBreakViewIsBreakAllRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/break/view/isBreakAll/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBreakViewIsBreakRequestRequest generates requests for BreakViewIsBreakRequest
func NewBreakViewIsBreakRequestRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/break/view/isBreakRequest/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBreakViewIsBreakResponseRequest generates requests for BreakViewIsBreakResponse
func NewBreakViewIsBreakResponseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/break/view/isBreakResponse/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClientActionExportClientMapRequest generates requests for ClientActionExportClientMap
func NewClientActionExportClientMapRequest(server string, params *ClientActionExportClientMapParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/client/action/exportClientMap/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pathYaml", runtime.ParamLocationQuery, params.PathYaml); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClientActionReportEventRequest generates requests for ClientActionReportEvent
func NewClientActionReportEventRequest(server string, params *ClientActionReportEventParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/client/action/reportEvent/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventJson", runtime.ParamLocationQuery, params.EventJson); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClientActionReportObjectRequest generates requests for ClientActionReportObject
func NewClientActionReportObjectRequest(server string, params *ClientActionReportObjectParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/client/action/reportObject/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "objectJson", runtime.ParamLocationQuery, params.ObjectJson); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClientActionReportZestScriptRequest generates requests for ClientActionReportZestScript
func NewClientActionReportZestScriptRequest(server string, params *ClientActionReportZestScriptParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/client/action/reportZestScript/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptJson", runtime.ParamLocationQuery, params.ScriptJson); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClientActionReportZestStatementRequest generates requests for ClientActionReportZestStatement
func NewClientActionReportZestStatementRequest(server string, params *ClientActionReportZestStatementParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/client/action/reportZestStatement/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statementJson", runtime.ParamLocationQuery, params.StatementJson); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClientSpiderActionScanRequest generates requests for ClientSpiderActionScan
func NewClientSpiderActionScanRequest(server string, params *ClientSpiderActionScanParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/clientSpider/action/scan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Browser != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "browser", runtime.ParamLocationQuery, *params.Browser); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContextName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, *params.ContextName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userName", runtime.ParamLocationQuery, *params.UserName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubtreeOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subtreeOnly", runtime.ParamLocationQuery, *params.SubtreeOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxCrawlDepth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxCrawlDepth", runtime.ParamLocationQuery, *params.MaxCrawlDepth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLoadTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageLoadTime", runtime.ParamLocationQuery, *params.PageLoadTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClientSpiderActionStopRequest generates requests for ClientSpiderActionStop
func NewClientSpiderActionStopRequest(server string, params *ClientSpiderActionStopParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/clientSpider/action/stop/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, params.ScanId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClientSpiderViewStatusRequest generates requests for ClientSpiderViewStatus
func NewClientSpiderViewStatusRequest(server string, params *ClientSpiderViewStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/clientSpider/view/status/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, params.ScanId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextActionExcludeAllContextTechnologiesRequest generates requests for ContextActionExcludeAllContextTechnologies
func NewContextActionExcludeAllContextTechnologiesRequest(server string, params *ContextActionExcludeAllContextTechnologiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/action/excludeAllContextTechnologies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextActionExcludeContextTechnologiesRequest generates requests for ContextActionExcludeContextTechnologies
func NewContextActionExcludeContextTechnologiesRequest(server string, params *ContextActionExcludeContextTechnologiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/action/excludeContextTechnologies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "technologyNames", runtime.ParamLocationQuery, params.TechnologyNames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextActionExcludeFromContextRequest generates requests for ContextActionExcludeFromContext
func NewContextActionExcludeFromContextRequest(server string, params *ContextActionExcludeFromContextParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/action/excludeFromContext/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextActionExportContextRequest generates requests for ContextActionExportContext
func NewContextActionExportContextRequest(server string, params *ContextActionExportContextParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/action/exportContext/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextFile", runtime.ParamLocationQuery, params.ContextFile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextActionImportContextRequest generates requests for ContextActionImportContext
func NewContextActionImportContextRequest(server string, params *ContextActionImportContextParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/action/importContext/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextFile", runtime.ParamLocationQuery, params.ContextFile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextActionIncludeAllContextTechnologiesRequest generates requests for ContextActionIncludeAllContextTechnologies
func NewContextActionIncludeAllContextTechnologiesRequest(server string, params *ContextActionIncludeAllContextTechnologiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/action/includeAllContextTechnologies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextActionIncludeContextTechnologiesRequest generates requests for ContextActionIncludeContextTechnologies
func NewContextActionIncludeContextTechnologiesRequest(server string, params *ContextActionIncludeContextTechnologiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/action/includeContextTechnologies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "technologyNames", runtime.ParamLocationQuery, params.TechnologyNames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextActionIncludeInContextRequest generates requests for ContextActionIncludeInContext
func NewContextActionIncludeInContextRequest(server string, params *ContextActionIncludeInContextParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/action/includeInContext/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextActionNewContextRequest generates requests for ContextActionNewContext
func NewContextActionNewContextRequest(server string, params *ContextActionNewContextParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/action/newContext/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextActionRemoveContextRequest generates requests for ContextActionRemoveContext
func NewContextActionRemoveContextRequest(server string, params *ContextActionRemoveContextParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/action/removeContext/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextActionSetContextCheckingStrategyRequest generates requests for ContextActionSetContextCheckingStrategy
func NewContextActionSetContextCheckingStrategyRequest(server string, params *ContextActionSetContextCheckingStrategyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/action/setContextCheckingStrategy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "checkingStrategy", runtime.ParamLocationQuery, params.CheckingStrategy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PollUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pollUrl", runtime.ParamLocationQuery, *params.PollUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PollData != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pollData", runtime.ParamLocationQuery, *params.PollData); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PollHeaders != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pollHeaders", runtime.ParamLocationQuery, *params.PollHeaders); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PollFrequency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pollFrequency", runtime.ParamLocationQuery, *params.PollFrequency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PollFrequencyUnits != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pollFrequencyUnits", runtime.ParamLocationQuery, *params.PollFrequencyUnits); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextActionSetContextInScopeRequest generates requests for ContextActionSetContextInScope
func NewContextActionSetContextInScopeRequest(server string, params *ContextActionSetContextInScopeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/action/setContextInScope/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "booleanInScope", runtime.ParamLocationQuery, params.BooleanInScope); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextActionSetContextRegexsRequest generates requests for ContextActionSetContextRegexs
func NewContextActionSetContextRegexsRequest(server string, params *ContextActionSetContextRegexsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/action/setContextRegexs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incRegexs", runtime.ParamLocationQuery, params.IncRegexs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excRegexs", runtime.ParamLocationQuery, params.ExcRegexs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextViewContextRequest generates requests for ContextViewContext
func NewContextViewContextRequest(server string, params *ContextViewContextParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/view/context/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextViewContextListRequest generates requests for ContextViewContextList
func NewContextViewContextListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/view/contextList/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextViewExcludeRegexsRequest generates requests for ContextViewExcludeRegexs
func NewContextViewExcludeRegexsRequest(server string, params *ContextViewExcludeRegexsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/view/excludeRegexs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextViewExcludedTechnologyListRequest generates requests for ContextViewExcludedTechnologyList
func NewContextViewExcludedTechnologyListRequest(server string, params *ContextViewExcludedTechnologyListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/view/excludedTechnologyList/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextViewIncludeRegexsRequest generates requests for ContextViewIncludeRegexs
func NewContextViewIncludeRegexsRequest(server string, params *ContextViewIncludeRegexsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/view/includeRegexs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextViewIncludedTechnologyListRequest generates requests for ContextViewIncludedTechnologyList
func NewContextViewIncludedTechnologyListRequest(server string, params *ContextViewIncludedTechnologyListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/view/includedTechnologyList/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextViewTechnologyListRequest generates requests for ContextViewTechnologyList
func NewContextViewTechnologyListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/view/technologyList/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextViewUrlsRequest generates requests for ContextViewUrls
func NewContextViewUrlsRequest(server string, params *ContextViewUrlsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/context/view/urls/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, params.ContextName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionAccessUrlRequest generates requests for CoreActionAccessUrl
func NewCoreActionAccessUrlRequest(server string, params *CoreActionAccessUrlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/accessUrl/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FollowRedirects != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "followRedirects", runtime.ParamLocationQuery, *params.FollowRedirects); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionAddProxyChainExcludedDomainRequest generates requests for CoreActionAddProxyChainExcludedDomain
func NewCoreActionAddProxyChainExcludedDomainRequest(server string, params *CoreActionAddProxyChainExcludedDomainParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/addProxyChainExcludedDomain/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isRegex", runtime.ParamLocationQuery, *params.IsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isEnabled", runtime.ParamLocationQuery, *params.IsEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionClearExcludedFromProxyRequest generates requests for CoreActionClearExcludedFromProxy
func NewCoreActionClearExcludedFromProxyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/clearExcludedFromProxy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionCreateSbomZipRequest generates requests for CoreActionCreateSbomZip
func NewCoreActionCreateSbomZipRequest(server string, params *CoreActionCreateSbomZipParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/createSbomZip/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filePath", runtime.ParamLocationQuery, params.FilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionDeleteAlertRequest generates requests for CoreActionDeleteAlert
func NewCoreActionDeleteAlertRequest(server string, params *CoreActionDeleteAlertParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/deleteAlert/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionDeleteAllAlertsRequest generates requests for CoreActionDeleteAllAlerts
func NewCoreActionDeleteAllAlertsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/deleteAllAlerts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionDeleteSiteNodeRequest generates requests for CoreActionDeleteSiteNode
func NewCoreActionDeleteSiteNodeRequest(server string, params *CoreActionDeleteSiteNodeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/deleteSiteNode/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Method != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "method", runtime.ParamLocationQuery, *params.Method); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostData != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postData", runtime.ParamLocationQuery, *params.PostData); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionDisableAllProxyChainExcludedDomainsRequest generates requests for CoreActionDisableAllProxyChainExcludedDomains
func NewCoreActionDisableAllProxyChainExcludedDomainsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/disableAllProxyChainExcludedDomains/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionDisableClientCertificateRequest generates requests for CoreActionDisableClientCertificate
func NewCoreActionDisableClientCertificateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/disableClientCertificate/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionEnableAllProxyChainExcludedDomainsRequest generates requests for CoreActionEnableAllProxyChainExcludedDomains
func NewCoreActionEnableAllProxyChainExcludedDomainsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/enableAllProxyChainExcludedDomains/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionEnablePKCS12ClientCertificateRequest generates requests for CoreActionEnablePKCS12ClientCertificate
func NewCoreActionEnablePKCS12ClientCertificateRequest(server string, params *CoreActionEnablePKCS12ClientCertificateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/enablePKCS12ClientCertificate/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filePath", runtime.ParamLocationQuery, params.FilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, params.Password); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Index != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index", runtime.ParamLocationQuery, *params.Index); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionExcludeFromProxyRequest generates requests for CoreActionExcludeFromProxy
func NewCoreActionExcludeFromProxyRequest(server string, params *CoreActionExcludeFromProxyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/excludeFromProxy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionGenerateRootCARequest generates requests for CoreActionGenerateRootCA
func NewCoreActionGenerateRootCARequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/generateRootCA/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionLoadSessionRequest generates requests for CoreActionLoadSession
func NewCoreActionLoadSessionRequest(server string, params *CoreActionLoadSessionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/loadSession/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionModifyProxyChainExcludedDomainRequest generates requests for CoreActionModifyProxyChainExcludedDomain
func NewCoreActionModifyProxyChainExcludedDomainRequest(server string, params *CoreActionModifyProxyChainExcludedDomainParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/modifyProxyChainExcludedDomain/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idx", runtime.ParamLocationQuery, params.Idx); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Value != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, *params.Value); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isRegex", runtime.ParamLocationQuery, *params.IsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isEnabled", runtime.ParamLocationQuery, *params.IsEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionNewSessionRequest generates requests for CoreActionNewSession
func NewCoreActionNewSessionRequest(server string, params *CoreActionNewSessionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/newSession/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Overwrite != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "overwrite", runtime.ParamLocationQuery, *params.Overwrite); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionRemoveProxyChainExcludedDomainRequest generates requests for CoreActionRemoveProxyChainExcludedDomain
func NewCoreActionRemoveProxyChainExcludedDomainRequest(server string, params *CoreActionRemoveProxyChainExcludedDomainParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/removeProxyChainExcludedDomain/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idx", runtime.ParamLocationQuery, params.Idx); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionRunGarbageCollectionRequest generates requests for CoreActionRunGarbageCollection
func NewCoreActionRunGarbageCollectionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/runGarbageCollection/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSaveSessionRequest generates requests for CoreActionSaveSession
func NewCoreActionSaveSessionRequest(server string, params *CoreActionSaveSessionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/saveSession/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Overwrite != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "overwrite", runtime.ParamLocationQuery, *params.Overwrite); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSendRequestRequest generates requests for CoreActionSendRequest
func NewCoreActionSendRequestRequest(server string, params *CoreActionSendRequestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/sendRequest/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "request", runtime.ParamLocationQuery, params.Request); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FollowRedirects != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "followRedirects", runtime.ParamLocationQuery, *params.FollowRedirects); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetHomeDirectoryRequest generates requests for CoreActionSetHomeDirectory
func NewCoreActionSetHomeDirectoryRequest(server string, params *CoreActionSetHomeDirectoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setHomeDirectory/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dir", runtime.ParamLocationQuery, params.Dir); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetLogLevelRequest generates requests for CoreActionSetLogLevel
func NewCoreActionSetLogLevelRequest(server string, params *CoreActionSetLogLevelParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setLogLevel/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "logLevel", runtime.ParamLocationQuery, params.LogLevel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetModeRequest generates requests for CoreActionSetMode
func NewCoreActionSetModeRequest(server string, params *CoreActionSetModeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setMode/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mode", runtime.ParamLocationQuery, params.Mode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionAlertOverridesFilePathRequest generates requests for CoreActionSetOptionAlertOverridesFilePath
func NewCoreActionSetOptionAlertOverridesFilePathRequest(server string, params *CoreActionSetOptionAlertOverridesFilePathParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionAlertOverridesFilePath/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilePath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filePath", runtime.ParamLocationQuery, *params.FilePath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionDefaultUserAgentRequest generates requests for CoreActionSetOptionDefaultUserAgent
func NewCoreActionSetOptionDefaultUserAgentRequest(server string, params *CoreActionSetOptionDefaultUserAgentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionDefaultUserAgent/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionDnsTtlSuccessfulQueriesRequest generates requests for CoreActionSetOptionDnsTtlSuccessfulQueries
func NewCoreActionSetOptionDnsTtlSuccessfulQueriesRequest(server string, params *CoreActionSetOptionDnsTtlSuccessfulQueriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionDnsTtlSuccessfulQueries/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionHttpStateEnabledRequest generates requests for CoreActionSetOptionHttpStateEnabled
func NewCoreActionSetOptionHttpStateEnabledRequest(server string, params *CoreActionSetOptionHttpStateEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionHttpStateEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionMaximumAlertInstancesRequest generates requests for CoreActionSetOptionMaximumAlertInstances
func NewCoreActionSetOptionMaximumAlertInstancesRequest(server string, params *CoreActionSetOptionMaximumAlertInstancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionMaximumAlertInstances/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "numberOfInstances", runtime.ParamLocationQuery, params.NumberOfInstances); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionMergeRelatedAlertsRequest generates requests for CoreActionSetOptionMergeRelatedAlerts
func NewCoreActionSetOptionMergeRelatedAlertsRequest(server string, params *CoreActionSetOptionMergeRelatedAlertsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionMergeRelatedAlerts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionProxyChainNameRequest generates requests for CoreActionSetOptionProxyChainName
func NewCoreActionSetOptionProxyChainNameRequest(server string, params *CoreActionSetOptionProxyChainNameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionProxyChainName/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionProxyChainPasswordRequest generates requests for CoreActionSetOptionProxyChainPassword
func NewCoreActionSetOptionProxyChainPasswordRequest(server string, params *CoreActionSetOptionProxyChainPasswordParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionProxyChainPassword/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionProxyChainPortRequest generates requests for CoreActionSetOptionProxyChainPort
func NewCoreActionSetOptionProxyChainPortRequest(server string, params *CoreActionSetOptionProxyChainPortParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionProxyChainPort/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionProxyChainPromptRequest generates requests for CoreActionSetOptionProxyChainPrompt
func NewCoreActionSetOptionProxyChainPromptRequest(server string, params *CoreActionSetOptionProxyChainPromptParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionProxyChainPrompt/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionProxyChainRealmRequest generates requests for CoreActionSetOptionProxyChainRealm
func NewCoreActionSetOptionProxyChainRealmRequest(server string, params *CoreActionSetOptionProxyChainRealmParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionProxyChainRealm/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionProxyChainSkipNameRequest generates requests for CoreActionSetOptionProxyChainSkipName
func NewCoreActionSetOptionProxyChainSkipNameRequest(server string, params *CoreActionSetOptionProxyChainSkipNameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionProxyChainSkipName/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionProxyChainUserNameRequest generates requests for CoreActionSetOptionProxyChainUserName
func NewCoreActionSetOptionProxyChainUserNameRequest(server string, params *CoreActionSetOptionProxyChainUserNameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionProxyChainUserName/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionSingleCookieRequestHeaderRequest generates requests for CoreActionSetOptionSingleCookieRequestHeader
func NewCoreActionSetOptionSingleCookieRequestHeaderRequest(server string, params *CoreActionSetOptionSingleCookieRequestHeaderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionSingleCookieRequestHeader/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionTimeoutInSecsRequest generates requests for CoreActionSetOptionTimeoutInSecs
func NewCoreActionSetOptionTimeoutInSecsRequest(server string, params *CoreActionSetOptionTimeoutInSecsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionTimeoutInSecs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionUseProxyChainRequest generates requests for CoreActionSetOptionUseProxyChain
func NewCoreActionSetOptionUseProxyChainRequest(server string, params *CoreActionSetOptionUseProxyChainParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionUseProxyChain/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionUseProxyChainAuthRequest generates requests for CoreActionSetOptionUseProxyChainAuth
func NewCoreActionSetOptionUseProxyChainAuthRequest(server string, params *CoreActionSetOptionUseProxyChainAuthParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionUseProxyChainAuth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSetOptionUseSocksProxyRequest generates requests for CoreActionSetOptionUseSocksProxy
func NewCoreActionSetOptionUseSocksProxyRequest(server string, params *CoreActionSetOptionUseSocksProxyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/setOptionUseSocksProxy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionShutdownRequest generates requests for CoreActionShutdown
func NewCoreActionShutdownRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/shutdown/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreActionSnapshotSessionRequest generates requests for CoreActionSnapshotSession
func NewCoreActionSnapshotSessionRequest(server string, params *CoreActionSnapshotSessionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/action/snapshotSession/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Overwrite != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "overwrite", runtime.ParamLocationQuery, *params.Overwrite); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewAlertRequest generates requests for CoreViewAlert
func NewCoreViewAlertRequest(server string, params *CoreViewAlertParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/alert/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewAlertsRequest generates requests for CoreViewAlerts
func NewCoreViewAlertsRequest(server string, params *CoreViewAlertsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/alerts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RiskId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "riskId", runtime.ParamLocationQuery, *params.RiskId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewAlertsSummaryRequest generates requests for CoreViewAlertsSummary
func NewCoreViewAlertsSummaryRequest(server string, params *CoreViewAlertsSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/alertsSummary/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewChildNodesRequest generates requests for CoreViewChildNodes
func NewCoreViewChildNodesRequest(server string, params *CoreViewChildNodesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/childNodes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewExcludedFromProxyRequest generates requests for CoreViewExcludedFromProxy
func NewCoreViewExcludedFromProxyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/excludedFromProxy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewGetLogLevelRequest generates requests for CoreViewGetLogLevel
func NewCoreViewGetLogLevelRequest(server string, params *CoreViewGetLogLevelParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/getLogLevel/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewHomeDirectoryRequest generates requests for CoreViewHomeDirectory
func NewCoreViewHomeDirectoryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/homeDirectory/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewHostsRequest generates requests for CoreViewHosts
func NewCoreViewHostsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/hosts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewMessageRequest generates requests for CoreViewMessage
func NewCoreViewMessageRequest(server string, params *CoreViewMessageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/message/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewMessagesRequest generates requests for CoreViewMessages
func NewCoreViewMessagesRequest(server string, params *CoreViewMessagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/messages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewMessagesByIdRequest generates requests for CoreViewMessagesById
func NewCoreViewMessagesByIdRequest(server string, params *CoreViewMessagesByIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/messagesById/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewModeRequest generates requests for CoreViewMode
func NewCoreViewModeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/mode/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewNumberOfAlertsRequest generates requests for CoreViewNumberOfAlerts
func NewCoreViewNumberOfAlertsRequest(server string, params *CoreViewNumberOfAlertsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/numberOfAlerts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RiskId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "riskId", runtime.ParamLocationQuery, *params.RiskId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewNumberOfMessagesRequest generates requests for CoreViewNumberOfMessages
func NewCoreViewNumberOfMessagesRequest(server string, params *CoreViewNumberOfMessagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/numberOfMessages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionAlertOverridesFilePathRequest generates requests for CoreViewOptionAlertOverridesFilePath
func NewCoreViewOptionAlertOverridesFilePathRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionAlertOverridesFilePath/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionDefaultUserAgentRequest generates requests for CoreViewOptionDefaultUserAgent
func NewCoreViewOptionDefaultUserAgentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionDefaultUserAgent/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionDnsTtlSuccessfulQueriesRequest generates requests for CoreViewOptionDnsTtlSuccessfulQueries
func NewCoreViewOptionDnsTtlSuccessfulQueriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionDnsTtlSuccessfulQueries/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionHttpStateRequest generates requests for CoreViewOptionHttpState
func NewCoreViewOptionHttpStateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionHttpState/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionHttpStateEnabledRequest generates requests for CoreViewOptionHttpStateEnabled
func NewCoreViewOptionHttpStateEnabledRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionHttpStateEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionMaximumAlertInstancesRequest generates requests for CoreViewOptionMaximumAlertInstances
func NewCoreViewOptionMaximumAlertInstancesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionMaximumAlertInstances/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionMergeRelatedAlertsRequest generates requests for CoreViewOptionMergeRelatedAlerts
func NewCoreViewOptionMergeRelatedAlertsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionMergeRelatedAlerts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionProxyChainNameRequest generates requests for CoreViewOptionProxyChainName
func NewCoreViewOptionProxyChainNameRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionProxyChainName/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionProxyChainPasswordRequest generates requests for CoreViewOptionProxyChainPassword
func NewCoreViewOptionProxyChainPasswordRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionProxyChainPassword/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionProxyChainPortRequest generates requests for CoreViewOptionProxyChainPort
func NewCoreViewOptionProxyChainPortRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionProxyChainPort/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionProxyChainPromptRequest generates requests for CoreViewOptionProxyChainPrompt
func NewCoreViewOptionProxyChainPromptRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionProxyChainPrompt/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionProxyChainRealmRequest generates requests for CoreViewOptionProxyChainRealm
func NewCoreViewOptionProxyChainRealmRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionProxyChainRealm/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionProxyChainSkipNameRequest generates requests for CoreViewOptionProxyChainSkipName
func NewCoreViewOptionProxyChainSkipNameRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionProxyChainSkipName/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionProxyChainUserNameRequest generates requests for CoreViewOptionProxyChainUserName
func NewCoreViewOptionProxyChainUserNameRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionProxyChainUserName/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionProxyExcludedDomainsRequest generates requests for CoreViewOptionProxyExcludedDomains
func NewCoreViewOptionProxyExcludedDomainsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionProxyExcludedDomains/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionProxyExcludedDomainsEnabledRequest generates requests for CoreViewOptionProxyExcludedDomainsEnabled
func NewCoreViewOptionProxyExcludedDomainsEnabledRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionProxyExcludedDomainsEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionSingleCookieRequestHeaderRequest generates requests for CoreViewOptionSingleCookieRequestHeader
func NewCoreViewOptionSingleCookieRequestHeaderRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionSingleCookieRequestHeader/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionTimeoutInSecsRequest generates requests for CoreViewOptionTimeoutInSecs
func NewCoreViewOptionTimeoutInSecsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionTimeoutInSecs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionUseProxyChainRequest generates requests for CoreViewOptionUseProxyChain
func NewCoreViewOptionUseProxyChainRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionUseProxyChain/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionUseProxyChainAuthRequest generates requests for CoreViewOptionUseProxyChainAuth
func NewCoreViewOptionUseProxyChainAuthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionUseProxyChainAuth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewOptionUseSocksProxyRequest generates requests for CoreViewOptionUseSocksProxy
func NewCoreViewOptionUseSocksProxyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/optionUseSocksProxy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewProxyChainExcludedDomainsRequest generates requests for CoreViewProxyChainExcludedDomains
func NewCoreViewProxyChainExcludedDomainsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/proxyChainExcludedDomains/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewSessionLocationRequest generates requests for CoreViewSessionLocation
func NewCoreViewSessionLocationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/sessionLocation/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewSitesRequest generates requests for CoreViewSites
func NewCoreViewSitesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/sites/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewUrlsRequest generates requests for CoreViewUrls
func NewCoreViewUrlsRequest(server string, params *CoreViewUrlsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/urls/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewVersionRequest generates requests for CoreViewVersion
func NewCoreViewVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/version/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreViewZapHomePathRequest generates requests for CoreViewZapHomePath
func NewCoreViewZapHomePathRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/core/view/zapHomePath/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustompayloadsActionAddCustomPayloadRequest generates requests for CustompayloadsActionAddCustomPayload
func NewCustompayloadsActionAddCustomPayloadRequest(server string, params *CustompayloadsActionAddCustomPayloadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/custompayloads/action/addCustomPayload/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Payload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payload", runtime.ParamLocationQuery, *params.Payload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustompayloadsActionDisableCustomPayloadRequest generates requests for CustompayloadsActionDisableCustomPayload
func NewCustompayloadsActionDisableCustomPayloadRequest(server string, params *CustompayloadsActionDisableCustomPayloadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/custompayloads/action/disableCustomPayload/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Payload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payload", runtime.ParamLocationQuery, *params.Payload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustompayloadsActionDisableCustomPayloadsRequest generates requests for CustompayloadsActionDisableCustomPayloads
func NewCustompayloadsActionDisableCustomPayloadsRequest(server string, params *CustompayloadsActionDisableCustomPayloadsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/custompayloads/action/disableCustomPayloads/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustompayloadsActionEnableCustomPayloadRequest generates requests for CustompayloadsActionEnableCustomPayload
func NewCustompayloadsActionEnableCustomPayloadRequest(server string, params *CustompayloadsActionEnableCustomPayloadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/custompayloads/action/enableCustomPayload/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Payload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payload", runtime.ParamLocationQuery, *params.Payload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustompayloadsActionEnableCustomPayloadsRequest generates requests for CustompayloadsActionEnableCustomPayloads
func NewCustompayloadsActionEnableCustomPayloadsRequest(server string, params *CustompayloadsActionEnableCustomPayloadsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/custompayloads/action/enableCustomPayloads/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustompayloadsActionRemoveCustomPayloadRequest generates requests for CustompayloadsActionRemoveCustomPayload
func NewCustompayloadsActionRemoveCustomPayloadRequest(server string, params *CustompayloadsActionRemoveCustomPayloadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/custompayloads/action/removeCustomPayload/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Payload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payload", runtime.ParamLocationQuery, *params.Payload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustompayloadsViewCustomPayloadsRequest generates requests for CustompayloadsViewCustomPayloads
func NewCustompayloadsViewCustomPayloadsRequest(server string, params *CustompayloadsViewCustomPayloadsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/custompayloads/view/customPayloads/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustompayloadsViewCustomPayloadsCategoriesRequest generates requests for CustompayloadsViewCustomPayloadsCategories
func NewCustompayloadsViewCustomPayloadsCategoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/custompayloads/view/customPayloadsCategories/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEximActionExportSitesTreeRequest generates requests for EximActionExportSitesTree
func NewEximActionExportSitesTreeRequest(server string, params *EximActionExportSitesTreeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/exim/action/exportSitesTree/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filePath", runtime.ParamLocationQuery, params.FilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEximActionImportHarRequest generates requests for EximActionImportHar
func NewEximActionImportHarRequest(server string, params *EximActionImportHarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/exim/action/importHar/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filePath", runtime.ParamLocationQuery, params.FilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEximActionImportModsec2LogsRequest generates requests for EximActionImportModsec2Logs
func NewEximActionImportModsec2LogsRequest(server string, params *EximActionImportModsec2LogsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/exim/action/importModsec2Logs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filePath", runtime.ParamLocationQuery, params.FilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEximActionImportUrlsRequest generates requests for EximActionImportUrls
func NewEximActionImportUrlsRequest(server string, params *EximActionImportUrlsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/exim/action/importUrls/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filePath", runtime.ParamLocationQuery, params.FilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEximActionImportZapLogsRequest generates requests for EximActionImportZapLogs
func NewEximActionImportZapLogsRequest(server string, params *EximActionImportZapLogsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/exim/action/importZapLogs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filePath", runtime.ParamLocationQuery, params.FilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEximActionPruneSitesTreeRequest generates requests for EximActionPruneSitesTree
func NewEximActionPruneSitesTreeRequest(server string, params *EximActionPruneSitesTreeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/exim/action/pruneSitesTree/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filePath", runtime.ParamLocationQuery, params.FilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewForcedUserActionSetForcedUserRequest generates requests for ForcedUserActionSetForcedUser
func NewForcedUserActionSetForcedUserRequest(server string, params *ForcedUserActionSetForcedUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/forcedUser/action/setForcedUser/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewForcedUserActionSetForcedUserModeEnabledRequest generates requests for ForcedUserActionSetForcedUserModeEnabled
func NewForcedUserActionSetForcedUserModeEnabledRequest(server string, params *ForcedUserActionSetForcedUserModeEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/forcedUser/action/setForcedUserModeEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewForcedUserViewGetForcedUserRequest generates requests for ForcedUserViewGetForcedUser
func NewForcedUserViewGetForcedUserRequest(server string, params *ForcedUserViewGetForcedUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/forcedUser/view/getForcedUser/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewForcedUserViewIsForcedUserModeEnabledRequest generates requests for ForcedUserViewIsForcedUserModeEnabled
func NewForcedUserViewIsForcedUserModeEnabledRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/forcedUser/view/isForcedUserModeEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlActionImportFileRequest generates requests for GraphqlActionImportFile
func NewGraphqlActionImportFileRequest(server string, params *GraphqlActionImportFileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/action/importFile/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endurl", runtime.ParamLocationQuery, params.Endurl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, params.File); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlActionImportUrlRequest generates requests for GraphqlActionImportUrl
func NewGraphqlActionImportUrlRequest(server string, params *GraphqlActionImportUrlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/action/importUrl/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endurl", runtime.ParamLocationQuery, params.Endurl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlActionSetOptionArgsTypeRequest generates requests for GraphqlActionSetOptionArgsType
func NewGraphqlActionSetOptionArgsTypeRequest(server string, params *GraphqlActionSetOptionArgsTypeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/action/setOptionArgsType/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlActionSetOptionLenientMaxQueryDepthEnabledRequest generates requests for GraphqlActionSetOptionLenientMaxQueryDepthEnabled
func NewGraphqlActionSetOptionLenientMaxQueryDepthEnabledRequest(server string, params *GraphqlActionSetOptionLenientMaxQueryDepthEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/action/setOptionLenientMaxQueryDepthEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlActionSetOptionMaxAdditionalQueryDepthRequest generates requests for GraphqlActionSetOptionMaxAdditionalQueryDepth
func NewGraphqlActionSetOptionMaxAdditionalQueryDepthRequest(server string, params *GraphqlActionSetOptionMaxAdditionalQueryDepthParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/action/setOptionMaxAdditionalQueryDepth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlActionSetOptionMaxArgsDepthRequest generates requests for GraphqlActionSetOptionMaxArgsDepth
func NewGraphqlActionSetOptionMaxArgsDepthRequest(server string, params *GraphqlActionSetOptionMaxArgsDepthParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/action/setOptionMaxArgsDepth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlActionSetOptionMaxQueryDepthRequest generates requests for GraphqlActionSetOptionMaxQueryDepth
func NewGraphqlActionSetOptionMaxQueryDepthRequest(server string, params *GraphqlActionSetOptionMaxQueryDepthParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/action/setOptionMaxQueryDepth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlActionSetOptionOptionalArgsEnabledRequest generates requests for GraphqlActionSetOptionOptionalArgsEnabled
func NewGraphqlActionSetOptionOptionalArgsEnabledRequest(server string, params *GraphqlActionSetOptionOptionalArgsEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/action/setOptionOptionalArgsEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlActionSetOptionQueryGenEnabledRequest generates requests for GraphqlActionSetOptionQueryGenEnabled
func NewGraphqlActionSetOptionQueryGenEnabledRequest(server string, params *GraphqlActionSetOptionQueryGenEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/action/setOptionQueryGenEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlActionSetOptionQuerySplitTypeRequest generates requests for GraphqlActionSetOptionQuerySplitType
func NewGraphqlActionSetOptionQuerySplitTypeRequest(server string, params *GraphqlActionSetOptionQuerySplitTypeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/action/setOptionQuerySplitType/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlActionSetOptionRequestMethodRequest generates requests for GraphqlActionSetOptionRequestMethod
func NewGraphqlActionSetOptionRequestMethodRequest(server string, params *GraphqlActionSetOptionRequestMethodParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/action/setOptionRequestMethod/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlViewOptionArgsTypeRequest generates requests for GraphqlViewOptionArgsType
func NewGraphqlViewOptionArgsTypeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/view/optionArgsType/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlViewOptionLenientMaxQueryDepthEnabledRequest generates requests for GraphqlViewOptionLenientMaxQueryDepthEnabled
func NewGraphqlViewOptionLenientMaxQueryDepthEnabledRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/view/optionLenientMaxQueryDepthEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlViewOptionMaxAdditionalQueryDepthRequest generates requests for GraphqlViewOptionMaxAdditionalQueryDepth
func NewGraphqlViewOptionMaxAdditionalQueryDepthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/view/optionMaxAdditionalQueryDepth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlViewOptionMaxArgsDepthRequest generates requests for GraphqlViewOptionMaxArgsDepth
func NewGraphqlViewOptionMaxArgsDepthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/view/optionMaxArgsDepth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlViewOptionMaxQueryDepthRequest generates requests for GraphqlViewOptionMaxQueryDepth
func NewGraphqlViewOptionMaxQueryDepthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/view/optionMaxQueryDepth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlViewOptionOptionalArgsEnabledRequest generates requests for GraphqlViewOptionOptionalArgsEnabled
func NewGraphqlViewOptionOptionalArgsEnabledRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/view/optionOptionalArgsEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlViewOptionQueryGenEnabledRequest generates requests for GraphqlViewOptionQueryGenEnabled
func NewGraphqlViewOptionQueryGenEnabledRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/view/optionQueryGenEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlViewOptionQuerySplitTypeRequest generates requests for GraphqlViewOptionQuerySplitType
func NewGraphqlViewOptionQuerySplitTypeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/view/optionQuerySplitType/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGraphqlViewOptionRequestMethodRequest generates requests for GraphqlViewOptionRequestMethod
func NewGraphqlViewOptionRequestMethodRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/graphql/view/optionRequestMethod/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHttpSessionsActionAddDefaultSessionTokenRequest generates requests for HttpSessionsActionAddDefaultSessionToken
func NewHttpSessionsActionAddDefaultSessionTokenRequest(server string, params *HttpSessionsActionAddDefaultSessionTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/httpSessions/action/addDefaultSessionToken/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sessionToken", runtime.ParamLocationQuery, params.SessionToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TokenEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenEnabled", runtime.ParamLocationQuery, *params.TokenEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHttpSessionsActionAddSessionTokenRequest generates requests for HttpSessionsActionAddSessionToken
func NewHttpSessionsActionAddSessionTokenRequest(server string, params *HttpSessionsActionAddSessionTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/httpSessions/action/addSessionToken/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, params.Site); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sessionToken", runtime.ParamLocationQuery, params.SessionToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHttpSessionsActionCreateEmptySessionRequest generates requests for HttpSessionsActionCreateEmptySession
func NewHttpSessionsActionCreateEmptySessionRequest(server string, params *HttpSessionsActionCreateEmptySessionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/httpSessions/action/createEmptySession/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, params.Site); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Session != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "session", runtime.ParamLocationQuery, *params.Session); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHttpSessionsActionRemoveDefaultSessionTokenRequest generates requests for HttpSessionsActionRemoveDefaultSessionToken
func NewHttpSessionsActionRemoveDefaultSessionTokenRequest(server string, params *HttpSessionsActionRemoveDefaultSessionTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/httpSessions/action/removeDefaultSessionToken/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sessionToken", runtime.ParamLocationQuery, params.SessionToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHttpSessionsActionRemoveSessionRequest generates requests for HttpSessionsActionRemoveSession
func NewHttpSessionsActionRemoveSessionRequest(server string, params *HttpSessionsActionRemoveSessionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/httpSessions/action/removeSession/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, params.Site); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "session", runtime.ParamLocationQuery, params.Session); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHttpSessionsActionRemoveSessionTokenRequest generates requests for HttpSessionsActionRemoveSessionToken
func NewHttpSessionsActionRemoveSessionTokenRequest(server string, params *HttpSessionsActionRemoveSessionTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/httpSessions/action/removeSessionToken/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, params.Site); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sessionToken", runtime.ParamLocationQuery, params.SessionToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHttpSessionsActionRenameSessionRequest generates requests for HttpSessionsActionRenameSession
func NewHttpSessionsActionRenameSessionRequest(server string, params *HttpSessionsActionRenameSessionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/httpSessions/action/renameSession/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, params.Site); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "oldSessionName", runtime.ParamLocationQuery, params.OldSessionName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "newSessionName", runtime.ParamLocationQuery, params.NewSessionName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHttpSessionsActionSetActiveSessionRequest generates requests for HttpSessionsActionSetActiveSession
func NewHttpSessionsActionSetActiveSessionRequest(server string, params *HttpSessionsActionSetActiveSessionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/httpSessions/action/setActiveSession/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, params.Site); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "session", runtime.ParamLocationQuery, params.Session); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHttpSessionsActionSetDefaultSessionTokenEnabledRequest generates requests for HttpSessionsActionSetDefaultSessionTokenEnabled
func NewHttpSessionsActionSetDefaultSessionTokenEnabledRequest(server string, params *HttpSessionsActionSetDefaultSessionTokenEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/httpSessions/action/setDefaultSessionTokenEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sessionToken", runtime.ParamLocationQuery, params.SessionToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenEnabled", runtime.ParamLocationQuery, params.TokenEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHttpSessionsActionSetSessionTokenValueRequest generates requests for HttpSessionsActionSetSessionTokenValue
func NewHttpSessionsActionSetSessionTokenValueRequest(server string, params *HttpSessionsActionSetSessionTokenValueParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/httpSessions/action/setSessionTokenValue/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, params.Site); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "session", runtime.ParamLocationQuery, params.Session); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sessionToken", runtime.ParamLocationQuery, params.SessionToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenValue", runtime.ParamLocationQuery, params.TokenValue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHttpSessionsActionUnsetActiveSessionRequest generates requests for HttpSessionsActionUnsetActiveSession
func NewHttpSessionsActionUnsetActiveSessionRequest(server string, params *HttpSessionsActionUnsetActiveSessionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/httpSessions/action/unsetActiveSession/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, params.Site); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHttpSessionsViewActiveSessionRequest generates requests for HttpSessionsViewActiveSession
func NewHttpSessionsViewActiveSessionRequest(server string, params *HttpSessionsViewActiveSessionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/httpSessions/view/activeSession/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, params.Site); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHttpSessionsViewDefaultSessionTokensRequest generates requests for HttpSessionsViewDefaultSessionTokens
func NewHttpSessionsViewDefaultSessionTokensRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/httpSessions/view/defaultSessionTokens/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHttpSessionsViewSessionTokensRequest generates requests for HttpSessionsViewSessionTokens
func NewHttpSessionsViewSessionTokensRequest(server string, params *HttpSessionsViewSessionTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/httpSessions/view/sessionTokens/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, params.Site); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHttpSessionsViewSessionsRequest generates requests for HttpSessionsViewSessions
func NewHttpSessionsViewSessionsRequest(server string, params *HttpSessionsViewSessionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/httpSessions/view/sessions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, params.Site); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Session != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "session", runtime.ParamLocationQuery, *params.Session); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHttpSessionsViewSitesRequest generates requests for HttpSessionsViewSites
func NewHttpSessionsViewSitesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/httpSessions/view/sites/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudActionLogRequest generates requests for HudActionLog
func NewHudActionLogRequest(server string, params *HudActionLogParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/action/log/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "record", runtime.ParamLocationQuery, params.Record); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudActionRecordRequestRequest generates requests for HudActionRecordRequest
func NewHudActionRecordRequestRequest(server string, params *HudActionRecordRequestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/action/recordRequest/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "header", runtime.ParamLocationQuery, params.Header); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "body", runtime.ParamLocationQuery, params.Body); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudActionResetTutorialTasksRequest generates requests for HudActionResetTutorialTasks
func NewHudActionResetTutorialTasksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/action/resetTutorialTasks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudActionSetOptionBaseDirectoryRequest generates requests for HudActionSetOptionBaseDirectory
func NewHudActionSetOptionBaseDirectoryRequest(server string, params *HudActionSetOptionBaseDirectoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/action/setOptionBaseDirectory/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudActionSetOptionDevelopmentModeRequest generates requests for HudActionSetOptionDevelopmentMode
func NewHudActionSetOptionDevelopmentModeRequest(server string, params *HudActionSetOptionDevelopmentModeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/action/setOptionDevelopmentMode/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudActionSetOptionEnableOnDomainMsgsRequest generates requests for HudActionSetOptionEnableOnDomainMsgs
func NewHudActionSetOptionEnableOnDomainMsgsRequest(server string, params *HudActionSetOptionEnableOnDomainMsgsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/action/setOptionEnableOnDomainMsgs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudActionSetOptionEnabledForDaemonRequest generates requests for HudActionSetOptionEnabledForDaemon
func NewHudActionSetOptionEnabledForDaemonRequest(server string, params *HudActionSetOptionEnabledForDaemonParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/action/setOptionEnabledForDaemon/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudActionSetOptionEnabledForDesktopRequest generates requests for HudActionSetOptionEnabledForDesktop
func NewHudActionSetOptionEnabledForDesktopRequest(server string, params *HudActionSetOptionEnabledForDesktopParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/action/setOptionEnabledForDesktop/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudActionSetOptionInScopeOnlyRequest generates requests for HudActionSetOptionInScopeOnly
func NewHudActionSetOptionInScopeOnlyRequest(server string, params *HudActionSetOptionInScopeOnlyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/action/setOptionInScopeOnly/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudActionSetOptionRemoveCSPRequest generates requests for HudActionSetOptionRemoveCSP
func NewHudActionSetOptionRemoveCSPRequest(server string, params *HudActionSetOptionRemoveCSPParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/action/setOptionRemoveCSP/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudActionSetOptionShowWelcomeScreenRequest generates requests for HudActionSetOptionShowWelcomeScreen
func NewHudActionSetOptionShowWelcomeScreenRequest(server string, params *HudActionSetOptionShowWelcomeScreenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/action/setOptionShowWelcomeScreen/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudActionSetOptionSkipTutorialTasksRequest generates requests for HudActionSetOptionSkipTutorialTasks
func NewHudActionSetOptionSkipTutorialTasksRequest(server string, params *HudActionSetOptionSkipTutorialTasksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/action/setOptionSkipTutorialTasks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudActionSetOptionTutorialTaskDoneRequest generates requests for HudActionSetOptionTutorialTaskDone
func NewHudActionSetOptionTutorialTaskDoneRequest(server string, params *HudActionSetOptionTutorialTaskDoneParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/action/setOptionTutorialTaskDone/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudActionSetOptionTutorialTestModeRequest generates requests for HudActionSetOptionTutorialTestMode
func NewHudActionSetOptionTutorialTestModeRequest(server string, params *HudActionSetOptionTutorialTestModeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/action/setOptionTutorialTestMode/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudActionSetUiOptionRequest generates requests for HudActionSetUiOption
func NewHudActionSetUiOptionRequest(server string, params *HudActionSetUiOptionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/action/setUiOption/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Value != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, *params.Value); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewGetUiOptionRequest generates requests for HudViewGetUiOption
func NewHudViewGetUiOptionRequest(server string, params *HudViewGetUiOptionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/getUiOption/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewHeartbeatRequest generates requests for HudViewHeartbeat
func NewHudViewHeartbeatRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/heartbeat/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewHudAlertDataRequest generates requests for HudViewHudAlertData
func NewHudViewHudAlertDataRequest(server string, params *HudViewHudAlertDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/hudAlertData/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewOptionAllowUnsafeEvalRequest generates requests for HudViewOptionAllowUnsafeEval
func NewHudViewOptionAllowUnsafeEvalRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/optionAllowUnsafeEval/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewOptionBaseDirectoryRequest generates requests for HudViewOptionBaseDirectory
func NewHudViewOptionBaseDirectoryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/optionBaseDirectory/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewOptionDevelopmentModeRequest generates requests for HudViewOptionDevelopmentMode
func NewHudViewOptionDevelopmentModeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/optionDevelopmentMode/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewOptionEnableOnDomainMsgsRequest generates requests for HudViewOptionEnableOnDomainMsgs
func NewHudViewOptionEnableOnDomainMsgsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/optionEnableOnDomainMsgs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewOptionEnableTelemetryRequest generates requests for HudViewOptionEnableTelemetry
func NewHudViewOptionEnableTelemetryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/optionEnableTelemetry/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewOptionEnabledForDaemonRequest generates requests for HudViewOptionEnabledForDaemon
func NewHudViewOptionEnabledForDaemonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/optionEnabledForDaemon/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewOptionEnabledForDesktopRequest generates requests for HudViewOptionEnabledForDesktop
func NewHudViewOptionEnabledForDesktopRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/optionEnabledForDesktop/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewOptionInScopeOnlyRequest generates requests for HudViewOptionInScopeOnly
func NewHudViewOptionInScopeOnlyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/optionInScopeOnly/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewOptionRemoveCSPRequest generates requests for HudViewOptionRemoveCSP
func NewHudViewOptionRemoveCSPRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/optionRemoveCSP/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewOptionShowWelcomeScreenRequest generates requests for HudViewOptionShowWelcomeScreen
func NewHudViewOptionShowWelcomeScreenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/optionShowWelcomeScreen/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewOptionSkipTutorialTasksRequest generates requests for HudViewOptionSkipTutorialTasks
func NewHudViewOptionSkipTutorialTasksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/optionSkipTutorialTasks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewOptionTutorialHostRequest generates requests for HudViewOptionTutorialHost
func NewHudViewOptionTutorialHostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/optionTutorialHost/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewOptionTutorialPortRequest generates requests for HudViewOptionTutorialPort
func NewHudViewOptionTutorialPortRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/optionTutorialPort/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewOptionTutorialTasksDoneRequest generates requests for HudViewOptionTutorialTasksDone
func NewHudViewOptionTutorialTasksDoneRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/optionTutorialTasksDone/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewOptionTutorialTestModeRequest generates requests for HudViewOptionTutorialTestMode
func NewHudViewOptionTutorialTestModeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/optionTutorialTestMode/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewOptionTutorialUpdatesRequest generates requests for HudViewOptionTutorialUpdates
func NewHudViewOptionTutorialUpdatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/optionTutorialUpdates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewTutorialUpdatesRequest generates requests for HudViewTutorialUpdates
func NewHudViewTutorialUpdatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/tutorialUpdates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudViewUpgradedDomainsRequest generates requests for HudViewUpgradedDomains
func NewHudViewUpgradedDomainsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/hud/view/upgradedDomains/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLocalProxiesActionAddAdditionalProxyRequest generates requests for LocalProxiesActionAddAdditionalProxy
func NewLocalProxiesActionAddAdditionalProxyRequest(server string, params *LocalProxiesActionAddAdditionalProxyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/localProxies/action/addAdditionalProxy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address", runtime.ParamLocationQuery, params.Address); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "port", runtime.ParamLocationQuery, params.Port); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.BehindNat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "behindNat", runtime.ParamLocationQuery, *params.BehindNat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AlwaysDecodeZip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alwaysDecodeZip", runtime.ParamLocationQuery, *params.AlwaysDecodeZip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoveUnsupportedEncodings != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "removeUnsupportedEncodings", runtime.ParamLocationQuery, *params.RemoveUnsupportedEncodings); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLocalProxiesActionRemoveAdditionalProxyRequest generates requests for LocalProxiesActionRemoveAdditionalProxy
func NewLocalProxiesActionRemoveAdditionalProxyRequest(server string, params *LocalProxiesActionRemoveAdditionalProxyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/localProxies/action/removeAdditionalProxy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address", runtime.ParamLocationQuery, params.Address); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "port", runtime.ParamLocationQuery, params.Port); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLocalProxiesViewAdditionalProxiesRequest generates requests for LocalProxiesViewAdditionalProxies
func NewLocalProxiesViewAdditionalProxiesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/localProxies/view/additionalProxies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionAddAliasRequest generates requests for NetworkActionAddAlias
func NewNetworkActionAddAliasRequest(server string, params *NetworkActionAddAliasParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/addAlias/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionAddHttpProxyExclusionRequest generates requests for NetworkActionAddHttpProxyExclusion
func NewNetworkActionAddHttpProxyExclusionRequest(server string, params *NetworkActionAddHttpProxyExclusionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/addHttpProxyExclusion/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "host", runtime.ParamLocationQuery, params.Host); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionAddLocalServerRequest generates requests for NetworkActionAddLocalServer
func NewNetworkActionAddLocalServerRequest(server string, params *NetworkActionAddLocalServerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/addLocalServer/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address", runtime.ParamLocationQuery, params.Address); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "port", runtime.ParamLocationQuery, params.Port); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Api != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api", runtime.ParamLocationQuery, *params.Api); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Proxy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "proxy", runtime.ParamLocationQuery, *params.Proxy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BehindNat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "behindNat", runtime.ParamLocationQuery, *params.BehindNat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DecodeResponse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "decodeResponse", runtime.ParamLocationQuery, *params.DecodeResponse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoveAcceptEncoding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "removeAcceptEncoding", runtime.ParamLocationQuery, *params.RemoveAcceptEncoding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionAddPassThroughRequest generates requests for NetworkActionAddPassThrough
func NewNetworkActionAddPassThroughRequest(server string, params *NetworkActionAddPassThroughParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/addPassThrough/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authority", runtime.ParamLocationQuery, params.Authority); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionAddPkcs12ClientCertificateRequest generates requests for NetworkActionAddPkcs12ClientCertificate
func NewNetworkActionAddPkcs12ClientCertificateRequest(server string, params *NetworkActionAddPkcs12ClientCertificateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/addPkcs12ClientCertificate/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filePath", runtime.ParamLocationQuery, params.FilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, params.Password); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Index != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index", runtime.ParamLocationQuery, *params.Index); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionAddRateLimitRuleRequest generates requests for NetworkActionAddRateLimitRule
func NewNetworkActionAddRateLimitRuleRequest(server string, params *NetworkActionAddRateLimitRuleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/addRateLimitRule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchRegex", runtime.ParamLocationQuery, params.MatchRegex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchString", runtime.ParamLocationQuery, params.MatchString); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestsPerSecond", runtime.ParamLocationQuery, params.RequestsPerSecond); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupBy", runtime.ParamLocationQuery, params.GroupBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionGenerateRootCaCertRequest generates requests for NetworkActionGenerateRootCaCert
func NewNetworkActionGenerateRootCaCertRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/generateRootCaCert/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionImportRootCaCertRequest generates requests for NetworkActionImportRootCaCert
func NewNetworkActionImportRootCaCertRequest(server string, params *NetworkActionImportRootCaCertParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/importRootCaCert/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filePath", runtime.ParamLocationQuery, params.FilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionRemoveAliasRequest generates requests for NetworkActionRemoveAlias
func NewNetworkActionRemoveAliasRequest(server string, params *NetworkActionRemoveAliasParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/removeAlias/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionRemoveHttpProxyExclusionRequest generates requests for NetworkActionRemoveHttpProxyExclusion
func NewNetworkActionRemoveHttpProxyExclusionRequest(server string, params *NetworkActionRemoveHttpProxyExclusionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/removeHttpProxyExclusion/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "host", runtime.ParamLocationQuery, params.Host); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionRemoveLocalServerRequest generates requests for NetworkActionRemoveLocalServer
func NewNetworkActionRemoveLocalServerRequest(server string, params *NetworkActionRemoveLocalServerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/removeLocalServer/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address", runtime.ParamLocationQuery, params.Address); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "port", runtime.ParamLocationQuery, params.Port); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionRemovePassThroughRequest generates requests for NetworkActionRemovePassThrough
func NewNetworkActionRemovePassThroughRequest(server string, params *NetworkActionRemovePassThroughParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/removePassThrough/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authority", runtime.ParamLocationQuery, params.Authority); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionRemoveRateLimitRuleRequest generates requests for NetworkActionRemoveRateLimitRule
func NewNetworkActionRemoveRateLimitRuleRequest(server string, params *NetworkActionRemoveRateLimitRuleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/removeRateLimitRule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionSetAliasEnabledRequest generates requests for NetworkActionSetAliasEnabled
func NewNetworkActionSetAliasEnabledRequest(server string, params *NetworkActionSetAliasEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/setAliasEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionSetConnectionTimeoutRequest generates requests for NetworkActionSetConnectionTimeout
func NewNetworkActionSetConnectionTimeoutRequest(server string, params *NetworkActionSetConnectionTimeoutParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/setConnectionTimeout/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timeout", runtime.ParamLocationQuery, params.Timeout); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionSetDefaultUserAgentRequest generates requests for NetworkActionSetDefaultUserAgent
func NewNetworkActionSetDefaultUserAgentRequest(server string, params *NetworkActionSetDefaultUserAgentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/setDefaultUserAgent/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userAgent", runtime.ParamLocationQuery, params.UserAgent); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionSetDnsTtlSuccessfulQueriesRequest generates requests for NetworkActionSetDnsTtlSuccessfulQueries
func NewNetworkActionSetDnsTtlSuccessfulQueriesRequest(server string, params *NetworkActionSetDnsTtlSuccessfulQueriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/setDnsTtlSuccessfulQueries/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.Ttl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionSetHttpProxyRequest generates requests for NetworkActionSetHttpProxy
func NewNetworkActionSetHttpProxyRequest(server string, params *NetworkActionSetHttpProxyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/setHttpProxy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "host", runtime.ParamLocationQuery, params.Host); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "port", runtime.ParamLocationQuery, params.Port); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Realm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "realm", runtime.ParamLocationQuery, *params.Realm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Password != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, *params.Password); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionSetHttpProxyAuthEnabledRequest generates requests for NetworkActionSetHttpProxyAuthEnabled
func NewNetworkActionSetHttpProxyAuthEnabledRequest(server string, params *NetworkActionSetHttpProxyAuthEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/setHttpProxyAuthEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionSetHttpProxyEnabledRequest generates requests for NetworkActionSetHttpProxyEnabled
func NewNetworkActionSetHttpProxyEnabledRequest(server string, params *NetworkActionSetHttpProxyEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/setHttpProxyEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionSetHttpProxyExclusionEnabledRequest generates requests for NetworkActionSetHttpProxyExclusionEnabled
func NewNetworkActionSetHttpProxyExclusionEnabledRequest(server string, params *NetworkActionSetHttpProxyExclusionEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/setHttpProxyExclusionEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "host", runtime.ParamLocationQuery, params.Host); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionSetPassThroughEnabledRequest generates requests for NetworkActionSetPassThroughEnabled
func NewNetworkActionSetPassThroughEnabledRequest(server string, params *NetworkActionSetPassThroughEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/setPassThroughEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authority", runtime.ParamLocationQuery, params.Authority); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionSetRateLimitRuleEnabledRequest generates requests for NetworkActionSetRateLimitRuleEnabled
func NewNetworkActionSetRateLimitRuleEnabledRequest(server string, params *NetworkActionSetRateLimitRuleEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/setRateLimitRuleEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionSetRootCaCertValidityRequest generates requests for NetworkActionSetRootCaCertValidity
func NewNetworkActionSetRootCaCertValidityRequest(server string, params *NetworkActionSetRootCaCertValidityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/setRootCaCertValidity/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validity", runtime.ParamLocationQuery, params.Validity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionSetServerCertValidityRequest generates requests for NetworkActionSetServerCertValidity
func NewNetworkActionSetServerCertValidityRequest(server string, params *NetworkActionSetServerCertValidityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/setServerCertValidity/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validity", runtime.ParamLocationQuery, params.Validity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionSetSocksProxyRequest generates requests for NetworkActionSetSocksProxy
func NewNetworkActionSetSocksProxyRequest(server string, params *NetworkActionSetSocksProxyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/setSocksProxy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "host", runtime.ParamLocationQuery, params.Host); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "port", runtime.ParamLocationQuery, params.Port); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UseDns != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "useDns", runtime.ParamLocationQuery, *params.UseDns); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Password != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, *params.Password); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionSetSocksProxyEnabledRequest generates requests for NetworkActionSetSocksProxyEnabled
func NewNetworkActionSetSocksProxyEnabledRequest(server string, params *NetworkActionSetSocksProxyEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/setSocksProxyEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionSetUseClientCertificateRequest generates requests for NetworkActionSetUseClientCertificate
func NewNetworkActionSetUseClientCertificateRequest(server string, params *NetworkActionSetUseClientCertificateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/setUseClientCertificate/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "use", runtime.ParamLocationQuery, params.Use); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkActionSetUseGlobalHttpStateRequest generates requests for NetworkActionSetUseGlobalHttpState
func NewNetworkActionSetUseGlobalHttpStateRequest(server string, params *NetworkActionSetUseGlobalHttpStateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/action/setUseGlobalHttpState/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "use", runtime.ParamLocationQuery, params.Use); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkViewGetAliasesRequest generates requests for NetworkViewGetAliases
func NewNetworkViewGetAliasesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/view/getAliases/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkViewGetConnectionTimeoutRequest generates requests for NetworkViewGetConnectionTimeout
func NewNetworkViewGetConnectionTimeoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/view/getConnectionTimeout/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkViewGetDefaultUserAgentRequest generates requests for NetworkViewGetDefaultUserAgent
func NewNetworkViewGetDefaultUserAgentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/view/getDefaultUserAgent/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkViewGetDnsTtlSuccessfulQueriesRequest generates requests for NetworkViewGetDnsTtlSuccessfulQueries
func NewNetworkViewGetDnsTtlSuccessfulQueriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/view/getDnsTtlSuccessfulQueries/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkViewGetHttpProxyRequest generates requests for NetworkViewGetHttpProxy
func NewNetworkViewGetHttpProxyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/view/getHttpProxy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkViewGetHttpProxyExclusionsRequest generates requests for NetworkViewGetHttpProxyExclusions
func NewNetworkViewGetHttpProxyExclusionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/view/getHttpProxyExclusions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkViewGetLocalServersRequest generates requests for NetworkViewGetLocalServers
func NewNetworkViewGetLocalServersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/view/getLocalServers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkViewGetPassThroughsRequest generates requests for NetworkViewGetPassThroughs
func NewNetworkViewGetPassThroughsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/view/getPassThroughs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkViewGetRateLimitRulesRequest generates requests for NetworkViewGetRateLimitRules
func NewNetworkViewGetRateLimitRulesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/view/getRateLimitRules/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkViewGetRootCaCertValidityRequest generates requests for NetworkViewGetRootCaCertValidity
func NewNetworkViewGetRootCaCertValidityRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/view/getRootCaCertValidity/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkViewGetServerCertValidityRequest generates requests for NetworkViewGetServerCertValidity
func NewNetworkViewGetServerCertValidityRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/view/getServerCertValidity/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkViewGetSocksProxyRequest generates requests for NetworkViewGetSocksProxy
func NewNetworkViewGetSocksProxyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/view/getSocksProxy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkViewIsHttpProxyAuthEnabledRequest generates requests for NetworkViewIsHttpProxyAuthEnabled
func NewNetworkViewIsHttpProxyAuthEnabledRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/view/isHttpProxyAuthEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkViewIsHttpProxyEnabledRequest generates requests for NetworkViewIsHttpProxyEnabled
func NewNetworkViewIsHttpProxyEnabledRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/view/isHttpProxyEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkViewIsSocksProxyEnabledRequest generates requests for NetworkViewIsSocksProxyEnabled
func NewNetworkViewIsSocksProxyEnabledRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/view/isSocksProxyEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkViewIsUseGlobalHttpStateRequest generates requests for NetworkViewIsUseGlobalHttpState
func NewNetworkViewIsUseGlobalHttpStateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/network/view/isUseGlobalHttpState/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOastActionSetActiveScanServiceRequest generates requests for OastActionSetActiveScanService
func NewOastActionSetActiveScanServiceRequest(server string, params *OastActionSetActiveScanServiceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/oast/action/setActiveScanService/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOastActionSetBoastOptionsRequest generates requests for OastActionSetBoastOptions
func NewOastActionSetBoastOptionsRequest(server string, params *OastActionSetBoastOptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/oast/action/setBoastOptions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "server", runtime.ParamLocationQuery, params.Server); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pollInSecs", runtime.ParamLocationQuery, params.PollInSecs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOastActionSetCallbackOptionsRequest generates requests for OastActionSetCallbackOptions
func NewOastActionSetCallbackOptionsRequest(server string, params *OastActionSetCallbackOptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/oast/action/setCallbackOptions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "localAddress", runtime.ParamLocationQuery, params.LocalAddress); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remoteAddress", runtime.ParamLocationQuery, params.RemoteAddress); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "port", runtime.ParamLocationQuery, params.Port); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOastActionSetDaysToKeepRecordsRequest generates requests for OastActionSetDaysToKeepRecords
func NewOastActionSetDaysToKeepRecordsRequest(server string, params *OastActionSetDaysToKeepRecordsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/oast/action/setDaysToKeepRecords/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "days", runtime.ParamLocationQuery, params.Days); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOastActionSetInteractshOptionsRequest generates requests for OastActionSetInteractshOptions
func NewOastActionSetInteractshOptionsRequest(server string, params *OastActionSetInteractshOptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/oast/action/setInteractshOptions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "server", runtime.ParamLocationQuery, params.Server); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pollInSecs", runtime.ParamLocationQuery, params.PollInSecs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authToken", runtime.ParamLocationQuery, params.AuthToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOastViewGetActiveScanServiceRequest generates requests for OastViewGetActiveScanService
func NewOastViewGetActiveScanServiceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/oast/view/getActiveScanService/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOastViewGetBoastOptionsRequest generates requests for OastViewGetBoastOptions
func NewOastViewGetBoastOptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/oast/view/getBoastOptions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOastViewGetCallbackOptionsRequest generates requests for OastViewGetCallbackOptions
func NewOastViewGetCallbackOptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/oast/view/getCallbackOptions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOastViewGetDaysToKeepRecordsRequest generates requests for OastViewGetDaysToKeepRecords
func NewOastViewGetDaysToKeepRecordsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/oast/view/getDaysToKeepRecords/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOastViewGetInteractshOptionsRequest generates requests for OastViewGetInteractshOptions
func NewOastViewGetInteractshOptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/oast/view/getInteractshOptions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOastViewGetServicesRequest generates requests for OastViewGetServices
func NewOastViewGetServicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/oast/view/getServices/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOpenapiActionImportFileRequest generates requests for OpenapiActionImportFile
func NewOpenapiActionImportFileRequest(server string, params *OpenapiActionImportFileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/openapi/action/importFile/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, params.File); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Target != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target", runtime.ParamLocationQuery, *params.Target); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContextId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, *params.ContextId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOpenapiActionImportUrlRequest generates requests for OpenapiActionImportUrl
func NewOpenapiActionImportUrlRequest(server string, params *OpenapiActionImportUrlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/openapi/action/importUrl/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.HostOverride != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hostOverride", runtime.ParamLocationQuery, *params.HostOverride); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContextId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, *params.ContextId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewParamDiggerActionHelloWorldRequest generates requests for ParamDiggerActionHelloWorld
func NewParamDiggerActionHelloWorldRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/paramDigger/action/helloWorld/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewParamsViewParamsRequest generates requests for ParamsViewParams
func NewParamsViewParamsRequest(server string, params *ParamsViewParamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/params/view/params/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Site != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, *params.Site); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPnhActionMonitorRequest generates requests for PnhActionMonitor
func NewPnhActionMonitorRequest(server string, params *PnhActionMonitorParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pnh/action/monitor/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "message", runtime.ParamLocationQuery, params.Message); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPnhActionOracleRequest generates requests for PnhActionOracle
func NewPnhActionOracleRequest(server string, params *PnhActionOracleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pnh/action/oracle/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPnhActionStartMonitoringRequest generates requests for PnhActionStartMonitoring
func NewPnhActionStartMonitoringRequest(server string, params *PnhActionStartMonitoringParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pnh/action/startMonitoring/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPnhActionStopMonitoringRequest generates requests for PnhActionStopMonitoring
func NewPnhActionStopMonitoringRequest(server string, params *PnhActionStopMonitoringParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pnh/action/stopMonitoring/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostmanActionImportFileRequest generates requests for PostmanActionImportFile
func NewPostmanActionImportFileRequest(server string, params *PostmanActionImportFileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/postman/action/importFile/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, params.File); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.EndpointUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endpointUrl", runtime.ParamLocationQuery, *params.EndpointUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostmanActionImportUrlRequest generates requests for PostmanActionImportUrl
func NewPostmanActionImportUrlRequest(server string, params *PostmanActionImportUrlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/postman/action/importUrl/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.EndpointUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endpointUrl", runtime.ParamLocationQuery, *params.EndpointUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanActionClearQueueRequest generates requests for PscanActionClearQueue
func NewPscanActionClearQueueRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/action/clearQueue/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanActionDisableAllScannersRequest generates requests for PscanActionDisableAllScanners
func NewPscanActionDisableAllScannersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/action/disableAllScanners/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanActionDisableAllTagsRequest generates requests for PscanActionDisableAllTags
func NewPscanActionDisableAllTagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/action/disableAllTags/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanActionDisableScannersRequest generates requests for PscanActionDisableScanners
func NewPscanActionDisableScannersRequest(server string, params *PscanActionDisableScannersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/action/disableScanners/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanActionEnableAllScannersRequest generates requests for PscanActionEnableAllScanners
func NewPscanActionEnableAllScannersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/action/enableAllScanners/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanActionEnableAllTagsRequest generates requests for PscanActionEnableAllTags
func NewPscanActionEnableAllTagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/action/enableAllTags/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanActionEnableScannersRequest generates requests for PscanActionEnableScanners
func NewPscanActionEnableScannersRequest(server string, params *PscanActionEnableScannersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/action/enableScanners/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanActionSetEnabledRequest generates requests for PscanActionSetEnabled
func NewPscanActionSetEnabledRequest(server string, params *PscanActionSetEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/action/setEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanActionSetMaxAlertsPerRuleRequest generates requests for PscanActionSetMaxAlertsPerRule
func NewPscanActionSetMaxAlertsPerRuleRequest(server string, params *PscanActionSetMaxAlertsPerRuleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/action/setMaxAlertsPerRule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxAlerts", runtime.ParamLocationQuery, params.MaxAlerts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanActionSetScanOnlyInScopeRequest generates requests for PscanActionSetScanOnlyInScope
func NewPscanActionSetScanOnlyInScopeRequest(server string, params *PscanActionSetScanOnlyInScopeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/action/setScanOnlyInScope/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "onlyInScope", runtime.ParamLocationQuery, params.OnlyInScope); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanActionSetScannerAlertThresholdRequest generates requests for PscanActionSetScannerAlertThreshold
func NewPscanActionSetScannerAlertThresholdRequest(server string, params *PscanActionSetScannerAlertThresholdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/action/setScannerAlertThreshold/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alertThreshold", runtime.ParamLocationQuery, params.AlertThreshold); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanViewCurrentRuleRequest generates requests for PscanViewCurrentRule
func NewPscanViewCurrentRuleRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/view/currentRule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanViewCurrentTasksRequest generates requests for PscanViewCurrentTasks
func NewPscanViewCurrentTasksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/view/currentTasks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanViewMaxAlertsPerRuleRequest generates requests for PscanViewMaxAlertsPerRule
func NewPscanViewMaxAlertsPerRuleRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/view/maxAlertsPerRule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanViewRecordsToScanRequest generates requests for PscanViewRecordsToScan
func NewPscanViewRecordsToScanRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/view/recordsToScan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanViewScanOnlyInScopeRequest generates requests for PscanViewScanOnlyInScope
func NewPscanViewScanOnlyInScopeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/view/scanOnlyInScope/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPscanViewScannersRequest generates requests for PscanViewScanners
func NewPscanViewScannersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/pscan/view/scanners/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplacerActionAddRuleRequest generates requests for ReplacerActionAddRule
func NewReplacerActionAddRuleRequest(server string, params *ReplacerActionAddRuleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/replacer/action/addRule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchType", runtime.ParamLocationQuery, params.MatchType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchRegex", runtime.ParamLocationQuery, params.MatchRegex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchString", runtime.ParamLocationQuery, params.MatchString); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Replacement != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "replacement", runtime.ParamLocationQuery, *params.Replacement); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Initiators != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "initiators", runtime.ParamLocationQuery, *params.Initiators); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplacerActionRemoveRuleRequest generates requests for ReplacerActionRemoveRule
func NewReplacerActionRemoveRuleRequest(server string, params *ReplacerActionRemoveRuleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/replacer/action/removeRule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplacerActionSetEnabledRequest generates requests for ReplacerActionSetEnabled
func NewReplacerActionSetEnabledRequest(server string, params *ReplacerActionSetEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/replacer/action/setEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bool", runtime.ParamLocationQuery, params.Bool); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplacerViewRulesRequest generates requests for ReplacerViewRules
func NewReplacerViewRulesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/replacer/view/rules/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportsActionGenerateRequest generates requests for ReportsActionGenerate
func NewReportsActionGenerateRequest(server string, params *ReportsActionGenerateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/reports/action/generate/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, params.Title); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template", runtime.ParamLocationQuery, params.Template); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Theme != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "theme", runtime.ParamLocationQuery, *params.Theme); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Contexts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contexts", runtime.ParamLocationQuery, *params.Contexts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sites != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sites", runtime.ParamLocationQuery, *params.Sites); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sections != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sections", runtime.ParamLocationQuery, *params.Sections); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludedConfidences != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includedConfidences", runtime.ParamLocationQuery, *params.IncludedConfidences); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludedRisks != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includedRisks", runtime.ParamLocationQuery, *params.IncludedRisks); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReportFileName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reportFileName", runtime.ParamLocationQuery, *params.ReportFileName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReportFileNamePattern != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reportFileNamePattern", runtime.ParamLocationQuery, *params.ReportFileNamePattern); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReportDir != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reportDir", runtime.ParamLocationQuery, *params.ReportDir); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Display != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "display", runtime.ParamLocationQuery, *params.Display); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportsViewTemplateDetailsRequest generates requests for ReportsViewTemplateDetails
func NewReportsViewTemplateDetailsRequest(server string, params *ReportsViewTemplateDetailsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/reports/view/templateDetails/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template", runtime.ParamLocationQuery, params.Template); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportsViewTemplatesRequest generates requests for ReportsViewTemplates
func NewReportsViewTemplatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/reports/view/templates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetestActionRetestRequest generates requests for RetestActionRetest
func NewRetestActionRetestRequest(server string, params *RetestActionRetestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/retest/action/retest/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alertIds", runtime.ParamLocationQuery, params.AlertIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevealActionSetRevealRequest generates requests for RevealActionSetReveal
func NewRevealActionSetRevealRequest(server string, params *RevealActionSetRevealParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/reveal/action/setReveal/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reveal", runtime.ParamLocationQuery, params.Reveal); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevealViewRevealRequest generates requests for RevealViewReveal
func NewRevealViewRevealRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/reveal/view/reveal/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevisitActionRevisitSiteOffRequest generates requests for RevisitActionRevisitSiteOff
func NewRevisitActionRevisitSiteOffRequest(server string, params *RevisitActionRevisitSiteOffParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/revisit/action/revisitSiteOff/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, params.Site); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevisitActionRevisitSiteOnRequest generates requests for RevisitActionRevisitSiteOn
func NewRevisitActionRevisitSiteOnRequest(server string, params *RevisitActionRevisitSiteOnParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/revisit/action/revisitSiteOn/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, params.Site); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevisitViewRevisitListRequest generates requests for RevisitViewRevisitList
func NewRevisitViewRevisitListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/revisit/view/revisitList/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuleConfigActionResetAllRuleConfigValuesRequest generates requests for RuleConfigActionResetAllRuleConfigValues
func NewRuleConfigActionResetAllRuleConfigValuesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ruleConfig/action/resetAllRuleConfigValues/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuleConfigActionResetRuleConfigValueRequest generates requests for RuleConfigActionResetRuleConfigValue
func NewRuleConfigActionResetRuleConfigValueRequest(server string, params *RuleConfigActionResetRuleConfigValueParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ruleConfig/action/resetRuleConfigValue/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuleConfigActionSetRuleConfigValueRequest generates requests for RuleConfigActionSetRuleConfigValue
func NewRuleConfigActionSetRuleConfigValueRequest(server string, params *RuleConfigActionSetRuleConfigValueParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ruleConfig/action/setRuleConfigValue/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Value != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, *params.Value); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuleConfigViewAllRuleConfigsRequest generates requests for RuleConfigViewAllRuleConfigs
func NewRuleConfigViewAllRuleConfigsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ruleConfig/view/allRuleConfigs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuleConfigViewRuleConfigValueRequest generates requests for RuleConfigViewRuleConfigValue
func NewRuleConfigViewRuleConfigValueRequest(server string, params *RuleConfigViewRuleConfigValueParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/ruleConfig/view/ruleConfigValue/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptActionClearGlobalCustomVarRequest generates requests for ScriptActionClearGlobalCustomVar
func NewScriptActionClearGlobalCustomVarRequest(server string, params *ScriptActionClearGlobalCustomVarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/action/clearGlobalCustomVar/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "varKey", runtime.ParamLocationQuery, params.VarKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptActionClearGlobalVarRequest generates requests for ScriptActionClearGlobalVar
func NewScriptActionClearGlobalVarRequest(server string, params *ScriptActionClearGlobalVarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/action/clearGlobalVar/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "varKey", runtime.ParamLocationQuery, params.VarKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptActionClearGlobalVarsRequest generates requests for ScriptActionClearGlobalVars
func NewScriptActionClearGlobalVarsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/action/clearGlobalVars/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptActionClearScriptCustomVarRequest generates requests for ScriptActionClearScriptCustomVar
func NewScriptActionClearScriptCustomVarRequest(server string, params *ScriptActionClearScriptCustomVarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/action/clearScriptCustomVar/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptName", runtime.ParamLocationQuery, params.ScriptName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "varKey", runtime.ParamLocationQuery, params.VarKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptActionClearScriptVarRequest generates requests for ScriptActionClearScriptVar
func NewScriptActionClearScriptVarRequest(server string, params *ScriptActionClearScriptVarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/action/clearScriptVar/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptName", runtime.ParamLocationQuery, params.ScriptName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "varKey", runtime.ParamLocationQuery, params.VarKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptActionClearScriptVarsRequest generates requests for ScriptActionClearScriptVars
func NewScriptActionClearScriptVarsRequest(server string, params *ScriptActionClearScriptVarsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/action/clearScriptVars/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptName", runtime.ParamLocationQuery, params.ScriptName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptActionDisableRequest generates requests for ScriptActionDisable
func NewScriptActionDisableRequest(server string, params *ScriptActionDisableParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/action/disable/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptName", runtime.ParamLocationQuery, params.ScriptName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptActionEnableRequest generates requests for ScriptActionEnable
func NewScriptActionEnableRequest(server string, params *ScriptActionEnableParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/action/enable/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptName", runtime.ParamLocationQuery, params.ScriptName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptActionLoadRequest generates requests for ScriptActionLoad
func NewScriptActionLoadRequest(server string, params *ScriptActionLoadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/action/load/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptName", runtime.ParamLocationQuery, params.ScriptName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptType", runtime.ParamLocationQuery, params.ScriptType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptEngine", runtime.ParamLocationQuery, params.ScriptEngine); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fileName", runtime.ParamLocationQuery, params.FileName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ScriptDescription != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptDescription", runtime.ParamLocationQuery, *params.ScriptDescription); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Charset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "charset", runtime.ParamLocationQuery, *params.Charset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptActionRemoveRequest generates requests for ScriptActionRemove
func NewScriptActionRemoveRequest(server string, params *ScriptActionRemoveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/action/remove/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptName", runtime.ParamLocationQuery, params.ScriptName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptActionRunStandAloneScriptRequest generates requests for ScriptActionRunStandAloneScript
func NewScriptActionRunStandAloneScriptRequest(server string, params *ScriptActionRunStandAloneScriptParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/action/runStandAloneScript/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptName", runtime.ParamLocationQuery, params.ScriptName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptActionSetGlobalVarRequest generates requests for ScriptActionSetGlobalVar
func NewScriptActionSetGlobalVarRequest(server string, params *ScriptActionSetGlobalVarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/action/setGlobalVar/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "varKey", runtime.ParamLocationQuery, params.VarKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.VarValue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "varValue", runtime.ParamLocationQuery, *params.VarValue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptActionSetScriptVarRequest generates requests for ScriptActionSetScriptVar
func NewScriptActionSetScriptVarRequest(server string, params *ScriptActionSetScriptVarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/action/setScriptVar/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptName", runtime.ParamLocationQuery, params.ScriptName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "varKey", runtime.ParamLocationQuery, params.VarKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.VarValue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "varValue", runtime.ParamLocationQuery, *params.VarValue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptViewGlobalCustomVarRequest generates requests for ScriptViewGlobalCustomVar
func NewScriptViewGlobalCustomVarRequest(server string, params *ScriptViewGlobalCustomVarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/view/globalCustomVar/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "varKey", runtime.ParamLocationQuery, params.VarKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptViewGlobalCustomVarsRequest generates requests for ScriptViewGlobalCustomVars
func NewScriptViewGlobalCustomVarsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/view/globalCustomVars/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptViewGlobalVarRequest generates requests for ScriptViewGlobalVar
func NewScriptViewGlobalVarRequest(server string, params *ScriptViewGlobalVarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/view/globalVar/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "varKey", runtime.ParamLocationQuery, params.VarKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptViewGlobalVarsRequest generates requests for ScriptViewGlobalVars
func NewScriptViewGlobalVarsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/view/globalVars/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptViewListEnginesRequest generates requests for ScriptViewListEngines
func NewScriptViewListEnginesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/view/listEngines/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptViewListScriptsRequest generates requests for ScriptViewListScripts
func NewScriptViewListScriptsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/view/listScripts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptViewListTypesRequest generates requests for ScriptViewListTypes
func NewScriptViewListTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/view/listTypes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptViewScriptCustomVarRequest generates requests for ScriptViewScriptCustomVar
func NewScriptViewScriptCustomVarRequest(server string, params *ScriptViewScriptCustomVarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/view/scriptCustomVar/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptName", runtime.ParamLocationQuery, params.ScriptName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "varKey", runtime.ParamLocationQuery, params.VarKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptViewScriptCustomVarsRequest generates requests for ScriptViewScriptCustomVars
func NewScriptViewScriptCustomVarsRequest(server string, params *ScriptViewScriptCustomVarsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/view/scriptCustomVars/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptName", runtime.ParamLocationQuery, params.ScriptName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptViewScriptVarRequest generates requests for ScriptViewScriptVar
func NewScriptViewScriptVarRequest(server string, params *ScriptViewScriptVarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/view/scriptVar/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptName", runtime.ParamLocationQuery, params.ScriptName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "varKey", runtime.ParamLocationQuery, params.VarKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScriptViewScriptVarsRequest generates requests for ScriptViewScriptVars
func NewScriptViewScriptVarsRequest(server string, params *ScriptViewScriptVarsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/script/view/scriptVars/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptName", runtime.ParamLocationQuery, params.ScriptName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchViewMessagesByHeaderRegexRequest generates requests for SearchViewMessagesByHeaderRegex
func NewSearchViewMessagesByHeaderRegexRequest(server string, params *SearchViewMessagesByHeaderRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/search/view/messagesByHeaderRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchViewMessagesByNoteRegexRequest generates requests for SearchViewMessagesByNoteRegex
func NewSearchViewMessagesByNoteRegexRequest(server string, params *SearchViewMessagesByNoteRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/search/view/messagesByNoteRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchViewMessagesByRequestRegexRequest generates requests for SearchViewMessagesByRequestRegex
func NewSearchViewMessagesByRequestRegexRequest(server string, params *SearchViewMessagesByRequestRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/search/view/messagesByRequestRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchViewMessagesByResponseRegexRequest generates requests for SearchViewMessagesByResponseRegex
func NewSearchViewMessagesByResponseRegexRequest(server string, params *SearchViewMessagesByResponseRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/search/view/messagesByResponseRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchViewMessagesByTagRegexRequest generates requests for SearchViewMessagesByTagRegex
func NewSearchViewMessagesByTagRegexRequest(server string, params *SearchViewMessagesByTagRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/search/view/messagesByTagRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchViewMessagesByUrlRegexRequest generates requests for SearchViewMessagesByUrlRegex
func NewSearchViewMessagesByUrlRegexRequest(server string, params *SearchViewMessagesByUrlRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/search/view/messagesByUrlRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchViewUrlsByHeaderRegexRequest generates requests for SearchViewUrlsByHeaderRegex
func NewSearchViewUrlsByHeaderRegexRequest(server string, params *SearchViewUrlsByHeaderRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/search/view/urlsByHeaderRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchViewUrlsByNoteRegexRequest generates requests for SearchViewUrlsByNoteRegex
func NewSearchViewUrlsByNoteRegexRequest(server string, params *SearchViewUrlsByNoteRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/search/view/urlsByNoteRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchViewUrlsByRequestRegexRequest generates requests for SearchViewUrlsByRequestRegex
func NewSearchViewUrlsByRequestRegexRequest(server string, params *SearchViewUrlsByRequestRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/search/view/urlsByRequestRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchViewUrlsByResponseRegexRequest generates requests for SearchViewUrlsByResponseRegex
func NewSearchViewUrlsByResponseRegexRequest(server string, params *SearchViewUrlsByResponseRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/search/view/urlsByResponseRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchViewUrlsByTagRegexRequest generates requests for SearchViewUrlsByTagRegex
func NewSearchViewUrlsByTagRegexRequest(server string, params *SearchViewUrlsByTagRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/search/view/urlsByTagRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchViewUrlsByUrlRegexRequest generates requests for SearchViewUrlsByUrlRegex
func NewSearchViewUrlsByUrlRegexRequest(server string, params *SearchViewUrlsByUrlRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/search/view/urlsByUrlRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumActionAddBrowserArgumentRequest generates requests for SeleniumActionAddBrowserArgument
func NewSeleniumActionAddBrowserArgumentRequest(server string, params *SeleniumActionAddBrowserArgumentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/action/addBrowserArgument/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "browser", runtime.ParamLocationQuery, params.Browser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "argument", runtime.ParamLocationQuery, params.Argument); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumActionLaunchBrowserRequest generates requests for SeleniumActionLaunchBrowser
func NewSeleniumActionLaunchBrowserRequest(server string, params *SeleniumActionLaunchBrowserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/action/launchBrowser/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "browser", runtime.ParamLocationQuery, params.Browser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumActionRemoveBrowserArgumentRequest generates requests for SeleniumActionRemoveBrowserArgument
func NewSeleniumActionRemoveBrowserArgumentRequest(server string, params *SeleniumActionRemoveBrowserArgumentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/action/removeBrowserArgument/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "browser", runtime.ParamLocationQuery, params.Browser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "argument", runtime.ParamLocationQuery, params.Argument); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumActionSetBrowserArgumentEnabledRequest generates requests for SeleniumActionSetBrowserArgumentEnabled
func NewSeleniumActionSetBrowserArgumentEnabledRequest(server string, params *SeleniumActionSetBrowserArgumentEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/action/setBrowserArgumentEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "browser", runtime.ParamLocationQuery, params.Browser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "argument", runtime.ParamLocationQuery, params.Argument); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumActionSetOptionChromeBinaryPathRequest generates requests for SeleniumActionSetOptionChromeBinaryPath
func NewSeleniumActionSetOptionChromeBinaryPathRequest(server string, params *SeleniumActionSetOptionChromeBinaryPathParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/action/setOptionChromeBinaryPath/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumActionSetOptionChromeDriverPathRequest generates requests for SeleniumActionSetOptionChromeDriverPath
func NewSeleniumActionSetOptionChromeDriverPathRequest(server string, params *SeleniumActionSetOptionChromeDriverPathParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/action/setOptionChromeDriverPath/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumActionSetOptionFirefoxBinaryPathRequest generates requests for SeleniumActionSetOptionFirefoxBinaryPath
func NewSeleniumActionSetOptionFirefoxBinaryPathRequest(server string, params *SeleniumActionSetOptionFirefoxBinaryPathParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/action/setOptionFirefoxBinaryPath/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumActionSetOptionFirefoxDefaultProfileRequest generates requests for SeleniumActionSetOptionFirefoxDefaultProfile
func NewSeleniumActionSetOptionFirefoxDefaultProfileRequest(server string, params *SeleniumActionSetOptionFirefoxDefaultProfileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/action/setOptionFirefoxDefaultProfile/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumActionSetOptionFirefoxDriverPathRequest generates requests for SeleniumActionSetOptionFirefoxDriverPath
func NewSeleniumActionSetOptionFirefoxDriverPathRequest(server string, params *SeleniumActionSetOptionFirefoxDriverPathParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/action/setOptionFirefoxDriverPath/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumActionSetOptionIeDriverPathRequest generates requests for SeleniumActionSetOptionIeDriverPath
func NewSeleniumActionSetOptionIeDriverPathRequest(server string, params *SeleniumActionSetOptionIeDriverPathParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/action/setOptionIeDriverPath/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumActionSetOptionLastDirectoryRequest generates requests for SeleniumActionSetOptionLastDirectory
func NewSeleniumActionSetOptionLastDirectoryRequest(server string, params *SeleniumActionSetOptionLastDirectoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/action/setOptionLastDirectory/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumActionSetOptionPhantomJsBinaryPathRequest generates requests for SeleniumActionSetOptionPhantomJsBinaryPath
func NewSeleniumActionSetOptionPhantomJsBinaryPathRequest(server string, params *SeleniumActionSetOptionPhantomJsBinaryPathParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/action/setOptionPhantomJsBinaryPath/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumViewGetBrowserArgumentsRequest generates requests for SeleniumViewGetBrowserArguments
func NewSeleniumViewGetBrowserArgumentsRequest(server string, params *SeleniumViewGetBrowserArgumentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/view/getBrowserArguments/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "browser", runtime.ParamLocationQuery, params.Browser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumViewOptionBrowserExtensionsRequest generates requests for SeleniumViewOptionBrowserExtensions
func NewSeleniumViewOptionBrowserExtensionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/view/optionBrowserExtensions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumViewOptionChromeBinaryPathRequest generates requests for SeleniumViewOptionChromeBinaryPath
func NewSeleniumViewOptionChromeBinaryPathRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/view/optionChromeBinaryPath/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumViewOptionChromeDriverPathRequest generates requests for SeleniumViewOptionChromeDriverPath
func NewSeleniumViewOptionChromeDriverPathRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/view/optionChromeDriverPath/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumViewOptionFirefoxBinaryPathRequest generates requests for SeleniumViewOptionFirefoxBinaryPath
func NewSeleniumViewOptionFirefoxBinaryPathRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/view/optionFirefoxBinaryPath/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumViewOptionFirefoxDefaultProfileRequest generates requests for SeleniumViewOptionFirefoxDefaultProfile
func NewSeleniumViewOptionFirefoxDefaultProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/view/optionFirefoxDefaultProfile/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumViewOptionFirefoxDriverPathRequest generates requests for SeleniumViewOptionFirefoxDriverPath
func NewSeleniumViewOptionFirefoxDriverPathRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/view/optionFirefoxDriverPath/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumViewOptionIeDriverPathRequest generates requests for SeleniumViewOptionIeDriverPath
func NewSeleniumViewOptionIeDriverPathRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/view/optionIeDriverPath/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumViewOptionLastDirectoryRequest generates requests for SeleniumViewOptionLastDirectory
func NewSeleniumViewOptionLastDirectoryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/view/optionLastDirectory/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeleniumViewOptionPhantomJsBinaryPathRequest generates requests for SeleniumViewOptionPhantomJsBinaryPath
func NewSeleniumViewOptionPhantomJsBinaryPathRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/selenium/view/optionPhantomJsBinaryPath/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSessionManagementActionSetSessionManagementMethodRequest generates requests for SessionManagementActionSetSessionManagementMethod
func NewSessionManagementActionSetSessionManagementMethodRequest(server string, params *SessionManagementActionSetSessionManagementMethodParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/sessionManagement/action/setSessionManagementMethod/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "methodName", runtime.ParamLocationQuery, params.MethodName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.MethodConfigParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "methodConfigParams", runtime.ParamLocationQuery, *params.MethodConfigParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSessionManagementViewGetSessionManagementMethodRequest generates requests for SessionManagementViewGetSessionManagementMethod
func NewSessionManagementViewGetSessionManagementMethodRequest(server string, params *SessionManagementViewGetSessionManagementMethodParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/sessionManagement/view/getSessionManagementMethod/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSessionManagementViewGetSessionManagementMethodConfigParamsRequest generates requests for SessionManagementViewGetSessionManagementMethodConfigParams
func NewSessionManagementViewGetSessionManagementMethodConfigParamsRequest(server string, params *SessionManagementViewGetSessionManagementMethodConfigParamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/sessionManagement/view/getSessionManagementMethodConfigParams/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "methodName", runtime.ParamLocationQuery, params.MethodName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSessionManagementViewGetSupportedSessionManagementMethodsRequest generates requests for SessionManagementViewGetSupportedSessionManagementMethods
func NewSessionManagementViewGetSupportedSessionManagementMethodsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/sessionManagement/view/getSupportedSessionManagementMethods/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSoapActionImportFileRequest generates requests for SoapActionImportFile
func NewSoapActionImportFileRequest(server string, params *SoapActionImportFileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/soap/action/importFile/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, params.File); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSoapActionImportUrlRequest generates requests for SoapActionImportUrl
func NewSoapActionImportUrlRequest(server string, params *SoapActionImportUrlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/soap/action/importUrl/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionAddDomainAlwaysInScopeRequest generates requests for SpiderActionAddDomainAlwaysInScope
func NewSpiderActionAddDomainAlwaysInScopeRequest(server string, params *SpiderActionAddDomainAlwaysInScopeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/addDomainAlwaysInScope/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isRegex", runtime.ParamLocationQuery, *params.IsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isEnabled", runtime.ParamLocationQuery, *params.IsEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionClearExcludedFromScanRequest generates requests for SpiderActionClearExcludedFromScan
func NewSpiderActionClearExcludedFromScanRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/clearExcludedFromScan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionDisableAllDomainsAlwaysInScopeRequest generates requests for SpiderActionDisableAllDomainsAlwaysInScope
func NewSpiderActionDisableAllDomainsAlwaysInScopeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/disableAllDomainsAlwaysInScope/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionEnableAllDomainsAlwaysInScopeRequest generates requests for SpiderActionEnableAllDomainsAlwaysInScope
func NewSpiderActionEnableAllDomainsAlwaysInScopeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/enableAllDomainsAlwaysInScope/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionExcludeFromScanRequest generates requests for SpiderActionExcludeFromScan
func NewSpiderActionExcludeFromScanRequest(server string, params *SpiderActionExcludeFromScanParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/excludeFromScan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionModifyDomainAlwaysInScopeRequest generates requests for SpiderActionModifyDomainAlwaysInScope
func NewSpiderActionModifyDomainAlwaysInScopeRequest(server string, params *SpiderActionModifyDomainAlwaysInScopeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/modifyDomainAlwaysInScope/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idx", runtime.ParamLocationQuery, params.Idx); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Value != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, *params.Value); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsRegex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isRegex", runtime.ParamLocationQuery, *params.IsRegex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isEnabled", runtime.ParamLocationQuery, *params.IsEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionPauseRequest generates requests for SpiderActionPause
func NewSpiderActionPauseRequest(server string, params *SpiderActionPauseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/pause/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, params.ScanId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionPauseAllScansRequest generates requests for SpiderActionPauseAllScans
func NewSpiderActionPauseAllScansRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/pauseAllScans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionRemoveAllScansRequest generates requests for SpiderActionRemoveAllScans
func NewSpiderActionRemoveAllScansRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/removeAllScans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionRemoveDomainAlwaysInScopeRequest generates requests for SpiderActionRemoveDomainAlwaysInScope
func NewSpiderActionRemoveDomainAlwaysInScopeRequest(server string, params *SpiderActionRemoveDomainAlwaysInScopeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/removeDomainAlwaysInScope/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idx", runtime.ParamLocationQuery, params.Idx); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionRemoveScanRequest generates requests for SpiderActionRemoveScan
func NewSpiderActionRemoveScanRequest(server string, params *SpiderActionRemoveScanParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/removeScan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, params.ScanId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionResumeRequest generates requests for SpiderActionResume
func NewSpiderActionResumeRequest(server string, params *SpiderActionResumeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/resume/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, params.ScanId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionResumeAllScansRequest generates requests for SpiderActionResumeAllScans
func NewSpiderActionResumeAllScansRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/resumeAllScans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionScanRequest generates requests for SpiderActionScan
func NewSpiderActionScanRequest(server string, params *SpiderActionScanParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/scan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxChildren != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxChildren", runtime.ParamLocationQuery, *params.MaxChildren); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Recurse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recurse", runtime.ParamLocationQuery, *params.Recurse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContextName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextName", runtime.ParamLocationQuery, *params.ContextName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubtreeOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subtreeOnly", runtime.ParamLocationQuery, *params.SubtreeOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionScanAsUserRequest generates requests for SpiderActionScanAsUser
func NewSpiderActionScanAsUserRequest(server string, params *SpiderActionScanAsUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/scanAsUser/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxChildren != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxChildren", runtime.ParamLocationQuery, *params.MaxChildren); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Recurse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recurse", runtime.ParamLocationQuery, *params.Recurse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubtreeOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subtreeOnly", runtime.ParamLocationQuery, *params.SubtreeOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionAcceptCookiesRequest generates requests for SpiderActionSetOptionAcceptCookies
func NewSpiderActionSetOptionAcceptCookiesRequest(server string, params *SpiderActionSetOptionAcceptCookiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionAcceptCookies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionHandleODataParametersVisitedRequest generates requests for SpiderActionSetOptionHandleODataParametersVisited
func NewSpiderActionSetOptionHandleODataParametersVisitedRequest(server string, params *SpiderActionSetOptionHandleODataParametersVisitedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionHandleODataParametersVisited/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionHandleParametersRequest generates requests for SpiderActionSetOptionHandleParameters
func NewSpiderActionSetOptionHandleParametersRequest(server string, params *SpiderActionSetOptionHandleParametersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionHandleParameters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionLogoutAvoidanceRequest generates requests for SpiderActionSetOptionLogoutAvoidance
func NewSpiderActionSetOptionLogoutAvoidanceRequest(server string, params *SpiderActionSetOptionLogoutAvoidanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionLogoutAvoidance/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionMaxChildrenRequest generates requests for SpiderActionSetOptionMaxChildren
func NewSpiderActionSetOptionMaxChildrenRequest(server string, params *SpiderActionSetOptionMaxChildrenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionMaxChildren/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionMaxDepthRequest generates requests for SpiderActionSetOptionMaxDepth
func NewSpiderActionSetOptionMaxDepthRequest(server string, params *SpiderActionSetOptionMaxDepthParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionMaxDepth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionMaxDurationRequest generates requests for SpiderActionSetOptionMaxDuration
func NewSpiderActionSetOptionMaxDurationRequest(server string, params *SpiderActionSetOptionMaxDurationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionMaxDuration/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionMaxParseSizeBytesRequest generates requests for SpiderActionSetOptionMaxParseSizeBytes
func NewSpiderActionSetOptionMaxParseSizeBytesRequest(server string, params *SpiderActionSetOptionMaxParseSizeBytesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionMaxParseSizeBytes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionMaxScansInUIRequest generates requests for SpiderActionSetOptionMaxScansInUI
func NewSpiderActionSetOptionMaxScansInUIRequest(server string, params *SpiderActionSetOptionMaxScansInUIParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionMaxScansInUI/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionParseCommentsRequest generates requests for SpiderActionSetOptionParseComments
func NewSpiderActionSetOptionParseCommentsRequest(server string, params *SpiderActionSetOptionParseCommentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionParseComments/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionParseDsStoreRequest generates requests for SpiderActionSetOptionParseDsStore
func NewSpiderActionSetOptionParseDsStoreRequest(server string, params *SpiderActionSetOptionParseDsStoreParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionParseDsStore/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionParseGitRequest generates requests for SpiderActionSetOptionParseGit
func NewSpiderActionSetOptionParseGitRequest(server string, params *SpiderActionSetOptionParseGitParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionParseGit/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionParseRobotsTxtRequest generates requests for SpiderActionSetOptionParseRobotsTxt
func NewSpiderActionSetOptionParseRobotsTxtRequest(server string, params *SpiderActionSetOptionParseRobotsTxtParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionParseRobotsTxt/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionParseSVNEntriesRequest generates requests for SpiderActionSetOptionParseSVNEntries
func NewSpiderActionSetOptionParseSVNEntriesRequest(server string, params *SpiderActionSetOptionParseSVNEntriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionParseSVNEntries/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionParseSitemapXmlRequest generates requests for SpiderActionSetOptionParseSitemapXml
func NewSpiderActionSetOptionParseSitemapXmlRequest(server string, params *SpiderActionSetOptionParseSitemapXmlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionParseSitemapXml/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionPostFormRequest generates requests for SpiderActionSetOptionPostForm
func NewSpiderActionSetOptionPostFormRequest(server string, params *SpiderActionSetOptionPostFormParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionPostForm/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionProcessFormRequest generates requests for SpiderActionSetOptionProcessForm
func NewSpiderActionSetOptionProcessFormRequest(server string, params *SpiderActionSetOptionProcessFormParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionProcessForm/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionSendRefererHeaderRequest generates requests for SpiderActionSetOptionSendRefererHeader
func NewSpiderActionSetOptionSendRefererHeaderRequest(server string, params *SpiderActionSetOptionSendRefererHeaderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionSendRefererHeader/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionShowAdvancedDialogRequest generates requests for SpiderActionSetOptionShowAdvancedDialog
func NewSpiderActionSetOptionShowAdvancedDialogRequest(server string, params *SpiderActionSetOptionShowAdvancedDialogParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionShowAdvancedDialog/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionSkipURLStringRequest generates requests for SpiderActionSetOptionSkipURLString
func NewSpiderActionSetOptionSkipURLStringRequest(server string, params *SpiderActionSetOptionSkipURLStringParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionSkipURLString/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionThreadCountRequest generates requests for SpiderActionSetOptionThreadCount
func NewSpiderActionSetOptionThreadCountRequest(server string, params *SpiderActionSetOptionThreadCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionThreadCount/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionSetOptionUserAgentRequest generates requests for SpiderActionSetOptionUserAgent
func NewSpiderActionSetOptionUserAgentRequest(server string, params *SpiderActionSetOptionUserAgentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/setOptionUserAgent/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionStopRequest generates requests for SpiderActionStop
func NewSpiderActionStopRequest(server string, params *SpiderActionStopParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/stop/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ScanId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, *params.ScanId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderActionStopAllScansRequest generates requests for SpiderActionStopAllScans
func NewSpiderActionStopAllScansRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/action/stopAllScans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewAddedNodesRequest generates requests for SpiderViewAddedNodes
func NewSpiderViewAddedNodesRequest(server string, params *SpiderViewAddedNodesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/addedNodes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ScanId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, *params.ScanId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewAllUrlsRequest generates requests for SpiderViewAllUrls
func NewSpiderViewAllUrlsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/allUrls/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewDomainsAlwaysInScopeRequest generates requests for SpiderViewDomainsAlwaysInScope
func NewSpiderViewDomainsAlwaysInScopeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/domainsAlwaysInScope/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewExcludedFromScanRequest generates requests for SpiderViewExcludedFromScan
func NewSpiderViewExcludedFromScanRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/excludedFromScan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewFullResultsRequest generates requests for SpiderViewFullResults
func NewSpiderViewFullResultsRequest(server string, params *SpiderViewFullResultsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/fullResults/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, params.ScanId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionAcceptCookiesRequest generates requests for SpiderViewOptionAcceptCookies
func NewSpiderViewOptionAcceptCookiesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionAcceptCookies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionDomainsAlwaysInScopeRequest generates requests for SpiderViewOptionDomainsAlwaysInScope
func NewSpiderViewOptionDomainsAlwaysInScopeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionDomainsAlwaysInScope/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionDomainsAlwaysInScopeEnabledRequest generates requests for SpiderViewOptionDomainsAlwaysInScopeEnabled
func NewSpiderViewOptionDomainsAlwaysInScopeEnabledRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionDomainsAlwaysInScopeEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionHandleODataParametersVisitedRequest generates requests for SpiderViewOptionHandleODataParametersVisited
func NewSpiderViewOptionHandleODataParametersVisitedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionHandleODataParametersVisited/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionHandleParametersRequest generates requests for SpiderViewOptionHandleParameters
func NewSpiderViewOptionHandleParametersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionHandleParameters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionLogoutAvoidanceRequest generates requests for SpiderViewOptionLogoutAvoidance
func NewSpiderViewOptionLogoutAvoidanceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionLogoutAvoidance/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionMaxChildrenRequest generates requests for SpiderViewOptionMaxChildren
func NewSpiderViewOptionMaxChildrenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionMaxChildren/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionMaxDepthRequest generates requests for SpiderViewOptionMaxDepth
func NewSpiderViewOptionMaxDepthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionMaxDepth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionMaxDurationRequest generates requests for SpiderViewOptionMaxDuration
func NewSpiderViewOptionMaxDurationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionMaxDuration/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionMaxParseSizeBytesRequest generates requests for SpiderViewOptionMaxParseSizeBytes
func NewSpiderViewOptionMaxParseSizeBytesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionMaxParseSizeBytes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionMaxScansInUIRequest generates requests for SpiderViewOptionMaxScansInUI
func NewSpiderViewOptionMaxScansInUIRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionMaxScansInUI/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionParseCommentsRequest generates requests for SpiderViewOptionParseComments
func NewSpiderViewOptionParseCommentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionParseComments/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionParseDsStoreRequest generates requests for SpiderViewOptionParseDsStore
func NewSpiderViewOptionParseDsStoreRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionParseDsStore/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionParseGitRequest generates requests for SpiderViewOptionParseGit
func NewSpiderViewOptionParseGitRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionParseGit/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionParseRobotsTxtRequest generates requests for SpiderViewOptionParseRobotsTxt
func NewSpiderViewOptionParseRobotsTxtRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionParseRobotsTxt/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionParseSVNEntriesRequest generates requests for SpiderViewOptionParseSVNEntries
func NewSpiderViewOptionParseSVNEntriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionParseSVNEntries/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionParseSitemapXmlRequest generates requests for SpiderViewOptionParseSitemapXml
func NewSpiderViewOptionParseSitemapXmlRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionParseSitemapXml/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionPostFormRequest generates requests for SpiderViewOptionPostForm
func NewSpiderViewOptionPostFormRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionPostForm/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionProcessFormRequest generates requests for SpiderViewOptionProcessForm
func NewSpiderViewOptionProcessFormRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionProcessForm/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionSendRefererHeaderRequest generates requests for SpiderViewOptionSendRefererHeader
func NewSpiderViewOptionSendRefererHeaderRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionSendRefererHeader/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionShowAdvancedDialogRequest generates requests for SpiderViewOptionShowAdvancedDialog
func NewSpiderViewOptionShowAdvancedDialogRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionShowAdvancedDialog/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionSkipURLStringRequest generates requests for SpiderViewOptionSkipURLString
func NewSpiderViewOptionSkipURLStringRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionSkipURLString/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionThreadCountRequest generates requests for SpiderViewOptionThreadCount
func NewSpiderViewOptionThreadCountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionThreadCount/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewOptionUserAgentRequest generates requests for SpiderViewOptionUserAgent
func NewSpiderViewOptionUserAgentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/optionUserAgent/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewResultsRequest generates requests for SpiderViewResults
func NewSpiderViewResultsRequest(server string, params *SpiderViewResultsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/results/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ScanId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, *params.ScanId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewScansRequest generates requests for SpiderViewScans
func NewSpiderViewScansRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/scans/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSpiderViewStatusRequest generates requests for SpiderViewStatus
func NewSpiderViewStatusRequest(server string, params *SpiderViewStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/spider/view/status/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ScanId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanId", runtime.ParamLocationQuery, *params.ScanId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatsActionClearStatsRequest generates requests for StatsActionClearStats
func NewStatsActionClearStatsRequest(server string, params *StatsActionClearStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/stats/action/clearStats/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.KeyPrefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keyPrefix", runtime.ParamLocationQuery, *params.KeyPrefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatsActionSetOptionInMemoryEnabledRequest generates requests for StatsActionSetOptionInMemoryEnabled
func NewStatsActionSetOptionInMemoryEnabledRequest(server string, params *StatsActionSetOptionInMemoryEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/stats/action/setOptionInMemoryEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Boolean", runtime.ParamLocationQuery, params.Boolean); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatsActionSetOptionStatsdHostRequest generates requests for StatsActionSetOptionStatsdHost
func NewStatsActionSetOptionStatsdHostRequest(server string, params *StatsActionSetOptionStatsdHostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/stats/action/setOptionStatsdHost/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatsActionSetOptionStatsdPortRequest generates requests for StatsActionSetOptionStatsdPort
func NewStatsActionSetOptionStatsdPortRequest(server string, params *StatsActionSetOptionStatsdPortParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/stats/action/setOptionStatsdPort/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Integer", runtime.ParamLocationQuery, params.Integer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatsActionSetOptionStatsdPrefixRequest generates requests for StatsActionSetOptionStatsdPrefix
func NewStatsActionSetOptionStatsdPrefixRequest(server string, params *StatsActionSetOptionStatsdPrefixParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/stats/action/setOptionStatsdPrefix/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "String", runtime.ParamLocationQuery, params.String); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatsViewAllSitesStatsRequest generates requests for StatsViewAllSitesStats
func NewStatsViewAllSitesStatsRequest(server string, params *StatsViewAllSitesStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/stats/view/allSitesStats/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.KeyPrefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keyPrefix", runtime.ParamLocationQuery, *params.KeyPrefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatsViewOptionInMemoryEnabledRequest generates requests for StatsViewOptionInMemoryEnabled
func NewStatsViewOptionInMemoryEnabledRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/stats/view/optionInMemoryEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatsViewOptionStatsdEnabledRequest generates requests for StatsViewOptionStatsdEnabled
func NewStatsViewOptionStatsdEnabledRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/stats/view/optionStatsdEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatsViewOptionStatsdHostRequest generates requests for StatsViewOptionStatsdHost
func NewStatsViewOptionStatsdHostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/stats/view/optionStatsdHost/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatsViewOptionStatsdPortRequest generates requests for StatsViewOptionStatsdPort
func NewStatsViewOptionStatsdPortRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/stats/view/optionStatsdPort/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatsViewOptionStatsdPrefixRequest generates requests for StatsViewOptionStatsdPrefix
func NewStatsViewOptionStatsdPrefixRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/stats/view/optionStatsdPrefix/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatsViewSiteStatsRequest generates requests for StatsViewSiteStats
func NewStatsViewSiteStatsRequest(server string, params *StatsViewSiteStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/stats/view/siteStats/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, params.Site); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.KeyPrefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keyPrefix", runtime.ParamLocationQuery, *params.KeyPrefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatsViewStatsRequest generates requests for StatsViewStats
func NewStatsViewStatsRequest(server string, params *StatsViewStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/stats/view/stats/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.KeyPrefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keyPrefix", runtime.ParamLocationQuery, *params.KeyPrefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersActionAuthenticateAsUserRequest generates requests for UsersActionAuthenticateAsUser
func NewUsersActionAuthenticateAsUserRequest(server string, params *UsersActionAuthenticateAsUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/users/action/authenticateAsUser/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersActionNewUserRequest generates requests for UsersActionNewUser
func NewUsersActionNewUserRequest(server string, params *UsersActionNewUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/users/action/newUser/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersActionPollAsUserRequest generates requests for UsersActionPollAsUser
func NewUsersActionPollAsUserRequest(server string, params *UsersActionPollAsUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/users/action/pollAsUser/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersActionRemoveUserRequest generates requests for UsersActionRemoveUser
func NewUsersActionRemoveUserRequest(server string, params *UsersActionRemoveUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/users/action/removeUser/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersActionSetAuthenticationCredentialsRequest generates requests for UsersActionSetAuthenticationCredentials
func NewUsersActionSetAuthenticationCredentialsRequest(server string, params *UsersActionSetAuthenticationCredentialsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/users/action/setAuthenticationCredentials/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.AuthCredentialsConfigParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authCredentialsConfigParams", runtime.ParamLocationQuery, *params.AuthCredentialsConfigParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersActionSetAuthenticationStateRequest generates requests for UsersActionSetAuthenticationState
func NewUsersActionSetAuthenticationStateRequest(server string, params *UsersActionSetAuthenticationStateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/users/action/setAuthenticationState/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.LastPollResult != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastPollResult", runtime.ParamLocationQuery, *params.LastPollResult); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastPollTimeInMs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastPollTimeInMs", runtime.ParamLocationQuery, *params.LastPollTimeInMs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RequestsSinceLastPoll != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestsSinceLastPoll", runtime.ParamLocationQuery, *params.RequestsSinceLastPoll); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersActionSetCookieRequest generates requests for UsersActionSetCookie
func NewUsersActionSetCookieRequest(server string, params *UsersActionSetCookieParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/users/action/setCookie/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain", runtime.ParamLocationQuery, params.Domain); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Secure != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secure", runtime.ParamLocationQuery, *params.Secure); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersActionSetUserEnabledRequest generates requests for UsersActionSetUserEnabled
func NewUsersActionSetUserEnabledRequest(server string, params *UsersActionSetUserEnabledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/users/action/setUserEnabled/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersActionSetUserNameRequest generates requests for UsersActionSetUserName
func NewUsersActionSetUserNameRequest(server string, params *UsersActionSetUserNameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/users/action/setUserName/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersViewGetAuthenticationCredentialsRequest generates requests for UsersViewGetAuthenticationCredentials
func NewUsersViewGetAuthenticationCredentialsRequest(server string, params *UsersViewGetAuthenticationCredentialsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/users/view/getAuthenticationCredentials/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersViewGetAuthenticationCredentialsConfigParamsRequest generates requests for UsersViewGetAuthenticationCredentialsConfigParams
func NewUsersViewGetAuthenticationCredentialsConfigParamsRequest(server string, params *UsersViewGetAuthenticationCredentialsConfigParamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/users/view/getAuthenticationCredentialsConfigParams/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersViewGetAuthenticationSessionRequest generates requests for UsersViewGetAuthenticationSession
func NewUsersViewGetAuthenticationSessionRequest(server string, params *UsersViewGetAuthenticationSessionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/users/view/getAuthenticationSession/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersViewGetAuthenticationStateRequest generates requests for UsersViewGetAuthenticationState
func NewUsersViewGetAuthenticationStateRequest(server string, params *UsersViewGetAuthenticationStateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/users/view/getAuthenticationState/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersViewGetUserByIdRequest generates requests for UsersViewGetUserById
func NewUsersViewGetUserByIdRequest(server string, params *UsersViewGetUserByIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/users/view/getUserById/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, params.ContextId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersViewUsersListRequest generates requests for UsersViewUsersList
func NewUsersViewUsersListRequest(server string, params *UsersViewUsersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/users/view/usersList/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ContextId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextId", runtime.ParamLocationQuery, *params.ContextId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWappalyzerViewListAllRequest generates requests for WappalyzerViewListAll
func NewWappalyzerViewListAllRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/wappalyzer/view/listAll/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWappalyzerViewListSiteRequest generates requests for WappalyzerViewListSite
func NewWappalyzerViewListSiteRequest(server string, params *WappalyzerViewListSiteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/wappalyzer/view/listSite/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, params.Site); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWappalyzerViewListSitesRequest generates requests for WappalyzerViewListSites
func NewWappalyzerViewListSitesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/wappalyzer/view/listSites/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebsocketActionSendTextMessageRequest generates requests for WebsocketActionSendTextMessage
func NewWebsocketActionSendTextMessageRequest(server string, params *WebsocketActionSendTextMessageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/websocket/action/sendTextMessage/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channelId", runtime.ParamLocationQuery, params.ChannelId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outgoing", runtime.ParamLocationQuery, params.Outgoing); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "message", runtime.ParamLocationQuery, params.Message); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebsocketActionSetBreakTextMessageRequest generates requests for WebsocketActionSetBreakTextMessage
func NewWebsocketActionSetBreakTextMessageRequest(server string, params *WebsocketActionSetBreakTextMessageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/websocket/action/setBreakTextMessage/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "message", runtime.ParamLocationQuery, params.Message); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outgoing", runtime.ParamLocationQuery, params.Outgoing); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebsocketViewBreakTextMessageRequest generates requests for WebsocketViewBreakTextMessage
func NewWebsocketViewBreakTextMessageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/websocket/view/breakTextMessage/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebsocketViewChannelsRequest generates requests for WebsocketViewChannels
func NewWebsocketViewChannelsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/websocket/view/channels/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebsocketViewMessageRequest generates requests for WebsocketViewMessage
func NewWebsocketViewMessageRequest(server string, params *WebsocketViewMessageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/websocket/view/message/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channelId", runtime.ParamLocationQuery, params.ChannelId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "messageId", runtime.ParamLocationQuery, params.MessageId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebsocketViewMessagesRequest generates requests for WebsocketViewMessages
func NewWebsocketViewMessagesRequest(server string, params *WebsocketViewMessagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/JSON/websocket/view/messages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChannelId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channelId", runtime.ParamLocationQuery, *params.ChannelId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PayloadPreviewLength != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payloadPreviewLength", runtime.ParamLocationQuery, *params.PayloadPreviewLength); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcsrfOtherGenFormRequest generates requests for AcsrfOtherGenForm
func NewAcsrfOtherGenFormRequest(server string, params *AcsrfOtherGenFormParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/acsrf/other/genForm/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hrefId", runtime.ParamLocationQuery, params.HrefId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ActionUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actionUrl", runtime.ParamLocationQuery, *params.ActionUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreOtherFileDownloadRequest generates requests for CoreOtherFileDownload
func NewCoreOtherFileDownloadRequest(server string, params *CoreOtherFileDownloadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/core/other/fileDownload/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fileName", runtime.ParamLocationQuery, params.FileName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreOtherFileUploadRequest generates requests for CoreOtherFileUpload
func NewCoreOtherFileUploadRequest(server string, params *CoreOtherFileUploadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/core/other/fileUpload/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fileName", runtime.ParamLocationQuery, params.FileName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fileContents", runtime.ParamLocationQuery, params.FileContents); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreOtherHtmlreportRequest generates requests for CoreOtherHtmlreport
func NewCoreOtherHtmlreportRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/core/other/htmlreport/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreOtherJsonreportRequest generates requests for CoreOtherJsonreport
func NewCoreOtherJsonreportRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/core/other/jsonreport/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreOtherMdreportRequest generates requests for CoreOtherMdreport
func NewCoreOtherMdreportRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/core/other/mdreport/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreOtherMessageHarRequest generates requests for CoreOtherMessageHar
func NewCoreOtherMessageHarRequest(server string, params *CoreOtherMessageHarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/core/other/messageHar/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreOtherMessagesHarRequest generates requests for CoreOtherMessagesHar
func NewCoreOtherMessagesHarRequest(server string, params *CoreOtherMessagesHarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/core/other/messagesHar/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreOtherMessagesHarByIdRequest generates requests for CoreOtherMessagesHarById
func NewCoreOtherMessagesHarByIdRequest(server string, params *CoreOtherMessagesHarByIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/core/other/messagesHarById/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreOtherProxyPacRequest generates requests for CoreOtherProxyPac
func NewCoreOtherProxyPacRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/core/other/proxy.pac/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreOtherRootcertRequest generates requests for CoreOtherRootcert
func NewCoreOtherRootcertRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/core/other/rootcert/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreOtherSendHarRequestRequest generates requests for CoreOtherSendHarRequest
func NewCoreOtherSendHarRequestRequest(server string, params *CoreOtherSendHarRequestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/core/other/sendHarRequest/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "request", runtime.ParamLocationQuery, params.Request); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FollowRedirects != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "followRedirects", runtime.ParamLocationQuery, *params.FollowRedirects); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreOtherSetproxyRequest generates requests for CoreOtherSetproxy
func NewCoreOtherSetproxyRequest(server string, params *CoreOtherSetproxyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/core/other/setproxy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "proxy", runtime.ParamLocationQuery, params.Proxy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCoreOtherXmlreportRequest generates requests for CoreOtherXmlreport
func NewCoreOtherXmlreportRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/core/other/xmlreport/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevOtherOpenapiRequest generates requests for DevOtherOpenapi
func NewDevOtherOpenapiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/dev/other/openapi/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEximOtherExportHarRequest generates requests for EximOtherExportHar
func NewEximOtherExportHarRequest(server string, params *EximOtherExportHarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/exim/other/exportHar/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEximOtherExportHarByIdRequest generates requests for EximOtherExportHarById
func NewEximOtherExportHarByIdRequest(server string, params *EximOtherExportHarByIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/exim/other/exportHarById/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEximOtherSendHarRequestRequest generates requests for EximOtherSendHarRequest
func NewEximOtherSendHarRequestRequest(server string, params *EximOtherSendHarRequestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/exim/other/sendHarRequest/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "request", runtime.ParamLocationQuery, params.Request); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FollowRedirects != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "followRedirects", runtime.ParamLocationQuery, *params.FollowRedirects); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHudOtherChangesInHtmlRequest generates requests for HudOtherChangesInHtml
func NewHudOtherChangesInHtmlRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/hud/other/changesInHtml/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKeyboardOtherCheatsheetActionOrderRequest generates requests for KeyboardOtherCheatsheetActionOrder
func NewKeyboardOtherCheatsheetActionOrderRequest(server string, params *KeyboardOtherCheatsheetActionOrderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/keyboard/other/cheatsheetActionOrder/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncUnset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incUnset", runtime.ParamLocationQuery, *params.IncUnset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKeyboardOtherCheatsheetKeyOrderRequest generates requests for KeyboardOtherCheatsheetKeyOrder
func NewKeyboardOtherCheatsheetKeyOrderRequest(server string, params *KeyboardOtherCheatsheetKeyOrderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/keyboard/other/cheatsheetKeyOrder/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncUnset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incUnset", runtime.ParamLocationQuery, *params.IncUnset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkOtherProxyPacRequest generates requests for NetworkOtherProxyPac
func NewNetworkOtherProxyPacRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/network/other/proxy.pac/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkOtherRootCaCertRequest generates requests for NetworkOtherRootCaCert
func NewNetworkOtherRootCaCertRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/network/other/rootCaCert/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkOtherSetProxyRequest generates requests for NetworkOtherSetProxy
func NewNetworkOtherSetProxyRequest(server string, params *NetworkOtherSetProxyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/network/other/setProxy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "proxy", runtime.ParamLocationQuery, params.Proxy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPnhOtherFxPnhXpiRequest generates requests for PnhOtherFxPnhXpi
func NewPnhOtherFxPnhXpiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/pnh/other/fx_pnh.xpi/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPnhOtherManifestRequest generates requests for PnhOtherManifest
func NewPnhOtherManifestRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/pnh/other/manifest/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPnhOtherPnhRequest generates requests for PnhOtherPnh
func NewPnhOtherPnhRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/pnh/other/pnh/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPnhOtherServiceRequest generates requests for PnhOtherService
func NewPnhOtherServiceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/pnh/other/service/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuickstartlaunchOtherStartPageRequest generates requests for QuickstartlaunchOtherStartPage
func NewQuickstartlaunchOtherStartPageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/quickstartlaunch/other/startPage/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchOtherHarByHeaderRegexRequest generates requests for SearchOtherHarByHeaderRegex
func NewSearchOtherHarByHeaderRegexRequest(server string, params *SearchOtherHarByHeaderRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/search/other/harByHeaderRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchOtherHarByNoteRegexRequest generates requests for SearchOtherHarByNoteRegex
func NewSearchOtherHarByNoteRegexRequest(server string, params *SearchOtherHarByNoteRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/search/other/harByNoteRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchOtherHarByRequestRegexRequest generates requests for SearchOtherHarByRequestRegex
func NewSearchOtherHarByRequestRegexRequest(server string, params *SearchOtherHarByRequestRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/search/other/harByRequestRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchOtherHarByResponseRegexRequest generates requests for SearchOtherHarByResponseRegex
func NewSearchOtherHarByResponseRegexRequest(server string, params *SearchOtherHarByResponseRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/search/other/harByResponseRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchOtherHarByTagRegexRequest generates requests for SearchOtherHarByTagRegex
func NewSearchOtherHarByTagRegexRequest(server string, params *SearchOtherHarByTagRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/search/other/harByTagRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchOtherHarByUrlRegexRequest generates requests for SearchOtherHarByUrlRegex
func NewSearchOtherHarByUrlRegexRequest(server string, params *SearchOtherHarByUrlRegexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OTHER/search/other/harByUrlRegex/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regex", runtime.ParamLocationQuery, params.Regex); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Baseurl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "baseurl", runtime.ParamLocationQuery, *params.Baseurl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AccessControlActionScanWithResponse request
	AccessControlActionScanWithResponse(ctx context.Context, params *AccessControlActionScanParams, reqEditors ...RequestEditorFn) (*AccessControlActionScanResponse, error)

	// AccessControlActionWriteHTMLreportWithResponse request
	AccessControlActionWriteHTMLreportWithResponse(ctx context.Context, params *AccessControlActionWriteHTMLreportParams, reqEditors ...RequestEditorFn) (*AccessControlActionWriteHTMLreportResponse, error)

	// AccessControlViewGetScanProgressWithResponse request
	AccessControlViewGetScanProgressWithResponse(ctx context.Context, params *AccessControlViewGetScanProgressParams, reqEditors ...RequestEditorFn) (*AccessControlViewGetScanProgressResponse, error)

	// AccessControlViewGetScanStatusWithResponse request
	AccessControlViewGetScanStatusWithResponse(ctx context.Context, params *AccessControlViewGetScanStatusParams, reqEditors ...RequestEditorFn) (*AccessControlViewGetScanStatusResponse, error)

	// AcsrfActionAddOptionTokenWithResponse request
	AcsrfActionAddOptionTokenWithResponse(ctx context.Context, params *AcsrfActionAddOptionTokenParams, reqEditors ...RequestEditorFn) (*AcsrfActionAddOptionTokenResponse, error)

	// AcsrfActionRemoveOptionTokenWithResponse request
	AcsrfActionRemoveOptionTokenWithResponse(ctx context.Context, params *AcsrfActionRemoveOptionTokenParams, reqEditors ...RequestEditorFn) (*AcsrfActionRemoveOptionTokenResponse, error)

	// AcsrfActionSetOptionPartialMatchingEnabledWithResponse request
	AcsrfActionSetOptionPartialMatchingEnabledWithResponse(ctx context.Context, params *AcsrfActionSetOptionPartialMatchingEnabledParams, reqEditors ...RequestEditorFn) (*AcsrfActionSetOptionPartialMatchingEnabledResponse, error)

	// AcsrfViewOptionPartialMatchingEnabledWithResponse request
	AcsrfViewOptionPartialMatchingEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AcsrfViewOptionPartialMatchingEnabledResponse, error)

	// AcsrfViewOptionTokensNamesWithResponse request
	AcsrfViewOptionTokensNamesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AcsrfViewOptionTokensNamesResponse, error)

	// AjaxSpiderActionAddAllowedResourceWithResponse request
	AjaxSpiderActionAddAllowedResourceWithResponse(ctx context.Context, params *AjaxSpiderActionAddAllowedResourceParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionAddAllowedResourceResponse, error)

	// AjaxSpiderActionAddExcludedElementWithResponse request
	AjaxSpiderActionAddExcludedElementWithResponse(ctx context.Context, params *AjaxSpiderActionAddExcludedElementParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionAddExcludedElementResponse, error)

	// AjaxSpiderActionModifyExcludedElementWithResponse request
	AjaxSpiderActionModifyExcludedElementWithResponse(ctx context.Context, params *AjaxSpiderActionModifyExcludedElementParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionModifyExcludedElementResponse, error)

	// AjaxSpiderActionRemoveAllowedResourceWithResponse request
	AjaxSpiderActionRemoveAllowedResourceWithResponse(ctx context.Context, params *AjaxSpiderActionRemoveAllowedResourceParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionRemoveAllowedResourceResponse, error)

	// AjaxSpiderActionRemoveExcludedElementWithResponse request
	AjaxSpiderActionRemoveExcludedElementWithResponse(ctx context.Context, params *AjaxSpiderActionRemoveExcludedElementParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionRemoveExcludedElementResponse, error)

	// AjaxSpiderActionScanWithResponse request
	AjaxSpiderActionScanWithResponse(ctx context.Context, params *AjaxSpiderActionScanParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionScanResponse, error)

	// AjaxSpiderActionScanAsUserWithResponse request
	AjaxSpiderActionScanAsUserWithResponse(ctx context.Context, params *AjaxSpiderActionScanAsUserParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionScanAsUserResponse, error)

	// AjaxSpiderActionSetEnabledAllowedResourceWithResponse request
	AjaxSpiderActionSetEnabledAllowedResourceWithResponse(ctx context.Context, params *AjaxSpiderActionSetEnabledAllowedResourceParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetEnabledAllowedResourceResponse, error)

	// AjaxSpiderActionSetOptionBrowserIdWithResponse request
	AjaxSpiderActionSetOptionBrowserIdWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionBrowserIdParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionBrowserIdResponse, error)

	// AjaxSpiderActionSetOptionClickDefaultElemsWithResponse request
	AjaxSpiderActionSetOptionClickDefaultElemsWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionClickDefaultElemsParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionClickDefaultElemsResponse, error)

	// AjaxSpiderActionSetOptionClickElemsOnceWithResponse request
	AjaxSpiderActionSetOptionClickElemsOnceWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionClickElemsOnceParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionClickElemsOnceResponse, error)

	// AjaxSpiderActionSetOptionEnableExtensionsWithResponse request
	AjaxSpiderActionSetOptionEnableExtensionsWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionEnableExtensionsParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionEnableExtensionsResponse, error)

	// AjaxSpiderActionSetOptionEventWaitWithResponse request
	AjaxSpiderActionSetOptionEventWaitWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionEventWaitParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionEventWaitResponse, error)

	// AjaxSpiderActionSetOptionLogoutAvoidanceWithResponse request
	AjaxSpiderActionSetOptionLogoutAvoidanceWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionLogoutAvoidanceParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionLogoutAvoidanceResponse, error)

	// AjaxSpiderActionSetOptionMaxCrawlDepthWithResponse request
	AjaxSpiderActionSetOptionMaxCrawlDepthWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionMaxCrawlDepthParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionMaxCrawlDepthResponse, error)

	// AjaxSpiderActionSetOptionMaxCrawlStatesWithResponse request
	AjaxSpiderActionSetOptionMaxCrawlStatesWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionMaxCrawlStatesParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionMaxCrawlStatesResponse, error)

	// AjaxSpiderActionSetOptionMaxDurationWithResponse request
	AjaxSpiderActionSetOptionMaxDurationWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionMaxDurationParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionMaxDurationResponse, error)

	// AjaxSpiderActionSetOptionNumberOfBrowsersWithResponse request
	AjaxSpiderActionSetOptionNumberOfBrowsersWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionNumberOfBrowsersParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionNumberOfBrowsersResponse, error)

	// AjaxSpiderActionSetOptionRandomInputsWithResponse request
	AjaxSpiderActionSetOptionRandomInputsWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionRandomInputsParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionRandomInputsResponse, error)

	// AjaxSpiderActionSetOptionReloadWaitWithResponse request
	AjaxSpiderActionSetOptionReloadWaitWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionReloadWaitParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionReloadWaitResponse, error)

	// AjaxSpiderActionSetOptionScopeCheckWithResponse request
	AjaxSpiderActionSetOptionScopeCheckWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionScopeCheckParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionScopeCheckResponse, error)

	// AjaxSpiderActionStopWithResponse request
	AjaxSpiderActionStopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderActionStopResponse, error)

	// AjaxSpiderViewAllowedResourcesWithResponse request
	AjaxSpiderViewAllowedResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewAllowedResourcesResponse, error)

	// AjaxSpiderViewExcludedElementsWithResponse request
	AjaxSpiderViewExcludedElementsWithResponse(ctx context.Context, params *AjaxSpiderViewExcludedElementsParams, reqEditors ...RequestEditorFn) (*AjaxSpiderViewExcludedElementsResponse, error)

	// AjaxSpiderViewFullResultsWithResponse request
	AjaxSpiderViewFullResultsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewFullResultsResponse, error)

	// AjaxSpiderViewNumberOfResultsWithResponse request
	AjaxSpiderViewNumberOfResultsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewNumberOfResultsResponse, error)

	// AjaxSpiderViewOptionBrowserIdWithResponse request
	AjaxSpiderViewOptionBrowserIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionBrowserIdResponse, error)

	// AjaxSpiderViewOptionClickDefaultElemsWithResponse request
	AjaxSpiderViewOptionClickDefaultElemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionClickDefaultElemsResponse, error)

	// AjaxSpiderViewOptionClickElemsOnceWithResponse request
	AjaxSpiderViewOptionClickElemsOnceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionClickElemsOnceResponse, error)

	// AjaxSpiderViewOptionEnableExtensionsWithResponse request
	AjaxSpiderViewOptionEnableExtensionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionEnableExtensionsResponse, error)

	// AjaxSpiderViewOptionEventWaitWithResponse request
	AjaxSpiderViewOptionEventWaitWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionEventWaitResponse, error)

	// AjaxSpiderViewOptionLogoutAvoidanceWithResponse request
	AjaxSpiderViewOptionLogoutAvoidanceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionLogoutAvoidanceResponse, error)

	// AjaxSpiderViewOptionMaxCrawlDepthWithResponse request
	AjaxSpiderViewOptionMaxCrawlDepthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionMaxCrawlDepthResponse, error)

	// AjaxSpiderViewOptionMaxCrawlStatesWithResponse request
	AjaxSpiderViewOptionMaxCrawlStatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionMaxCrawlStatesResponse, error)

	// AjaxSpiderViewOptionMaxDurationWithResponse request
	AjaxSpiderViewOptionMaxDurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionMaxDurationResponse, error)

	// AjaxSpiderViewOptionNumberOfBrowsersWithResponse request
	AjaxSpiderViewOptionNumberOfBrowsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionNumberOfBrowsersResponse, error)

	// AjaxSpiderViewOptionRandomInputsWithResponse request
	AjaxSpiderViewOptionRandomInputsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionRandomInputsResponse, error)

	// AjaxSpiderViewOptionReloadWaitWithResponse request
	AjaxSpiderViewOptionReloadWaitWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionReloadWaitResponse, error)

	// AjaxSpiderViewOptionScopeCheckWithResponse request
	AjaxSpiderViewOptionScopeCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionScopeCheckResponse, error)

	// AjaxSpiderViewResultsWithResponse request
	AjaxSpiderViewResultsWithResponse(ctx context.Context, params *AjaxSpiderViewResultsParams, reqEditors ...RequestEditorFn) (*AjaxSpiderViewResultsResponse, error)

	// AjaxSpiderViewStatusWithResponse request
	AjaxSpiderViewStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewStatusResponse, error)

	// AlertActionAddAlertWithResponse request
	AlertActionAddAlertWithResponse(ctx context.Context, params *AlertActionAddAlertParams, reqEditors ...RequestEditorFn) (*AlertActionAddAlertResponse, error)

	// AlertActionDeleteAlertWithResponse request
	AlertActionDeleteAlertWithResponse(ctx context.Context, params *AlertActionDeleteAlertParams, reqEditors ...RequestEditorFn) (*AlertActionDeleteAlertResponse, error)

	// AlertActionDeleteAlertsWithResponse request
	AlertActionDeleteAlertsWithResponse(ctx context.Context, params *AlertActionDeleteAlertsParams, reqEditors ...RequestEditorFn) (*AlertActionDeleteAlertsResponse, error)

	// AlertActionDeleteAllAlertsWithResponse request
	AlertActionDeleteAllAlertsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertActionDeleteAllAlertsResponse, error)

	// AlertActionUpdateAlertWithResponse request
	AlertActionUpdateAlertWithResponse(ctx context.Context, params *AlertActionUpdateAlertParams, reqEditors ...RequestEditorFn) (*AlertActionUpdateAlertResponse, error)

	// AlertActionUpdateAlertsConfidenceWithResponse request
	AlertActionUpdateAlertsConfidenceWithResponse(ctx context.Context, params *AlertActionUpdateAlertsConfidenceParams, reqEditors ...RequestEditorFn) (*AlertActionUpdateAlertsConfidenceResponse, error)

	// AlertActionUpdateAlertsRiskWithResponse request
	AlertActionUpdateAlertsRiskWithResponse(ctx context.Context, params *AlertActionUpdateAlertsRiskParams, reqEditors ...RequestEditorFn) (*AlertActionUpdateAlertsRiskResponse, error)

	// AlertViewAlertWithResponse request
	AlertViewAlertWithResponse(ctx context.Context, params *AlertViewAlertParams, reqEditors ...RequestEditorFn) (*AlertViewAlertResponse, error)

	// AlertViewAlertCountsByRiskWithResponse request
	AlertViewAlertCountsByRiskWithResponse(ctx context.Context, params *AlertViewAlertCountsByRiskParams, reqEditors ...RequestEditorFn) (*AlertViewAlertCountsByRiskResponse, error)

	// AlertViewAlertsWithResponse request
	AlertViewAlertsWithResponse(ctx context.Context, params *AlertViewAlertsParams, reqEditors ...RequestEditorFn) (*AlertViewAlertsResponse, error)

	// AlertViewAlertsByRiskWithResponse request
	AlertViewAlertsByRiskWithResponse(ctx context.Context, params *AlertViewAlertsByRiskParams, reqEditors ...RequestEditorFn) (*AlertViewAlertsByRiskResponse, error)

	// AlertViewAlertsSummaryWithResponse request
	AlertViewAlertsSummaryWithResponse(ctx context.Context, params *AlertViewAlertsSummaryParams, reqEditors ...RequestEditorFn) (*AlertViewAlertsSummaryResponse, error)

	// AlertViewNumberOfAlertsWithResponse request
	AlertViewNumberOfAlertsWithResponse(ctx context.Context, params *AlertViewNumberOfAlertsParams, reqEditors ...RequestEditorFn) (*AlertViewNumberOfAlertsResponse, error)

	// AlertFilterActionAddAlertFilterWithResponse request
	AlertFilterActionAddAlertFilterWithResponse(ctx context.Context, params *AlertFilterActionAddAlertFilterParams, reqEditors ...RequestEditorFn) (*AlertFilterActionAddAlertFilterResponse, error)

	// AlertFilterActionAddGlobalAlertFilterWithResponse request
	AlertFilterActionAddGlobalAlertFilterWithResponse(ctx context.Context, params *AlertFilterActionAddGlobalAlertFilterParams, reqEditors ...RequestEditorFn) (*AlertFilterActionAddGlobalAlertFilterResponse, error)

	// AlertFilterActionApplyAllWithResponse request
	AlertFilterActionApplyAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertFilterActionApplyAllResponse, error)

	// AlertFilterActionApplyContextWithResponse request
	AlertFilterActionApplyContextWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertFilterActionApplyContextResponse, error)

	// AlertFilterActionApplyGlobalWithResponse request
	AlertFilterActionApplyGlobalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertFilterActionApplyGlobalResponse, error)

	// AlertFilterActionRemoveAlertFilterWithResponse request
	AlertFilterActionRemoveAlertFilterWithResponse(ctx context.Context, params *AlertFilterActionRemoveAlertFilterParams, reqEditors ...RequestEditorFn) (*AlertFilterActionRemoveAlertFilterResponse, error)

	// AlertFilterActionRemoveGlobalAlertFilterWithResponse request
	AlertFilterActionRemoveGlobalAlertFilterWithResponse(ctx context.Context, params *AlertFilterActionRemoveGlobalAlertFilterParams, reqEditors ...RequestEditorFn) (*AlertFilterActionRemoveGlobalAlertFilterResponse, error)

	// AlertFilterActionTestAllWithResponse request
	AlertFilterActionTestAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertFilterActionTestAllResponse, error)

	// AlertFilterActionTestContextWithResponse request
	AlertFilterActionTestContextWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertFilterActionTestContextResponse, error)

	// AlertFilterActionTestGlobalWithResponse request
	AlertFilterActionTestGlobalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertFilterActionTestGlobalResponse, error)

	// AlertFilterViewAlertFilterListWithResponse request
	AlertFilterViewAlertFilterListWithResponse(ctx context.Context, params *AlertFilterViewAlertFilterListParams, reqEditors ...RequestEditorFn) (*AlertFilterViewAlertFilterListResponse, error)

	// AlertFilterViewGlobalAlertFilterListWithResponse request
	AlertFilterViewGlobalAlertFilterListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertFilterViewGlobalAlertFilterListResponse, error)

	// AscanActionAddExcludedParamWithResponse request
	AscanActionAddExcludedParamWithResponse(ctx context.Context, params *AscanActionAddExcludedParamParams, reqEditors ...RequestEditorFn) (*AscanActionAddExcludedParamResponse, error)

	// AscanActionAddScanPolicyWithResponse request
	AscanActionAddScanPolicyWithResponse(ctx context.Context, params *AscanActionAddScanPolicyParams, reqEditors ...RequestEditorFn) (*AscanActionAddScanPolicyResponse, error)

	// AscanActionClearExcludedFromScanWithResponse request
	AscanActionClearExcludedFromScanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanActionClearExcludedFromScanResponse, error)

	// AscanActionDisableAllScannersWithResponse request
	AscanActionDisableAllScannersWithResponse(ctx context.Context, params *AscanActionDisableAllScannersParams, reqEditors ...RequestEditorFn) (*AscanActionDisableAllScannersResponse, error)

	// AscanActionDisableScannersWithResponse request
	AscanActionDisableScannersWithResponse(ctx context.Context, params *AscanActionDisableScannersParams, reqEditors ...RequestEditorFn) (*AscanActionDisableScannersResponse, error)

	// AscanActionEnableAllScannersWithResponse request
	AscanActionEnableAllScannersWithResponse(ctx context.Context, params *AscanActionEnableAllScannersParams, reqEditors ...RequestEditorFn) (*AscanActionEnableAllScannersResponse, error)

	// AscanActionEnableScannersWithResponse request
	AscanActionEnableScannersWithResponse(ctx context.Context, params *AscanActionEnableScannersParams, reqEditors ...RequestEditorFn) (*AscanActionEnableScannersResponse, error)

	// AscanActionExcludeFromScanWithResponse request
	AscanActionExcludeFromScanWithResponse(ctx context.Context, params *AscanActionExcludeFromScanParams, reqEditors ...RequestEditorFn) (*AscanActionExcludeFromScanResponse, error)

	// AscanActionImportScanPolicyWithResponse request
	AscanActionImportScanPolicyWithResponse(ctx context.Context, params *AscanActionImportScanPolicyParams, reqEditors ...RequestEditorFn) (*AscanActionImportScanPolicyResponse, error)

	// AscanActionModifyExcludedParamWithResponse request
	AscanActionModifyExcludedParamWithResponse(ctx context.Context, params *AscanActionModifyExcludedParamParams, reqEditors ...RequestEditorFn) (*AscanActionModifyExcludedParamResponse, error)

	// AscanActionPauseWithResponse request
	AscanActionPauseWithResponse(ctx context.Context, params *AscanActionPauseParams, reqEditors ...RequestEditorFn) (*AscanActionPauseResponse, error)

	// AscanActionPauseAllScansWithResponse request
	AscanActionPauseAllScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanActionPauseAllScansResponse, error)

	// AscanActionRemoveAllScansWithResponse request
	AscanActionRemoveAllScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanActionRemoveAllScansResponse, error)

	// AscanActionRemoveExcludedParamWithResponse request
	AscanActionRemoveExcludedParamWithResponse(ctx context.Context, params *AscanActionRemoveExcludedParamParams, reqEditors ...RequestEditorFn) (*AscanActionRemoveExcludedParamResponse, error)

	// AscanActionRemoveScanWithResponse request
	AscanActionRemoveScanWithResponse(ctx context.Context, params *AscanActionRemoveScanParams, reqEditors ...RequestEditorFn) (*AscanActionRemoveScanResponse, error)

	// AscanActionRemoveScanPolicyWithResponse request
	AscanActionRemoveScanPolicyWithResponse(ctx context.Context, params *AscanActionRemoveScanPolicyParams, reqEditors ...RequestEditorFn) (*AscanActionRemoveScanPolicyResponse, error)

	// AscanActionResumeWithResponse request
	AscanActionResumeWithResponse(ctx context.Context, params *AscanActionResumeParams, reqEditors ...RequestEditorFn) (*AscanActionResumeResponse, error)

	// AscanActionResumeAllScansWithResponse request
	AscanActionResumeAllScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanActionResumeAllScansResponse, error)

	// AscanActionScanWithResponse request
	AscanActionScanWithResponse(ctx context.Context, params *AscanActionScanParams, reqEditors ...RequestEditorFn) (*AscanActionScanResponse, error)

	// AscanActionScanAsUserWithResponse request
	AscanActionScanAsUserWithResponse(ctx context.Context, params *AscanActionScanAsUserParams, reqEditors ...RequestEditorFn) (*AscanActionScanAsUserResponse, error)

	// AscanActionSetEnabledPoliciesWithResponse request
	AscanActionSetEnabledPoliciesWithResponse(ctx context.Context, params *AscanActionSetEnabledPoliciesParams, reqEditors ...RequestEditorFn) (*AscanActionSetEnabledPoliciesResponse, error)

	// AscanActionSetOptionAddQueryParamWithResponse request
	AscanActionSetOptionAddQueryParamWithResponse(ctx context.Context, params *AscanActionSetOptionAddQueryParamParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionAddQueryParamResponse, error)

	// AscanActionSetOptionAllowAttackOnStartWithResponse request
	AscanActionSetOptionAllowAttackOnStartWithResponse(ctx context.Context, params *AscanActionSetOptionAllowAttackOnStartParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionAllowAttackOnStartResponse, error)

	// AscanActionSetOptionAttackPolicyWithResponse request
	AscanActionSetOptionAttackPolicyWithResponse(ctx context.Context, params *AscanActionSetOptionAttackPolicyParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionAttackPolicyResponse, error)

	// AscanActionSetOptionDefaultPolicyWithResponse request
	AscanActionSetOptionDefaultPolicyWithResponse(ctx context.Context, params *AscanActionSetOptionDefaultPolicyParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionDefaultPolicyResponse, error)

	// AscanActionSetOptionDelayInMsWithResponse request
	AscanActionSetOptionDelayInMsWithResponse(ctx context.Context, params *AscanActionSetOptionDelayInMsParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionDelayInMsResponse, error)

	// AscanActionSetOptionEncodeCookieValuesWithResponse request
	AscanActionSetOptionEncodeCookieValuesWithResponse(ctx context.Context, params *AscanActionSetOptionEncodeCookieValuesParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionEncodeCookieValuesResponse, error)

	// AscanActionSetOptionHandleAntiCSRFTokensWithResponse request
	AscanActionSetOptionHandleAntiCSRFTokensWithResponse(ctx context.Context, params *AscanActionSetOptionHandleAntiCSRFTokensParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionHandleAntiCSRFTokensResponse, error)

	// AscanActionSetOptionHostPerScanWithResponse request
	AscanActionSetOptionHostPerScanWithResponse(ctx context.Context, params *AscanActionSetOptionHostPerScanParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionHostPerScanResponse, error)

	// AscanActionSetOptionInjectPluginIdInHeaderWithResponse request
	AscanActionSetOptionInjectPluginIdInHeaderWithResponse(ctx context.Context, params *AscanActionSetOptionInjectPluginIdInHeaderParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionInjectPluginIdInHeaderResponse, error)

	// AscanActionSetOptionMaxAlertsPerRuleWithResponse request
	AscanActionSetOptionMaxAlertsPerRuleWithResponse(ctx context.Context, params *AscanActionSetOptionMaxAlertsPerRuleParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionMaxAlertsPerRuleResponse, error)

	// AscanActionSetOptionMaxChartTimeInMinsWithResponse request
	AscanActionSetOptionMaxChartTimeInMinsWithResponse(ctx context.Context, params *AscanActionSetOptionMaxChartTimeInMinsParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionMaxChartTimeInMinsResponse, error)

	// AscanActionSetOptionMaxResultsToListWithResponse request
	AscanActionSetOptionMaxResultsToListWithResponse(ctx context.Context, params *AscanActionSetOptionMaxResultsToListParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionMaxResultsToListResponse, error)

	// AscanActionSetOptionMaxRuleDurationInMinsWithResponse request
	AscanActionSetOptionMaxRuleDurationInMinsWithResponse(ctx context.Context, params *AscanActionSetOptionMaxRuleDurationInMinsParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionMaxRuleDurationInMinsResponse, error)

	// AscanActionSetOptionMaxScanDurationInMinsWithResponse request
	AscanActionSetOptionMaxScanDurationInMinsWithResponse(ctx context.Context, params *AscanActionSetOptionMaxScanDurationInMinsParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionMaxScanDurationInMinsResponse, error)

	// AscanActionSetOptionMaxScansInUIWithResponse request
	AscanActionSetOptionMaxScansInUIWithResponse(ctx context.Context, params *AscanActionSetOptionMaxScansInUIParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionMaxScansInUIResponse, error)

	// AscanActionSetOptionPromptInAttackModeWithResponse request
	AscanActionSetOptionPromptInAttackModeWithResponse(ctx context.Context, params *AscanActionSetOptionPromptInAttackModeParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionPromptInAttackModeResponse, error)

	// AscanActionSetOptionPromptToClearFinishedScansWithResponse request
	AscanActionSetOptionPromptToClearFinishedScansWithResponse(ctx context.Context, params *AscanActionSetOptionPromptToClearFinishedScansParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionPromptToClearFinishedScansResponse, error)

	// AscanActionSetOptionRescanInAttackModeWithResponse request
	AscanActionSetOptionRescanInAttackModeWithResponse(ctx context.Context, params *AscanActionSetOptionRescanInAttackModeParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionRescanInAttackModeResponse, error)

	// AscanActionSetOptionScanHeadersAllRequestsWithResponse request
	AscanActionSetOptionScanHeadersAllRequestsWithResponse(ctx context.Context, params *AscanActionSetOptionScanHeadersAllRequestsParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionScanHeadersAllRequestsResponse, error)

	// AscanActionSetOptionScanNullJsonValuesWithResponse request
	AscanActionSetOptionScanNullJsonValuesWithResponse(ctx context.Context, params *AscanActionSetOptionScanNullJsonValuesParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionScanNullJsonValuesResponse, error)

	// AscanActionSetOptionShowAdvancedDialogWithResponse request
	AscanActionSetOptionShowAdvancedDialogWithResponse(ctx context.Context, params *AscanActionSetOptionShowAdvancedDialogParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionShowAdvancedDialogResponse, error)

	// AscanActionSetOptionTargetParamsEnabledRPCWithResponse request
	AscanActionSetOptionTargetParamsEnabledRPCWithResponse(ctx context.Context, params *AscanActionSetOptionTargetParamsEnabledRPCParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionTargetParamsEnabledRPCResponse, error)

	// AscanActionSetOptionTargetParamsInjectableWithResponse request
	AscanActionSetOptionTargetParamsInjectableWithResponse(ctx context.Context, params *AscanActionSetOptionTargetParamsInjectableParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionTargetParamsInjectableResponse, error)

	// AscanActionSetOptionThreadPerHostWithResponse request
	AscanActionSetOptionThreadPerHostWithResponse(ctx context.Context, params *AscanActionSetOptionThreadPerHostParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionThreadPerHostResponse, error)

	// AscanActionSetPolicyAlertThresholdWithResponse request
	AscanActionSetPolicyAlertThresholdWithResponse(ctx context.Context, params *AscanActionSetPolicyAlertThresholdParams, reqEditors ...RequestEditorFn) (*AscanActionSetPolicyAlertThresholdResponse, error)

	// AscanActionSetPolicyAttackStrengthWithResponse request
	AscanActionSetPolicyAttackStrengthWithResponse(ctx context.Context, params *AscanActionSetPolicyAttackStrengthParams, reqEditors ...RequestEditorFn) (*AscanActionSetPolicyAttackStrengthResponse, error)

	// AscanActionSetScannerAlertThresholdWithResponse request
	AscanActionSetScannerAlertThresholdWithResponse(ctx context.Context, params *AscanActionSetScannerAlertThresholdParams, reqEditors ...RequestEditorFn) (*AscanActionSetScannerAlertThresholdResponse, error)

	// AscanActionSetScannerAttackStrengthWithResponse request
	AscanActionSetScannerAttackStrengthWithResponse(ctx context.Context, params *AscanActionSetScannerAttackStrengthParams, reqEditors ...RequestEditorFn) (*AscanActionSetScannerAttackStrengthResponse, error)

	// AscanActionSkipScannerWithResponse request
	AscanActionSkipScannerWithResponse(ctx context.Context, params *AscanActionSkipScannerParams, reqEditors ...RequestEditorFn) (*AscanActionSkipScannerResponse, error)

	// AscanActionStopWithResponse request
	AscanActionStopWithResponse(ctx context.Context, params *AscanActionStopParams, reqEditors ...RequestEditorFn) (*AscanActionStopResponse, error)

	// AscanActionStopAllScansWithResponse request
	AscanActionStopAllScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanActionStopAllScansResponse, error)

	// AscanActionUpdateScanPolicyWithResponse request
	AscanActionUpdateScanPolicyWithResponse(ctx context.Context, params *AscanActionUpdateScanPolicyParams, reqEditors ...RequestEditorFn) (*AscanActionUpdateScanPolicyResponse, error)

	// AscanViewAlertsIdsWithResponse request
	AscanViewAlertsIdsWithResponse(ctx context.Context, params *AscanViewAlertsIdsParams, reqEditors ...RequestEditorFn) (*AscanViewAlertsIdsResponse, error)

	// AscanViewAttackModeQueueWithResponse request
	AscanViewAttackModeQueueWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewAttackModeQueueResponse, error)

	// AscanViewExcludedFromScanWithResponse request
	AscanViewExcludedFromScanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewExcludedFromScanResponse, error)

	// AscanViewExcludedParamTypesWithResponse request
	AscanViewExcludedParamTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewExcludedParamTypesResponse, error)

	// AscanViewExcludedParamsWithResponse request
	AscanViewExcludedParamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewExcludedParamsResponse, error)

	// AscanViewMessagesIdsWithResponse request
	AscanViewMessagesIdsWithResponse(ctx context.Context, params *AscanViewMessagesIdsParams, reqEditors ...RequestEditorFn) (*AscanViewMessagesIdsResponse, error)

	// AscanViewOptionAddQueryParamWithResponse request
	AscanViewOptionAddQueryParamWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionAddQueryParamResponse, error)

	// AscanViewOptionAllowAttackOnStartWithResponse request
	AscanViewOptionAllowAttackOnStartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionAllowAttackOnStartResponse, error)

	// AscanViewOptionAttackPolicyWithResponse request
	AscanViewOptionAttackPolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionAttackPolicyResponse, error)

	// AscanViewOptionDefaultPolicyWithResponse request
	AscanViewOptionDefaultPolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionDefaultPolicyResponse, error)

	// AscanViewOptionDelayInMsWithResponse request
	AscanViewOptionDelayInMsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionDelayInMsResponse, error)

	// AscanViewOptionEncodeCookieValuesWithResponse request
	AscanViewOptionEncodeCookieValuesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionEncodeCookieValuesResponse, error)

	// AscanViewOptionExcludedParamListWithResponse request
	AscanViewOptionExcludedParamListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionExcludedParamListResponse, error)

	// AscanViewOptionHandleAntiCSRFTokensWithResponse request
	AscanViewOptionHandleAntiCSRFTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionHandleAntiCSRFTokensResponse, error)

	// AscanViewOptionHostPerScanWithResponse request
	AscanViewOptionHostPerScanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionHostPerScanResponse, error)

	// AscanViewOptionInjectPluginIdInHeaderWithResponse request
	AscanViewOptionInjectPluginIdInHeaderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionInjectPluginIdInHeaderResponse, error)

	// AscanViewOptionMaxAlertsPerRuleWithResponse request
	AscanViewOptionMaxAlertsPerRuleWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionMaxAlertsPerRuleResponse, error)

	// AscanViewOptionMaxChartTimeInMinsWithResponse request
	AscanViewOptionMaxChartTimeInMinsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionMaxChartTimeInMinsResponse, error)

	// AscanViewOptionMaxResultsToListWithResponse request
	AscanViewOptionMaxResultsToListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionMaxResultsToListResponse, error)

	// AscanViewOptionMaxRuleDurationInMinsWithResponse request
	AscanViewOptionMaxRuleDurationInMinsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionMaxRuleDurationInMinsResponse, error)

	// AscanViewOptionMaxScanDurationInMinsWithResponse request
	AscanViewOptionMaxScanDurationInMinsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionMaxScanDurationInMinsResponse, error)

	// AscanViewOptionMaxScansInUIWithResponse request
	AscanViewOptionMaxScansInUIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionMaxScansInUIResponse, error)

	// AscanViewOptionPromptInAttackModeWithResponse request
	AscanViewOptionPromptInAttackModeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionPromptInAttackModeResponse, error)

	// AscanViewOptionPromptToClearFinishedScansWithResponse request
	AscanViewOptionPromptToClearFinishedScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionPromptToClearFinishedScansResponse, error)

	// AscanViewOptionRescanInAttackModeWithResponse request
	AscanViewOptionRescanInAttackModeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionRescanInAttackModeResponse, error)

	// AscanViewOptionScanHeadersAllRequestsWithResponse request
	AscanViewOptionScanHeadersAllRequestsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionScanHeadersAllRequestsResponse, error)

	// AscanViewOptionScanNullJsonValuesWithResponse request
	AscanViewOptionScanNullJsonValuesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionScanNullJsonValuesResponse, error)

	// AscanViewOptionShowAdvancedDialogWithResponse request
	AscanViewOptionShowAdvancedDialogWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionShowAdvancedDialogResponse, error)

	// AscanViewOptionTargetParamsEnabledRPCWithResponse request
	AscanViewOptionTargetParamsEnabledRPCWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionTargetParamsEnabledRPCResponse, error)

	// AscanViewOptionTargetParamsInjectableWithResponse request
	AscanViewOptionTargetParamsInjectableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionTargetParamsInjectableResponse, error)

	// AscanViewOptionThreadPerHostWithResponse request
	AscanViewOptionThreadPerHostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionThreadPerHostResponse, error)

	// AscanViewPoliciesWithResponse request
	AscanViewPoliciesWithResponse(ctx context.Context, params *AscanViewPoliciesParams, reqEditors ...RequestEditorFn) (*AscanViewPoliciesResponse, error)

	// AscanViewScanPolicyNamesWithResponse request
	AscanViewScanPolicyNamesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewScanPolicyNamesResponse, error)

	// AscanViewScanProgressWithResponse request
	AscanViewScanProgressWithResponse(ctx context.Context, params *AscanViewScanProgressParams, reqEditors ...RequestEditorFn) (*AscanViewScanProgressResponse, error)

	// AscanViewScannersWithResponse request
	AscanViewScannersWithResponse(ctx context.Context, params *AscanViewScannersParams, reqEditors ...RequestEditorFn) (*AscanViewScannersResponse, error)

	// AscanViewScansWithResponse request
	AscanViewScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewScansResponse, error)

	// AscanViewStatusWithResponse request
	AscanViewStatusWithResponse(ctx context.Context, params *AscanViewStatusParams, reqEditors ...RequestEditorFn) (*AscanViewStatusResponse, error)

	// AuthenticationActionSetAuthenticationMethodWithResponse request
	AuthenticationActionSetAuthenticationMethodWithResponse(ctx context.Context, params *AuthenticationActionSetAuthenticationMethodParams, reqEditors ...RequestEditorFn) (*AuthenticationActionSetAuthenticationMethodResponse, error)

	// AuthenticationActionSetLoggedInIndicatorWithResponse request
	AuthenticationActionSetLoggedInIndicatorWithResponse(ctx context.Context, params *AuthenticationActionSetLoggedInIndicatorParams, reqEditors ...RequestEditorFn) (*AuthenticationActionSetLoggedInIndicatorResponse, error)

	// AuthenticationActionSetLoggedOutIndicatorWithResponse request
	AuthenticationActionSetLoggedOutIndicatorWithResponse(ctx context.Context, params *AuthenticationActionSetLoggedOutIndicatorParams, reqEditors ...RequestEditorFn) (*AuthenticationActionSetLoggedOutIndicatorResponse, error)

	// AuthenticationViewGetAuthenticationMethodWithResponse request
	AuthenticationViewGetAuthenticationMethodWithResponse(ctx context.Context, params *AuthenticationViewGetAuthenticationMethodParams, reqEditors ...RequestEditorFn) (*AuthenticationViewGetAuthenticationMethodResponse, error)

	// AuthenticationViewGetAuthenticationMethodConfigParamsWithResponse request
	AuthenticationViewGetAuthenticationMethodConfigParamsWithResponse(ctx context.Context, params *AuthenticationViewGetAuthenticationMethodConfigParamsParams, reqEditors ...RequestEditorFn) (*AuthenticationViewGetAuthenticationMethodConfigParamsResponse, error)

	// AuthenticationViewGetLoggedInIndicatorWithResponse request
	AuthenticationViewGetLoggedInIndicatorWithResponse(ctx context.Context, params *AuthenticationViewGetLoggedInIndicatorParams, reqEditors ...RequestEditorFn) (*AuthenticationViewGetLoggedInIndicatorResponse, error)

	// AuthenticationViewGetLoggedOutIndicatorWithResponse request
	AuthenticationViewGetLoggedOutIndicatorWithResponse(ctx context.Context, params *AuthenticationViewGetLoggedOutIndicatorParams, reqEditors ...RequestEditorFn) (*AuthenticationViewGetLoggedOutIndicatorResponse, error)

	// AuthenticationViewGetSupportedAuthenticationMethodsWithResponse request
	AuthenticationViewGetSupportedAuthenticationMethodsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthenticationViewGetSupportedAuthenticationMethodsResponse, error)

	// AuthorizationActionSetBasicAuthorizationDetectionMethodWithResponse request
	AuthorizationActionSetBasicAuthorizationDetectionMethodWithResponse(ctx context.Context, params *AuthorizationActionSetBasicAuthorizationDetectionMethodParams, reqEditors ...RequestEditorFn) (*AuthorizationActionSetBasicAuthorizationDetectionMethodResponse, error)

	// AuthorizationViewGetAuthorizationDetectionMethodWithResponse request
	AuthorizationViewGetAuthorizationDetectionMethodWithResponse(ctx context.Context, params *AuthorizationViewGetAuthorizationDetectionMethodParams, reqEditors ...RequestEditorFn) (*AuthorizationViewGetAuthorizationDetectionMethodResponse, error)

	// AutomationActionEndDelayJobWithResponse request
	AutomationActionEndDelayJobWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutomationActionEndDelayJobResponse, error)

	// AutomationActionRunPlanWithResponse request
	AutomationActionRunPlanWithResponse(ctx context.Context, params *AutomationActionRunPlanParams, reqEditors ...RequestEditorFn) (*AutomationActionRunPlanResponse, error)

	// AutomationViewPlanProgressWithResponse request
	AutomationViewPlanProgressWithResponse(ctx context.Context, params *AutomationViewPlanProgressParams, reqEditors ...RequestEditorFn) (*AutomationViewPlanProgressResponse, error)

	// AutoupdateActionDownloadLatestReleaseWithResponse request
	AutoupdateActionDownloadLatestReleaseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateActionDownloadLatestReleaseResponse, error)

	// AutoupdateActionInstallAddonWithResponse request
	AutoupdateActionInstallAddonWithResponse(ctx context.Context, params *AutoupdateActionInstallAddonParams, reqEditors ...RequestEditorFn) (*AutoupdateActionInstallAddonResponse, error)

	// AutoupdateActionInstallLocalAddonWithResponse request
	AutoupdateActionInstallLocalAddonWithResponse(ctx context.Context, params *AutoupdateActionInstallLocalAddonParams, reqEditors ...RequestEditorFn) (*AutoupdateActionInstallLocalAddonResponse, error)

	// AutoupdateActionSetOptionCheckAddonUpdatesWithResponse request
	AutoupdateActionSetOptionCheckAddonUpdatesWithResponse(ctx context.Context, params *AutoupdateActionSetOptionCheckAddonUpdatesParams, reqEditors ...RequestEditorFn) (*AutoupdateActionSetOptionCheckAddonUpdatesResponse, error)

	// AutoupdateActionSetOptionCheckOnStartWithResponse request
	AutoupdateActionSetOptionCheckOnStartWithResponse(ctx context.Context, params *AutoupdateActionSetOptionCheckOnStartParams, reqEditors ...RequestEditorFn) (*AutoupdateActionSetOptionCheckOnStartResponse, error)

	// AutoupdateActionSetOptionDownloadNewReleaseWithResponse request
	AutoupdateActionSetOptionDownloadNewReleaseWithResponse(ctx context.Context, params *AutoupdateActionSetOptionDownloadNewReleaseParams, reqEditors ...RequestEditorFn) (*AutoupdateActionSetOptionDownloadNewReleaseResponse, error)

	// AutoupdateActionSetOptionInstallAddonUpdatesWithResponse request
	AutoupdateActionSetOptionInstallAddonUpdatesWithResponse(ctx context.Context, params *AutoupdateActionSetOptionInstallAddonUpdatesParams, reqEditors ...RequestEditorFn) (*AutoupdateActionSetOptionInstallAddonUpdatesResponse, error)

	// AutoupdateActionSetOptionInstallScannerRulesWithResponse request
	AutoupdateActionSetOptionInstallScannerRulesWithResponse(ctx context.Context, params *AutoupdateActionSetOptionInstallScannerRulesParams, reqEditors ...RequestEditorFn) (*AutoupdateActionSetOptionInstallScannerRulesResponse, error)

	// AutoupdateActionSetOptionReportAlphaAddonsWithResponse request
	AutoupdateActionSetOptionReportAlphaAddonsWithResponse(ctx context.Context, params *AutoupdateActionSetOptionReportAlphaAddonsParams, reqEditors ...RequestEditorFn) (*AutoupdateActionSetOptionReportAlphaAddonsResponse, error)

	// AutoupdateActionSetOptionReportBetaAddonsWithResponse request
	AutoupdateActionSetOptionReportBetaAddonsWithResponse(ctx context.Context, params *AutoupdateActionSetOptionReportBetaAddonsParams, reqEditors ...RequestEditorFn) (*AutoupdateActionSetOptionReportBetaAddonsResponse, error)

	// AutoupdateActionSetOptionReportReleaseAddonsWithResponse request
	AutoupdateActionSetOptionReportReleaseAddonsWithResponse(ctx context.Context, params *AutoupdateActionSetOptionReportReleaseAddonsParams, reqEditors ...RequestEditorFn) (*AutoupdateActionSetOptionReportReleaseAddonsResponse, error)

	// AutoupdateActionUninstallAddonWithResponse request
	AutoupdateActionUninstallAddonWithResponse(ctx context.Context, params *AutoupdateActionUninstallAddonParams, reqEditors ...RequestEditorFn) (*AutoupdateActionUninstallAddonResponse, error)

	// AutoupdateViewInstalledAddonsWithResponse request
	AutoupdateViewInstalledAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewInstalledAddonsResponse, error)

	// AutoupdateViewIsLatestVersionWithResponse request
	AutoupdateViewIsLatestVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewIsLatestVersionResponse, error)

	// AutoupdateViewLatestVersionNumberWithResponse request
	AutoupdateViewLatestVersionNumberWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewLatestVersionNumberResponse, error)

	// AutoupdateViewLocalAddonsWithResponse request
	AutoupdateViewLocalAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewLocalAddonsResponse, error)

	// AutoupdateViewMarketplaceAddonsWithResponse request
	AutoupdateViewMarketplaceAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewMarketplaceAddonsResponse, error)

	// AutoupdateViewNewAddonsWithResponse request
	AutoupdateViewNewAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewNewAddonsResponse, error)

	// AutoupdateViewOptionAddonDirectoriesWithResponse request
	AutoupdateViewOptionAddonDirectoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionAddonDirectoriesResponse, error)

	// AutoupdateViewOptionCheckAddonUpdatesWithResponse request
	AutoupdateViewOptionCheckAddonUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionCheckAddonUpdatesResponse, error)

	// AutoupdateViewOptionCheckOnStartWithResponse request
	AutoupdateViewOptionCheckOnStartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionCheckOnStartResponse, error)

	// AutoupdateViewOptionDayLastCheckedWithResponse request
	AutoupdateViewOptionDayLastCheckedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionDayLastCheckedResponse, error)

	// AutoupdateViewOptionDayLastInstallWarnedWithResponse request
	AutoupdateViewOptionDayLastInstallWarnedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionDayLastInstallWarnedResponse, error)

	// AutoupdateViewOptionDayLastUpdateWarnedWithResponse request
	AutoupdateViewOptionDayLastUpdateWarnedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionDayLastUpdateWarnedResponse, error)

	// AutoupdateViewOptionDownloadDirectoryWithResponse request
	AutoupdateViewOptionDownloadDirectoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionDownloadDirectoryResponse, error)

	// AutoupdateViewOptionDownloadNewReleaseWithResponse request
	AutoupdateViewOptionDownloadNewReleaseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionDownloadNewReleaseResponse, error)

	// AutoupdateViewOptionInstallAddonUpdatesWithResponse request
	AutoupdateViewOptionInstallAddonUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionInstallAddonUpdatesResponse, error)

	// AutoupdateViewOptionInstallScannerRulesWithResponse request
	AutoupdateViewOptionInstallScannerRulesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionInstallScannerRulesResponse, error)

	// AutoupdateViewOptionReportAlphaAddonsWithResponse request
	AutoupdateViewOptionReportAlphaAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionReportAlphaAddonsResponse, error)

	// AutoupdateViewOptionReportBetaAddonsWithResponse request
	AutoupdateViewOptionReportBetaAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionReportBetaAddonsResponse, error)

	// AutoupdateViewOptionReportReleaseAddonsWithResponse request
	AutoupdateViewOptionReportReleaseAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionReportReleaseAddonsResponse, error)

	// AutoupdateViewUpdatedAddonsWithResponse request
	AutoupdateViewUpdatedAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewUpdatedAddonsResponse, error)

	// BreakActionAddHttpBreakpointWithResponse request
	BreakActionAddHttpBreakpointWithResponse(ctx context.Context, params *BreakActionAddHttpBreakpointParams, reqEditors ...RequestEditorFn) (*BreakActionAddHttpBreakpointResponse, error)

	// BreakActionBreakWithResponse request
	BreakActionBreakWithResponse(ctx context.Context, params *BreakActionBreakParams, reqEditors ...RequestEditorFn) (*BreakActionBreakResponse, error)

	// BreakActionContinueWithResponse request
	BreakActionContinueWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BreakActionContinueResponse, error)

	// BreakActionDropWithResponse request
	BreakActionDropWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BreakActionDropResponse, error)

	// BreakActionRemoveHttpBreakpointWithResponse request
	BreakActionRemoveHttpBreakpointWithResponse(ctx context.Context, params *BreakActionRemoveHttpBreakpointParams, reqEditors ...RequestEditorFn) (*BreakActionRemoveHttpBreakpointResponse, error)

	// BreakActionSetHttpMessageWithResponse request
	BreakActionSetHttpMessageWithResponse(ctx context.Context, params *BreakActionSetHttpMessageParams, reqEditors ...RequestEditorFn) (*BreakActionSetHttpMessageResponse, error)

	// BreakActionStepWithResponse request
	BreakActionStepWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BreakActionStepResponse, error)

	// BreakViewHttpMessageWithResponse request
	BreakViewHttpMessageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BreakViewHttpMessageResponse, error)

	// BreakViewIsBreakAllWithResponse request
	BreakViewIsBreakAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BreakViewIsBreakAllResponse, error)

	// BreakViewIsBreakRequestWithResponse request
	BreakViewIsBreakRequestWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BreakViewIsBreakRequestResponse, error)

	// BreakViewIsBreakResponseWithResponse request
	BreakViewIsBreakResponseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BreakViewIsBreakResponseResponse, error)

	// ClientActionExportClientMapWithResponse request
	ClientActionExportClientMapWithResponse(ctx context.Context, params *ClientActionExportClientMapParams, reqEditors ...RequestEditorFn) (*ClientActionExportClientMapResponse, error)

	// ClientActionReportEventWithResponse request
	ClientActionReportEventWithResponse(ctx context.Context, params *ClientActionReportEventParams, reqEditors ...RequestEditorFn) (*ClientActionReportEventResponse, error)

	// ClientActionReportObjectWithResponse request
	ClientActionReportObjectWithResponse(ctx context.Context, params *ClientActionReportObjectParams, reqEditors ...RequestEditorFn) (*ClientActionReportObjectResponse, error)

	// ClientActionReportZestScriptWithResponse request
	ClientActionReportZestScriptWithResponse(ctx context.Context, params *ClientActionReportZestScriptParams, reqEditors ...RequestEditorFn) (*ClientActionReportZestScriptResponse, error)

	// ClientActionReportZestStatementWithResponse request
	ClientActionReportZestStatementWithResponse(ctx context.Context, params *ClientActionReportZestStatementParams, reqEditors ...RequestEditorFn) (*ClientActionReportZestStatementResponse, error)

	// ClientSpiderActionScanWithResponse request
	ClientSpiderActionScanWithResponse(ctx context.Context, params *ClientSpiderActionScanParams, reqEditors ...RequestEditorFn) (*ClientSpiderActionScanResponse, error)

	// ClientSpiderActionStopWithResponse request
	ClientSpiderActionStopWithResponse(ctx context.Context, params *ClientSpiderActionStopParams, reqEditors ...RequestEditorFn) (*ClientSpiderActionStopResponse, error)

	// ClientSpiderViewStatusWithResponse request
	ClientSpiderViewStatusWithResponse(ctx context.Context, params *ClientSpiderViewStatusParams, reqEditors ...RequestEditorFn) (*ClientSpiderViewStatusResponse, error)

	// ContextActionExcludeAllContextTechnologiesWithResponse request
	ContextActionExcludeAllContextTechnologiesWithResponse(ctx context.Context, params *ContextActionExcludeAllContextTechnologiesParams, reqEditors ...RequestEditorFn) (*ContextActionExcludeAllContextTechnologiesResponse, error)

	// ContextActionExcludeContextTechnologiesWithResponse request
	ContextActionExcludeContextTechnologiesWithResponse(ctx context.Context, params *ContextActionExcludeContextTechnologiesParams, reqEditors ...RequestEditorFn) (*ContextActionExcludeContextTechnologiesResponse, error)

	// ContextActionExcludeFromContextWithResponse request
	ContextActionExcludeFromContextWithResponse(ctx context.Context, params *ContextActionExcludeFromContextParams, reqEditors ...RequestEditorFn) (*ContextActionExcludeFromContextResponse, error)

	// ContextActionExportContextWithResponse request
	ContextActionExportContextWithResponse(ctx context.Context, params *ContextActionExportContextParams, reqEditors ...RequestEditorFn) (*ContextActionExportContextResponse, error)

	// ContextActionImportContextWithResponse request
	ContextActionImportContextWithResponse(ctx context.Context, params *ContextActionImportContextParams, reqEditors ...RequestEditorFn) (*ContextActionImportContextResponse, error)

	// ContextActionIncludeAllContextTechnologiesWithResponse request
	ContextActionIncludeAllContextTechnologiesWithResponse(ctx context.Context, params *ContextActionIncludeAllContextTechnologiesParams, reqEditors ...RequestEditorFn) (*ContextActionIncludeAllContextTechnologiesResponse, error)

	// ContextActionIncludeContextTechnologiesWithResponse request
	ContextActionIncludeContextTechnologiesWithResponse(ctx context.Context, params *ContextActionIncludeContextTechnologiesParams, reqEditors ...RequestEditorFn) (*ContextActionIncludeContextTechnologiesResponse, error)

	// ContextActionIncludeInContextWithResponse request
	ContextActionIncludeInContextWithResponse(ctx context.Context, params *ContextActionIncludeInContextParams, reqEditors ...RequestEditorFn) (*ContextActionIncludeInContextResponse, error)

	// ContextActionNewContextWithResponse request
	ContextActionNewContextWithResponse(ctx context.Context, params *ContextActionNewContextParams, reqEditors ...RequestEditorFn) (*ContextActionNewContextResponse, error)

	// ContextActionRemoveContextWithResponse request
	ContextActionRemoveContextWithResponse(ctx context.Context, params *ContextActionRemoveContextParams, reqEditors ...RequestEditorFn) (*ContextActionRemoveContextResponse, error)

	// ContextActionSetContextCheckingStrategyWithResponse request
	ContextActionSetContextCheckingStrategyWithResponse(ctx context.Context, params *ContextActionSetContextCheckingStrategyParams, reqEditors ...RequestEditorFn) (*ContextActionSetContextCheckingStrategyResponse, error)

	// ContextActionSetContextInScopeWithResponse request
	ContextActionSetContextInScopeWithResponse(ctx context.Context, params *ContextActionSetContextInScopeParams, reqEditors ...RequestEditorFn) (*ContextActionSetContextInScopeResponse, error)

	// ContextActionSetContextRegexsWithResponse request
	ContextActionSetContextRegexsWithResponse(ctx context.Context, params *ContextActionSetContextRegexsParams, reqEditors ...RequestEditorFn) (*ContextActionSetContextRegexsResponse, error)

	// ContextViewContextWithResponse request
	ContextViewContextWithResponse(ctx context.Context, params *ContextViewContextParams, reqEditors ...RequestEditorFn) (*ContextViewContextResponse, error)

	// ContextViewContextListWithResponse request
	ContextViewContextListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ContextViewContextListResponse, error)

	// ContextViewExcludeRegexsWithResponse request
	ContextViewExcludeRegexsWithResponse(ctx context.Context, params *ContextViewExcludeRegexsParams, reqEditors ...RequestEditorFn) (*ContextViewExcludeRegexsResponse, error)

	// ContextViewExcludedTechnologyListWithResponse request
	ContextViewExcludedTechnologyListWithResponse(ctx context.Context, params *ContextViewExcludedTechnologyListParams, reqEditors ...RequestEditorFn) (*ContextViewExcludedTechnologyListResponse, error)

	// ContextViewIncludeRegexsWithResponse request
	ContextViewIncludeRegexsWithResponse(ctx context.Context, params *ContextViewIncludeRegexsParams, reqEditors ...RequestEditorFn) (*ContextViewIncludeRegexsResponse, error)

	// ContextViewIncludedTechnologyListWithResponse request
	ContextViewIncludedTechnologyListWithResponse(ctx context.Context, params *ContextViewIncludedTechnologyListParams, reqEditors ...RequestEditorFn) (*ContextViewIncludedTechnologyListResponse, error)

	// ContextViewTechnologyListWithResponse request
	ContextViewTechnologyListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ContextViewTechnologyListResponse, error)

	// ContextViewUrlsWithResponse request
	ContextViewUrlsWithResponse(ctx context.Context, params *ContextViewUrlsParams, reqEditors ...RequestEditorFn) (*ContextViewUrlsResponse, error)

	// CoreActionAccessUrlWithResponse request
	CoreActionAccessUrlWithResponse(ctx context.Context, params *CoreActionAccessUrlParams, reqEditors ...RequestEditorFn) (*CoreActionAccessUrlResponse, error)

	// CoreActionAddProxyChainExcludedDomainWithResponse request
	CoreActionAddProxyChainExcludedDomainWithResponse(ctx context.Context, params *CoreActionAddProxyChainExcludedDomainParams, reqEditors ...RequestEditorFn) (*CoreActionAddProxyChainExcludedDomainResponse, error)

	// CoreActionClearExcludedFromProxyWithResponse request
	CoreActionClearExcludedFromProxyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreActionClearExcludedFromProxyResponse, error)

	// CoreActionCreateSbomZipWithResponse request
	CoreActionCreateSbomZipWithResponse(ctx context.Context, params *CoreActionCreateSbomZipParams, reqEditors ...RequestEditorFn) (*CoreActionCreateSbomZipResponse, error)

	// CoreActionDeleteAlertWithResponse request
	CoreActionDeleteAlertWithResponse(ctx context.Context, params *CoreActionDeleteAlertParams, reqEditors ...RequestEditorFn) (*CoreActionDeleteAlertResponse, error)

	// CoreActionDeleteAllAlertsWithResponse request
	CoreActionDeleteAllAlertsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreActionDeleteAllAlertsResponse, error)

	// CoreActionDeleteSiteNodeWithResponse request
	CoreActionDeleteSiteNodeWithResponse(ctx context.Context, params *CoreActionDeleteSiteNodeParams, reqEditors ...RequestEditorFn) (*CoreActionDeleteSiteNodeResponse, error)

	// CoreActionDisableAllProxyChainExcludedDomainsWithResponse request
	CoreActionDisableAllProxyChainExcludedDomainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreActionDisableAllProxyChainExcludedDomainsResponse, error)

	// CoreActionDisableClientCertificateWithResponse request
	CoreActionDisableClientCertificateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreActionDisableClientCertificateResponse, error)

	// CoreActionEnableAllProxyChainExcludedDomainsWithResponse request
	CoreActionEnableAllProxyChainExcludedDomainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreActionEnableAllProxyChainExcludedDomainsResponse, error)

	// CoreActionEnablePKCS12ClientCertificateWithResponse request
	CoreActionEnablePKCS12ClientCertificateWithResponse(ctx context.Context, params *CoreActionEnablePKCS12ClientCertificateParams, reqEditors ...RequestEditorFn) (*CoreActionEnablePKCS12ClientCertificateResponse, error)

	// CoreActionExcludeFromProxyWithResponse request
	CoreActionExcludeFromProxyWithResponse(ctx context.Context, params *CoreActionExcludeFromProxyParams, reqEditors ...RequestEditorFn) (*CoreActionExcludeFromProxyResponse, error)

	// CoreActionGenerateRootCAWithResponse request
	CoreActionGenerateRootCAWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreActionGenerateRootCAResponse, error)

	// CoreActionLoadSessionWithResponse request
	CoreActionLoadSessionWithResponse(ctx context.Context, params *CoreActionLoadSessionParams, reqEditors ...RequestEditorFn) (*CoreActionLoadSessionResponse, error)

	// CoreActionModifyProxyChainExcludedDomainWithResponse request
	CoreActionModifyProxyChainExcludedDomainWithResponse(ctx context.Context, params *CoreActionModifyProxyChainExcludedDomainParams, reqEditors ...RequestEditorFn) (*CoreActionModifyProxyChainExcludedDomainResponse, error)

	// CoreActionNewSessionWithResponse request
	CoreActionNewSessionWithResponse(ctx context.Context, params *CoreActionNewSessionParams, reqEditors ...RequestEditorFn) (*CoreActionNewSessionResponse, error)

	// CoreActionRemoveProxyChainExcludedDomainWithResponse request
	CoreActionRemoveProxyChainExcludedDomainWithResponse(ctx context.Context, params *CoreActionRemoveProxyChainExcludedDomainParams, reqEditors ...RequestEditorFn) (*CoreActionRemoveProxyChainExcludedDomainResponse, error)

	// CoreActionRunGarbageCollectionWithResponse request
	CoreActionRunGarbageCollectionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreActionRunGarbageCollectionResponse, error)

	// CoreActionSaveSessionWithResponse request
	CoreActionSaveSessionWithResponse(ctx context.Context, params *CoreActionSaveSessionParams, reqEditors ...RequestEditorFn) (*CoreActionSaveSessionResponse, error)

	// CoreActionSendRequestWithResponse request
	CoreActionSendRequestWithResponse(ctx context.Context, params *CoreActionSendRequestParams, reqEditors ...RequestEditorFn) (*CoreActionSendRequestResponse, error)

	// CoreActionSetHomeDirectoryWithResponse request
	CoreActionSetHomeDirectoryWithResponse(ctx context.Context, params *CoreActionSetHomeDirectoryParams, reqEditors ...RequestEditorFn) (*CoreActionSetHomeDirectoryResponse, error)

	// CoreActionSetLogLevelWithResponse request
	CoreActionSetLogLevelWithResponse(ctx context.Context, params *CoreActionSetLogLevelParams, reqEditors ...RequestEditorFn) (*CoreActionSetLogLevelResponse, error)

	// CoreActionSetModeWithResponse request
	CoreActionSetModeWithResponse(ctx context.Context, params *CoreActionSetModeParams, reqEditors ...RequestEditorFn) (*CoreActionSetModeResponse, error)

	// CoreActionSetOptionAlertOverridesFilePathWithResponse request
	CoreActionSetOptionAlertOverridesFilePathWithResponse(ctx context.Context, params *CoreActionSetOptionAlertOverridesFilePathParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionAlertOverridesFilePathResponse, error)

	// CoreActionSetOptionDefaultUserAgentWithResponse request
	CoreActionSetOptionDefaultUserAgentWithResponse(ctx context.Context, params *CoreActionSetOptionDefaultUserAgentParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionDefaultUserAgentResponse, error)

	// CoreActionSetOptionDnsTtlSuccessfulQueriesWithResponse request
	CoreActionSetOptionDnsTtlSuccessfulQueriesWithResponse(ctx context.Context, params *CoreActionSetOptionDnsTtlSuccessfulQueriesParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionDnsTtlSuccessfulQueriesResponse, error)

	// CoreActionSetOptionHttpStateEnabledWithResponse request
	CoreActionSetOptionHttpStateEnabledWithResponse(ctx context.Context, params *CoreActionSetOptionHttpStateEnabledParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionHttpStateEnabledResponse, error)

	// CoreActionSetOptionMaximumAlertInstancesWithResponse request
	CoreActionSetOptionMaximumAlertInstancesWithResponse(ctx context.Context, params *CoreActionSetOptionMaximumAlertInstancesParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionMaximumAlertInstancesResponse, error)

	// CoreActionSetOptionMergeRelatedAlertsWithResponse request
	CoreActionSetOptionMergeRelatedAlertsWithResponse(ctx context.Context, params *CoreActionSetOptionMergeRelatedAlertsParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionMergeRelatedAlertsResponse, error)

	// CoreActionSetOptionProxyChainNameWithResponse request
	CoreActionSetOptionProxyChainNameWithResponse(ctx context.Context, params *CoreActionSetOptionProxyChainNameParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionProxyChainNameResponse, error)

	// CoreActionSetOptionProxyChainPasswordWithResponse request
	CoreActionSetOptionProxyChainPasswordWithResponse(ctx context.Context, params *CoreActionSetOptionProxyChainPasswordParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionProxyChainPasswordResponse, error)

	// CoreActionSetOptionProxyChainPortWithResponse request
	CoreActionSetOptionProxyChainPortWithResponse(ctx context.Context, params *CoreActionSetOptionProxyChainPortParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionProxyChainPortResponse, error)

	// CoreActionSetOptionProxyChainPromptWithResponse request
	CoreActionSetOptionProxyChainPromptWithResponse(ctx context.Context, params *CoreActionSetOptionProxyChainPromptParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionProxyChainPromptResponse, error)

	// CoreActionSetOptionProxyChainRealmWithResponse request
	CoreActionSetOptionProxyChainRealmWithResponse(ctx context.Context, params *CoreActionSetOptionProxyChainRealmParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionProxyChainRealmResponse, error)

	// CoreActionSetOptionProxyChainSkipNameWithResponse request
	CoreActionSetOptionProxyChainSkipNameWithResponse(ctx context.Context, params *CoreActionSetOptionProxyChainSkipNameParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionProxyChainSkipNameResponse, error)

	// CoreActionSetOptionProxyChainUserNameWithResponse request
	CoreActionSetOptionProxyChainUserNameWithResponse(ctx context.Context, params *CoreActionSetOptionProxyChainUserNameParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionProxyChainUserNameResponse, error)

	// CoreActionSetOptionSingleCookieRequestHeaderWithResponse request
	CoreActionSetOptionSingleCookieRequestHeaderWithResponse(ctx context.Context, params *CoreActionSetOptionSingleCookieRequestHeaderParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionSingleCookieRequestHeaderResponse, error)

	// CoreActionSetOptionTimeoutInSecsWithResponse request
	CoreActionSetOptionTimeoutInSecsWithResponse(ctx context.Context, params *CoreActionSetOptionTimeoutInSecsParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionTimeoutInSecsResponse, error)

	// CoreActionSetOptionUseProxyChainWithResponse request
	CoreActionSetOptionUseProxyChainWithResponse(ctx context.Context, params *CoreActionSetOptionUseProxyChainParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionUseProxyChainResponse, error)

	// CoreActionSetOptionUseProxyChainAuthWithResponse request
	CoreActionSetOptionUseProxyChainAuthWithResponse(ctx context.Context, params *CoreActionSetOptionUseProxyChainAuthParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionUseProxyChainAuthResponse, error)

	// CoreActionSetOptionUseSocksProxyWithResponse request
	CoreActionSetOptionUseSocksProxyWithResponse(ctx context.Context, params *CoreActionSetOptionUseSocksProxyParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionUseSocksProxyResponse, error)

	// CoreActionShutdownWithResponse request
	CoreActionShutdownWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreActionShutdownResponse, error)

	// CoreActionSnapshotSessionWithResponse request
	CoreActionSnapshotSessionWithResponse(ctx context.Context, params *CoreActionSnapshotSessionParams, reqEditors ...RequestEditorFn) (*CoreActionSnapshotSessionResponse, error)

	// CoreViewAlertWithResponse request
	CoreViewAlertWithResponse(ctx context.Context, params *CoreViewAlertParams, reqEditors ...RequestEditorFn) (*CoreViewAlertResponse, error)

	// CoreViewAlertsWithResponse request
	CoreViewAlertsWithResponse(ctx context.Context, params *CoreViewAlertsParams, reqEditors ...RequestEditorFn) (*CoreViewAlertsResponse, error)

	// CoreViewAlertsSummaryWithResponse request
	CoreViewAlertsSummaryWithResponse(ctx context.Context, params *CoreViewAlertsSummaryParams, reqEditors ...RequestEditorFn) (*CoreViewAlertsSummaryResponse, error)

	// CoreViewChildNodesWithResponse request
	CoreViewChildNodesWithResponse(ctx context.Context, params *CoreViewChildNodesParams, reqEditors ...RequestEditorFn) (*CoreViewChildNodesResponse, error)

	// CoreViewExcludedFromProxyWithResponse request
	CoreViewExcludedFromProxyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewExcludedFromProxyResponse, error)

	// CoreViewGetLogLevelWithResponse request
	CoreViewGetLogLevelWithResponse(ctx context.Context, params *CoreViewGetLogLevelParams, reqEditors ...RequestEditorFn) (*CoreViewGetLogLevelResponse, error)

	// CoreViewHomeDirectoryWithResponse request
	CoreViewHomeDirectoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewHomeDirectoryResponse, error)

	// CoreViewHostsWithResponse request
	CoreViewHostsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewHostsResponse, error)

	// CoreViewMessageWithResponse request
	CoreViewMessageWithResponse(ctx context.Context, params *CoreViewMessageParams, reqEditors ...RequestEditorFn) (*CoreViewMessageResponse, error)

	// CoreViewMessagesWithResponse request
	CoreViewMessagesWithResponse(ctx context.Context, params *CoreViewMessagesParams, reqEditors ...RequestEditorFn) (*CoreViewMessagesResponse, error)

	// CoreViewMessagesByIdWithResponse request
	CoreViewMessagesByIdWithResponse(ctx context.Context, params *CoreViewMessagesByIdParams, reqEditors ...RequestEditorFn) (*CoreViewMessagesByIdResponse, error)

	// CoreViewModeWithResponse request
	CoreViewModeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewModeResponse, error)

	// CoreViewNumberOfAlertsWithResponse request
	CoreViewNumberOfAlertsWithResponse(ctx context.Context, params *CoreViewNumberOfAlertsParams, reqEditors ...RequestEditorFn) (*CoreViewNumberOfAlertsResponse, error)

	// CoreViewNumberOfMessagesWithResponse request
	CoreViewNumberOfMessagesWithResponse(ctx context.Context, params *CoreViewNumberOfMessagesParams, reqEditors ...RequestEditorFn) (*CoreViewNumberOfMessagesResponse, error)

	// CoreViewOptionAlertOverridesFilePathWithResponse request
	CoreViewOptionAlertOverridesFilePathWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionAlertOverridesFilePathResponse, error)

	// CoreViewOptionDefaultUserAgentWithResponse request
	CoreViewOptionDefaultUserAgentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionDefaultUserAgentResponse, error)

	// CoreViewOptionDnsTtlSuccessfulQueriesWithResponse request
	CoreViewOptionDnsTtlSuccessfulQueriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionDnsTtlSuccessfulQueriesResponse, error)

	// CoreViewOptionHttpStateWithResponse request
	CoreViewOptionHttpStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionHttpStateResponse, error)

	// CoreViewOptionHttpStateEnabledWithResponse request
	CoreViewOptionHttpStateEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionHttpStateEnabledResponse, error)

	// CoreViewOptionMaximumAlertInstancesWithResponse request
	CoreViewOptionMaximumAlertInstancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionMaximumAlertInstancesResponse, error)

	// CoreViewOptionMergeRelatedAlertsWithResponse request
	CoreViewOptionMergeRelatedAlertsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionMergeRelatedAlertsResponse, error)

	// CoreViewOptionProxyChainNameWithResponse request
	CoreViewOptionProxyChainNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyChainNameResponse, error)

	// CoreViewOptionProxyChainPasswordWithResponse request
	CoreViewOptionProxyChainPasswordWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyChainPasswordResponse, error)

	// CoreViewOptionProxyChainPortWithResponse request
	CoreViewOptionProxyChainPortWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyChainPortResponse, error)

	// CoreViewOptionProxyChainPromptWithResponse request
	CoreViewOptionProxyChainPromptWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyChainPromptResponse, error)

	// CoreViewOptionProxyChainRealmWithResponse request
	CoreViewOptionProxyChainRealmWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyChainRealmResponse, error)

	// CoreViewOptionProxyChainSkipNameWithResponse request
	CoreViewOptionProxyChainSkipNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyChainSkipNameResponse, error)

	// CoreViewOptionProxyChainUserNameWithResponse request
	CoreViewOptionProxyChainUserNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyChainUserNameResponse, error)

	// CoreViewOptionProxyExcludedDomainsWithResponse request
	CoreViewOptionProxyExcludedDomainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyExcludedDomainsResponse, error)

	// CoreViewOptionProxyExcludedDomainsEnabledWithResponse request
	CoreViewOptionProxyExcludedDomainsEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyExcludedDomainsEnabledResponse, error)

	// CoreViewOptionSingleCookieRequestHeaderWithResponse request
	CoreViewOptionSingleCookieRequestHeaderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionSingleCookieRequestHeaderResponse, error)

	// CoreViewOptionTimeoutInSecsWithResponse request
	CoreViewOptionTimeoutInSecsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionTimeoutInSecsResponse, error)

	// CoreViewOptionUseProxyChainWithResponse request
	CoreViewOptionUseProxyChainWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionUseProxyChainResponse, error)

	// CoreViewOptionUseProxyChainAuthWithResponse request
	CoreViewOptionUseProxyChainAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionUseProxyChainAuthResponse, error)

	// CoreViewOptionUseSocksProxyWithResponse request
	CoreViewOptionUseSocksProxyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionUseSocksProxyResponse, error)

	// CoreViewProxyChainExcludedDomainsWithResponse request
	CoreViewProxyChainExcludedDomainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewProxyChainExcludedDomainsResponse, error)

	// CoreViewSessionLocationWithResponse request
	CoreViewSessionLocationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewSessionLocationResponse, error)

	// CoreViewSitesWithResponse request
	CoreViewSitesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewSitesResponse, error)

	// CoreViewUrlsWithResponse request
	CoreViewUrlsWithResponse(ctx context.Context, params *CoreViewUrlsParams, reqEditors ...RequestEditorFn) (*CoreViewUrlsResponse, error)

	// CoreViewVersionWithResponse request
	CoreViewVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewVersionResponse, error)

	// CoreViewZapHomePathWithResponse request
	CoreViewZapHomePathWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewZapHomePathResponse, error)

	// CustompayloadsActionAddCustomPayloadWithResponse request
	CustompayloadsActionAddCustomPayloadWithResponse(ctx context.Context, params *CustompayloadsActionAddCustomPayloadParams, reqEditors ...RequestEditorFn) (*CustompayloadsActionAddCustomPayloadResponse, error)

	// CustompayloadsActionDisableCustomPayloadWithResponse request
	CustompayloadsActionDisableCustomPayloadWithResponse(ctx context.Context, params *CustompayloadsActionDisableCustomPayloadParams, reqEditors ...RequestEditorFn) (*CustompayloadsActionDisableCustomPayloadResponse, error)

	// CustompayloadsActionDisableCustomPayloadsWithResponse request
	CustompayloadsActionDisableCustomPayloadsWithResponse(ctx context.Context, params *CustompayloadsActionDisableCustomPayloadsParams, reqEditors ...RequestEditorFn) (*CustompayloadsActionDisableCustomPayloadsResponse, error)

	// CustompayloadsActionEnableCustomPayloadWithResponse request
	CustompayloadsActionEnableCustomPayloadWithResponse(ctx context.Context, params *CustompayloadsActionEnableCustomPayloadParams, reqEditors ...RequestEditorFn) (*CustompayloadsActionEnableCustomPayloadResponse, error)

	// CustompayloadsActionEnableCustomPayloadsWithResponse request
	CustompayloadsActionEnableCustomPayloadsWithResponse(ctx context.Context, params *CustompayloadsActionEnableCustomPayloadsParams, reqEditors ...RequestEditorFn) (*CustompayloadsActionEnableCustomPayloadsResponse, error)

	// CustompayloadsActionRemoveCustomPayloadWithResponse request
	CustompayloadsActionRemoveCustomPayloadWithResponse(ctx context.Context, params *CustompayloadsActionRemoveCustomPayloadParams, reqEditors ...RequestEditorFn) (*CustompayloadsActionRemoveCustomPayloadResponse, error)

	// CustompayloadsViewCustomPayloadsWithResponse request
	CustompayloadsViewCustomPayloadsWithResponse(ctx context.Context, params *CustompayloadsViewCustomPayloadsParams, reqEditors ...RequestEditorFn) (*CustompayloadsViewCustomPayloadsResponse, error)

	// CustompayloadsViewCustomPayloadsCategoriesWithResponse request
	CustompayloadsViewCustomPayloadsCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CustompayloadsViewCustomPayloadsCategoriesResponse, error)

	// EximActionExportSitesTreeWithResponse request
	EximActionExportSitesTreeWithResponse(ctx context.Context, params *EximActionExportSitesTreeParams, reqEditors ...RequestEditorFn) (*EximActionExportSitesTreeResponse, error)

	// EximActionImportHarWithResponse request
	EximActionImportHarWithResponse(ctx context.Context, params *EximActionImportHarParams, reqEditors ...RequestEditorFn) (*EximActionImportHarResponse, error)

	// EximActionImportModsec2LogsWithResponse request
	EximActionImportModsec2LogsWithResponse(ctx context.Context, params *EximActionImportModsec2LogsParams, reqEditors ...RequestEditorFn) (*EximActionImportModsec2LogsResponse, error)

	// EximActionImportUrlsWithResponse request
	EximActionImportUrlsWithResponse(ctx context.Context, params *EximActionImportUrlsParams, reqEditors ...RequestEditorFn) (*EximActionImportUrlsResponse, error)

	// EximActionImportZapLogsWithResponse request
	EximActionImportZapLogsWithResponse(ctx context.Context, params *EximActionImportZapLogsParams, reqEditors ...RequestEditorFn) (*EximActionImportZapLogsResponse, error)

	// EximActionPruneSitesTreeWithResponse request
	EximActionPruneSitesTreeWithResponse(ctx context.Context, params *EximActionPruneSitesTreeParams, reqEditors ...RequestEditorFn) (*EximActionPruneSitesTreeResponse, error)

	// ForcedUserActionSetForcedUserWithResponse request
	ForcedUserActionSetForcedUserWithResponse(ctx context.Context, params *ForcedUserActionSetForcedUserParams, reqEditors ...RequestEditorFn) (*ForcedUserActionSetForcedUserResponse, error)

	// ForcedUserActionSetForcedUserModeEnabledWithResponse request
	ForcedUserActionSetForcedUserModeEnabledWithResponse(ctx context.Context, params *ForcedUserActionSetForcedUserModeEnabledParams, reqEditors ...RequestEditorFn) (*ForcedUserActionSetForcedUserModeEnabledResponse, error)

	// ForcedUserViewGetForcedUserWithResponse request
	ForcedUserViewGetForcedUserWithResponse(ctx context.Context, params *ForcedUserViewGetForcedUserParams, reqEditors ...RequestEditorFn) (*ForcedUserViewGetForcedUserResponse, error)

	// ForcedUserViewIsForcedUserModeEnabledWithResponse request
	ForcedUserViewIsForcedUserModeEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ForcedUserViewIsForcedUserModeEnabledResponse, error)

	// GraphqlActionImportFileWithResponse request
	GraphqlActionImportFileWithResponse(ctx context.Context, params *GraphqlActionImportFileParams, reqEditors ...RequestEditorFn) (*GraphqlActionImportFileResponse, error)

	// GraphqlActionImportUrlWithResponse request
	GraphqlActionImportUrlWithResponse(ctx context.Context, params *GraphqlActionImportUrlParams, reqEditors ...RequestEditorFn) (*GraphqlActionImportUrlResponse, error)

	// GraphqlActionSetOptionArgsTypeWithResponse request
	GraphqlActionSetOptionArgsTypeWithResponse(ctx context.Context, params *GraphqlActionSetOptionArgsTypeParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionArgsTypeResponse, error)

	// GraphqlActionSetOptionLenientMaxQueryDepthEnabledWithResponse request
	GraphqlActionSetOptionLenientMaxQueryDepthEnabledWithResponse(ctx context.Context, params *GraphqlActionSetOptionLenientMaxQueryDepthEnabledParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionLenientMaxQueryDepthEnabledResponse, error)

	// GraphqlActionSetOptionMaxAdditionalQueryDepthWithResponse request
	GraphqlActionSetOptionMaxAdditionalQueryDepthWithResponse(ctx context.Context, params *GraphqlActionSetOptionMaxAdditionalQueryDepthParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionMaxAdditionalQueryDepthResponse, error)

	// GraphqlActionSetOptionMaxArgsDepthWithResponse request
	GraphqlActionSetOptionMaxArgsDepthWithResponse(ctx context.Context, params *GraphqlActionSetOptionMaxArgsDepthParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionMaxArgsDepthResponse, error)

	// GraphqlActionSetOptionMaxQueryDepthWithResponse request
	GraphqlActionSetOptionMaxQueryDepthWithResponse(ctx context.Context, params *GraphqlActionSetOptionMaxQueryDepthParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionMaxQueryDepthResponse, error)

	// GraphqlActionSetOptionOptionalArgsEnabledWithResponse request
	GraphqlActionSetOptionOptionalArgsEnabledWithResponse(ctx context.Context, params *GraphqlActionSetOptionOptionalArgsEnabledParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionOptionalArgsEnabledResponse, error)

	// GraphqlActionSetOptionQueryGenEnabledWithResponse request
	GraphqlActionSetOptionQueryGenEnabledWithResponse(ctx context.Context, params *GraphqlActionSetOptionQueryGenEnabledParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionQueryGenEnabledResponse, error)

	// GraphqlActionSetOptionQuerySplitTypeWithResponse request
	GraphqlActionSetOptionQuerySplitTypeWithResponse(ctx context.Context, params *GraphqlActionSetOptionQuerySplitTypeParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionQuerySplitTypeResponse, error)

	// GraphqlActionSetOptionRequestMethodWithResponse request
	GraphqlActionSetOptionRequestMethodWithResponse(ctx context.Context, params *GraphqlActionSetOptionRequestMethodParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionRequestMethodResponse, error)

	// GraphqlViewOptionArgsTypeWithResponse request
	GraphqlViewOptionArgsTypeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionArgsTypeResponse, error)

	// GraphqlViewOptionLenientMaxQueryDepthEnabledWithResponse request
	GraphqlViewOptionLenientMaxQueryDepthEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionLenientMaxQueryDepthEnabledResponse, error)

	// GraphqlViewOptionMaxAdditionalQueryDepthWithResponse request
	GraphqlViewOptionMaxAdditionalQueryDepthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionMaxAdditionalQueryDepthResponse, error)

	// GraphqlViewOptionMaxArgsDepthWithResponse request
	GraphqlViewOptionMaxArgsDepthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionMaxArgsDepthResponse, error)

	// GraphqlViewOptionMaxQueryDepthWithResponse request
	GraphqlViewOptionMaxQueryDepthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionMaxQueryDepthResponse, error)

	// GraphqlViewOptionOptionalArgsEnabledWithResponse request
	GraphqlViewOptionOptionalArgsEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionOptionalArgsEnabledResponse, error)

	// GraphqlViewOptionQueryGenEnabledWithResponse request
	GraphqlViewOptionQueryGenEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionQueryGenEnabledResponse, error)

	// GraphqlViewOptionQuerySplitTypeWithResponse request
	GraphqlViewOptionQuerySplitTypeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionQuerySplitTypeResponse, error)

	// GraphqlViewOptionRequestMethodWithResponse request
	GraphqlViewOptionRequestMethodWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionRequestMethodResponse, error)

	// HttpSessionsActionAddDefaultSessionTokenWithResponse request
	HttpSessionsActionAddDefaultSessionTokenWithResponse(ctx context.Context, params *HttpSessionsActionAddDefaultSessionTokenParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionAddDefaultSessionTokenResponse, error)

	// HttpSessionsActionAddSessionTokenWithResponse request
	HttpSessionsActionAddSessionTokenWithResponse(ctx context.Context, params *HttpSessionsActionAddSessionTokenParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionAddSessionTokenResponse, error)

	// HttpSessionsActionCreateEmptySessionWithResponse request
	HttpSessionsActionCreateEmptySessionWithResponse(ctx context.Context, params *HttpSessionsActionCreateEmptySessionParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionCreateEmptySessionResponse, error)

	// HttpSessionsActionRemoveDefaultSessionTokenWithResponse request
	HttpSessionsActionRemoveDefaultSessionTokenWithResponse(ctx context.Context, params *HttpSessionsActionRemoveDefaultSessionTokenParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionRemoveDefaultSessionTokenResponse, error)

	// HttpSessionsActionRemoveSessionWithResponse request
	HttpSessionsActionRemoveSessionWithResponse(ctx context.Context, params *HttpSessionsActionRemoveSessionParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionRemoveSessionResponse, error)

	// HttpSessionsActionRemoveSessionTokenWithResponse request
	HttpSessionsActionRemoveSessionTokenWithResponse(ctx context.Context, params *HttpSessionsActionRemoveSessionTokenParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionRemoveSessionTokenResponse, error)

	// HttpSessionsActionRenameSessionWithResponse request
	HttpSessionsActionRenameSessionWithResponse(ctx context.Context, params *HttpSessionsActionRenameSessionParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionRenameSessionResponse, error)

	// HttpSessionsActionSetActiveSessionWithResponse request
	HttpSessionsActionSetActiveSessionWithResponse(ctx context.Context, params *HttpSessionsActionSetActiveSessionParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionSetActiveSessionResponse, error)

	// HttpSessionsActionSetDefaultSessionTokenEnabledWithResponse request
	HttpSessionsActionSetDefaultSessionTokenEnabledWithResponse(ctx context.Context, params *HttpSessionsActionSetDefaultSessionTokenEnabledParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionSetDefaultSessionTokenEnabledResponse, error)

	// HttpSessionsActionSetSessionTokenValueWithResponse request
	HttpSessionsActionSetSessionTokenValueWithResponse(ctx context.Context, params *HttpSessionsActionSetSessionTokenValueParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionSetSessionTokenValueResponse, error)

	// HttpSessionsActionUnsetActiveSessionWithResponse request
	HttpSessionsActionUnsetActiveSessionWithResponse(ctx context.Context, params *HttpSessionsActionUnsetActiveSessionParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionUnsetActiveSessionResponse, error)

	// HttpSessionsViewActiveSessionWithResponse request
	HttpSessionsViewActiveSessionWithResponse(ctx context.Context, params *HttpSessionsViewActiveSessionParams, reqEditors ...RequestEditorFn) (*HttpSessionsViewActiveSessionResponse, error)

	// HttpSessionsViewDefaultSessionTokensWithResponse request
	HttpSessionsViewDefaultSessionTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HttpSessionsViewDefaultSessionTokensResponse, error)

	// HttpSessionsViewSessionTokensWithResponse request
	HttpSessionsViewSessionTokensWithResponse(ctx context.Context, params *HttpSessionsViewSessionTokensParams, reqEditors ...RequestEditorFn) (*HttpSessionsViewSessionTokensResponse, error)

	// HttpSessionsViewSessionsWithResponse request
	HttpSessionsViewSessionsWithResponse(ctx context.Context, params *HttpSessionsViewSessionsParams, reqEditors ...RequestEditorFn) (*HttpSessionsViewSessionsResponse, error)

	// HttpSessionsViewSitesWithResponse request
	HttpSessionsViewSitesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HttpSessionsViewSitesResponse, error)

	// HudActionLogWithResponse request
	HudActionLogWithResponse(ctx context.Context, params *HudActionLogParams, reqEditors ...RequestEditorFn) (*HudActionLogResponse, error)

	// HudActionRecordRequestWithResponse request
	HudActionRecordRequestWithResponse(ctx context.Context, params *HudActionRecordRequestParams, reqEditors ...RequestEditorFn) (*HudActionRecordRequestResponse, error)

	// HudActionResetTutorialTasksWithResponse request
	HudActionResetTutorialTasksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudActionResetTutorialTasksResponse, error)

	// HudActionSetOptionBaseDirectoryWithResponse request
	HudActionSetOptionBaseDirectoryWithResponse(ctx context.Context, params *HudActionSetOptionBaseDirectoryParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionBaseDirectoryResponse, error)

	// HudActionSetOptionDevelopmentModeWithResponse request
	HudActionSetOptionDevelopmentModeWithResponse(ctx context.Context, params *HudActionSetOptionDevelopmentModeParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionDevelopmentModeResponse, error)

	// HudActionSetOptionEnableOnDomainMsgsWithResponse request
	HudActionSetOptionEnableOnDomainMsgsWithResponse(ctx context.Context, params *HudActionSetOptionEnableOnDomainMsgsParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionEnableOnDomainMsgsResponse, error)

	// HudActionSetOptionEnabledForDaemonWithResponse request
	HudActionSetOptionEnabledForDaemonWithResponse(ctx context.Context, params *HudActionSetOptionEnabledForDaemonParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionEnabledForDaemonResponse, error)

	// HudActionSetOptionEnabledForDesktopWithResponse request
	HudActionSetOptionEnabledForDesktopWithResponse(ctx context.Context, params *HudActionSetOptionEnabledForDesktopParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionEnabledForDesktopResponse, error)

	// HudActionSetOptionInScopeOnlyWithResponse request
	HudActionSetOptionInScopeOnlyWithResponse(ctx context.Context, params *HudActionSetOptionInScopeOnlyParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionInScopeOnlyResponse, error)

	// HudActionSetOptionRemoveCSPWithResponse request
	HudActionSetOptionRemoveCSPWithResponse(ctx context.Context, params *HudActionSetOptionRemoveCSPParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionRemoveCSPResponse, error)

	// HudActionSetOptionShowWelcomeScreenWithResponse request
	HudActionSetOptionShowWelcomeScreenWithResponse(ctx context.Context, params *HudActionSetOptionShowWelcomeScreenParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionShowWelcomeScreenResponse, error)

	// HudActionSetOptionSkipTutorialTasksWithResponse request
	HudActionSetOptionSkipTutorialTasksWithResponse(ctx context.Context, params *HudActionSetOptionSkipTutorialTasksParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionSkipTutorialTasksResponse, error)

	// HudActionSetOptionTutorialTaskDoneWithResponse request
	HudActionSetOptionTutorialTaskDoneWithResponse(ctx context.Context, params *HudActionSetOptionTutorialTaskDoneParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionTutorialTaskDoneResponse, error)

	// HudActionSetOptionTutorialTestModeWithResponse request
	HudActionSetOptionTutorialTestModeWithResponse(ctx context.Context, params *HudActionSetOptionTutorialTestModeParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionTutorialTestModeResponse, error)

	// HudActionSetUiOptionWithResponse request
	HudActionSetUiOptionWithResponse(ctx context.Context, params *HudActionSetUiOptionParams, reqEditors ...RequestEditorFn) (*HudActionSetUiOptionResponse, error)

	// HudViewGetUiOptionWithResponse request
	HudViewGetUiOptionWithResponse(ctx context.Context, params *HudViewGetUiOptionParams, reqEditors ...RequestEditorFn) (*HudViewGetUiOptionResponse, error)

	// HudViewHeartbeatWithResponse request
	HudViewHeartbeatWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewHeartbeatResponse, error)

	// HudViewHudAlertDataWithResponse request
	HudViewHudAlertDataWithResponse(ctx context.Context, params *HudViewHudAlertDataParams, reqEditors ...RequestEditorFn) (*HudViewHudAlertDataResponse, error)

	// HudViewOptionAllowUnsafeEvalWithResponse request
	HudViewOptionAllowUnsafeEvalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionAllowUnsafeEvalResponse, error)

	// HudViewOptionBaseDirectoryWithResponse request
	HudViewOptionBaseDirectoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionBaseDirectoryResponse, error)

	// HudViewOptionDevelopmentModeWithResponse request
	HudViewOptionDevelopmentModeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionDevelopmentModeResponse, error)

	// HudViewOptionEnableOnDomainMsgsWithResponse request
	HudViewOptionEnableOnDomainMsgsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionEnableOnDomainMsgsResponse, error)

	// HudViewOptionEnableTelemetryWithResponse request
	HudViewOptionEnableTelemetryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionEnableTelemetryResponse, error)

	// HudViewOptionEnabledForDaemonWithResponse request
	HudViewOptionEnabledForDaemonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionEnabledForDaemonResponse, error)

	// HudViewOptionEnabledForDesktopWithResponse request
	HudViewOptionEnabledForDesktopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionEnabledForDesktopResponse, error)

	// HudViewOptionInScopeOnlyWithResponse request
	HudViewOptionInScopeOnlyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionInScopeOnlyResponse, error)

	// HudViewOptionRemoveCSPWithResponse request
	HudViewOptionRemoveCSPWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionRemoveCSPResponse, error)

	// HudViewOptionShowWelcomeScreenWithResponse request
	HudViewOptionShowWelcomeScreenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionShowWelcomeScreenResponse, error)

	// HudViewOptionSkipTutorialTasksWithResponse request
	HudViewOptionSkipTutorialTasksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionSkipTutorialTasksResponse, error)

	// HudViewOptionTutorialHostWithResponse request
	HudViewOptionTutorialHostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionTutorialHostResponse, error)

	// HudViewOptionTutorialPortWithResponse request
	HudViewOptionTutorialPortWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionTutorialPortResponse, error)

	// HudViewOptionTutorialTasksDoneWithResponse request
	HudViewOptionTutorialTasksDoneWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionTutorialTasksDoneResponse, error)

	// HudViewOptionTutorialTestModeWithResponse request
	HudViewOptionTutorialTestModeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionTutorialTestModeResponse, error)

	// HudViewOptionTutorialUpdatesWithResponse request
	HudViewOptionTutorialUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionTutorialUpdatesResponse, error)

	// HudViewTutorialUpdatesWithResponse request
	HudViewTutorialUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewTutorialUpdatesResponse, error)

	// HudViewUpgradedDomainsWithResponse request
	HudViewUpgradedDomainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewUpgradedDomainsResponse, error)

	// LocalProxiesActionAddAdditionalProxyWithResponse request
	LocalProxiesActionAddAdditionalProxyWithResponse(ctx context.Context, params *LocalProxiesActionAddAdditionalProxyParams, reqEditors ...RequestEditorFn) (*LocalProxiesActionAddAdditionalProxyResponse, error)

	// LocalProxiesActionRemoveAdditionalProxyWithResponse request
	LocalProxiesActionRemoveAdditionalProxyWithResponse(ctx context.Context, params *LocalProxiesActionRemoveAdditionalProxyParams, reqEditors ...RequestEditorFn) (*LocalProxiesActionRemoveAdditionalProxyResponse, error)

	// LocalProxiesViewAdditionalProxiesWithResponse request
	LocalProxiesViewAdditionalProxiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LocalProxiesViewAdditionalProxiesResponse, error)

	// NetworkActionAddAliasWithResponse request
	NetworkActionAddAliasWithResponse(ctx context.Context, params *NetworkActionAddAliasParams, reqEditors ...RequestEditorFn) (*NetworkActionAddAliasResponse, error)

	// NetworkActionAddHttpProxyExclusionWithResponse request
	NetworkActionAddHttpProxyExclusionWithResponse(ctx context.Context, params *NetworkActionAddHttpProxyExclusionParams, reqEditors ...RequestEditorFn) (*NetworkActionAddHttpProxyExclusionResponse, error)

	// NetworkActionAddLocalServerWithResponse request
	NetworkActionAddLocalServerWithResponse(ctx context.Context, params *NetworkActionAddLocalServerParams, reqEditors ...RequestEditorFn) (*NetworkActionAddLocalServerResponse, error)

	// NetworkActionAddPassThroughWithResponse request
	NetworkActionAddPassThroughWithResponse(ctx context.Context, params *NetworkActionAddPassThroughParams, reqEditors ...RequestEditorFn) (*NetworkActionAddPassThroughResponse, error)

	// NetworkActionAddPkcs12ClientCertificateWithResponse request
	NetworkActionAddPkcs12ClientCertificateWithResponse(ctx context.Context, params *NetworkActionAddPkcs12ClientCertificateParams, reqEditors ...RequestEditorFn) (*NetworkActionAddPkcs12ClientCertificateResponse, error)

	// NetworkActionAddRateLimitRuleWithResponse request
	NetworkActionAddRateLimitRuleWithResponse(ctx context.Context, params *NetworkActionAddRateLimitRuleParams, reqEditors ...RequestEditorFn) (*NetworkActionAddRateLimitRuleResponse, error)

	// NetworkActionGenerateRootCaCertWithResponse request
	NetworkActionGenerateRootCaCertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkActionGenerateRootCaCertResponse, error)

	// NetworkActionImportRootCaCertWithResponse request
	NetworkActionImportRootCaCertWithResponse(ctx context.Context, params *NetworkActionImportRootCaCertParams, reqEditors ...RequestEditorFn) (*NetworkActionImportRootCaCertResponse, error)

	// NetworkActionRemoveAliasWithResponse request
	NetworkActionRemoveAliasWithResponse(ctx context.Context, params *NetworkActionRemoveAliasParams, reqEditors ...RequestEditorFn) (*NetworkActionRemoveAliasResponse, error)

	// NetworkActionRemoveHttpProxyExclusionWithResponse request
	NetworkActionRemoveHttpProxyExclusionWithResponse(ctx context.Context, params *NetworkActionRemoveHttpProxyExclusionParams, reqEditors ...RequestEditorFn) (*NetworkActionRemoveHttpProxyExclusionResponse, error)

	// NetworkActionRemoveLocalServerWithResponse request
	NetworkActionRemoveLocalServerWithResponse(ctx context.Context, params *NetworkActionRemoveLocalServerParams, reqEditors ...RequestEditorFn) (*NetworkActionRemoveLocalServerResponse, error)

	// NetworkActionRemovePassThroughWithResponse request
	NetworkActionRemovePassThroughWithResponse(ctx context.Context, params *NetworkActionRemovePassThroughParams, reqEditors ...RequestEditorFn) (*NetworkActionRemovePassThroughResponse, error)

	// NetworkActionRemoveRateLimitRuleWithResponse request
	NetworkActionRemoveRateLimitRuleWithResponse(ctx context.Context, params *NetworkActionRemoveRateLimitRuleParams, reqEditors ...RequestEditorFn) (*NetworkActionRemoveRateLimitRuleResponse, error)

	// NetworkActionSetAliasEnabledWithResponse request
	NetworkActionSetAliasEnabledWithResponse(ctx context.Context, params *NetworkActionSetAliasEnabledParams, reqEditors ...RequestEditorFn) (*NetworkActionSetAliasEnabledResponse, error)

	// NetworkActionSetConnectionTimeoutWithResponse request
	NetworkActionSetConnectionTimeoutWithResponse(ctx context.Context, params *NetworkActionSetConnectionTimeoutParams, reqEditors ...RequestEditorFn) (*NetworkActionSetConnectionTimeoutResponse, error)

	// NetworkActionSetDefaultUserAgentWithResponse request
	NetworkActionSetDefaultUserAgentWithResponse(ctx context.Context, params *NetworkActionSetDefaultUserAgentParams, reqEditors ...RequestEditorFn) (*NetworkActionSetDefaultUserAgentResponse, error)

	// NetworkActionSetDnsTtlSuccessfulQueriesWithResponse request
	NetworkActionSetDnsTtlSuccessfulQueriesWithResponse(ctx context.Context, params *NetworkActionSetDnsTtlSuccessfulQueriesParams, reqEditors ...RequestEditorFn) (*NetworkActionSetDnsTtlSuccessfulQueriesResponse, error)

	// NetworkActionSetHttpProxyWithResponse request
	NetworkActionSetHttpProxyWithResponse(ctx context.Context, params *NetworkActionSetHttpProxyParams, reqEditors ...RequestEditorFn) (*NetworkActionSetHttpProxyResponse, error)

	// NetworkActionSetHttpProxyAuthEnabledWithResponse request
	NetworkActionSetHttpProxyAuthEnabledWithResponse(ctx context.Context, params *NetworkActionSetHttpProxyAuthEnabledParams, reqEditors ...RequestEditorFn) (*NetworkActionSetHttpProxyAuthEnabledResponse, error)

	// NetworkActionSetHttpProxyEnabledWithResponse request
	NetworkActionSetHttpProxyEnabledWithResponse(ctx context.Context, params *NetworkActionSetHttpProxyEnabledParams, reqEditors ...RequestEditorFn) (*NetworkActionSetHttpProxyEnabledResponse, error)

	// NetworkActionSetHttpProxyExclusionEnabledWithResponse request
	NetworkActionSetHttpProxyExclusionEnabledWithResponse(ctx context.Context, params *NetworkActionSetHttpProxyExclusionEnabledParams, reqEditors ...RequestEditorFn) (*NetworkActionSetHttpProxyExclusionEnabledResponse, error)

	// NetworkActionSetPassThroughEnabledWithResponse request
	NetworkActionSetPassThroughEnabledWithResponse(ctx context.Context, params *NetworkActionSetPassThroughEnabledParams, reqEditors ...RequestEditorFn) (*NetworkActionSetPassThroughEnabledResponse, error)

	// NetworkActionSetRateLimitRuleEnabledWithResponse request
	NetworkActionSetRateLimitRuleEnabledWithResponse(ctx context.Context, params *NetworkActionSetRateLimitRuleEnabledParams, reqEditors ...RequestEditorFn) (*NetworkActionSetRateLimitRuleEnabledResponse, error)

	// NetworkActionSetRootCaCertValidityWithResponse request
	NetworkActionSetRootCaCertValidityWithResponse(ctx context.Context, params *NetworkActionSetRootCaCertValidityParams, reqEditors ...RequestEditorFn) (*NetworkActionSetRootCaCertValidityResponse, error)

	// NetworkActionSetServerCertValidityWithResponse request
	NetworkActionSetServerCertValidityWithResponse(ctx context.Context, params *NetworkActionSetServerCertValidityParams, reqEditors ...RequestEditorFn) (*NetworkActionSetServerCertValidityResponse, error)

	// NetworkActionSetSocksProxyWithResponse request
	NetworkActionSetSocksProxyWithResponse(ctx context.Context, params *NetworkActionSetSocksProxyParams, reqEditors ...RequestEditorFn) (*NetworkActionSetSocksProxyResponse, error)

	// NetworkActionSetSocksProxyEnabledWithResponse request
	NetworkActionSetSocksProxyEnabledWithResponse(ctx context.Context, params *NetworkActionSetSocksProxyEnabledParams, reqEditors ...RequestEditorFn) (*NetworkActionSetSocksProxyEnabledResponse, error)

	// NetworkActionSetUseClientCertificateWithResponse request
	NetworkActionSetUseClientCertificateWithResponse(ctx context.Context, params *NetworkActionSetUseClientCertificateParams, reqEditors ...RequestEditorFn) (*NetworkActionSetUseClientCertificateResponse, error)

	// NetworkActionSetUseGlobalHttpStateWithResponse request
	NetworkActionSetUseGlobalHttpStateWithResponse(ctx context.Context, params *NetworkActionSetUseGlobalHttpStateParams, reqEditors ...RequestEditorFn) (*NetworkActionSetUseGlobalHttpStateResponse, error)

	// NetworkViewGetAliasesWithResponse request
	NetworkViewGetAliasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetAliasesResponse, error)

	// NetworkViewGetConnectionTimeoutWithResponse request
	NetworkViewGetConnectionTimeoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetConnectionTimeoutResponse, error)

	// NetworkViewGetDefaultUserAgentWithResponse request
	NetworkViewGetDefaultUserAgentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetDefaultUserAgentResponse, error)

	// NetworkViewGetDnsTtlSuccessfulQueriesWithResponse request
	NetworkViewGetDnsTtlSuccessfulQueriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetDnsTtlSuccessfulQueriesResponse, error)

	// NetworkViewGetHttpProxyWithResponse request
	NetworkViewGetHttpProxyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetHttpProxyResponse, error)

	// NetworkViewGetHttpProxyExclusionsWithResponse request
	NetworkViewGetHttpProxyExclusionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetHttpProxyExclusionsResponse, error)

	// NetworkViewGetLocalServersWithResponse request
	NetworkViewGetLocalServersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetLocalServersResponse, error)

	// NetworkViewGetPassThroughsWithResponse request
	NetworkViewGetPassThroughsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetPassThroughsResponse, error)

	// NetworkViewGetRateLimitRulesWithResponse request
	NetworkViewGetRateLimitRulesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetRateLimitRulesResponse, error)

	// NetworkViewGetRootCaCertValidityWithResponse request
	NetworkViewGetRootCaCertValidityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetRootCaCertValidityResponse, error)

	// NetworkViewGetServerCertValidityWithResponse request
	NetworkViewGetServerCertValidityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetServerCertValidityResponse, error)

	// NetworkViewGetSocksProxyWithResponse request
	NetworkViewGetSocksProxyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetSocksProxyResponse, error)

	// NetworkViewIsHttpProxyAuthEnabledWithResponse request
	NetworkViewIsHttpProxyAuthEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewIsHttpProxyAuthEnabledResponse, error)

	// NetworkViewIsHttpProxyEnabledWithResponse request
	NetworkViewIsHttpProxyEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewIsHttpProxyEnabledResponse, error)

	// NetworkViewIsSocksProxyEnabledWithResponse request
	NetworkViewIsSocksProxyEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewIsSocksProxyEnabledResponse, error)

	// NetworkViewIsUseGlobalHttpStateWithResponse request
	NetworkViewIsUseGlobalHttpStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewIsUseGlobalHttpStateResponse, error)

	// OastActionSetActiveScanServiceWithResponse request
	OastActionSetActiveScanServiceWithResponse(ctx context.Context, params *OastActionSetActiveScanServiceParams, reqEditors ...RequestEditorFn) (*OastActionSetActiveScanServiceResponse, error)

	// OastActionSetBoastOptionsWithResponse request
	OastActionSetBoastOptionsWithResponse(ctx context.Context, params *OastActionSetBoastOptionsParams, reqEditors ...RequestEditorFn) (*OastActionSetBoastOptionsResponse, error)

	// OastActionSetCallbackOptionsWithResponse request
	OastActionSetCallbackOptionsWithResponse(ctx context.Context, params *OastActionSetCallbackOptionsParams, reqEditors ...RequestEditorFn) (*OastActionSetCallbackOptionsResponse, error)

	// OastActionSetDaysToKeepRecordsWithResponse request
	OastActionSetDaysToKeepRecordsWithResponse(ctx context.Context, params *OastActionSetDaysToKeepRecordsParams, reqEditors ...RequestEditorFn) (*OastActionSetDaysToKeepRecordsResponse, error)

	// OastActionSetInteractshOptionsWithResponse request
	OastActionSetInteractshOptionsWithResponse(ctx context.Context, params *OastActionSetInteractshOptionsParams, reqEditors ...RequestEditorFn) (*OastActionSetInteractshOptionsResponse, error)

	// OastViewGetActiveScanServiceWithResponse request
	OastViewGetActiveScanServiceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OastViewGetActiveScanServiceResponse, error)

	// OastViewGetBoastOptionsWithResponse request
	OastViewGetBoastOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OastViewGetBoastOptionsResponse, error)

	// OastViewGetCallbackOptionsWithResponse request
	OastViewGetCallbackOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OastViewGetCallbackOptionsResponse, error)

	// OastViewGetDaysToKeepRecordsWithResponse request
	OastViewGetDaysToKeepRecordsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OastViewGetDaysToKeepRecordsResponse, error)

	// OastViewGetInteractshOptionsWithResponse request
	OastViewGetInteractshOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OastViewGetInteractshOptionsResponse, error)

	// OastViewGetServicesWithResponse request
	OastViewGetServicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OastViewGetServicesResponse, error)

	// OpenapiActionImportFileWithResponse request
	OpenapiActionImportFileWithResponse(ctx context.Context, params *OpenapiActionImportFileParams, reqEditors ...RequestEditorFn) (*OpenapiActionImportFileResponse, error)

	// OpenapiActionImportUrlWithResponse request
	OpenapiActionImportUrlWithResponse(ctx context.Context, params *OpenapiActionImportUrlParams, reqEditors ...RequestEditorFn) (*OpenapiActionImportUrlResponse, error)

	// ParamDiggerActionHelloWorldWithResponse request
	ParamDiggerActionHelloWorldWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ParamDiggerActionHelloWorldResponse, error)

	// ParamsViewParamsWithResponse request
	ParamsViewParamsWithResponse(ctx context.Context, params *ParamsViewParamsParams, reqEditors ...RequestEditorFn) (*ParamsViewParamsResponse, error)

	// PnhActionMonitorWithResponse request
	PnhActionMonitorWithResponse(ctx context.Context, params *PnhActionMonitorParams, reqEditors ...RequestEditorFn) (*PnhActionMonitorResponse, error)

	// PnhActionOracleWithResponse request
	PnhActionOracleWithResponse(ctx context.Context, params *PnhActionOracleParams, reqEditors ...RequestEditorFn) (*PnhActionOracleResponse, error)

	// PnhActionStartMonitoringWithResponse request
	PnhActionStartMonitoringWithResponse(ctx context.Context, params *PnhActionStartMonitoringParams, reqEditors ...RequestEditorFn) (*PnhActionStartMonitoringResponse, error)

	// PnhActionStopMonitoringWithResponse request
	PnhActionStopMonitoringWithResponse(ctx context.Context, params *PnhActionStopMonitoringParams, reqEditors ...RequestEditorFn) (*PnhActionStopMonitoringResponse, error)

	// PostmanActionImportFileWithResponse request
	PostmanActionImportFileWithResponse(ctx context.Context, params *PostmanActionImportFileParams, reqEditors ...RequestEditorFn) (*PostmanActionImportFileResponse, error)

	// PostmanActionImportUrlWithResponse request
	PostmanActionImportUrlWithResponse(ctx context.Context, params *PostmanActionImportUrlParams, reqEditors ...RequestEditorFn) (*PostmanActionImportUrlResponse, error)

	// PscanActionClearQueueWithResponse request
	PscanActionClearQueueWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanActionClearQueueResponse, error)

	// PscanActionDisableAllScannersWithResponse request
	PscanActionDisableAllScannersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanActionDisableAllScannersResponse, error)

	// PscanActionDisableAllTagsWithResponse request
	PscanActionDisableAllTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanActionDisableAllTagsResponse, error)

	// PscanActionDisableScannersWithResponse request
	PscanActionDisableScannersWithResponse(ctx context.Context, params *PscanActionDisableScannersParams, reqEditors ...RequestEditorFn) (*PscanActionDisableScannersResponse, error)

	// PscanActionEnableAllScannersWithResponse request
	PscanActionEnableAllScannersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanActionEnableAllScannersResponse, error)

	// PscanActionEnableAllTagsWithResponse request
	PscanActionEnableAllTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanActionEnableAllTagsResponse, error)

	// PscanActionEnableScannersWithResponse request
	PscanActionEnableScannersWithResponse(ctx context.Context, params *PscanActionEnableScannersParams, reqEditors ...RequestEditorFn) (*PscanActionEnableScannersResponse, error)

	// PscanActionSetEnabledWithResponse request
	PscanActionSetEnabledWithResponse(ctx context.Context, params *PscanActionSetEnabledParams, reqEditors ...RequestEditorFn) (*PscanActionSetEnabledResponse, error)

	// PscanActionSetMaxAlertsPerRuleWithResponse request
	PscanActionSetMaxAlertsPerRuleWithResponse(ctx context.Context, params *PscanActionSetMaxAlertsPerRuleParams, reqEditors ...RequestEditorFn) (*PscanActionSetMaxAlertsPerRuleResponse, error)

	// PscanActionSetScanOnlyInScopeWithResponse request
	PscanActionSetScanOnlyInScopeWithResponse(ctx context.Context, params *PscanActionSetScanOnlyInScopeParams, reqEditors ...RequestEditorFn) (*PscanActionSetScanOnlyInScopeResponse, error)

	// PscanActionSetScannerAlertThresholdWithResponse request
	PscanActionSetScannerAlertThresholdWithResponse(ctx context.Context, params *PscanActionSetScannerAlertThresholdParams, reqEditors ...RequestEditorFn) (*PscanActionSetScannerAlertThresholdResponse, error)

	// PscanViewCurrentRuleWithResponse request
	PscanViewCurrentRuleWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanViewCurrentRuleResponse, error)

	// PscanViewCurrentTasksWithResponse request
	PscanViewCurrentTasksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanViewCurrentTasksResponse, error)

	// PscanViewMaxAlertsPerRuleWithResponse request
	PscanViewMaxAlertsPerRuleWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanViewMaxAlertsPerRuleResponse, error)

	// PscanViewRecordsToScanWithResponse request
	PscanViewRecordsToScanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanViewRecordsToScanResponse, error)

	// PscanViewScanOnlyInScopeWithResponse request
	PscanViewScanOnlyInScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanViewScanOnlyInScopeResponse, error)

	// PscanViewScannersWithResponse request
	PscanViewScannersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanViewScannersResponse, error)

	// ReplacerActionAddRuleWithResponse request
	ReplacerActionAddRuleWithResponse(ctx context.Context, params *ReplacerActionAddRuleParams, reqEditors ...RequestEditorFn) (*ReplacerActionAddRuleResponse, error)

	// ReplacerActionRemoveRuleWithResponse request
	ReplacerActionRemoveRuleWithResponse(ctx context.Context, params *ReplacerActionRemoveRuleParams, reqEditors ...RequestEditorFn) (*ReplacerActionRemoveRuleResponse, error)

	// ReplacerActionSetEnabledWithResponse request
	ReplacerActionSetEnabledWithResponse(ctx context.Context, params *ReplacerActionSetEnabledParams, reqEditors ...RequestEditorFn) (*ReplacerActionSetEnabledResponse, error)

	// ReplacerViewRulesWithResponse request
	ReplacerViewRulesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReplacerViewRulesResponse, error)

	// ReportsActionGenerateWithResponse request
	ReportsActionGenerateWithResponse(ctx context.Context, params *ReportsActionGenerateParams, reqEditors ...RequestEditorFn) (*ReportsActionGenerateResponse, error)

	// ReportsViewTemplateDetailsWithResponse request
	ReportsViewTemplateDetailsWithResponse(ctx context.Context, params *ReportsViewTemplateDetailsParams, reqEditors ...RequestEditorFn) (*ReportsViewTemplateDetailsResponse, error)

	// ReportsViewTemplatesWithResponse request
	ReportsViewTemplatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReportsViewTemplatesResponse, error)

	// RetestActionRetestWithResponse request
	RetestActionRetestWithResponse(ctx context.Context, params *RetestActionRetestParams, reqEditors ...RequestEditorFn) (*RetestActionRetestResponse, error)

	// RevealActionSetRevealWithResponse request
	RevealActionSetRevealWithResponse(ctx context.Context, params *RevealActionSetRevealParams, reqEditors ...RequestEditorFn) (*RevealActionSetRevealResponse, error)

	// RevealViewRevealWithResponse request
	RevealViewRevealWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RevealViewRevealResponse, error)

	// RevisitActionRevisitSiteOffWithResponse request
	RevisitActionRevisitSiteOffWithResponse(ctx context.Context, params *RevisitActionRevisitSiteOffParams, reqEditors ...RequestEditorFn) (*RevisitActionRevisitSiteOffResponse, error)

	// RevisitActionRevisitSiteOnWithResponse request
	RevisitActionRevisitSiteOnWithResponse(ctx context.Context, params *RevisitActionRevisitSiteOnParams, reqEditors ...RequestEditorFn) (*RevisitActionRevisitSiteOnResponse, error)

	// RevisitViewRevisitListWithResponse request
	RevisitViewRevisitListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RevisitViewRevisitListResponse, error)

	// RuleConfigActionResetAllRuleConfigValuesWithResponse request
	RuleConfigActionResetAllRuleConfigValuesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RuleConfigActionResetAllRuleConfigValuesResponse, error)

	// RuleConfigActionResetRuleConfigValueWithResponse request
	RuleConfigActionResetRuleConfigValueWithResponse(ctx context.Context, params *RuleConfigActionResetRuleConfigValueParams, reqEditors ...RequestEditorFn) (*RuleConfigActionResetRuleConfigValueResponse, error)

	// RuleConfigActionSetRuleConfigValueWithResponse request
	RuleConfigActionSetRuleConfigValueWithResponse(ctx context.Context, params *RuleConfigActionSetRuleConfigValueParams, reqEditors ...RequestEditorFn) (*RuleConfigActionSetRuleConfigValueResponse, error)

	// RuleConfigViewAllRuleConfigsWithResponse request
	RuleConfigViewAllRuleConfigsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RuleConfigViewAllRuleConfigsResponse, error)

	// RuleConfigViewRuleConfigValueWithResponse request
	RuleConfigViewRuleConfigValueWithResponse(ctx context.Context, params *RuleConfigViewRuleConfigValueParams, reqEditors ...RequestEditorFn) (*RuleConfigViewRuleConfigValueResponse, error)

	// ScriptActionClearGlobalCustomVarWithResponse request
	ScriptActionClearGlobalCustomVarWithResponse(ctx context.Context, params *ScriptActionClearGlobalCustomVarParams, reqEditors ...RequestEditorFn) (*ScriptActionClearGlobalCustomVarResponse, error)

	// ScriptActionClearGlobalVarWithResponse request
	ScriptActionClearGlobalVarWithResponse(ctx context.Context, params *ScriptActionClearGlobalVarParams, reqEditors ...RequestEditorFn) (*ScriptActionClearGlobalVarResponse, error)

	// ScriptActionClearGlobalVarsWithResponse request
	ScriptActionClearGlobalVarsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScriptActionClearGlobalVarsResponse, error)

	// ScriptActionClearScriptCustomVarWithResponse request
	ScriptActionClearScriptCustomVarWithResponse(ctx context.Context, params *ScriptActionClearScriptCustomVarParams, reqEditors ...RequestEditorFn) (*ScriptActionClearScriptCustomVarResponse, error)

	// ScriptActionClearScriptVarWithResponse request
	ScriptActionClearScriptVarWithResponse(ctx context.Context, params *ScriptActionClearScriptVarParams, reqEditors ...RequestEditorFn) (*ScriptActionClearScriptVarResponse, error)

	// ScriptActionClearScriptVarsWithResponse request
	ScriptActionClearScriptVarsWithResponse(ctx context.Context, params *ScriptActionClearScriptVarsParams, reqEditors ...RequestEditorFn) (*ScriptActionClearScriptVarsResponse, error)

	// ScriptActionDisableWithResponse request
	ScriptActionDisableWithResponse(ctx context.Context, params *ScriptActionDisableParams, reqEditors ...RequestEditorFn) (*ScriptActionDisableResponse, error)

	// ScriptActionEnableWithResponse request
	ScriptActionEnableWithResponse(ctx context.Context, params *ScriptActionEnableParams, reqEditors ...RequestEditorFn) (*ScriptActionEnableResponse, error)

	// ScriptActionLoadWithResponse request
	ScriptActionLoadWithResponse(ctx context.Context, params *ScriptActionLoadParams, reqEditors ...RequestEditorFn) (*ScriptActionLoadResponse, error)

	// ScriptActionRemoveWithResponse request
	ScriptActionRemoveWithResponse(ctx context.Context, params *ScriptActionRemoveParams, reqEditors ...RequestEditorFn) (*ScriptActionRemoveResponse, error)

	// ScriptActionRunStandAloneScriptWithResponse request
	ScriptActionRunStandAloneScriptWithResponse(ctx context.Context, params *ScriptActionRunStandAloneScriptParams, reqEditors ...RequestEditorFn) (*ScriptActionRunStandAloneScriptResponse, error)

	// ScriptActionSetGlobalVarWithResponse request
	ScriptActionSetGlobalVarWithResponse(ctx context.Context, params *ScriptActionSetGlobalVarParams, reqEditors ...RequestEditorFn) (*ScriptActionSetGlobalVarResponse, error)

	// ScriptActionSetScriptVarWithResponse request
	ScriptActionSetScriptVarWithResponse(ctx context.Context, params *ScriptActionSetScriptVarParams, reqEditors ...RequestEditorFn) (*ScriptActionSetScriptVarResponse, error)

	// ScriptViewGlobalCustomVarWithResponse request
	ScriptViewGlobalCustomVarWithResponse(ctx context.Context, params *ScriptViewGlobalCustomVarParams, reqEditors ...RequestEditorFn) (*ScriptViewGlobalCustomVarResponse, error)

	// ScriptViewGlobalCustomVarsWithResponse request
	ScriptViewGlobalCustomVarsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScriptViewGlobalCustomVarsResponse, error)

	// ScriptViewGlobalVarWithResponse request
	ScriptViewGlobalVarWithResponse(ctx context.Context, params *ScriptViewGlobalVarParams, reqEditors ...RequestEditorFn) (*ScriptViewGlobalVarResponse, error)

	// ScriptViewGlobalVarsWithResponse request
	ScriptViewGlobalVarsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScriptViewGlobalVarsResponse, error)

	// ScriptViewListEnginesWithResponse request
	ScriptViewListEnginesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScriptViewListEnginesResponse, error)

	// ScriptViewListScriptsWithResponse request
	ScriptViewListScriptsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScriptViewListScriptsResponse, error)

	// ScriptViewListTypesWithResponse request
	ScriptViewListTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScriptViewListTypesResponse, error)

	// ScriptViewScriptCustomVarWithResponse request
	ScriptViewScriptCustomVarWithResponse(ctx context.Context, params *ScriptViewScriptCustomVarParams, reqEditors ...RequestEditorFn) (*ScriptViewScriptCustomVarResponse, error)

	// ScriptViewScriptCustomVarsWithResponse request
	ScriptViewScriptCustomVarsWithResponse(ctx context.Context, params *ScriptViewScriptCustomVarsParams, reqEditors ...RequestEditorFn) (*ScriptViewScriptCustomVarsResponse, error)

	// ScriptViewScriptVarWithResponse request
	ScriptViewScriptVarWithResponse(ctx context.Context, params *ScriptViewScriptVarParams, reqEditors ...RequestEditorFn) (*ScriptViewScriptVarResponse, error)

	// ScriptViewScriptVarsWithResponse request
	ScriptViewScriptVarsWithResponse(ctx context.Context, params *ScriptViewScriptVarsParams, reqEditors ...RequestEditorFn) (*ScriptViewScriptVarsResponse, error)

	// SearchViewMessagesByHeaderRegexWithResponse request
	SearchViewMessagesByHeaderRegexWithResponse(ctx context.Context, params *SearchViewMessagesByHeaderRegexParams, reqEditors ...RequestEditorFn) (*SearchViewMessagesByHeaderRegexResponse, error)

	// SearchViewMessagesByNoteRegexWithResponse request
	SearchViewMessagesByNoteRegexWithResponse(ctx context.Context, params *SearchViewMessagesByNoteRegexParams, reqEditors ...RequestEditorFn) (*SearchViewMessagesByNoteRegexResponse, error)

	// SearchViewMessagesByRequestRegexWithResponse request
	SearchViewMessagesByRequestRegexWithResponse(ctx context.Context, params *SearchViewMessagesByRequestRegexParams, reqEditors ...RequestEditorFn) (*SearchViewMessagesByRequestRegexResponse, error)

	// SearchViewMessagesByResponseRegexWithResponse request
	SearchViewMessagesByResponseRegexWithResponse(ctx context.Context, params *SearchViewMessagesByResponseRegexParams, reqEditors ...RequestEditorFn) (*SearchViewMessagesByResponseRegexResponse, error)

	// SearchViewMessagesByTagRegexWithResponse request
	SearchViewMessagesByTagRegexWithResponse(ctx context.Context, params *SearchViewMessagesByTagRegexParams, reqEditors ...RequestEditorFn) (*SearchViewMessagesByTagRegexResponse, error)

	// SearchViewMessagesByUrlRegexWithResponse request
	SearchViewMessagesByUrlRegexWithResponse(ctx context.Context, params *SearchViewMessagesByUrlRegexParams, reqEditors ...RequestEditorFn) (*SearchViewMessagesByUrlRegexResponse, error)

	// SearchViewUrlsByHeaderRegexWithResponse request
	SearchViewUrlsByHeaderRegexWithResponse(ctx context.Context, params *SearchViewUrlsByHeaderRegexParams, reqEditors ...RequestEditorFn) (*SearchViewUrlsByHeaderRegexResponse, error)

	// SearchViewUrlsByNoteRegexWithResponse request
	SearchViewUrlsByNoteRegexWithResponse(ctx context.Context, params *SearchViewUrlsByNoteRegexParams, reqEditors ...RequestEditorFn) (*SearchViewUrlsByNoteRegexResponse, error)

	// SearchViewUrlsByRequestRegexWithResponse request
	SearchViewUrlsByRequestRegexWithResponse(ctx context.Context, params *SearchViewUrlsByRequestRegexParams, reqEditors ...RequestEditorFn) (*SearchViewUrlsByRequestRegexResponse, error)

	// SearchViewUrlsByResponseRegexWithResponse request
	SearchViewUrlsByResponseRegexWithResponse(ctx context.Context, params *SearchViewUrlsByResponseRegexParams, reqEditors ...RequestEditorFn) (*SearchViewUrlsByResponseRegexResponse, error)

	// SearchViewUrlsByTagRegexWithResponse request
	SearchViewUrlsByTagRegexWithResponse(ctx context.Context, params *SearchViewUrlsByTagRegexParams, reqEditors ...RequestEditorFn) (*SearchViewUrlsByTagRegexResponse, error)

	// SearchViewUrlsByUrlRegexWithResponse request
	SearchViewUrlsByUrlRegexWithResponse(ctx context.Context, params *SearchViewUrlsByUrlRegexParams, reqEditors ...RequestEditorFn) (*SearchViewUrlsByUrlRegexResponse, error)

	// SeleniumActionAddBrowserArgumentWithResponse request
	SeleniumActionAddBrowserArgumentWithResponse(ctx context.Context, params *SeleniumActionAddBrowserArgumentParams, reqEditors ...RequestEditorFn) (*SeleniumActionAddBrowserArgumentResponse, error)

	// SeleniumActionLaunchBrowserWithResponse request
	SeleniumActionLaunchBrowserWithResponse(ctx context.Context, params *SeleniumActionLaunchBrowserParams, reqEditors ...RequestEditorFn) (*SeleniumActionLaunchBrowserResponse, error)

	// SeleniumActionRemoveBrowserArgumentWithResponse request
	SeleniumActionRemoveBrowserArgumentWithResponse(ctx context.Context, params *SeleniumActionRemoveBrowserArgumentParams, reqEditors ...RequestEditorFn) (*SeleniumActionRemoveBrowserArgumentResponse, error)

	// SeleniumActionSetBrowserArgumentEnabledWithResponse request
	SeleniumActionSetBrowserArgumentEnabledWithResponse(ctx context.Context, params *SeleniumActionSetBrowserArgumentEnabledParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetBrowserArgumentEnabledResponse, error)

	// SeleniumActionSetOptionChromeBinaryPathWithResponse request
	SeleniumActionSetOptionChromeBinaryPathWithResponse(ctx context.Context, params *SeleniumActionSetOptionChromeBinaryPathParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetOptionChromeBinaryPathResponse, error)

	// SeleniumActionSetOptionChromeDriverPathWithResponse request
	SeleniumActionSetOptionChromeDriverPathWithResponse(ctx context.Context, params *SeleniumActionSetOptionChromeDriverPathParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetOptionChromeDriverPathResponse, error)

	// SeleniumActionSetOptionFirefoxBinaryPathWithResponse request
	SeleniumActionSetOptionFirefoxBinaryPathWithResponse(ctx context.Context, params *SeleniumActionSetOptionFirefoxBinaryPathParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetOptionFirefoxBinaryPathResponse, error)

	// SeleniumActionSetOptionFirefoxDefaultProfileWithResponse request
	SeleniumActionSetOptionFirefoxDefaultProfileWithResponse(ctx context.Context, params *SeleniumActionSetOptionFirefoxDefaultProfileParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetOptionFirefoxDefaultProfileResponse, error)

	// SeleniumActionSetOptionFirefoxDriverPathWithResponse request
	SeleniumActionSetOptionFirefoxDriverPathWithResponse(ctx context.Context, params *SeleniumActionSetOptionFirefoxDriverPathParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetOptionFirefoxDriverPathResponse, error)

	// SeleniumActionSetOptionIeDriverPathWithResponse request
	SeleniumActionSetOptionIeDriverPathWithResponse(ctx context.Context, params *SeleniumActionSetOptionIeDriverPathParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetOptionIeDriverPathResponse, error)

	// SeleniumActionSetOptionLastDirectoryWithResponse request
	SeleniumActionSetOptionLastDirectoryWithResponse(ctx context.Context, params *SeleniumActionSetOptionLastDirectoryParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetOptionLastDirectoryResponse, error)

	// SeleniumActionSetOptionPhantomJsBinaryPathWithResponse request
	SeleniumActionSetOptionPhantomJsBinaryPathWithResponse(ctx context.Context, params *SeleniumActionSetOptionPhantomJsBinaryPathParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetOptionPhantomJsBinaryPathResponse, error)

	// SeleniumViewGetBrowserArgumentsWithResponse request
	SeleniumViewGetBrowserArgumentsWithResponse(ctx context.Context, params *SeleniumViewGetBrowserArgumentsParams, reqEditors ...RequestEditorFn) (*SeleniumViewGetBrowserArgumentsResponse, error)

	// SeleniumViewOptionBrowserExtensionsWithResponse request
	SeleniumViewOptionBrowserExtensionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionBrowserExtensionsResponse, error)

	// SeleniumViewOptionChromeBinaryPathWithResponse request
	SeleniumViewOptionChromeBinaryPathWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionChromeBinaryPathResponse, error)

	// SeleniumViewOptionChromeDriverPathWithResponse request
	SeleniumViewOptionChromeDriverPathWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionChromeDriverPathResponse, error)

	// SeleniumViewOptionFirefoxBinaryPathWithResponse request
	SeleniumViewOptionFirefoxBinaryPathWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionFirefoxBinaryPathResponse, error)

	// SeleniumViewOptionFirefoxDefaultProfileWithResponse request
	SeleniumViewOptionFirefoxDefaultProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionFirefoxDefaultProfileResponse, error)

	// SeleniumViewOptionFirefoxDriverPathWithResponse request
	SeleniumViewOptionFirefoxDriverPathWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionFirefoxDriverPathResponse, error)

	// SeleniumViewOptionIeDriverPathWithResponse request
	SeleniumViewOptionIeDriverPathWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionIeDriverPathResponse, error)

	// SeleniumViewOptionLastDirectoryWithResponse request
	SeleniumViewOptionLastDirectoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionLastDirectoryResponse, error)

	// SeleniumViewOptionPhantomJsBinaryPathWithResponse request
	SeleniumViewOptionPhantomJsBinaryPathWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionPhantomJsBinaryPathResponse, error)

	// SessionManagementActionSetSessionManagementMethodWithResponse request
	SessionManagementActionSetSessionManagementMethodWithResponse(ctx context.Context, params *SessionManagementActionSetSessionManagementMethodParams, reqEditors ...RequestEditorFn) (*SessionManagementActionSetSessionManagementMethodResponse, error)

	// SessionManagementViewGetSessionManagementMethodWithResponse request
	SessionManagementViewGetSessionManagementMethodWithResponse(ctx context.Context, params *SessionManagementViewGetSessionManagementMethodParams, reqEditors ...RequestEditorFn) (*SessionManagementViewGetSessionManagementMethodResponse, error)

	// SessionManagementViewGetSessionManagementMethodConfigParamsWithResponse request
	SessionManagementViewGetSessionManagementMethodConfigParamsWithResponse(ctx context.Context, params *SessionManagementViewGetSessionManagementMethodConfigParamsParams, reqEditors ...RequestEditorFn) (*SessionManagementViewGetSessionManagementMethodConfigParamsResponse, error)

	// SessionManagementViewGetSupportedSessionManagementMethodsWithResponse request
	SessionManagementViewGetSupportedSessionManagementMethodsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SessionManagementViewGetSupportedSessionManagementMethodsResponse, error)

	// SoapActionImportFileWithResponse request
	SoapActionImportFileWithResponse(ctx context.Context, params *SoapActionImportFileParams, reqEditors ...RequestEditorFn) (*SoapActionImportFileResponse, error)

	// SoapActionImportUrlWithResponse request
	SoapActionImportUrlWithResponse(ctx context.Context, params *SoapActionImportUrlParams, reqEditors ...RequestEditorFn) (*SoapActionImportUrlResponse, error)

	// SpiderActionAddDomainAlwaysInScopeWithResponse request
	SpiderActionAddDomainAlwaysInScopeWithResponse(ctx context.Context, params *SpiderActionAddDomainAlwaysInScopeParams, reqEditors ...RequestEditorFn) (*SpiderActionAddDomainAlwaysInScopeResponse, error)

	// SpiderActionClearExcludedFromScanWithResponse request
	SpiderActionClearExcludedFromScanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderActionClearExcludedFromScanResponse, error)

	// SpiderActionDisableAllDomainsAlwaysInScopeWithResponse request
	SpiderActionDisableAllDomainsAlwaysInScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderActionDisableAllDomainsAlwaysInScopeResponse, error)

	// SpiderActionEnableAllDomainsAlwaysInScopeWithResponse request
	SpiderActionEnableAllDomainsAlwaysInScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderActionEnableAllDomainsAlwaysInScopeResponse, error)

	// SpiderActionExcludeFromScanWithResponse request
	SpiderActionExcludeFromScanWithResponse(ctx context.Context, params *SpiderActionExcludeFromScanParams, reqEditors ...RequestEditorFn) (*SpiderActionExcludeFromScanResponse, error)

	// SpiderActionModifyDomainAlwaysInScopeWithResponse request
	SpiderActionModifyDomainAlwaysInScopeWithResponse(ctx context.Context, params *SpiderActionModifyDomainAlwaysInScopeParams, reqEditors ...RequestEditorFn) (*SpiderActionModifyDomainAlwaysInScopeResponse, error)

	// SpiderActionPauseWithResponse request
	SpiderActionPauseWithResponse(ctx context.Context, params *SpiderActionPauseParams, reqEditors ...RequestEditorFn) (*SpiderActionPauseResponse, error)

	// SpiderActionPauseAllScansWithResponse request
	SpiderActionPauseAllScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderActionPauseAllScansResponse, error)

	// SpiderActionRemoveAllScansWithResponse request
	SpiderActionRemoveAllScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderActionRemoveAllScansResponse, error)

	// SpiderActionRemoveDomainAlwaysInScopeWithResponse request
	SpiderActionRemoveDomainAlwaysInScopeWithResponse(ctx context.Context, params *SpiderActionRemoveDomainAlwaysInScopeParams, reqEditors ...RequestEditorFn) (*SpiderActionRemoveDomainAlwaysInScopeResponse, error)

	// SpiderActionRemoveScanWithResponse request
	SpiderActionRemoveScanWithResponse(ctx context.Context, params *SpiderActionRemoveScanParams, reqEditors ...RequestEditorFn) (*SpiderActionRemoveScanResponse, error)

	// SpiderActionResumeWithResponse request
	SpiderActionResumeWithResponse(ctx context.Context, params *SpiderActionResumeParams, reqEditors ...RequestEditorFn) (*SpiderActionResumeResponse, error)

	// SpiderActionResumeAllScansWithResponse request
	SpiderActionResumeAllScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderActionResumeAllScansResponse, error)

	// SpiderActionScanWithResponse request
	SpiderActionScanWithResponse(ctx context.Context, params *SpiderActionScanParams, reqEditors ...RequestEditorFn) (*SpiderActionScanResponse, error)

	// SpiderActionScanAsUserWithResponse request
	SpiderActionScanAsUserWithResponse(ctx context.Context, params *SpiderActionScanAsUserParams, reqEditors ...RequestEditorFn) (*SpiderActionScanAsUserResponse, error)

	// SpiderActionSetOptionAcceptCookiesWithResponse request
	SpiderActionSetOptionAcceptCookiesWithResponse(ctx context.Context, params *SpiderActionSetOptionAcceptCookiesParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionAcceptCookiesResponse, error)

	// SpiderActionSetOptionHandleODataParametersVisitedWithResponse request
	SpiderActionSetOptionHandleODataParametersVisitedWithResponse(ctx context.Context, params *SpiderActionSetOptionHandleODataParametersVisitedParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionHandleODataParametersVisitedResponse, error)

	// SpiderActionSetOptionHandleParametersWithResponse request
	SpiderActionSetOptionHandleParametersWithResponse(ctx context.Context, params *SpiderActionSetOptionHandleParametersParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionHandleParametersResponse, error)

	// SpiderActionSetOptionLogoutAvoidanceWithResponse request
	SpiderActionSetOptionLogoutAvoidanceWithResponse(ctx context.Context, params *SpiderActionSetOptionLogoutAvoidanceParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionLogoutAvoidanceResponse, error)

	// SpiderActionSetOptionMaxChildrenWithResponse request
	SpiderActionSetOptionMaxChildrenWithResponse(ctx context.Context, params *SpiderActionSetOptionMaxChildrenParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionMaxChildrenResponse, error)

	// SpiderActionSetOptionMaxDepthWithResponse request
	SpiderActionSetOptionMaxDepthWithResponse(ctx context.Context, params *SpiderActionSetOptionMaxDepthParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionMaxDepthResponse, error)

	// SpiderActionSetOptionMaxDurationWithResponse request
	SpiderActionSetOptionMaxDurationWithResponse(ctx context.Context, params *SpiderActionSetOptionMaxDurationParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionMaxDurationResponse, error)

	// SpiderActionSetOptionMaxParseSizeBytesWithResponse request
	SpiderActionSetOptionMaxParseSizeBytesWithResponse(ctx context.Context, params *SpiderActionSetOptionMaxParseSizeBytesParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionMaxParseSizeBytesResponse, error)

	// SpiderActionSetOptionMaxScansInUIWithResponse request
	SpiderActionSetOptionMaxScansInUIWithResponse(ctx context.Context, params *SpiderActionSetOptionMaxScansInUIParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionMaxScansInUIResponse, error)

	// SpiderActionSetOptionParseCommentsWithResponse request
	SpiderActionSetOptionParseCommentsWithResponse(ctx context.Context, params *SpiderActionSetOptionParseCommentsParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionParseCommentsResponse, error)

	// SpiderActionSetOptionParseDsStoreWithResponse request
	SpiderActionSetOptionParseDsStoreWithResponse(ctx context.Context, params *SpiderActionSetOptionParseDsStoreParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionParseDsStoreResponse, error)

	// SpiderActionSetOptionParseGitWithResponse request
	SpiderActionSetOptionParseGitWithResponse(ctx context.Context, params *SpiderActionSetOptionParseGitParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionParseGitResponse, error)

	// SpiderActionSetOptionParseRobotsTxtWithResponse request
	SpiderActionSetOptionParseRobotsTxtWithResponse(ctx context.Context, params *SpiderActionSetOptionParseRobotsTxtParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionParseRobotsTxtResponse, error)

	// SpiderActionSetOptionParseSVNEntriesWithResponse request
	SpiderActionSetOptionParseSVNEntriesWithResponse(ctx context.Context, params *SpiderActionSetOptionParseSVNEntriesParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionParseSVNEntriesResponse, error)

	// SpiderActionSetOptionParseSitemapXmlWithResponse request
	SpiderActionSetOptionParseSitemapXmlWithResponse(ctx context.Context, params *SpiderActionSetOptionParseSitemapXmlParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionParseSitemapXmlResponse, error)

	// SpiderActionSetOptionPostFormWithResponse request
	SpiderActionSetOptionPostFormWithResponse(ctx context.Context, params *SpiderActionSetOptionPostFormParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionPostFormResponse, error)

	// SpiderActionSetOptionProcessFormWithResponse request
	SpiderActionSetOptionProcessFormWithResponse(ctx context.Context, params *SpiderActionSetOptionProcessFormParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionProcessFormResponse, error)

	// SpiderActionSetOptionSendRefererHeaderWithResponse request
	SpiderActionSetOptionSendRefererHeaderWithResponse(ctx context.Context, params *SpiderActionSetOptionSendRefererHeaderParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionSendRefererHeaderResponse, error)

	// SpiderActionSetOptionShowAdvancedDialogWithResponse request
	SpiderActionSetOptionShowAdvancedDialogWithResponse(ctx context.Context, params *SpiderActionSetOptionShowAdvancedDialogParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionShowAdvancedDialogResponse, error)

	// SpiderActionSetOptionSkipURLStringWithResponse request
	SpiderActionSetOptionSkipURLStringWithResponse(ctx context.Context, params *SpiderActionSetOptionSkipURLStringParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionSkipURLStringResponse, error)

	// SpiderActionSetOptionThreadCountWithResponse request
	SpiderActionSetOptionThreadCountWithResponse(ctx context.Context, params *SpiderActionSetOptionThreadCountParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionThreadCountResponse, error)

	// SpiderActionSetOptionUserAgentWithResponse request
	SpiderActionSetOptionUserAgentWithResponse(ctx context.Context, params *SpiderActionSetOptionUserAgentParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionUserAgentResponse, error)

	// SpiderActionStopWithResponse request
	SpiderActionStopWithResponse(ctx context.Context, params *SpiderActionStopParams, reqEditors ...RequestEditorFn) (*SpiderActionStopResponse, error)

	// SpiderActionStopAllScansWithResponse request
	SpiderActionStopAllScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderActionStopAllScansResponse, error)

	// SpiderViewAddedNodesWithResponse request
	SpiderViewAddedNodesWithResponse(ctx context.Context, params *SpiderViewAddedNodesParams, reqEditors ...RequestEditorFn) (*SpiderViewAddedNodesResponse, error)

	// SpiderViewAllUrlsWithResponse request
	SpiderViewAllUrlsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewAllUrlsResponse, error)

	// SpiderViewDomainsAlwaysInScopeWithResponse request
	SpiderViewDomainsAlwaysInScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewDomainsAlwaysInScopeResponse, error)

	// SpiderViewExcludedFromScanWithResponse request
	SpiderViewExcludedFromScanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewExcludedFromScanResponse, error)

	// SpiderViewFullResultsWithResponse request
	SpiderViewFullResultsWithResponse(ctx context.Context, params *SpiderViewFullResultsParams, reqEditors ...RequestEditorFn) (*SpiderViewFullResultsResponse, error)

	// SpiderViewOptionAcceptCookiesWithResponse request
	SpiderViewOptionAcceptCookiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionAcceptCookiesResponse, error)

	// SpiderViewOptionDomainsAlwaysInScopeWithResponse request
	SpiderViewOptionDomainsAlwaysInScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionDomainsAlwaysInScopeResponse, error)

	// SpiderViewOptionDomainsAlwaysInScopeEnabledWithResponse request
	SpiderViewOptionDomainsAlwaysInScopeEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionDomainsAlwaysInScopeEnabledResponse, error)

	// SpiderViewOptionHandleODataParametersVisitedWithResponse request
	SpiderViewOptionHandleODataParametersVisitedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionHandleODataParametersVisitedResponse, error)

	// SpiderViewOptionHandleParametersWithResponse request
	SpiderViewOptionHandleParametersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionHandleParametersResponse, error)

	// SpiderViewOptionLogoutAvoidanceWithResponse request
	SpiderViewOptionLogoutAvoidanceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionLogoutAvoidanceResponse, error)

	// SpiderViewOptionMaxChildrenWithResponse request
	SpiderViewOptionMaxChildrenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionMaxChildrenResponse, error)

	// SpiderViewOptionMaxDepthWithResponse request
	SpiderViewOptionMaxDepthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionMaxDepthResponse, error)

	// SpiderViewOptionMaxDurationWithResponse request
	SpiderViewOptionMaxDurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionMaxDurationResponse, error)

	// SpiderViewOptionMaxParseSizeBytesWithResponse request
	SpiderViewOptionMaxParseSizeBytesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionMaxParseSizeBytesResponse, error)

	// SpiderViewOptionMaxScansInUIWithResponse request
	SpiderViewOptionMaxScansInUIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionMaxScansInUIResponse, error)

	// SpiderViewOptionParseCommentsWithResponse request
	SpiderViewOptionParseCommentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionParseCommentsResponse, error)

	// SpiderViewOptionParseDsStoreWithResponse request
	SpiderViewOptionParseDsStoreWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionParseDsStoreResponse, error)

	// SpiderViewOptionParseGitWithResponse request
	SpiderViewOptionParseGitWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionParseGitResponse, error)

	// SpiderViewOptionParseRobotsTxtWithResponse request
	SpiderViewOptionParseRobotsTxtWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionParseRobotsTxtResponse, error)

	// SpiderViewOptionParseSVNEntriesWithResponse request
	SpiderViewOptionParseSVNEntriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionParseSVNEntriesResponse, error)

	// SpiderViewOptionParseSitemapXmlWithResponse request
	SpiderViewOptionParseSitemapXmlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionParseSitemapXmlResponse, error)

	// SpiderViewOptionPostFormWithResponse request
	SpiderViewOptionPostFormWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionPostFormResponse, error)

	// SpiderViewOptionProcessFormWithResponse request
	SpiderViewOptionProcessFormWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionProcessFormResponse, error)

	// SpiderViewOptionSendRefererHeaderWithResponse request
	SpiderViewOptionSendRefererHeaderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionSendRefererHeaderResponse, error)

	// SpiderViewOptionShowAdvancedDialogWithResponse request
	SpiderViewOptionShowAdvancedDialogWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionShowAdvancedDialogResponse, error)

	// SpiderViewOptionSkipURLStringWithResponse request
	SpiderViewOptionSkipURLStringWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionSkipURLStringResponse, error)

	// SpiderViewOptionThreadCountWithResponse request
	SpiderViewOptionThreadCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionThreadCountResponse, error)

	// SpiderViewOptionUserAgentWithResponse request
	SpiderViewOptionUserAgentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionUserAgentResponse, error)

	// SpiderViewResultsWithResponse request
	SpiderViewResultsWithResponse(ctx context.Context, params *SpiderViewResultsParams, reqEditors ...RequestEditorFn) (*SpiderViewResultsResponse, error)

	// SpiderViewScansWithResponse request
	SpiderViewScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewScansResponse, error)

	// SpiderViewStatusWithResponse request
	SpiderViewStatusWithResponse(ctx context.Context, params *SpiderViewStatusParams, reqEditors ...RequestEditorFn) (*SpiderViewStatusResponse, error)

	// StatsActionClearStatsWithResponse request
	StatsActionClearStatsWithResponse(ctx context.Context, params *StatsActionClearStatsParams, reqEditors ...RequestEditorFn) (*StatsActionClearStatsResponse, error)

	// StatsActionSetOptionInMemoryEnabledWithResponse request
	StatsActionSetOptionInMemoryEnabledWithResponse(ctx context.Context, params *StatsActionSetOptionInMemoryEnabledParams, reqEditors ...RequestEditorFn) (*StatsActionSetOptionInMemoryEnabledResponse, error)

	// StatsActionSetOptionStatsdHostWithResponse request
	StatsActionSetOptionStatsdHostWithResponse(ctx context.Context, params *StatsActionSetOptionStatsdHostParams, reqEditors ...RequestEditorFn) (*StatsActionSetOptionStatsdHostResponse, error)

	// StatsActionSetOptionStatsdPortWithResponse request
	StatsActionSetOptionStatsdPortWithResponse(ctx context.Context, params *StatsActionSetOptionStatsdPortParams, reqEditors ...RequestEditorFn) (*StatsActionSetOptionStatsdPortResponse, error)

	// StatsActionSetOptionStatsdPrefixWithResponse request
	StatsActionSetOptionStatsdPrefixWithResponse(ctx context.Context, params *StatsActionSetOptionStatsdPrefixParams, reqEditors ...RequestEditorFn) (*StatsActionSetOptionStatsdPrefixResponse, error)

	// StatsViewAllSitesStatsWithResponse request
	StatsViewAllSitesStatsWithResponse(ctx context.Context, params *StatsViewAllSitesStatsParams, reqEditors ...RequestEditorFn) (*StatsViewAllSitesStatsResponse, error)

	// StatsViewOptionInMemoryEnabledWithResponse request
	StatsViewOptionInMemoryEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatsViewOptionInMemoryEnabledResponse, error)

	// StatsViewOptionStatsdEnabledWithResponse request
	StatsViewOptionStatsdEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatsViewOptionStatsdEnabledResponse, error)

	// StatsViewOptionStatsdHostWithResponse request
	StatsViewOptionStatsdHostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatsViewOptionStatsdHostResponse, error)

	// StatsViewOptionStatsdPortWithResponse request
	StatsViewOptionStatsdPortWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatsViewOptionStatsdPortResponse, error)

	// StatsViewOptionStatsdPrefixWithResponse request
	StatsViewOptionStatsdPrefixWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatsViewOptionStatsdPrefixResponse, error)

	// StatsViewSiteStatsWithResponse request
	StatsViewSiteStatsWithResponse(ctx context.Context, params *StatsViewSiteStatsParams, reqEditors ...RequestEditorFn) (*StatsViewSiteStatsResponse, error)

	// StatsViewStatsWithResponse request
	StatsViewStatsWithResponse(ctx context.Context, params *StatsViewStatsParams, reqEditors ...RequestEditorFn) (*StatsViewStatsResponse, error)

	// UsersActionAuthenticateAsUserWithResponse request
	UsersActionAuthenticateAsUserWithResponse(ctx context.Context, params *UsersActionAuthenticateAsUserParams, reqEditors ...RequestEditorFn) (*UsersActionAuthenticateAsUserResponse, error)

	// UsersActionNewUserWithResponse request
	UsersActionNewUserWithResponse(ctx context.Context, params *UsersActionNewUserParams, reqEditors ...RequestEditorFn) (*UsersActionNewUserResponse, error)

	// UsersActionPollAsUserWithResponse request
	UsersActionPollAsUserWithResponse(ctx context.Context, params *UsersActionPollAsUserParams, reqEditors ...RequestEditorFn) (*UsersActionPollAsUserResponse, error)

	// UsersActionRemoveUserWithResponse request
	UsersActionRemoveUserWithResponse(ctx context.Context, params *UsersActionRemoveUserParams, reqEditors ...RequestEditorFn) (*UsersActionRemoveUserResponse, error)

	// UsersActionSetAuthenticationCredentialsWithResponse request
	UsersActionSetAuthenticationCredentialsWithResponse(ctx context.Context, params *UsersActionSetAuthenticationCredentialsParams, reqEditors ...RequestEditorFn) (*UsersActionSetAuthenticationCredentialsResponse, error)

	// UsersActionSetAuthenticationStateWithResponse request
	UsersActionSetAuthenticationStateWithResponse(ctx context.Context, params *UsersActionSetAuthenticationStateParams, reqEditors ...RequestEditorFn) (*UsersActionSetAuthenticationStateResponse, error)

	// UsersActionSetCookieWithResponse request
	UsersActionSetCookieWithResponse(ctx context.Context, params *UsersActionSetCookieParams, reqEditors ...RequestEditorFn) (*UsersActionSetCookieResponse, error)

	// UsersActionSetUserEnabledWithResponse request
	UsersActionSetUserEnabledWithResponse(ctx context.Context, params *UsersActionSetUserEnabledParams, reqEditors ...RequestEditorFn) (*UsersActionSetUserEnabledResponse, error)

	// UsersActionSetUserNameWithResponse request
	UsersActionSetUserNameWithResponse(ctx context.Context, params *UsersActionSetUserNameParams, reqEditors ...RequestEditorFn) (*UsersActionSetUserNameResponse, error)

	// UsersViewGetAuthenticationCredentialsWithResponse request
	UsersViewGetAuthenticationCredentialsWithResponse(ctx context.Context, params *UsersViewGetAuthenticationCredentialsParams, reqEditors ...RequestEditorFn) (*UsersViewGetAuthenticationCredentialsResponse, error)

	// UsersViewGetAuthenticationCredentialsConfigParamsWithResponse request
	UsersViewGetAuthenticationCredentialsConfigParamsWithResponse(ctx context.Context, params *UsersViewGetAuthenticationCredentialsConfigParamsParams, reqEditors ...RequestEditorFn) (*UsersViewGetAuthenticationCredentialsConfigParamsResponse, error)

	// UsersViewGetAuthenticationSessionWithResponse request
	UsersViewGetAuthenticationSessionWithResponse(ctx context.Context, params *UsersViewGetAuthenticationSessionParams, reqEditors ...RequestEditorFn) (*UsersViewGetAuthenticationSessionResponse, error)

	// UsersViewGetAuthenticationStateWithResponse request
	UsersViewGetAuthenticationStateWithResponse(ctx context.Context, params *UsersViewGetAuthenticationStateParams, reqEditors ...RequestEditorFn) (*UsersViewGetAuthenticationStateResponse, error)

	// UsersViewGetUserByIdWithResponse request
	UsersViewGetUserByIdWithResponse(ctx context.Context, params *UsersViewGetUserByIdParams, reqEditors ...RequestEditorFn) (*UsersViewGetUserByIdResponse, error)

	// UsersViewUsersListWithResponse request
	UsersViewUsersListWithResponse(ctx context.Context, params *UsersViewUsersListParams, reqEditors ...RequestEditorFn) (*UsersViewUsersListResponse, error)

	// WappalyzerViewListAllWithResponse request
	WappalyzerViewListAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WappalyzerViewListAllResponse, error)

	// WappalyzerViewListSiteWithResponse request
	WappalyzerViewListSiteWithResponse(ctx context.Context, params *WappalyzerViewListSiteParams, reqEditors ...RequestEditorFn) (*WappalyzerViewListSiteResponse, error)

	// WappalyzerViewListSitesWithResponse request
	WappalyzerViewListSitesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WappalyzerViewListSitesResponse, error)

	// WebsocketActionSendTextMessageWithResponse request
	WebsocketActionSendTextMessageWithResponse(ctx context.Context, params *WebsocketActionSendTextMessageParams, reqEditors ...RequestEditorFn) (*WebsocketActionSendTextMessageResponse, error)

	// WebsocketActionSetBreakTextMessageWithResponse request
	WebsocketActionSetBreakTextMessageWithResponse(ctx context.Context, params *WebsocketActionSetBreakTextMessageParams, reqEditors ...RequestEditorFn) (*WebsocketActionSetBreakTextMessageResponse, error)

	// WebsocketViewBreakTextMessageWithResponse request
	WebsocketViewBreakTextMessageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WebsocketViewBreakTextMessageResponse, error)

	// WebsocketViewChannelsWithResponse request
	WebsocketViewChannelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WebsocketViewChannelsResponse, error)

	// WebsocketViewMessageWithResponse request
	WebsocketViewMessageWithResponse(ctx context.Context, params *WebsocketViewMessageParams, reqEditors ...RequestEditorFn) (*WebsocketViewMessageResponse, error)

	// WebsocketViewMessagesWithResponse request
	WebsocketViewMessagesWithResponse(ctx context.Context, params *WebsocketViewMessagesParams, reqEditors ...RequestEditorFn) (*WebsocketViewMessagesResponse, error)

	// AcsrfOtherGenFormWithResponse request
	AcsrfOtherGenFormWithResponse(ctx context.Context, params *AcsrfOtherGenFormParams, reqEditors ...RequestEditorFn) (*AcsrfOtherGenFormResponse, error)

	// CoreOtherFileDownloadWithResponse request
	CoreOtherFileDownloadWithResponse(ctx context.Context, params *CoreOtherFileDownloadParams, reqEditors ...RequestEditorFn) (*CoreOtherFileDownloadResponse, error)

	// CoreOtherFileUploadWithResponse request
	CoreOtherFileUploadWithResponse(ctx context.Context, params *CoreOtherFileUploadParams, reqEditors ...RequestEditorFn) (*CoreOtherFileUploadResponse, error)

	// CoreOtherHtmlreportWithResponse request
	CoreOtherHtmlreportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreOtherHtmlreportResponse, error)

	// CoreOtherJsonreportWithResponse request
	CoreOtherJsonreportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreOtherJsonreportResponse, error)

	// CoreOtherMdreportWithResponse request
	CoreOtherMdreportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreOtherMdreportResponse, error)

	// CoreOtherMessageHarWithResponse request
	CoreOtherMessageHarWithResponse(ctx context.Context, params *CoreOtherMessageHarParams, reqEditors ...RequestEditorFn) (*CoreOtherMessageHarResponse, error)

	// CoreOtherMessagesHarWithResponse request
	CoreOtherMessagesHarWithResponse(ctx context.Context, params *CoreOtherMessagesHarParams, reqEditors ...RequestEditorFn) (*CoreOtherMessagesHarResponse, error)

	// CoreOtherMessagesHarByIdWithResponse request
	CoreOtherMessagesHarByIdWithResponse(ctx context.Context, params *CoreOtherMessagesHarByIdParams, reqEditors ...RequestEditorFn) (*CoreOtherMessagesHarByIdResponse, error)

	// CoreOtherProxyPacWithResponse request
	CoreOtherProxyPacWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreOtherProxyPacResponse, error)

	// CoreOtherRootcertWithResponse request
	CoreOtherRootcertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreOtherRootcertResponse, error)

	// CoreOtherSendHarRequestWithResponse request
	CoreOtherSendHarRequestWithResponse(ctx context.Context, params *CoreOtherSendHarRequestParams, reqEditors ...RequestEditorFn) (*CoreOtherSendHarRequestResponse, error)

	// CoreOtherSetproxyWithResponse request
	CoreOtherSetproxyWithResponse(ctx context.Context, params *CoreOtherSetproxyParams, reqEditors ...RequestEditorFn) (*CoreOtherSetproxyResponse, error)

	// CoreOtherXmlreportWithResponse request
	CoreOtherXmlreportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreOtherXmlreportResponse, error)

	// DevOtherOpenapiWithResponse request
	DevOtherOpenapiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DevOtherOpenapiResponse, error)

	// EximOtherExportHarWithResponse request
	EximOtherExportHarWithResponse(ctx context.Context, params *EximOtherExportHarParams, reqEditors ...RequestEditorFn) (*EximOtherExportHarResponse, error)

	// EximOtherExportHarByIdWithResponse request
	EximOtherExportHarByIdWithResponse(ctx context.Context, params *EximOtherExportHarByIdParams, reqEditors ...RequestEditorFn) (*EximOtherExportHarByIdResponse, error)

	// EximOtherSendHarRequestWithResponse request
	EximOtherSendHarRequestWithResponse(ctx context.Context, params *EximOtherSendHarRequestParams, reqEditors ...RequestEditorFn) (*EximOtherSendHarRequestResponse, error)

	// HudOtherChangesInHtmlWithResponse request
	HudOtherChangesInHtmlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudOtherChangesInHtmlResponse, error)

	// KeyboardOtherCheatsheetActionOrderWithResponse request
	KeyboardOtherCheatsheetActionOrderWithResponse(ctx context.Context, params *KeyboardOtherCheatsheetActionOrderParams, reqEditors ...RequestEditorFn) (*KeyboardOtherCheatsheetActionOrderResponse, error)

	// KeyboardOtherCheatsheetKeyOrderWithResponse request
	KeyboardOtherCheatsheetKeyOrderWithResponse(ctx context.Context, params *KeyboardOtherCheatsheetKeyOrderParams, reqEditors ...RequestEditorFn) (*KeyboardOtherCheatsheetKeyOrderResponse, error)

	// NetworkOtherProxyPacWithResponse request
	NetworkOtherProxyPacWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkOtherProxyPacResponse, error)

	// NetworkOtherRootCaCertWithResponse request
	NetworkOtherRootCaCertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkOtherRootCaCertResponse, error)

	// NetworkOtherSetProxyWithResponse request
	NetworkOtherSetProxyWithResponse(ctx context.Context, params *NetworkOtherSetProxyParams, reqEditors ...RequestEditorFn) (*NetworkOtherSetProxyResponse, error)

	// PnhOtherFxPnhXpiWithResponse request
	PnhOtherFxPnhXpiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PnhOtherFxPnhXpiResponse, error)

	// PnhOtherManifestWithResponse request
	PnhOtherManifestWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PnhOtherManifestResponse, error)

	// PnhOtherPnhWithResponse request
	PnhOtherPnhWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PnhOtherPnhResponse, error)

	// PnhOtherServiceWithResponse request
	PnhOtherServiceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PnhOtherServiceResponse, error)

	// QuickstartlaunchOtherStartPageWithResponse request
	QuickstartlaunchOtherStartPageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*QuickstartlaunchOtherStartPageResponse, error)

	// SearchOtherHarByHeaderRegexWithResponse request
	SearchOtherHarByHeaderRegexWithResponse(ctx context.Context, params *SearchOtherHarByHeaderRegexParams, reqEditors ...RequestEditorFn) (*SearchOtherHarByHeaderRegexResponse, error)

	// SearchOtherHarByNoteRegexWithResponse request
	SearchOtherHarByNoteRegexWithResponse(ctx context.Context, params *SearchOtherHarByNoteRegexParams, reqEditors ...RequestEditorFn) (*SearchOtherHarByNoteRegexResponse, error)

	// SearchOtherHarByRequestRegexWithResponse request
	SearchOtherHarByRequestRegexWithResponse(ctx context.Context, params *SearchOtherHarByRequestRegexParams, reqEditors ...RequestEditorFn) (*SearchOtherHarByRequestRegexResponse, error)

	// SearchOtherHarByResponseRegexWithResponse request
	SearchOtherHarByResponseRegexWithResponse(ctx context.Context, params *SearchOtherHarByResponseRegexParams, reqEditors ...RequestEditorFn) (*SearchOtherHarByResponseRegexResponse, error)

	// SearchOtherHarByTagRegexWithResponse request
	SearchOtherHarByTagRegexWithResponse(ctx context.Context, params *SearchOtherHarByTagRegexParams, reqEditors ...RequestEditorFn) (*SearchOtherHarByTagRegexResponse, error)

	// SearchOtherHarByUrlRegexWithResponse request
	SearchOtherHarByUrlRegexWithResponse(ctx context.Context, params *SearchOtherHarByUrlRegexParams, reqEditors ...RequestEditorFn) (*SearchOtherHarByUrlRegexResponse, error)
}

type AccessControlActionScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AccessControlActionScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessControlActionScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessControlActionWriteHTMLreportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AccessControlActionWriteHTMLreportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessControlActionWriteHTMLreportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessControlViewGetScanProgressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AccessControlViewGetScanProgressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessControlViewGetScanProgressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessControlViewGetScanStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AccessControlViewGetScanStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessControlViewGetScanStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcsrfActionAddOptionTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AcsrfActionAddOptionTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcsrfActionAddOptionTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcsrfActionRemoveOptionTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AcsrfActionRemoveOptionTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcsrfActionRemoveOptionTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcsrfActionSetOptionPartialMatchingEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AcsrfActionSetOptionPartialMatchingEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcsrfActionSetOptionPartialMatchingEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcsrfViewOptionPartialMatchingEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AcsrfViewOptionPartialMatchingEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcsrfViewOptionPartialMatchingEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcsrfViewOptionTokensNamesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AcsrfViewOptionTokensNamesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcsrfViewOptionTokensNamesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionAddAllowedResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionAddAllowedResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionAddAllowedResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionAddExcludedElementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionAddExcludedElementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionAddExcludedElementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionModifyExcludedElementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionModifyExcludedElementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionModifyExcludedElementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionRemoveAllowedResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionRemoveAllowedResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionRemoveAllowedResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionRemoveExcludedElementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionRemoveExcludedElementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionRemoveExcludedElementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionScanAsUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionScanAsUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionScanAsUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionSetEnabledAllowedResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionSetEnabledAllowedResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionSetEnabledAllowedResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionSetOptionBrowserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionSetOptionBrowserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionSetOptionBrowserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionSetOptionClickDefaultElemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionSetOptionClickDefaultElemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionSetOptionClickDefaultElemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionSetOptionClickElemsOnceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionSetOptionClickElemsOnceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionSetOptionClickElemsOnceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionSetOptionEnableExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionSetOptionEnableExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionSetOptionEnableExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionSetOptionEventWaitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionSetOptionEventWaitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionSetOptionEventWaitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionSetOptionLogoutAvoidanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionSetOptionLogoutAvoidanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionSetOptionLogoutAvoidanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionSetOptionMaxCrawlDepthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionSetOptionMaxCrawlDepthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionSetOptionMaxCrawlDepthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionSetOptionMaxCrawlStatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionSetOptionMaxCrawlStatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionSetOptionMaxCrawlStatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionSetOptionMaxDurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionSetOptionMaxDurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionSetOptionMaxDurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionSetOptionNumberOfBrowsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionSetOptionNumberOfBrowsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionSetOptionNumberOfBrowsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionSetOptionRandomInputsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionSetOptionRandomInputsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionSetOptionRandomInputsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionSetOptionReloadWaitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionSetOptionReloadWaitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionSetOptionReloadWaitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionSetOptionScopeCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionSetOptionScopeCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionSetOptionScopeCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderActionStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderActionStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderActionStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewAllowedResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewAllowedResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewAllowedResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewExcludedElementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewExcludedElementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewExcludedElementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewFullResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewFullResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewFullResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewNumberOfResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewNumberOfResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewNumberOfResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewOptionBrowserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewOptionBrowserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewOptionBrowserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewOptionClickDefaultElemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewOptionClickDefaultElemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewOptionClickDefaultElemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewOptionClickElemsOnceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewOptionClickElemsOnceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewOptionClickElemsOnceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewOptionEnableExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewOptionEnableExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewOptionEnableExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewOptionEventWaitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewOptionEventWaitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewOptionEventWaitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewOptionLogoutAvoidanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewOptionLogoutAvoidanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewOptionLogoutAvoidanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewOptionMaxCrawlDepthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewOptionMaxCrawlDepthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewOptionMaxCrawlDepthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewOptionMaxCrawlStatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewOptionMaxCrawlStatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewOptionMaxCrawlStatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewOptionMaxDurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewOptionMaxDurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewOptionMaxDurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewOptionNumberOfBrowsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewOptionNumberOfBrowsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewOptionNumberOfBrowsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewOptionRandomInputsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewOptionRandomInputsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewOptionRandomInputsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewOptionReloadWaitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewOptionReloadWaitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewOptionReloadWaitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewOptionScopeCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewOptionScopeCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewOptionScopeCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AjaxSpiderViewStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AjaxSpiderViewStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AjaxSpiderViewStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertActionAddAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertActionAddAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertActionAddAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertActionDeleteAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertActionDeleteAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertActionDeleteAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertActionDeleteAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertActionDeleteAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertActionDeleteAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertActionDeleteAllAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertActionDeleteAllAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertActionDeleteAllAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertActionUpdateAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertActionUpdateAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertActionUpdateAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertActionUpdateAlertsConfidenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertActionUpdateAlertsConfidenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertActionUpdateAlertsConfidenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertActionUpdateAlertsRiskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertActionUpdateAlertsRiskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertActionUpdateAlertsRiskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertViewAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertViewAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertViewAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertViewAlertCountsByRiskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertViewAlertCountsByRiskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertViewAlertCountsByRiskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertViewAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertViewAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertViewAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertViewAlertsByRiskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertViewAlertsByRiskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertViewAlertsByRiskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertViewAlertsSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertViewAlertsSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertViewAlertsSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertViewNumberOfAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertViewNumberOfAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertViewNumberOfAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertFilterActionAddAlertFilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertFilterActionAddAlertFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertFilterActionAddAlertFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertFilterActionAddGlobalAlertFilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertFilterActionAddGlobalAlertFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertFilterActionAddGlobalAlertFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertFilterActionApplyAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertFilterActionApplyAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertFilterActionApplyAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertFilterActionApplyContextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertFilterActionApplyContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertFilterActionApplyContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertFilterActionApplyGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertFilterActionApplyGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertFilterActionApplyGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertFilterActionRemoveAlertFilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertFilterActionRemoveAlertFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertFilterActionRemoveAlertFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertFilterActionRemoveGlobalAlertFilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertFilterActionRemoveGlobalAlertFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertFilterActionRemoveGlobalAlertFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertFilterActionTestAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertFilterActionTestAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertFilterActionTestAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertFilterActionTestContextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertFilterActionTestContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertFilterActionTestContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertFilterActionTestGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertFilterActionTestGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertFilterActionTestGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertFilterViewAlertFilterListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertFilterViewAlertFilterListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertFilterViewAlertFilterListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertFilterViewGlobalAlertFilterListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AlertFilterViewGlobalAlertFilterListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertFilterViewGlobalAlertFilterListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionAddExcludedParamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionAddExcludedParamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionAddExcludedParamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionAddScanPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionAddScanPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionAddScanPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionClearExcludedFromScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionClearExcludedFromScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionClearExcludedFromScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionDisableAllScannersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionDisableAllScannersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionDisableAllScannersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionDisableScannersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionDisableScannersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionDisableScannersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionEnableAllScannersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionEnableAllScannersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionEnableAllScannersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionEnableScannersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionEnableScannersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionEnableScannersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionExcludeFromScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionExcludeFromScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionExcludeFromScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionImportScanPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionImportScanPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionImportScanPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionModifyExcludedParamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionModifyExcludedParamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionModifyExcludedParamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionPauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionPauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionPauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionPauseAllScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionPauseAllScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionPauseAllScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionRemoveAllScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionRemoveAllScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionRemoveAllScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionRemoveExcludedParamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionRemoveExcludedParamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionRemoveExcludedParamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionRemoveScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionRemoveScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionRemoveScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionRemoveScanPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionRemoveScanPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionRemoveScanPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionResumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionResumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionResumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionResumeAllScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionResumeAllScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionResumeAllScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionScanAsUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionScanAsUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionScanAsUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetEnabledPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetEnabledPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetEnabledPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionAddQueryParamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionAddQueryParamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionAddQueryParamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionAllowAttackOnStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionAllowAttackOnStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionAllowAttackOnStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionAttackPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionAttackPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionAttackPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionDefaultPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionDefaultPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionDefaultPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionDelayInMsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionDelayInMsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionDelayInMsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionEncodeCookieValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionEncodeCookieValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionEncodeCookieValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionHandleAntiCSRFTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionHandleAntiCSRFTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionHandleAntiCSRFTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionHostPerScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionHostPerScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionHostPerScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionInjectPluginIdInHeaderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionInjectPluginIdInHeaderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionInjectPluginIdInHeaderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionMaxAlertsPerRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionMaxAlertsPerRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionMaxAlertsPerRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionMaxChartTimeInMinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionMaxChartTimeInMinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionMaxChartTimeInMinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionMaxResultsToListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionMaxResultsToListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionMaxResultsToListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionMaxRuleDurationInMinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionMaxRuleDurationInMinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionMaxRuleDurationInMinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionMaxScanDurationInMinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionMaxScanDurationInMinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionMaxScanDurationInMinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionMaxScansInUIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionMaxScansInUIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionMaxScansInUIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionPromptInAttackModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionPromptInAttackModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionPromptInAttackModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionPromptToClearFinishedScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionPromptToClearFinishedScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionPromptToClearFinishedScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionRescanInAttackModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionRescanInAttackModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionRescanInAttackModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionScanHeadersAllRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionScanHeadersAllRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionScanHeadersAllRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionScanNullJsonValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionScanNullJsonValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionScanNullJsonValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionShowAdvancedDialogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionShowAdvancedDialogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionShowAdvancedDialogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionTargetParamsEnabledRPCResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionTargetParamsEnabledRPCResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionTargetParamsEnabledRPCResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionTargetParamsInjectableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionTargetParamsInjectableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionTargetParamsInjectableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetOptionThreadPerHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetOptionThreadPerHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetOptionThreadPerHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetPolicyAlertThresholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetPolicyAlertThresholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetPolicyAlertThresholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetPolicyAttackStrengthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetPolicyAttackStrengthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetPolicyAttackStrengthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetScannerAlertThresholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetScannerAlertThresholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetScannerAlertThresholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSetScannerAttackStrengthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSetScannerAttackStrengthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSetScannerAttackStrengthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionSkipScannerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionSkipScannerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionSkipScannerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionStopAllScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionStopAllScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionStopAllScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanActionUpdateScanPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanActionUpdateScanPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanActionUpdateScanPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewAlertsIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewAlertsIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewAlertsIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewAttackModeQueueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewAttackModeQueueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewAttackModeQueueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewExcludedFromScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewExcludedFromScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewExcludedFromScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewExcludedParamTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewExcludedParamTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewExcludedParamTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewExcludedParamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewExcludedParamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewExcludedParamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewMessagesIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewMessagesIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewMessagesIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionAddQueryParamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionAddQueryParamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionAddQueryParamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionAllowAttackOnStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionAllowAttackOnStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionAllowAttackOnStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionAttackPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionAttackPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionAttackPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionDefaultPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionDefaultPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionDefaultPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionDelayInMsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionDelayInMsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionDelayInMsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionEncodeCookieValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionEncodeCookieValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionEncodeCookieValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionExcludedParamListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionExcludedParamListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionExcludedParamListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionHandleAntiCSRFTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionHandleAntiCSRFTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionHandleAntiCSRFTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionHostPerScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionHostPerScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionHostPerScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionInjectPluginIdInHeaderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionInjectPluginIdInHeaderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionInjectPluginIdInHeaderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionMaxAlertsPerRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionMaxAlertsPerRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionMaxAlertsPerRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionMaxChartTimeInMinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionMaxChartTimeInMinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionMaxChartTimeInMinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionMaxResultsToListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionMaxResultsToListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionMaxResultsToListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionMaxRuleDurationInMinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionMaxRuleDurationInMinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionMaxRuleDurationInMinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionMaxScanDurationInMinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionMaxScanDurationInMinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionMaxScanDurationInMinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionMaxScansInUIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionMaxScansInUIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionMaxScansInUIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionPromptInAttackModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionPromptInAttackModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionPromptInAttackModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionPromptToClearFinishedScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionPromptToClearFinishedScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionPromptToClearFinishedScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionRescanInAttackModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionRescanInAttackModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionRescanInAttackModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionScanHeadersAllRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionScanHeadersAllRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionScanHeadersAllRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionScanNullJsonValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionScanNullJsonValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionScanNullJsonValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionShowAdvancedDialogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionShowAdvancedDialogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionShowAdvancedDialogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionTargetParamsEnabledRPCResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionTargetParamsEnabledRPCResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionTargetParamsEnabledRPCResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionTargetParamsInjectableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionTargetParamsInjectableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionTargetParamsInjectableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewOptionThreadPerHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewOptionThreadPerHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewOptionThreadPerHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewScanPolicyNamesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewScanPolicyNamesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewScanPolicyNamesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewScanProgressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewScanProgressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewScanProgressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewScannersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewScannersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewScannersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AscanViewStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AscanViewStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AscanViewStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthenticationActionSetAuthenticationMethodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AuthenticationActionSetAuthenticationMethodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthenticationActionSetAuthenticationMethodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthenticationActionSetLoggedInIndicatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AuthenticationActionSetLoggedInIndicatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthenticationActionSetLoggedInIndicatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthenticationActionSetLoggedOutIndicatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AuthenticationActionSetLoggedOutIndicatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthenticationActionSetLoggedOutIndicatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthenticationViewGetAuthenticationMethodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AuthenticationViewGetAuthenticationMethodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthenticationViewGetAuthenticationMethodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthenticationViewGetAuthenticationMethodConfigParamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AuthenticationViewGetAuthenticationMethodConfigParamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthenticationViewGetAuthenticationMethodConfigParamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthenticationViewGetLoggedInIndicatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AuthenticationViewGetLoggedInIndicatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthenticationViewGetLoggedInIndicatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthenticationViewGetLoggedOutIndicatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AuthenticationViewGetLoggedOutIndicatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthenticationViewGetLoggedOutIndicatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthenticationViewGetSupportedAuthenticationMethodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AuthenticationViewGetSupportedAuthenticationMethodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthenticationViewGetSupportedAuthenticationMethodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthorizationActionSetBasicAuthorizationDetectionMethodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AuthorizationActionSetBasicAuthorizationDetectionMethodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthorizationActionSetBasicAuthorizationDetectionMethodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthorizationViewGetAuthorizationDetectionMethodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AuthorizationViewGetAuthorizationDetectionMethodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthorizationViewGetAuthorizationDetectionMethodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutomationActionEndDelayJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutomationActionEndDelayJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutomationActionEndDelayJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutomationActionRunPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutomationActionRunPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutomationActionRunPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutomationViewPlanProgressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutomationViewPlanProgressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutomationViewPlanProgressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateActionDownloadLatestReleaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateActionDownloadLatestReleaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateActionDownloadLatestReleaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateActionInstallAddonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateActionInstallAddonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateActionInstallAddonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateActionInstallLocalAddonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateActionInstallLocalAddonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateActionInstallLocalAddonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateActionSetOptionCheckAddonUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateActionSetOptionCheckAddonUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateActionSetOptionCheckAddonUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateActionSetOptionCheckOnStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateActionSetOptionCheckOnStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateActionSetOptionCheckOnStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateActionSetOptionDownloadNewReleaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateActionSetOptionDownloadNewReleaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateActionSetOptionDownloadNewReleaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateActionSetOptionInstallAddonUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateActionSetOptionInstallAddonUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateActionSetOptionInstallAddonUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateActionSetOptionInstallScannerRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateActionSetOptionInstallScannerRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateActionSetOptionInstallScannerRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateActionSetOptionReportAlphaAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateActionSetOptionReportAlphaAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateActionSetOptionReportAlphaAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateActionSetOptionReportBetaAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateActionSetOptionReportBetaAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateActionSetOptionReportBetaAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateActionSetOptionReportReleaseAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateActionSetOptionReportReleaseAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateActionSetOptionReportReleaseAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateActionUninstallAddonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateActionUninstallAddonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateActionUninstallAddonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewInstalledAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewInstalledAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewInstalledAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewIsLatestVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewIsLatestVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewIsLatestVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewLatestVersionNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewLatestVersionNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewLatestVersionNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewLocalAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewLocalAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewLocalAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewMarketplaceAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewMarketplaceAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewMarketplaceAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewNewAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewNewAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewNewAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewOptionAddonDirectoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewOptionAddonDirectoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewOptionAddonDirectoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewOptionCheckAddonUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewOptionCheckAddonUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewOptionCheckAddonUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewOptionCheckOnStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewOptionCheckOnStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewOptionCheckOnStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewOptionDayLastCheckedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewOptionDayLastCheckedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewOptionDayLastCheckedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewOptionDayLastInstallWarnedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewOptionDayLastInstallWarnedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewOptionDayLastInstallWarnedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewOptionDayLastUpdateWarnedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewOptionDayLastUpdateWarnedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewOptionDayLastUpdateWarnedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewOptionDownloadDirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewOptionDownloadDirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewOptionDownloadDirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewOptionDownloadNewReleaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewOptionDownloadNewReleaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewOptionDownloadNewReleaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewOptionInstallAddonUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewOptionInstallAddonUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewOptionInstallAddonUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewOptionInstallScannerRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewOptionInstallScannerRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewOptionInstallScannerRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewOptionReportAlphaAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewOptionReportAlphaAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewOptionReportAlphaAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewOptionReportBetaAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewOptionReportBetaAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewOptionReportBetaAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewOptionReportReleaseAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewOptionReportReleaseAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewOptionReportReleaseAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AutoupdateViewUpdatedAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r AutoupdateViewUpdatedAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoupdateViewUpdatedAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BreakActionAddHttpBreakpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r BreakActionAddHttpBreakpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BreakActionAddHttpBreakpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BreakActionBreakResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r BreakActionBreakResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BreakActionBreakResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BreakActionContinueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r BreakActionContinueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BreakActionContinueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BreakActionDropResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r BreakActionDropResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BreakActionDropResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BreakActionRemoveHttpBreakpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r BreakActionRemoveHttpBreakpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BreakActionRemoveHttpBreakpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BreakActionSetHttpMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r BreakActionSetHttpMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BreakActionSetHttpMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BreakActionStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r BreakActionStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BreakActionStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BreakViewHttpMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r BreakViewHttpMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BreakViewHttpMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BreakViewIsBreakAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r BreakViewIsBreakAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BreakViewIsBreakAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BreakViewIsBreakRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r BreakViewIsBreakRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BreakViewIsBreakRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BreakViewIsBreakResponseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r BreakViewIsBreakResponseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BreakViewIsBreakResponseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClientActionExportClientMapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ClientActionExportClientMapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClientActionExportClientMapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClientActionReportEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ClientActionReportEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClientActionReportEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClientActionReportObjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ClientActionReportObjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClientActionReportObjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClientActionReportZestScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ClientActionReportZestScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClientActionReportZestScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClientActionReportZestStatementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ClientActionReportZestStatementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClientActionReportZestStatementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClientSpiderActionScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ClientSpiderActionScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClientSpiderActionScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClientSpiderActionStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ClientSpiderActionStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClientSpiderActionStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClientSpiderViewStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ClientSpiderViewStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClientSpiderViewStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextActionExcludeAllContextTechnologiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextActionExcludeAllContextTechnologiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextActionExcludeAllContextTechnologiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextActionExcludeContextTechnologiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextActionExcludeContextTechnologiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextActionExcludeContextTechnologiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextActionExcludeFromContextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextActionExcludeFromContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextActionExcludeFromContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextActionExportContextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextActionExportContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextActionExportContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextActionImportContextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextActionImportContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextActionImportContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextActionIncludeAllContextTechnologiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextActionIncludeAllContextTechnologiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextActionIncludeAllContextTechnologiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextActionIncludeContextTechnologiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextActionIncludeContextTechnologiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextActionIncludeContextTechnologiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextActionIncludeInContextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextActionIncludeInContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextActionIncludeInContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextActionNewContextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextActionNewContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextActionNewContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextActionRemoveContextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextActionRemoveContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextActionRemoveContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextActionSetContextCheckingStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextActionSetContextCheckingStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextActionSetContextCheckingStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextActionSetContextInScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextActionSetContextInScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextActionSetContextInScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextActionSetContextRegexsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextActionSetContextRegexsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextActionSetContextRegexsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextViewContextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextViewContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextViewContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextViewContextListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextViewContextListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextViewContextListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextViewExcludeRegexsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextViewExcludeRegexsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextViewExcludeRegexsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextViewExcludedTechnologyListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextViewExcludedTechnologyListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextViewExcludedTechnologyListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextViewIncludeRegexsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextViewIncludeRegexsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextViewIncludeRegexsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextViewIncludedTechnologyListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextViewIncludedTechnologyListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextViewIncludedTechnologyListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextViewTechnologyListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextViewTechnologyListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextViewTechnologyListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextViewUrlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ContextViewUrlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextViewUrlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionAccessUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionAccessUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionAccessUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionAddProxyChainExcludedDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionAddProxyChainExcludedDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionAddProxyChainExcludedDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionClearExcludedFromProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionClearExcludedFromProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionClearExcludedFromProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionCreateSbomZipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionCreateSbomZipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionCreateSbomZipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionDeleteAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionDeleteAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionDeleteAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionDeleteAllAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionDeleteAllAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionDeleteAllAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionDeleteSiteNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionDeleteSiteNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionDeleteSiteNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionDisableAllProxyChainExcludedDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionDisableAllProxyChainExcludedDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionDisableAllProxyChainExcludedDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionDisableClientCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionDisableClientCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionDisableClientCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionEnableAllProxyChainExcludedDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionEnableAllProxyChainExcludedDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionEnableAllProxyChainExcludedDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionEnablePKCS12ClientCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionEnablePKCS12ClientCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionEnablePKCS12ClientCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionExcludeFromProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionExcludeFromProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionExcludeFromProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionGenerateRootCAResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionGenerateRootCAResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionGenerateRootCAResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionLoadSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionLoadSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionLoadSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionModifyProxyChainExcludedDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionModifyProxyChainExcludedDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionModifyProxyChainExcludedDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionNewSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionNewSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionNewSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionRemoveProxyChainExcludedDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionRemoveProxyChainExcludedDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionRemoveProxyChainExcludedDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionRunGarbageCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionRunGarbageCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionRunGarbageCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSaveSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSaveSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSaveSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSendRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSendRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSendRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetHomeDirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetHomeDirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetHomeDirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetLogLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetLogLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetLogLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionAlertOverridesFilePathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionAlertOverridesFilePathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionAlertOverridesFilePathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionDefaultUserAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionDefaultUserAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionDefaultUserAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionDnsTtlSuccessfulQueriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionDnsTtlSuccessfulQueriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionDnsTtlSuccessfulQueriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionHttpStateEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionHttpStateEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionHttpStateEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionMaximumAlertInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionMaximumAlertInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionMaximumAlertInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionMergeRelatedAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionMergeRelatedAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionMergeRelatedAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionProxyChainNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionProxyChainNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionProxyChainNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionProxyChainPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionProxyChainPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionProxyChainPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionProxyChainPortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionProxyChainPortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionProxyChainPortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionProxyChainPromptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionProxyChainPromptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionProxyChainPromptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionProxyChainRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionProxyChainRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionProxyChainRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionProxyChainSkipNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionProxyChainSkipNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionProxyChainSkipNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionProxyChainUserNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionProxyChainUserNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionProxyChainUserNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionSingleCookieRequestHeaderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionSingleCookieRequestHeaderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionSingleCookieRequestHeaderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionTimeoutInSecsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionTimeoutInSecsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionTimeoutInSecsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionUseProxyChainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionUseProxyChainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionUseProxyChainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionUseProxyChainAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionUseProxyChainAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionUseProxyChainAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSetOptionUseSocksProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSetOptionUseSocksProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSetOptionUseSocksProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionShutdownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionShutdownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionShutdownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreActionSnapshotSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreActionSnapshotSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreActionSnapshotSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewAlertsSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewAlertsSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewAlertsSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewChildNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewChildNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewChildNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewExcludedFromProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewExcludedFromProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewExcludedFromProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewGetLogLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewGetLogLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewGetLogLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewHomeDirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewHomeDirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewHomeDirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewMessagesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewMessagesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewMessagesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewNumberOfAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewNumberOfAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewNumberOfAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewNumberOfMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewNumberOfMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewNumberOfMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionAlertOverridesFilePathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionAlertOverridesFilePathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionAlertOverridesFilePathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionDefaultUserAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionDefaultUserAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionDefaultUserAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionDnsTtlSuccessfulQueriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionDnsTtlSuccessfulQueriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionDnsTtlSuccessfulQueriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionHttpStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionHttpStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionHttpStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionHttpStateEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionHttpStateEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionHttpStateEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionMaximumAlertInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionMaximumAlertInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionMaximumAlertInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionMergeRelatedAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionMergeRelatedAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionMergeRelatedAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionProxyChainNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionProxyChainNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionProxyChainNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionProxyChainPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionProxyChainPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionProxyChainPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionProxyChainPortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionProxyChainPortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionProxyChainPortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionProxyChainPromptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionProxyChainPromptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionProxyChainPromptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionProxyChainRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionProxyChainRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionProxyChainRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionProxyChainSkipNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionProxyChainSkipNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionProxyChainSkipNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionProxyChainUserNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionProxyChainUserNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionProxyChainUserNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionProxyExcludedDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionProxyExcludedDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionProxyExcludedDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionProxyExcludedDomainsEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionProxyExcludedDomainsEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionProxyExcludedDomainsEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionSingleCookieRequestHeaderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionSingleCookieRequestHeaderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionSingleCookieRequestHeaderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionTimeoutInSecsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionTimeoutInSecsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionTimeoutInSecsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionUseProxyChainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionUseProxyChainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionUseProxyChainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionUseProxyChainAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionUseProxyChainAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionUseProxyChainAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewOptionUseSocksProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewOptionUseSocksProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewOptionUseSocksProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewProxyChainExcludedDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewProxyChainExcludedDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewProxyChainExcludedDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewSessionLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewSessionLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewSessionLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewSitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewSitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewSitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewUrlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewUrlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewUrlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreViewZapHomePathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CoreViewZapHomePathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreViewZapHomePathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustompayloadsActionAddCustomPayloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CustompayloadsActionAddCustomPayloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustompayloadsActionAddCustomPayloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustompayloadsActionDisableCustomPayloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CustompayloadsActionDisableCustomPayloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustompayloadsActionDisableCustomPayloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustompayloadsActionDisableCustomPayloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CustompayloadsActionDisableCustomPayloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustompayloadsActionDisableCustomPayloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustompayloadsActionEnableCustomPayloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CustompayloadsActionEnableCustomPayloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustompayloadsActionEnableCustomPayloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustompayloadsActionEnableCustomPayloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CustompayloadsActionEnableCustomPayloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustompayloadsActionEnableCustomPayloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustompayloadsActionRemoveCustomPayloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CustompayloadsActionRemoveCustomPayloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustompayloadsActionRemoveCustomPayloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustompayloadsViewCustomPayloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CustompayloadsViewCustomPayloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustompayloadsViewCustomPayloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustompayloadsViewCustomPayloadsCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r CustompayloadsViewCustomPayloadsCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustompayloadsViewCustomPayloadsCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EximActionExportSitesTreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r EximActionExportSitesTreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EximActionExportSitesTreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EximActionImportHarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r EximActionImportHarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EximActionImportHarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EximActionImportModsec2LogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r EximActionImportModsec2LogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EximActionImportModsec2LogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EximActionImportUrlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r EximActionImportUrlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EximActionImportUrlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EximActionImportZapLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r EximActionImportZapLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EximActionImportZapLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EximActionPruneSitesTreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r EximActionPruneSitesTreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EximActionPruneSitesTreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ForcedUserActionSetForcedUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ForcedUserActionSetForcedUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ForcedUserActionSetForcedUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ForcedUserActionSetForcedUserModeEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ForcedUserActionSetForcedUserModeEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ForcedUserActionSetForcedUserModeEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ForcedUserViewGetForcedUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ForcedUserViewGetForcedUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ForcedUserViewGetForcedUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ForcedUserViewIsForcedUserModeEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ForcedUserViewIsForcedUserModeEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ForcedUserViewIsForcedUserModeEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlActionImportFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlActionImportFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlActionImportFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlActionImportUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlActionImportUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlActionImportUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlActionSetOptionArgsTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlActionSetOptionArgsTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlActionSetOptionArgsTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlActionSetOptionLenientMaxQueryDepthEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlActionSetOptionLenientMaxQueryDepthEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlActionSetOptionLenientMaxQueryDepthEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlActionSetOptionMaxAdditionalQueryDepthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlActionSetOptionMaxAdditionalQueryDepthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlActionSetOptionMaxAdditionalQueryDepthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlActionSetOptionMaxArgsDepthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlActionSetOptionMaxArgsDepthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlActionSetOptionMaxArgsDepthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlActionSetOptionMaxQueryDepthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlActionSetOptionMaxQueryDepthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlActionSetOptionMaxQueryDepthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlActionSetOptionOptionalArgsEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlActionSetOptionOptionalArgsEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlActionSetOptionOptionalArgsEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlActionSetOptionQueryGenEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlActionSetOptionQueryGenEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlActionSetOptionQueryGenEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlActionSetOptionQuerySplitTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlActionSetOptionQuerySplitTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlActionSetOptionQuerySplitTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlActionSetOptionRequestMethodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlActionSetOptionRequestMethodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlActionSetOptionRequestMethodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlViewOptionArgsTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlViewOptionArgsTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlViewOptionArgsTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlViewOptionLenientMaxQueryDepthEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlViewOptionLenientMaxQueryDepthEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlViewOptionLenientMaxQueryDepthEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlViewOptionMaxAdditionalQueryDepthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlViewOptionMaxAdditionalQueryDepthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlViewOptionMaxAdditionalQueryDepthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlViewOptionMaxArgsDepthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlViewOptionMaxArgsDepthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlViewOptionMaxArgsDepthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlViewOptionMaxQueryDepthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlViewOptionMaxQueryDepthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlViewOptionMaxQueryDepthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlViewOptionOptionalArgsEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlViewOptionOptionalArgsEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlViewOptionOptionalArgsEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlViewOptionQueryGenEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlViewOptionQueryGenEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlViewOptionQueryGenEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlViewOptionQuerySplitTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlViewOptionQuerySplitTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlViewOptionQuerySplitTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GraphqlViewOptionRequestMethodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r GraphqlViewOptionRequestMethodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GraphqlViewOptionRequestMethodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HttpSessionsActionAddDefaultSessionTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HttpSessionsActionAddDefaultSessionTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HttpSessionsActionAddDefaultSessionTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HttpSessionsActionAddSessionTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HttpSessionsActionAddSessionTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HttpSessionsActionAddSessionTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HttpSessionsActionCreateEmptySessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HttpSessionsActionCreateEmptySessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HttpSessionsActionCreateEmptySessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HttpSessionsActionRemoveDefaultSessionTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HttpSessionsActionRemoveDefaultSessionTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HttpSessionsActionRemoveDefaultSessionTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HttpSessionsActionRemoveSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HttpSessionsActionRemoveSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HttpSessionsActionRemoveSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HttpSessionsActionRemoveSessionTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HttpSessionsActionRemoveSessionTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HttpSessionsActionRemoveSessionTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HttpSessionsActionRenameSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HttpSessionsActionRenameSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HttpSessionsActionRenameSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HttpSessionsActionSetActiveSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HttpSessionsActionSetActiveSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HttpSessionsActionSetActiveSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HttpSessionsActionSetDefaultSessionTokenEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HttpSessionsActionSetDefaultSessionTokenEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HttpSessionsActionSetDefaultSessionTokenEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HttpSessionsActionSetSessionTokenValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HttpSessionsActionSetSessionTokenValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HttpSessionsActionSetSessionTokenValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HttpSessionsActionUnsetActiveSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HttpSessionsActionUnsetActiveSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HttpSessionsActionUnsetActiveSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HttpSessionsViewActiveSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HttpSessionsViewActiveSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HttpSessionsViewActiveSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HttpSessionsViewDefaultSessionTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HttpSessionsViewDefaultSessionTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HttpSessionsViewDefaultSessionTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HttpSessionsViewSessionTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HttpSessionsViewSessionTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HttpSessionsViewSessionTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HttpSessionsViewSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HttpSessionsViewSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HttpSessionsViewSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HttpSessionsViewSitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HttpSessionsViewSitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HttpSessionsViewSitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudActionLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudActionLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudActionLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudActionRecordRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudActionRecordRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudActionRecordRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudActionResetTutorialTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudActionResetTutorialTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudActionResetTutorialTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudActionSetOptionBaseDirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudActionSetOptionBaseDirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudActionSetOptionBaseDirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudActionSetOptionDevelopmentModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudActionSetOptionDevelopmentModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudActionSetOptionDevelopmentModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudActionSetOptionEnableOnDomainMsgsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudActionSetOptionEnableOnDomainMsgsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudActionSetOptionEnableOnDomainMsgsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudActionSetOptionEnabledForDaemonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudActionSetOptionEnabledForDaemonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudActionSetOptionEnabledForDaemonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudActionSetOptionEnabledForDesktopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudActionSetOptionEnabledForDesktopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudActionSetOptionEnabledForDesktopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudActionSetOptionInScopeOnlyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudActionSetOptionInScopeOnlyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudActionSetOptionInScopeOnlyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudActionSetOptionRemoveCSPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudActionSetOptionRemoveCSPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudActionSetOptionRemoveCSPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudActionSetOptionShowWelcomeScreenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudActionSetOptionShowWelcomeScreenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudActionSetOptionShowWelcomeScreenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudActionSetOptionSkipTutorialTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudActionSetOptionSkipTutorialTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudActionSetOptionSkipTutorialTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudActionSetOptionTutorialTaskDoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudActionSetOptionTutorialTaskDoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudActionSetOptionTutorialTaskDoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudActionSetOptionTutorialTestModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudActionSetOptionTutorialTestModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudActionSetOptionTutorialTestModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudActionSetUiOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudActionSetUiOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudActionSetUiOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewGetUiOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewGetUiOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewGetUiOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewHeartbeatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewHeartbeatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewHeartbeatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewHudAlertDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewHudAlertDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewHudAlertDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewOptionAllowUnsafeEvalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewOptionAllowUnsafeEvalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewOptionAllowUnsafeEvalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewOptionBaseDirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewOptionBaseDirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewOptionBaseDirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewOptionDevelopmentModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewOptionDevelopmentModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewOptionDevelopmentModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewOptionEnableOnDomainMsgsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewOptionEnableOnDomainMsgsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewOptionEnableOnDomainMsgsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewOptionEnableTelemetryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewOptionEnableTelemetryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewOptionEnableTelemetryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewOptionEnabledForDaemonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewOptionEnabledForDaemonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewOptionEnabledForDaemonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewOptionEnabledForDesktopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewOptionEnabledForDesktopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewOptionEnabledForDesktopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewOptionInScopeOnlyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewOptionInScopeOnlyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewOptionInScopeOnlyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewOptionRemoveCSPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewOptionRemoveCSPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewOptionRemoveCSPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewOptionShowWelcomeScreenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewOptionShowWelcomeScreenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewOptionShowWelcomeScreenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewOptionSkipTutorialTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewOptionSkipTutorialTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewOptionSkipTutorialTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewOptionTutorialHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewOptionTutorialHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewOptionTutorialHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewOptionTutorialPortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewOptionTutorialPortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewOptionTutorialPortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewOptionTutorialTasksDoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewOptionTutorialTasksDoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewOptionTutorialTasksDoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewOptionTutorialTestModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewOptionTutorialTestModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewOptionTutorialTestModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewOptionTutorialUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewOptionTutorialUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewOptionTutorialUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewTutorialUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewTutorialUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewTutorialUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudViewUpgradedDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r HudViewUpgradedDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudViewUpgradedDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LocalProxiesActionAddAdditionalProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r LocalProxiesActionAddAdditionalProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LocalProxiesActionAddAdditionalProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LocalProxiesActionRemoveAdditionalProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r LocalProxiesActionRemoveAdditionalProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LocalProxiesActionRemoveAdditionalProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LocalProxiesViewAdditionalProxiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r LocalProxiesViewAdditionalProxiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LocalProxiesViewAdditionalProxiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionAddAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionAddAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionAddAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionAddHttpProxyExclusionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionAddHttpProxyExclusionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionAddHttpProxyExclusionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionAddLocalServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionAddLocalServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionAddLocalServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionAddPassThroughResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionAddPassThroughResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionAddPassThroughResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionAddPkcs12ClientCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionAddPkcs12ClientCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionAddPkcs12ClientCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionAddRateLimitRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionAddRateLimitRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionAddRateLimitRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionGenerateRootCaCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionGenerateRootCaCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionGenerateRootCaCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionImportRootCaCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionImportRootCaCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionImportRootCaCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionRemoveAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionRemoveAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionRemoveAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionRemoveHttpProxyExclusionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionRemoveHttpProxyExclusionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionRemoveHttpProxyExclusionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionRemoveLocalServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionRemoveLocalServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionRemoveLocalServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionRemovePassThroughResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionRemovePassThroughResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionRemovePassThroughResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionRemoveRateLimitRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionRemoveRateLimitRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionRemoveRateLimitRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionSetAliasEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionSetAliasEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionSetAliasEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionSetConnectionTimeoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionSetConnectionTimeoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionSetConnectionTimeoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionSetDefaultUserAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionSetDefaultUserAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionSetDefaultUserAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionSetDnsTtlSuccessfulQueriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionSetDnsTtlSuccessfulQueriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionSetDnsTtlSuccessfulQueriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionSetHttpProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionSetHttpProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionSetHttpProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionSetHttpProxyAuthEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionSetHttpProxyAuthEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionSetHttpProxyAuthEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionSetHttpProxyEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionSetHttpProxyEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionSetHttpProxyEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionSetHttpProxyExclusionEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionSetHttpProxyExclusionEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionSetHttpProxyExclusionEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionSetPassThroughEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionSetPassThroughEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionSetPassThroughEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionSetRateLimitRuleEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionSetRateLimitRuleEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionSetRateLimitRuleEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionSetRootCaCertValidityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionSetRootCaCertValidityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionSetRootCaCertValidityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionSetServerCertValidityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionSetServerCertValidityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionSetServerCertValidityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionSetSocksProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionSetSocksProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionSetSocksProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionSetSocksProxyEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionSetSocksProxyEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionSetSocksProxyEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionSetUseClientCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionSetUseClientCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionSetUseClientCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkActionSetUseGlobalHttpStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkActionSetUseGlobalHttpStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkActionSetUseGlobalHttpStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkViewGetAliasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkViewGetAliasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkViewGetAliasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkViewGetConnectionTimeoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkViewGetConnectionTimeoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkViewGetConnectionTimeoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkViewGetDefaultUserAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkViewGetDefaultUserAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkViewGetDefaultUserAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkViewGetDnsTtlSuccessfulQueriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkViewGetDnsTtlSuccessfulQueriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkViewGetDnsTtlSuccessfulQueriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkViewGetHttpProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkViewGetHttpProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkViewGetHttpProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkViewGetHttpProxyExclusionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkViewGetHttpProxyExclusionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkViewGetHttpProxyExclusionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkViewGetLocalServersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkViewGetLocalServersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkViewGetLocalServersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkViewGetPassThroughsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkViewGetPassThroughsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkViewGetPassThroughsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkViewGetRateLimitRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkViewGetRateLimitRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkViewGetRateLimitRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkViewGetRootCaCertValidityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkViewGetRootCaCertValidityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkViewGetRootCaCertValidityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkViewGetServerCertValidityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkViewGetServerCertValidityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkViewGetServerCertValidityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkViewGetSocksProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkViewGetSocksProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkViewGetSocksProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkViewIsHttpProxyAuthEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkViewIsHttpProxyAuthEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkViewIsHttpProxyAuthEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkViewIsHttpProxyEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkViewIsHttpProxyEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkViewIsHttpProxyEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkViewIsSocksProxyEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkViewIsSocksProxyEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkViewIsSocksProxyEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkViewIsUseGlobalHttpStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r NetworkViewIsUseGlobalHttpStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkViewIsUseGlobalHttpStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OastActionSetActiveScanServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r OastActionSetActiveScanServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OastActionSetActiveScanServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OastActionSetBoastOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r OastActionSetBoastOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OastActionSetBoastOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OastActionSetCallbackOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r OastActionSetCallbackOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OastActionSetCallbackOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OastActionSetDaysToKeepRecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r OastActionSetDaysToKeepRecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OastActionSetDaysToKeepRecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OastActionSetInteractshOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r OastActionSetInteractshOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OastActionSetInteractshOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OastViewGetActiveScanServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r OastViewGetActiveScanServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OastViewGetActiveScanServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OastViewGetBoastOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r OastViewGetBoastOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OastViewGetBoastOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OastViewGetCallbackOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r OastViewGetCallbackOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OastViewGetCallbackOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OastViewGetDaysToKeepRecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r OastViewGetDaysToKeepRecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OastViewGetDaysToKeepRecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OastViewGetInteractshOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r OastViewGetInteractshOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OastViewGetInteractshOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OastViewGetServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r OastViewGetServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OastViewGetServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpenapiActionImportFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r OpenapiActionImportFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpenapiActionImportFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpenapiActionImportUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r OpenapiActionImportUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpenapiActionImportUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ParamDiggerActionHelloWorldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ParamDiggerActionHelloWorldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ParamDiggerActionHelloWorldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ParamsViewParamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ParamsViewParamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ParamsViewParamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PnhActionMonitorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PnhActionMonitorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PnhActionMonitorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PnhActionOracleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PnhActionOracleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PnhActionOracleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PnhActionStartMonitoringResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PnhActionStartMonitoringResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PnhActionStartMonitoringResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PnhActionStopMonitoringResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PnhActionStopMonitoringResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PnhActionStopMonitoringResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostmanActionImportFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PostmanActionImportFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostmanActionImportFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostmanActionImportUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PostmanActionImportUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostmanActionImportUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanActionClearQueueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanActionClearQueueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanActionClearQueueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanActionDisableAllScannersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanActionDisableAllScannersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanActionDisableAllScannersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanActionDisableAllTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanActionDisableAllTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanActionDisableAllTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanActionDisableScannersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanActionDisableScannersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanActionDisableScannersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanActionEnableAllScannersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanActionEnableAllScannersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanActionEnableAllScannersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanActionEnableAllTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanActionEnableAllTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanActionEnableAllTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanActionEnableScannersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanActionEnableScannersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanActionEnableScannersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanActionSetEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanActionSetEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanActionSetEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanActionSetMaxAlertsPerRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanActionSetMaxAlertsPerRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanActionSetMaxAlertsPerRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanActionSetScanOnlyInScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanActionSetScanOnlyInScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanActionSetScanOnlyInScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanActionSetScannerAlertThresholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanActionSetScannerAlertThresholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanActionSetScannerAlertThresholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanViewCurrentRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanViewCurrentRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanViewCurrentRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanViewCurrentTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanViewCurrentTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanViewCurrentTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanViewMaxAlertsPerRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanViewMaxAlertsPerRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanViewMaxAlertsPerRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanViewRecordsToScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanViewRecordsToScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanViewRecordsToScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanViewScanOnlyInScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanViewScanOnlyInScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanViewScanOnlyInScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PscanViewScannersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r PscanViewScannersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PscanViewScannersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacerActionAddRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ReplacerActionAddRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacerActionAddRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacerActionRemoveRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ReplacerActionRemoveRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacerActionRemoveRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacerActionSetEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ReplacerActionSetEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacerActionSetEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacerViewRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ReplacerViewRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacerViewRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportsActionGenerateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ReportsActionGenerateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportsActionGenerateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportsViewTemplateDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ReportsViewTemplateDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportsViewTemplateDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportsViewTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ReportsViewTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportsViewTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetestActionRetestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r RetestActionRetestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetestActionRetestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevealActionSetRevealResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r RevealActionSetRevealResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevealActionSetRevealResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevealViewRevealResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r RevealViewRevealResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevealViewRevealResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevisitActionRevisitSiteOffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r RevisitActionRevisitSiteOffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevisitActionRevisitSiteOffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevisitActionRevisitSiteOnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r RevisitActionRevisitSiteOnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevisitActionRevisitSiteOnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevisitViewRevisitListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r RevisitViewRevisitListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevisitViewRevisitListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleConfigActionResetAllRuleConfigValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r RuleConfigActionResetAllRuleConfigValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleConfigActionResetAllRuleConfigValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleConfigActionResetRuleConfigValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r RuleConfigActionResetRuleConfigValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleConfigActionResetRuleConfigValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleConfigActionSetRuleConfigValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r RuleConfigActionSetRuleConfigValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleConfigActionSetRuleConfigValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleConfigViewAllRuleConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r RuleConfigViewAllRuleConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleConfigViewAllRuleConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleConfigViewRuleConfigValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r RuleConfigViewRuleConfigValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleConfigViewRuleConfigValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptActionClearGlobalCustomVarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptActionClearGlobalCustomVarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptActionClearGlobalCustomVarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptActionClearGlobalVarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptActionClearGlobalVarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptActionClearGlobalVarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptActionClearGlobalVarsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptActionClearGlobalVarsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptActionClearGlobalVarsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptActionClearScriptCustomVarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptActionClearScriptCustomVarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptActionClearScriptCustomVarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptActionClearScriptVarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptActionClearScriptVarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptActionClearScriptVarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptActionClearScriptVarsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptActionClearScriptVarsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptActionClearScriptVarsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptActionDisableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptActionDisableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptActionDisableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptActionEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptActionEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptActionEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptActionLoadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptActionLoadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptActionLoadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptActionRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptActionRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptActionRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptActionRunStandAloneScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptActionRunStandAloneScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptActionRunStandAloneScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptActionSetGlobalVarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptActionSetGlobalVarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptActionSetGlobalVarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptActionSetScriptVarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptActionSetScriptVarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptActionSetScriptVarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptViewGlobalCustomVarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptViewGlobalCustomVarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptViewGlobalCustomVarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptViewGlobalCustomVarsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptViewGlobalCustomVarsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptViewGlobalCustomVarsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptViewGlobalVarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptViewGlobalVarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptViewGlobalVarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptViewGlobalVarsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptViewGlobalVarsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptViewGlobalVarsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptViewListEnginesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptViewListEnginesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptViewListEnginesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptViewListScriptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptViewListScriptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptViewListScriptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptViewListTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptViewListTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptViewListTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptViewScriptCustomVarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptViewScriptCustomVarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptViewScriptCustomVarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptViewScriptCustomVarsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptViewScriptCustomVarsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptViewScriptCustomVarsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptViewScriptVarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptViewScriptVarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptViewScriptVarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScriptViewScriptVarsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r ScriptViewScriptVarsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScriptViewScriptVarsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchViewMessagesByHeaderRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SearchViewMessagesByHeaderRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchViewMessagesByHeaderRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchViewMessagesByNoteRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SearchViewMessagesByNoteRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchViewMessagesByNoteRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchViewMessagesByRequestRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SearchViewMessagesByRequestRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchViewMessagesByRequestRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchViewMessagesByResponseRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SearchViewMessagesByResponseRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchViewMessagesByResponseRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchViewMessagesByTagRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SearchViewMessagesByTagRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchViewMessagesByTagRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchViewMessagesByUrlRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SearchViewMessagesByUrlRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchViewMessagesByUrlRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchViewUrlsByHeaderRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SearchViewUrlsByHeaderRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchViewUrlsByHeaderRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchViewUrlsByNoteRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SearchViewUrlsByNoteRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchViewUrlsByNoteRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchViewUrlsByRequestRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SearchViewUrlsByRequestRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchViewUrlsByRequestRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchViewUrlsByResponseRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SearchViewUrlsByResponseRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchViewUrlsByResponseRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchViewUrlsByTagRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SearchViewUrlsByTagRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchViewUrlsByTagRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchViewUrlsByUrlRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SearchViewUrlsByUrlRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchViewUrlsByUrlRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumActionAddBrowserArgumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumActionAddBrowserArgumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumActionAddBrowserArgumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumActionLaunchBrowserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumActionLaunchBrowserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumActionLaunchBrowserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumActionRemoveBrowserArgumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumActionRemoveBrowserArgumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumActionRemoveBrowserArgumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumActionSetBrowserArgumentEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumActionSetBrowserArgumentEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumActionSetBrowserArgumentEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumActionSetOptionChromeBinaryPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumActionSetOptionChromeBinaryPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumActionSetOptionChromeBinaryPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumActionSetOptionChromeDriverPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumActionSetOptionChromeDriverPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumActionSetOptionChromeDriverPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumActionSetOptionFirefoxBinaryPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumActionSetOptionFirefoxBinaryPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumActionSetOptionFirefoxBinaryPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumActionSetOptionFirefoxDefaultProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumActionSetOptionFirefoxDefaultProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumActionSetOptionFirefoxDefaultProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumActionSetOptionFirefoxDriverPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumActionSetOptionFirefoxDriverPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumActionSetOptionFirefoxDriverPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumActionSetOptionIeDriverPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumActionSetOptionIeDriverPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumActionSetOptionIeDriverPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumActionSetOptionLastDirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumActionSetOptionLastDirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumActionSetOptionLastDirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumActionSetOptionPhantomJsBinaryPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumActionSetOptionPhantomJsBinaryPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumActionSetOptionPhantomJsBinaryPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumViewGetBrowserArgumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumViewGetBrowserArgumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumViewGetBrowserArgumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumViewOptionBrowserExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumViewOptionBrowserExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumViewOptionBrowserExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumViewOptionChromeBinaryPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumViewOptionChromeBinaryPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumViewOptionChromeBinaryPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumViewOptionChromeDriverPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumViewOptionChromeDriverPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumViewOptionChromeDriverPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumViewOptionFirefoxBinaryPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumViewOptionFirefoxBinaryPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumViewOptionFirefoxBinaryPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumViewOptionFirefoxDefaultProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumViewOptionFirefoxDefaultProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumViewOptionFirefoxDefaultProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumViewOptionFirefoxDriverPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumViewOptionFirefoxDriverPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumViewOptionFirefoxDriverPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumViewOptionIeDriverPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumViewOptionIeDriverPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumViewOptionIeDriverPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumViewOptionLastDirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumViewOptionLastDirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumViewOptionLastDirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeleniumViewOptionPhantomJsBinaryPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SeleniumViewOptionPhantomJsBinaryPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeleniumViewOptionPhantomJsBinaryPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SessionManagementActionSetSessionManagementMethodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SessionManagementActionSetSessionManagementMethodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SessionManagementActionSetSessionManagementMethodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SessionManagementViewGetSessionManagementMethodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SessionManagementViewGetSessionManagementMethodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SessionManagementViewGetSessionManagementMethodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SessionManagementViewGetSessionManagementMethodConfigParamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SessionManagementViewGetSessionManagementMethodConfigParamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SessionManagementViewGetSessionManagementMethodConfigParamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SessionManagementViewGetSupportedSessionManagementMethodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SessionManagementViewGetSupportedSessionManagementMethodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SessionManagementViewGetSupportedSessionManagementMethodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SoapActionImportFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SoapActionImportFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SoapActionImportFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SoapActionImportUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SoapActionImportUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SoapActionImportUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionAddDomainAlwaysInScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionAddDomainAlwaysInScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionAddDomainAlwaysInScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionClearExcludedFromScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionClearExcludedFromScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionClearExcludedFromScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionDisableAllDomainsAlwaysInScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionDisableAllDomainsAlwaysInScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionDisableAllDomainsAlwaysInScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionEnableAllDomainsAlwaysInScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionEnableAllDomainsAlwaysInScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionEnableAllDomainsAlwaysInScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionExcludeFromScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionExcludeFromScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionExcludeFromScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionModifyDomainAlwaysInScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionModifyDomainAlwaysInScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionModifyDomainAlwaysInScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionPauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionPauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionPauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionPauseAllScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionPauseAllScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionPauseAllScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionRemoveAllScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionRemoveAllScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionRemoveAllScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionRemoveDomainAlwaysInScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionRemoveDomainAlwaysInScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionRemoveDomainAlwaysInScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionRemoveScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionRemoveScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionRemoveScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionResumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionResumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionResumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionResumeAllScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionResumeAllScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionResumeAllScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionScanAsUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionScanAsUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionScanAsUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionAcceptCookiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionAcceptCookiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionAcceptCookiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionHandleODataParametersVisitedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionHandleODataParametersVisitedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionHandleODataParametersVisitedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionHandleParametersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionHandleParametersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionHandleParametersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionLogoutAvoidanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionLogoutAvoidanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionLogoutAvoidanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionMaxChildrenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionMaxChildrenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionMaxChildrenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionMaxDepthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionMaxDepthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionMaxDepthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionMaxDurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionMaxDurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionMaxDurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionMaxParseSizeBytesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionMaxParseSizeBytesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionMaxParseSizeBytesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionMaxScansInUIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionMaxScansInUIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionMaxScansInUIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionParseCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionParseCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionParseCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionParseDsStoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionParseDsStoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionParseDsStoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionParseGitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionParseGitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionParseGitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionParseRobotsTxtResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionParseRobotsTxtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionParseRobotsTxtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionParseSVNEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionParseSVNEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionParseSVNEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionParseSitemapXmlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionParseSitemapXmlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionParseSitemapXmlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionPostFormResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionPostFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionPostFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionProcessFormResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionProcessFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionProcessFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionSendRefererHeaderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionSendRefererHeaderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionSendRefererHeaderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionShowAdvancedDialogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionShowAdvancedDialogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionShowAdvancedDialogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionSkipURLStringResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionSkipURLStringResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionSkipURLStringResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionThreadCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionThreadCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionThreadCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionSetOptionUserAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionSetOptionUserAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionSetOptionUserAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderActionStopAllScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderActionStopAllScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderActionStopAllScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewAddedNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewAddedNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewAddedNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewAllUrlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewAllUrlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewAllUrlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewDomainsAlwaysInScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewDomainsAlwaysInScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewDomainsAlwaysInScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewExcludedFromScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewExcludedFromScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewExcludedFromScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewFullResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewFullResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewFullResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionAcceptCookiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionAcceptCookiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionAcceptCookiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionDomainsAlwaysInScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionDomainsAlwaysInScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionDomainsAlwaysInScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionDomainsAlwaysInScopeEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionDomainsAlwaysInScopeEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionDomainsAlwaysInScopeEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionHandleODataParametersVisitedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionHandleODataParametersVisitedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionHandleODataParametersVisitedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionHandleParametersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionHandleParametersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionHandleParametersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionLogoutAvoidanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionLogoutAvoidanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionLogoutAvoidanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionMaxChildrenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionMaxChildrenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionMaxChildrenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionMaxDepthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionMaxDepthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionMaxDepthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionMaxDurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionMaxDurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionMaxDurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionMaxParseSizeBytesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionMaxParseSizeBytesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionMaxParseSizeBytesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionMaxScansInUIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionMaxScansInUIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionMaxScansInUIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionParseCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionParseCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionParseCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionParseDsStoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionParseDsStoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionParseDsStoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionParseGitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionParseGitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionParseGitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionParseRobotsTxtResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionParseRobotsTxtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionParseRobotsTxtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionParseSVNEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionParseSVNEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionParseSVNEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionParseSitemapXmlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionParseSitemapXmlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionParseSitemapXmlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionPostFormResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionPostFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionPostFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionProcessFormResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionProcessFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionProcessFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionSendRefererHeaderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionSendRefererHeaderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionSendRefererHeaderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionShowAdvancedDialogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionShowAdvancedDialogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionShowAdvancedDialogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionSkipURLStringResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionSkipURLStringResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionSkipURLStringResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionThreadCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionThreadCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionThreadCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewOptionUserAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewOptionUserAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewOptionUserAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpiderViewStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r SpiderViewStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpiderViewStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatsActionClearStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r StatsActionClearStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatsActionClearStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatsActionSetOptionInMemoryEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r StatsActionSetOptionInMemoryEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatsActionSetOptionInMemoryEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatsActionSetOptionStatsdHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r StatsActionSetOptionStatsdHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatsActionSetOptionStatsdHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatsActionSetOptionStatsdPortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r StatsActionSetOptionStatsdPortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatsActionSetOptionStatsdPortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatsActionSetOptionStatsdPrefixResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r StatsActionSetOptionStatsdPrefixResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatsActionSetOptionStatsdPrefixResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatsViewAllSitesStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r StatsViewAllSitesStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatsViewAllSitesStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatsViewOptionInMemoryEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r StatsViewOptionInMemoryEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatsViewOptionInMemoryEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatsViewOptionStatsdEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r StatsViewOptionStatsdEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatsViewOptionStatsdEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatsViewOptionStatsdHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r StatsViewOptionStatsdHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatsViewOptionStatsdHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatsViewOptionStatsdPortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r StatsViewOptionStatsdPortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatsViewOptionStatsdPortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatsViewOptionStatsdPrefixResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r StatsViewOptionStatsdPrefixResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatsViewOptionStatsdPrefixResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatsViewSiteStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r StatsViewSiteStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatsViewSiteStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatsViewStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r StatsViewStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatsViewStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersActionAuthenticateAsUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r UsersActionAuthenticateAsUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersActionAuthenticateAsUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersActionNewUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r UsersActionNewUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersActionNewUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersActionPollAsUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r UsersActionPollAsUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersActionPollAsUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersActionRemoveUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r UsersActionRemoveUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersActionRemoveUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersActionSetAuthenticationCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r UsersActionSetAuthenticationCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersActionSetAuthenticationCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersActionSetAuthenticationStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r UsersActionSetAuthenticationStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersActionSetAuthenticationStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersActionSetCookieResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r UsersActionSetCookieResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersActionSetCookieResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersActionSetUserEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r UsersActionSetUserEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersActionSetUserEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersActionSetUserNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r UsersActionSetUserNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersActionSetUserNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersViewGetAuthenticationCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r UsersViewGetAuthenticationCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersViewGetAuthenticationCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersViewGetAuthenticationCredentialsConfigParamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r UsersViewGetAuthenticationCredentialsConfigParamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersViewGetAuthenticationCredentialsConfigParamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersViewGetAuthenticationSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r UsersViewGetAuthenticationSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersViewGetAuthenticationSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersViewGetAuthenticationStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r UsersViewGetAuthenticationStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersViewGetAuthenticationStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersViewGetUserByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r UsersViewGetUserByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersViewGetUserByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersViewUsersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r UsersViewUsersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersViewUsersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WappalyzerViewListAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r WappalyzerViewListAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WappalyzerViewListAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WappalyzerViewListSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r WappalyzerViewListSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WappalyzerViewListSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WappalyzerViewListSitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r WappalyzerViewListSitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WappalyzerViewListSitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebsocketActionSendTextMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r WebsocketActionSendTextMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebsocketActionSendTextMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebsocketActionSetBreakTextMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r WebsocketActionSetBreakTextMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebsocketActionSetBreakTextMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebsocketViewBreakTextMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r WebsocketViewBreakTextMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebsocketViewBreakTextMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebsocketViewChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r WebsocketViewChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebsocketViewChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebsocketViewMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r WebsocketViewMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebsocketViewMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebsocketViewMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorJson
}

// Status returns HTTPResponse.Status
func (r WebsocketViewMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebsocketViewMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcsrfOtherGenFormResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AcsrfOtherGenFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcsrfOtherGenFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreOtherFileDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CoreOtherFileDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreOtherFileDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreOtherFileUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CoreOtherFileUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreOtherFileUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreOtherHtmlreportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CoreOtherHtmlreportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreOtherHtmlreportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreOtherJsonreportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CoreOtherJsonreportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreOtherJsonreportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreOtherMdreportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CoreOtherMdreportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreOtherMdreportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreOtherMessageHarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CoreOtherMessageHarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreOtherMessageHarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreOtherMessagesHarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CoreOtherMessagesHarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreOtherMessagesHarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreOtherMessagesHarByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CoreOtherMessagesHarByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreOtherMessagesHarByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreOtherProxyPacResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CoreOtherProxyPacResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreOtherProxyPacResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreOtherRootcertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CoreOtherRootcertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreOtherRootcertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreOtherSendHarRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CoreOtherSendHarRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreOtherSendHarRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreOtherSetproxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CoreOtherSetproxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreOtherSetproxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CoreOtherXmlreportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CoreOtherXmlreportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CoreOtherXmlreportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevOtherOpenapiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DevOtherOpenapiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevOtherOpenapiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EximOtherExportHarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EximOtherExportHarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EximOtherExportHarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EximOtherExportHarByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EximOtherExportHarByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EximOtherExportHarByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EximOtherSendHarRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EximOtherSendHarRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EximOtherSendHarRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HudOtherChangesInHtmlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HudOtherChangesInHtmlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HudOtherChangesInHtmlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeyboardOtherCheatsheetActionOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r KeyboardOtherCheatsheetActionOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeyboardOtherCheatsheetActionOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeyboardOtherCheatsheetKeyOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r KeyboardOtherCheatsheetKeyOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeyboardOtherCheatsheetKeyOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkOtherProxyPacResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NetworkOtherProxyPacResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkOtherProxyPacResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkOtherRootCaCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NetworkOtherRootCaCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkOtherRootCaCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkOtherSetProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NetworkOtherSetProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkOtherSetProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PnhOtherFxPnhXpiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PnhOtherFxPnhXpiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PnhOtherFxPnhXpiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PnhOtherManifestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PnhOtherManifestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PnhOtherManifestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PnhOtherPnhResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PnhOtherPnhResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PnhOtherPnhResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PnhOtherServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PnhOtherServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PnhOtherServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuickstartlaunchOtherStartPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QuickstartlaunchOtherStartPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuickstartlaunchOtherStartPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchOtherHarByHeaderRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SearchOtherHarByHeaderRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchOtherHarByHeaderRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchOtherHarByNoteRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SearchOtherHarByNoteRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchOtherHarByNoteRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchOtherHarByRequestRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SearchOtherHarByRequestRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchOtherHarByRequestRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchOtherHarByResponseRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SearchOtherHarByResponseRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchOtherHarByResponseRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchOtherHarByTagRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SearchOtherHarByTagRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchOtherHarByTagRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchOtherHarByUrlRegexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SearchOtherHarByUrlRegexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchOtherHarByUrlRegexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AccessControlActionScanWithResponse request returning *AccessControlActionScanResponse
func (c *ClientWithResponses) AccessControlActionScanWithResponse(ctx context.Context, params *AccessControlActionScanParams, reqEditors ...RequestEditorFn) (*AccessControlActionScanResponse, error) {
	rsp, err := c.AccessControlActionScan(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessControlActionScanResponse(rsp)
}

// AccessControlActionWriteHTMLreportWithResponse request returning *AccessControlActionWriteHTMLreportResponse
func (c *ClientWithResponses) AccessControlActionWriteHTMLreportWithResponse(ctx context.Context, params *AccessControlActionWriteHTMLreportParams, reqEditors ...RequestEditorFn) (*AccessControlActionWriteHTMLreportResponse, error) {
	rsp, err := c.AccessControlActionWriteHTMLreport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessControlActionWriteHTMLreportResponse(rsp)
}

// AccessControlViewGetScanProgressWithResponse request returning *AccessControlViewGetScanProgressResponse
func (c *ClientWithResponses) AccessControlViewGetScanProgressWithResponse(ctx context.Context, params *AccessControlViewGetScanProgressParams, reqEditors ...RequestEditorFn) (*AccessControlViewGetScanProgressResponse, error) {
	rsp, err := c.AccessControlViewGetScanProgress(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessControlViewGetScanProgressResponse(rsp)
}

// AccessControlViewGetScanStatusWithResponse request returning *AccessControlViewGetScanStatusResponse
func (c *ClientWithResponses) AccessControlViewGetScanStatusWithResponse(ctx context.Context, params *AccessControlViewGetScanStatusParams, reqEditors ...RequestEditorFn) (*AccessControlViewGetScanStatusResponse, error) {
	rsp, err := c.AccessControlViewGetScanStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessControlViewGetScanStatusResponse(rsp)
}

// AcsrfActionAddOptionTokenWithResponse request returning *AcsrfActionAddOptionTokenResponse
func (c *ClientWithResponses) AcsrfActionAddOptionTokenWithResponse(ctx context.Context, params *AcsrfActionAddOptionTokenParams, reqEditors ...RequestEditorFn) (*AcsrfActionAddOptionTokenResponse, error) {
	rsp, err := c.AcsrfActionAddOptionToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcsrfActionAddOptionTokenResponse(rsp)
}

// AcsrfActionRemoveOptionTokenWithResponse request returning *AcsrfActionRemoveOptionTokenResponse
func (c *ClientWithResponses) AcsrfActionRemoveOptionTokenWithResponse(ctx context.Context, params *AcsrfActionRemoveOptionTokenParams, reqEditors ...RequestEditorFn) (*AcsrfActionRemoveOptionTokenResponse, error) {
	rsp, err := c.AcsrfActionRemoveOptionToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcsrfActionRemoveOptionTokenResponse(rsp)
}

// AcsrfActionSetOptionPartialMatchingEnabledWithResponse request returning *AcsrfActionSetOptionPartialMatchingEnabledResponse
func (c *ClientWithResponses) AcsrfActionSetOptionPartialMatchingEnabledWithResponse(ctx context.Context, params *AcsrfActionSetOptionPartialMatchingEnabledParams, reqEditors ...RequestEditorFn) (*AcsrfActionSetOptionPartialMatchingEnabledResponse, error) {
	rsp, err := c.AcsrfActionSetOptionPartialMatchingEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcsrfActionSetOptionPartialMatchingEnabledResponse(rsp)
}

// AcsrfViewOptionPartialMatchingEnabledWithResponse request returning *AcsrfViewOptionPartialMatchingEnabledResponse
func (c *ClientWithResponses) AcsrfViewOptionPartialMatchingEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AcsrfViewOptionPartialMatchingEnabledResponse, error) {
	rsp, err := c.AcsrfViewOptionPartialMatchingEnabled(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcsrfViewOptionPartialMatchingEnabledResponse(rsp)
}

// AcsrfViewOptionTokensNamesWithResponse request returning *AcsrfViewOptionTokensNamesResponse
func (c *ClientWithResponses) AcsrfViewOptionTokensNamesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AcsrfViewOptionTokensNamesResponse, error) {
	rsp, err := c.AcsrfViewOptionTokensNames(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcsrfViewOptionTokensNamesResponse(rsp)
}

// AjaxSpiderActionAddAllowedResourceWithResponse request returning *AjaxSpiderActionAddAllowedResourceResponse
func (c *ClientWithResponses) AjaxSpiderActionAddAllowedResourceWithResponse(ctx context.Context, params *AjaxSpiderActionAddAllowedResourceParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionAddAllowedResourceResponse, error) {
	rsp, err := c.AjaxSpiderActionAddAllowedResource(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionAddAllowedResourceResponse(rsp)
}

// AjaxSpiderActionAddExcludedElementWithResponse request returning *AjaxSpiderActionAddExcludedElementResponse
func (c *ClientWithResponses) AjaxSpiderActionAddExcludedElementWithResponse(ctx context.Context, params *AjaxSpiderActionAddExcludedElementParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionAddExcludedElementResponse, error) {
	rsp, err := c.AjaxSpiderActionAddExcludedElement(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionAddExcludedElementResponse(rsp)
}

// AjaxSpiderActionModifyExcludedElementWithResponse request returning *AjaxSpiderActionModifyExcludedElementResponse
func (c *ClientWithResponses) AjaxSpiderActionModifyExcludedElementWithResponse(ctx context.Context, params *AjaxSpiderActionModifyExcludedElementParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionModifyExcludedElementResponse, error) {
	rsp, err := c.AjaxSpiderActionModifyExcludedElement(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionModifyExcludedElementResponse(rsp)
}

// AjaxSpiderActionRemoveAllowedResourceWithResponse request returning *AjaxSpiderActionRemoveAllowedResourceResponse
func (c *ClientWithResponses) AjaxSpiderActionRemoveAllowedResourceWithResponse(ctx context.Context, params *AjaxSpiderActionRemoveAllowedResourceParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionRemoveAllowedResourceResponse, error) {
	rsp, err := c.AjaxSpiderActionRemoveAllowedResource(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionRemoveAllowedResourceResponse(rsp)
}

// AjaxSpiderActionRemoveExcludedElementWithResponse request returning *AjaxSpiderActionRemoveExcludedElementResponse
func (c *ClientWithResponses) AjaxSpiderActionRemoveExcludedElementWithResponse(ctx context.Context, params *AjaxSpiderActionRemoveExcludedElementParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionRemoveExcludedElementResponse, error) {
	rsp, err := c.AjaxSpiderActionRemoveExcludedElement(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionRemoveExcludedElementResponse(rsp)
}

// AjaxSpiderActionScanWithResponse request returning *AjaxSpiderActionScanResponse
func (c *ClientWithResponses) AjaxSpiderActionScanWithResponse(ctx context.Context, params *AjaxSpiderActionScanParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionScanResponse, error) {
	rsp, err := c.AjaxSpiderActionScan(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionScanResponse(rsp)
}

// AjaxSpiderActionScanAsUserWithResponse request returning *AjaxSpiderActionScanAsUserResponse
func (c *ClientWithResponses) AjaxSpiderActionScanAsUserWithResponse(ctx context.Context, params *AjaxSpiderActionScanAsUserParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionScanAsUserResponse, error) {
	rsp, err := c.AjaxSpiderActionScanAsUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionScanAsUserResponse(rsp)
}

// AjaxSpiderActionSetEnabledAllowedResourceWithResponse request returning *AjaxSpiderActionSetEnabledAllowedResourceResponse
func (c *ClientWithResponses) AjaxSpiderActionSetEnabledAllowedResourceWithResponse(ctx context.Context, params *AjaxSpiderActionSetEnabledAllowedResourceParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetEnabledAllowedResourceResponse, error) {
	rsp, err := c.AjaxSpiderActionSetEnabledAllowedResource(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionSetEnabledAllowedResourceResponse(rsp)
}

// AjaxSpiderActionSetOptionBrowserIdWithResponse request returning *AjaxSpiderActionSetOptionBrowserIdResponse
func (c *ClientWithResponses) AjaxSpiderActionSetOptionBrowserIdWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionBrowserIdParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionBrowserIdResponse, error) {
	rsp, err := c.AjaxSpiderActionSetOptionBrowserId(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionSetOptionBrowserIdResponse(rsp)
}

// AjaxSpiderActionSetOptionClickDefaultElemsWithResponse request returning *AjaxSpiderActionSetOptionClickDefaultElemsResponse
func (c *ClientWithResponses) AjaxSpiderActionSetOptionClickDefaultElemsWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionClickDefaultElemsParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionClickDefaultElemsResponse, error) {
	rsp, err := c.AjaxSpiderActionSetOptionClickDefaultElems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionSetOptionClickDefaultElemsResponse(rsp)
}

// AjaxSpiderActionSetOptionClickElemsOnceWithResponse request returning *AjaxSpiderActionSetOptionClickElemsOnceResponse
func (c *ClientWithResponses) AjaxSpiderActionSetOptionClickElemsOnceWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionClickElemsOnceParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionClickElemsOnceResponse, error) {
	rsp, err := c.AjaxSpiderActionSetOptionClickElemsOnce(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionSetOptionClickElemsOnceResponse(rsp)
}

// AjaxSpiderActionSetOptionEnableExtensionsWithResponse request returning *AjaxSpiderActionSetOptionEnableExtensionsResponse
func (c *ClientWithResponses) AjaxSpiderActionSetOptionEnableExtensionsWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionEnableExtensionsParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionEnableExtensionsResponse, error) {
	rsp, err := c.AjaxSpiderActionSetOptionEnableExtensions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionSetOptionEnableExtensionsResponse(rsp)
}

// AjaxSpiderActionSetOptionEventWaitWithResponse request returning *AjaxSpiderActionSetOptionEventWaitResponse
func (c *ClientWithResponses) AjaxSpiderActionSetOptionEventWaitWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionEventWaitParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionEventWaitResponse, error) {
	rsp, err := c.AjaxSpiderActionSetOptionEventWait(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionSetOptionEventWaitResponse(rsp)
}

// AjaxSpiderActionSetOptionLogoutAvoidanceWithResponse request returning *AjaxSpiderActionSetOptionLogoutAvoidanceResponse
func (c *ClientWithResponses) AjaxSpiderActionSetOptionLogoutAvoidanceWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionLogoutAvoidanceParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionLogoutAvoidanceResponse, error) {
	rsp, err := c.AjaxSpiderActionSetOptionLogoutAvoidance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionSetOptionLogoutAvoidanceResponse(rsp)
}

// AjaxSpiderActionSetOptionMaxCrawlDepthWithResponse request returning *AjaxSpiderActionSetOptionMaxCrawlDepthResponse
func (c *ClientWithResponses) AjaxSpiderActionSetOptionMaxCrawlDepthWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionMaxCrawlDepthParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionMaxCrawlDepthResponse, error) {
	rsp, err := c.AjaxSpiderActionSetOptionMaxCrawlDepth(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionSetOptionMaxCrawlDepthResponse(rsp)
}

// AjaxSpiderActionSetOptionMaxCrawlStatesWithResponse request returning *AjaxSpiderActionSetOptionMaxCrawlStatesResponse
func (c *ClientWithResponses) AjaxSpiderActionSetOptionMaxCrawlStatesWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionMaxCrawlStatesParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionMaxCrawlStatesResponse, error) {
	rsp, err := c.AjaxSpiderActionSetOptionMaxCrawlStates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionSetOptionMaxCrawlStatesResponse(rsp)
}

// AjaxSpiderActionSetOptionMaxDurationWithResponse request returning *AjaxSpiderActionSetOptionMaxDurationResponse
func (c *ClientWithResponses) AjaxSpiderActionSetOptionMaxDurationWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionMaxDurationParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionMaxDurationResponse, error) {
	rsp, err := c.AjaxSpiderActionSetOptionMaxDuration(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionSetOptionMaxDurationResponse(rsp)
}

// AjaxSpiderActionSetOptionNumberOfBrowsersWithResponse request returning *AjaxSpiderActionSetOptionNumberOfBrowsersResponse
func (c *ClientWithResponses) AjaxSpiderActionSetOptionNumberOfBrowsersWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionNumberOfBrowsersParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionNumberOfBrowsersResponse, error) {
	rsp, err := c.AjaxSpiderActionSetOptionNumberOfBrowsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionSetOptionNumberOfBrowsersResponse(rsp)
}

// AjaxSpiderActionSetOptionRandomInputsWithResponse request returning *AjaxSpiderActionSetOptionRandomInputsResponse
func (c *ClientWithResponses) AjaxSpiderActionSetOptionRandomInputsWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionRandomInputsParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionRandomInputsResponse, error) {
	rsp, err := c.AjaxSpiderActionSetOptionRandomInputs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionSetOptionRandomInputsResponse(rsp)
}

// AjaxSpiderActionSetOptionReloadWaitWithResponse request returning *AjaxSpiderActionSetOptionReloadWaitResponse
func (c *ClientWithResponses) AjaxSpiderActionSetOptionReloadWaitWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionReloadWaitParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionReloadWaitResponse, error) {
	rsp, err := c.AjaxSpiderActionSetOptionReloadWait(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionSetOptionReloadWaitResponse(rsp)
}

// AjaxSpiderActionSetOptionScopeCheckWithResponse request returning *AjaxSpiderActionSetOptionScopeCheckResponse
func (c *ClientWithResponses) AjaxSpiderActionSetOptionScopeCheckWithResponse(ctx context.Context, params *AjaxSpiderActionSetOptionScopeCheckParams, reqEditors ...RequestEditorFn) (*AjaxSpiderActionSetOptionScopeCheckResponse, error) {
	rsp, err := c.AjaxSpiderActionSetOptionScopeCheck(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionSetOptionScopeCheckResponse(rsp)
}

// AjaxSpiderActionStopWithResponse request returning *AjaxSpiderActionStopResponse
func (c *ClientWithResponses) AjaxSpiderActionStopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderActionStopResponse, error) {
	rsp, err := c.AjaxSpiderActionStop(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderActionStopResponse(rsp)
}

// AjaxSpiderViewAllowedResourcesWithResponse request returning *AjaxSpiderViewAllowedResourcesResponse
func (c *ClientWithResponses) AjaxSpiderViewAllowedResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewAllowedResourcesResponse, error) {
	rsp, err := c.AjaxSpiderViewAllowedResources(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewAllowedResourcesResponse(rsp)
}

// AjaxSpiderViewExcludedElementsWithResponse request returning *AjaxSpiderViewExcludedElementsResponse
func (c *ClientWithResponses) AjaxSpiderViewExcludedElementsWithResponse(ctx context.Context, params *AjaxSpiderViewExcludedElementsParams, reqEditors ...RequestEditorFn) (*AjaxSpiderViewExcludedElementsResponse, error) {
	rsp, err := c.AjaxSpiderViewExcludedElements(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewExcludedElementsResponse(rsp)
}

// AjaxSpiderViewFullResultsWithResponse request returning *AjaxSpiderViewFullResultsResponse
func (c *ClientWithResponses) AjaxSpiderViewFullResultsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewFullResultsResponse, error) {
	rsp, err := c.AjaxSpiderViewFullResults(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewFullResultsResponse(rsp)
}

// AjaxSpiderViewNumberOfResultsWithResponse request returning *AjaxSpiderViewNumberOfResultsResponse
func (c *ClientWithResponses) AjaxSpiderViewNumberOfResultsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewNumberOfResultsResponse, error) {
	rsp, err := c.AjaxSpiderViewNumberOfResults(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewNumberOfResultsResponse(rsp)
}

// AjaxSpiderViewOptionBrowserIdWithResponse request returning *AjaxSpiderViewOptionBrowserIdResponse
func (c *ClientWithResponses) AjaxSpiderViewOptionBrowserIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionBrowserIdResponse, error) {
	rsp, err := c.AjaxSpiderViewOptionBrowserId(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewOptionBrowserIdResponse(rsp)
}

// AjaxSpiderViewOptionClickDefaultElemsWithResponse request returning *AjaxSpiderViewOptionClickDefaultElemsResponse
func (c *ClientWithResponses) AjaxSpiderViewOptionClickDefaultElemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionClickDefaultElemsResponse, error) {
	rsp, err := c.AjaxSpiderViewOptionClickDefaultElems(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewOptionClickDefaultElemsResponse(rsp)
}

// AjaxSpiderViewOptionClickElemsOnceWithResponse request returning *AjaxSpiderViewOptionClickElemsOnceResponse
func (c *ClientWithResponses) AjaxSpiderViewOptionClickElemsOnceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionClickElemsOnceResponse, error) {
	rsp, err := c.AjaxSpiderViewOptionClickElemsOnce(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewOptionClickElemsOnceResponse(rsp)
}

// AjaxSpiderViewOptionEnableExtensionsWithResponse request returning *AjaxSpiderViewOptionEnableExtensionsResponse
func (c *ClientWithResponses) AjaxSpiderViewOptionEnableExtensionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionEnableExtensionsResponse, error) {
	rsp, err := c.AjaxSpiderViewOptionEnableExtensions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewOptionEnableExtensionsResponse(rsp)
}

// AjaxSpiderViewOptionEventWaitWithResponse request returning *AjaxSpiderViewOptionEventWaitResponse
func (c *ClientWithResponses) AjaxSpiderViewOptionEventWaitWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionEventWaitResponse, error) {
	rsp, err := c.AjaxSpiderViewOptionEventWait(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewOptionEventWaitResponse(rsp)
}

// AjaxSpiderViewOptionLogoutAvoidanceWithResponse request returning *AjaxSpiderViewOptionLogoutAvoidanceResponse
func (c *ClientWithResponses) AjaxSpiderViewOptionLogoutAvoidanceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionLogoutAvoidanceResponse, error) {
	rsp, err := c.AjaxSpiderViewOptionLogoutAvoidance(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewOptionLogoutAvoidanceResponse(rsp)
}

// AjaxSpiderViewOptionMaxCrawlDepthWithResponse request returning *AjaxSpiderViewOptionMaxCrawlDepthResponse
func (c *ClientWithResponses) AjaxSpiderViewOptionMaxCrawlDepthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionMaxCrawlDepthResponse, error) {
	rsp, err := c.AjaxSpiderViewOptionMaxCrawlDepth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewOptionMaxCrawlDepthResponse(rsp)
}

// AjaxSpiderViewOptionMaxCrawlStatesWithResponse request returning *AjaxSpiderViewOptionMaxCrawlStatesResponse
func (c *ClientWithResponses) AjaxSpiderViewOptionMaxCrawlStatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionMaxCrawlStatesResponse, error) {
	rsp, err := c.AjaxSpiderViewOptionMaxCrawlStates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewOptionMaxCrawlStatesResponse(rsp)
}

// AjaxSpiderViewOptionMaxDurationWithResponse request returning *AjaxSpiderViewOptionMaxDurationResponse
func (c *ClientWithResponses) AjaxSpiderViewOptionMaxDurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionMaxDurationResponse, error) {
	rsp, err := c.AjaxSpiderViewOptionMaxDuration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewOptionMaxDurationResponse(rsp)
}

// AjaxSpiderViewOptionNumberOfBrowsersWithResponse request returning *AjaxSpiderViewOptionNumberOfBrowsersResponse
func (c *ClientWithResponses) AjaxSpiderViewOptionNumberOfBrowsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionNumberOfBrowsersResponse, error) {
	rsp, err := c.AjaxSpiderViewOptionNumberOfBrowsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewOptionNumberOfBrowsersResponse(rsp)
}

// AjaxSpiderViewOptionRandomInputsWithResponse request returning *AjaxSpiderViewOptionRandomInputsResponse
func (c *ClientWithResponses) AjaxSpiderViewOptionRandomInputsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionRandomInputsResponse, error) {
	rsp, err := c.AjaxSpiderViewOptionRandomInputs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewOptionRandomInputsResponse(rsp)
}

// AjaxSpiderViewOptionReloadWaitWithResponse request returning *AjaxSpiderViewOptionReloadWaitResponse
func (c *ClientWithResponses) AjaxSpiderViewOptionReloadWaitWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionReloadWaitResponse, error) {
	rsp, err := c.AjaxSpiderViewOptionReloadWait(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewOptionReloadWaitResponse(rsp)
}

// AjaxSpiderViewOptionScopeCheckWithResponse request returning *AjaxSpiderViewOptionScopeCheckResponse
func (c *ClientWithResponses) AjaxSpiderViewOptionScopeCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewOptionScopeCheckResponse, error) {
	rsp, err := c.AjaxSpiderViewOptionScopeCheck(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewOptionScopeCheckResponse(rsp)
}

// AjaxSpiderViewResultsWithResponse request returning *AjaxSpiderViewResultsResponse
func (c *ClientWithResponses) AjaxSpiderViewResultsWithResponse(ctx context.Context, params *AjaxSpiderViewResultsParams, reqEditors ...RequestEditorFn) (*AjaxSpiderViewResultsResponse, error) {
	rsp, err := c.AjaxSpiderViewResults(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewResultsResponse(rsp)
}

// AjaxSpiderViewStatusWithResponse request returning *AjaxSpiderViewStatusResponse
func (c *ClientWithResponses) AjaxSpiderViewStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AjaxSpiderViewStatusResponse, error) {
	rsp, err := c.AjaxSpiderViewStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAjaxSpiderViewStatusResponse(rsp)
}

// AlertActionAddAlertWithResponse request returning *AlertActionAddAlertResponse
func (c *ClientWithResponses) AlertActionAddAlertWithResponse(ctx context.Context, params *AlertActionAddAlertParams, reqEditors ...RequestEditorFn) (*AlertActionAddAlertResponse, error) {
	rsp, err := c.AlertActionAddAlert(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertActionAddAlertResponse(rsp)
}

// AlertActionDeleteAlertWithResponse request returning *AlertActionDeleteAlertResponse
func (c *ClientWithResponses) AlertActionDeleteAlertWithResponse(ctx context.Context, params *AlertActionDeleteAlertParams, reqEditors ...RequestEditorFn) (*AlertActionDeleteAlertResponse, error) {
	rsp, err := c.AlertActionDeleteAlert(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertActionDeleteAlertResponse(rsp)
}

// AlertActionDeleteAlertsWithResponse request returning *AlertActionDeleteAlertsResponse
func (c *ClientWithResponses) AlertActionDeleteAlertsWithResponse(ctx context.Context, params *AlertActionDeleteAlertsParams, reqEditors ...RequestEditorFn) (*AlertActionDeleteAlertsResponse, error) {
	rsp, err := c.AlertActionDeleteAlerts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertActionDeleteAlertsResponse(rsp)
}

// AlertActionDeleteAllAlertsWithResponse request returning *AlertActionDeleteAllAlertsResponse
func (c *ClientWithResponses) AlertActionDeleteAllAlertsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertActionDeleteAllAlertsResponse, error) {
	rsp, err := c.AlertActionDeleteAllAlerts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertActionDeleteAllAlertsResponse(rsp)
}

// AlertActionUpdateAlertWithResponse request returning *AlertActionUpdateAlertResponse
func (c *ClientWithResponses) AlertActionUpdateAlertWithResponse(ctx context.Context, params *AlertActionUpdateAlertParams, reqEditors ...RequestEditorFn) (*AlertActionUpdateAlertResponse, error) {
	rsp, err := c.AlertActionUpdateAlert(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertActionUpdateAlertResponse(rsp)
}

// AlertActionUpdateAlertsConfidenceWithResponse request returning *AlertActionUpdateAlertsConfidenceResponse
func (c *ClientWithResponses) AlertActionUpdateAlertsConfidenceWithResponse(ctx context.Context, params *AlertActionUpdateAlertsConfidenceParams, reqEditors ...RequestEditorFn) (*AlertActionUpdateAlertsConfidenceResponse, error) {
	rsp, err := c.AlertActionUpdateAlertsConfidence(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertActionUpdateAlertsConfidenceResponse(rsp)
}

// AlertActionUpdateAlertsRiskWithResponse request returning *AlertActionUpdateAlertsRiskResponse
func (c *ClientWithResponses) AlertActionUpdateAlertsRiskWithResponse(ctx context.Context, params *AlertActionUpdateAlertsRiskParams, reqEditors ...RequestEditorFn) (*AlertActionUpdateAlertsRiskResponse, error) {
	rsp, err := c.AlertActionUpdateAlertsRisk(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertActionUpdateAlertsRiskResponse(rsp)
}

// AlertViewAlertWithResponse request returning *AlertViewAlertResponse
func (c *ClientWithResponses) AlertViewAlertWithResponse(ctx context.Context, params *AlertViewAlertParams, reqEditors ...RequestEditorFn) (*AlertViewAlertResponse, error) {
	rsp, err := c.AlertViewAlert(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertViewAlertResponse(rsp)
}

// AlertViewAlertCountsByRiskWithResponse request returning *AlertViewAlertCountsByRiskResponse
func (c *ClientWithResponses) AlertViewAlertCountsByRiskWithResponse(ctx context.Context, params *AlertViewAlertCountsByRiskParams, reqEditors ...RequestEditorFn) (*AlertViewAlertCountsByRiskResponse, error) {
	rsp, err := c.AlertViewAlertCountsByRisk(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertViewAlertCountsByRiskResponse(rsp)
}

// AlertViewAlertsWithResponse request returning *AlertViewAlertsResponse
func (c *ClientWithResponses) AlertViewAlertsWithResponse(ctx context.Context, params *AlertViewAlertsParams, reqEditors ...RequestEditorFn) (*AlertViewAlertsResponse, error) {
	rsp, err := c.AlertViewAlerts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertViewAlertsResponse(rsp)
}

// AlertViewAlertsByRiskWithResponse request returning *AlertViewAlertsByRiskResponse
func (c *ClientWithResponses) AlertViewAlertsByRiskWithResponse(ctx context.Context, params *AlertViewAlertsByRiskParams, reqEditors ...RequestEditorFn) (*AlertViewAlertsByRiskResponse, error) {
	rsp, err := c.AlertViewAlertsByRisk(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertViewAlertsByRiskResponse(rsp)
}

// AlertViewAlertsSummaryWithResponse request returning *AlertViewAlertsSummaryResponse
func (c *ClientWithResponses) AlertViewAlertsSummaryWithResponse(ctx context.Context, params *AlertViewAlertsSummaryParams, reqEditors ...RequestEditorFn) (*AlertViewAlertsSummaryResponse, error) {
	rsp, err := c.AlertViewAlertsSummary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertViewAlertsSummaryResponse(rsp)
}

// AlertViewNumberOfAlertsWithResponse request returning *AlertViewNumberOfAlertsResponse
func (c *ClientWithResponses) AlertViewNumberOfAlertsWithResponse(ctx context.Context, params *AlertViewNumberOfAlertsParams, reqEditors ...RequestEditorFn) (*AlertViewNumberOfAlertsResponse, error) {
	rsp, err := c.AlertViewNumberOfAlerts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertViewNumberOfAlertsResponse(rsp)
}

// AlertFilterActionAddAlertFilterWithResponse request returning *AlertFilterActionAddAlertFilterResponse
func (c *ClientWithResponses) AlertFilterActionAddAlertFilterWithResponse(ctx context.Context, params *AlertFilterActionAddAlertFilterParams, reqEditors ...RequestEditorFn) (*AlertFilterActionAddAlertFilterResponse, error) {
	rsp, err := c.AlertFilterActionAddAlertFilter(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertFilterActionAddAlertFilterResponse(rsp)
}

// AlertFilterActionAddGlobalAlertFilterWithResponse request returning *AlertFilterActionAddGlobalAlertFilterResponse
func (c *ClientWithResponses) AlertFilterActionAddGlobalAlertFilterWithResponse(ctx context.Context, params *AlertFilterActionAddGlobalAlertFilterParams, reqEditors ...RequestEditorFn) (*AlertFilterActionAddGlobalAlertFilterResponse, error) {
	rsp, err := c.AlertFilterActionAddGlobalAlertFilter(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertFilterActionAddGlobalAlertFilterResponse(rsp)
}

// AlertFilterActionApplyAllWithResponse request returning *AlertFilterActionApplyAllResponse
func (c *ClientWithResponses) AlertFilterActionApplyAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertFilterActionApplyAllResponse, error) {
	rsp, err := c.AlertFilterActionApplyAll(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertFilterActionApplyAllResponse(rsp)
}

// AlertFilterActionApplyContextWithResponse request returning *AlertFilterActionApplyContextResponse
func (c *ClientWithResponses) AlertFilterActionApplyContextWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertFilterActionApplyContextResponse, error) {
	rsp, err := c.AlertFilterActionApplyContext(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertFilterActionApplyContextResponse(rsp)
}

// AlertFilterActionApplyGlobalWithResponse request returning *AlertFilterActionApplyGlobalResponse
func (c *ClientWithResponses) AlertFilterActionApplyGlobalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertFilterActionApplyGlobalResponse, error) {
	rsp, err := c.AlertFilterActionApplyGlobal(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertFilterActionApplyGlobalResponse(rsp)
}

// AlertFilterActionRemoveAlertFilterWithResponse request returning *AlertFilterActionRemoveAlertFilterResponse
func (c *ClientWithResponses) AlertFilterActionRemoveAlertFilterWithResponse(ctx context.Context, params *AlertFilterActionRemoveAlertFilterParams, reqEditors ...RequestEditorFn) (*AlertFilterActionRemoveAlertFilterResponse, error) {
	rsp, err := c.AlertFilterActionRemoveAlertFilter(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertFilterActionRemoveAlertFilterResponse(rsp)
}

// AlertFilterActionRemoveGlobalAlertFilterWithResponse request returning *AlertFilterActionRemoveGlobalAlertFilterResponse
func (c *ClientWithResponses) AlertFilterActionRemoveGlobalAlertFilterWithResponse(ctx context.Context, params *AlertFilterActionRemoveGlobalAlertFilterParams, reqEditors ...RequestEditorFn) (*AlertFilterActionRemoveGlobalAlertFilterResponse, error) {
	rsp, err := c.AlertFilterActionRemoveGlobalAlertFilter(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertFilterActionRemoveGlobalAlertFilterResponse(rsp)
}

// AlertFilterActionTestAllWithResponse request returning *AlertFilterActionTestAllResponse
func (c *ClientWithResponses) AlertFilterActionTestAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertFilterActionTestAllResponse, error) {
	rsp, err := c.AlertFilterActionTestAll(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertFilterActionTestAllResponse(rsp)
}

// AlertFilterActionTestContextWithResponse request returning *AlertFilterActionTestContextResponse
func (c *ClientWithResponses) AlertFilterActionTestContextWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertFilterActionTestContextResponse, error) {
	rsp, err := c.AlertFilterActionTestContext(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertFilterActionTestContextResponse(rsp)
}

// AlertFilterActionTestGlobalWithResponse request returning *AlertFilterActionTestGlobalResponse
func (c *ClientWithResponses) AlertFilterActionTestGlobalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertFilterActionTestGlobalResponse, error) {
	rsp, err := c.AlertFilterActionTestGlobal(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertFilterActionTestGlobalResponse(rsp)
}

// AlertFilterViewAlertFilterListWithResponse request returning *AlertFilterViewAlertFilterListResponse
func (c *ClientWithResponses) AlertFilterViewAlertFilterListWithResponse(ctx context.Context, params *AlertFilterViewAlertFilterListParams, reqEditors ...RequestEditorFn) (*AlertFilterViewAlertFilterListResponse, error) {
	rsp, err := c.AlertFilterViewAlertFilterList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertFilterViewAlertFilterListResponse(rsp)
}

// AlertFilterViewGlobalAlertFilterListWithResponse request returning *AlertFilterViewGlobalAlertFilterListResponse
func (c *ClientWithResponses) AlertFilterViewGlobalAlertFilterListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertFilterViewGlobalAlertFilterListResponse, error) {
	rsp, err := c.AlertFilterViewGlobalAlertFilterList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertFilterViewGlobalAlertFilterListResponse(rsp)
}

// AscanActionAddExcludedParamWithResponse request returning *AscanActionAddExcludedParamResponse
func (c *ClientWithResponses) AscanActionAddExcludedParamWithResponse(ctx context.Context, params *AscanActionAddExcludedParamParams, reqEditors ...RequestEditorFn) (*AscanActionAddExcludedParamResponse, error) {
	rsp, err := c.AscanActionAddExcludedParam(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionAddExcludedParamResponse(rsp)
}

// AscanActionAddScanPolicyWithResponse request returning *AscanActionAddScanPolicyResponse
func (c *ClientWithResponses) AscanActionAddScanPolicyWithResponse(ctx context.Context, params *AscanActionAddScanPolicyParams, reqEditors ...RequestEditorFn) (*AscanActionAddScanPolicyResponse, error) {
	rsp, err := c.AscanActionAddScanPolicy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionAddScanPolicyResponse(rsp)
}

// AscanActionClearExcludedFromScanWithResponse request returning *AscanActionClearExcludedFromScanResponse
func (c *ClientWithResponses) AscanActionClearExcludedFromScanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanActionClearExcludedFromScanResponse, error) {
	rsp, err := c.AscanActionClearExcludedFromScan(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionClearExcludedFromScanResponse(rsp)
}

// AscanActionDisableAllScannersWithResponse request returning *AscanActionDisableAllScannersResponse
func (c *ClientWithResponses) AscanActionDisableAllScannersWithResponse(ctx context.Context, params *AscanActionDisableAllScannersParams, reqEditors ...RequestEditorFn) (*AscanActionDisableAllScannersResponse, error) {
	rsp, err := c.AscanActionDisableAllScanners(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionDisableAllScannersResponse(rsp)
}

// AscanActionDisableScannersWithResponse request returning *AscanActionDisableScannersResponse
func (c *ClientWithResponses) AscanActionDisableScannersWithResponse(ctx context.Context, params *AscanActionDisableScannersParams, reqEditors ...RequestEditorFn) (*AscanActionDisableScannersResponse, error) {
	rsp, err := c.AscanActionDisableScanners(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionDisableScannersResponse(rsp)
}

// AscanActionEnableAllScannersWithResponse request returning *AscanActionEnableAllScannersResponse
func (c *ClientWithResponses) AscanActionEnableAllScannersWithResponse(ctx context.Context, params *AscanActionEnableAllScannersParams, reqEditors ...RequestEditorFn) (*AscanActionEnableAllScannersResponse, error) {
	rsp, err := c.AscanActionEnableAllScanners(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionEnableAllScannersResponse(rsp)
}

// AscanActionEnableScannersWithResponse request returning *AscanActionEnableScannersResponse
func (c *ClientWithResponses) AscanActionEnableScannersWithResponse(ctx context.Context, params *AscanActionEnableScannersParams, reqEditors ...RequestEditorFn) (*AscanActionEnableScannersResponse, error) {
	rsp, err := c.AscanActionEnableScanners(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionEnableScannersResponse(rsp)
}

// AscanActionExcludeFromScanWithResponse request returning *AscanActionExcludeFromScanResponse
func (c *ClientWithResponses) AscanActionExcludeFromScanWithResponse(ctx context.Context, params *AscanActionExcludeFromScanParams, reqEditors ...RequestEditorFn) (*AscanActionExcludeFromScanResponse, error) {
	rsp, err := c.AscanActionExcludeFromScan(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionExcludeFromScanResponse(rsp)
}

// AscanActionImportScanPolicyWithResponse request returning *AscanActionImportScanPolicyResponse
func (c *ClientWithResponses) AscanActionImportScanPolicyWithResponse(ctx context.Context, params *AscanActionImportScanPolicyParams, reqEditors ...RequestEditorFn) (*AscanActionImportScanPolicyResponse, error) {
	rsp, err := c.AscanActionImportScanPolicy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionImportScanPolicyResponse(rsp)
}

// AscanActionModifyExcludedParamWithResponse request returning *AscanActionModifyExcludedParamResponse
func (c *ClientWithResponses) AscanActionModifyExcludedParamWithResponse(ctx context.Context, params *AscanActionModifyExcludedParamParams, reqEditors ...RequestEditorFn) (*AscanActionModifyExcludedParamResponse, error) {
	rsp, err := c.AscanActionModifyExcludedParam(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionModifyExcludedParamResponse(rsp)
}

// AscanActionPauseWithResponse request returning *AscanActionPauseResponse
func (c *ClientWithResponses) AscanActionPauseWithResponse(ctx context.Context, params *AscanActionPauseParams, reqEditors ...RequestEditorFn) (*AscanActionPauseResponse, error) {
	rsp, err := c.AscanActionPause(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionPauseResponse(rsp)
}

// AscanActionPauseAllScansWithResponse request returning *AscanActionPauseAllScansResponse
func (c *ClientWithResponses) AscanActionPauseAllScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanActionPauseAllScansResponse, error) {
	rsp, err := c.AscanActionPauseAllScans(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionPauseAllScansResponse(rsp)
}

// AscanActionRemoveAllScansWithResponse request returning *AscanActionRemoveAllScansResponse
func (c *ClientWithResponses) AscanActionRemoveAllScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanActionRemoveAllScansResponse, error) {
	rsp, err := c.AscanActionRemoveAllScans(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionRemoveAllScansResponse(rsp)
}

// AscanActionRemoveExcludedParamWithResponse request returning *AscanActionRemoveExcludedParamResponse
func (c *ClientWithResponses) AscanActionRemoveExcludedParamWithResponse(ctx context.Context, params *AscanActionRemoveExcludedParamParams, reqEditors ...RequestEditorFn) (*AscanActionRemoveExcludedParamResponse, error) {
	rsp, err := c.AscanActionRemoveExcludedParam(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionRemoveExcludedParamResponse(rsp)
}

// AscanActionRemoveScanWithResponse request returning *AscanActionRemoveScanResponse
func (c *ClientWithResponses) AscanActionRemoveScanWithResponse(ctx context.Context, params *AscanActionRemoveScanParams, reqEditors ...RequestEditorFn) (*AscanActionRemoveScanResponse, error) {
	rsp, err := c.AscanActionRemoveScan(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionRemoveScanResponse(rsp)
}

// AscanActionRemoveScanPolicyWithResponse request returning *AscanActionRemoveScanPolicyResponse
func (c *ClientWithResponses) AscanActionRemoveScanPolicyWithResponse(ctx context.Context, params *AscanActionRemoveScanPolicyParams, reqEditors ...RequestEditorFn) (*AscanActionRemoveScanPolicyResponse, error) {
	rsp, err := c.AscanActionRemoveScanPolicy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionRemoveScanPolicyResponse(rsp)
}

// AscanActionResumeWithResponse request returning *AscanActionResumeResponse
func (c *ClientWithResponses) AscanActionResumeWithResponse(ctx context.Context, params *AscanActionResumeParams, reqEditors ...RequestEditorFn) (*AscanActionResumeResponse, error) {
	rsp, err := c.AscanActionResume(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionResumeResponse(rsp)
}

// AscanActionResumeAllScansWithResponse request returning *AscanActionResumeAllScansResponse
func (c *ClientWithResponses) AscanActionResumeAllScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanActionResumeAllScansResponse, error) {
	rsp, err := c.AscanActionResumeAllScans(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionResumeAllScansResponse(rsp)
}

// AscanActionScanWithResponse request returning *AscanActionScanResponse
func (c *ClientWithResponses) AscanActionScanWithResponse(ctx context.Context, params *AscanActionScanParams, reqEditors ...RequestEditorFn) (*AscanActionScanResponse, error) {
	rsp, err := c.AscanActionScan(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionScanResponse(rsp)
}

// AscanActionScanAsUserWithResponse request returning *AscanActionScanAsUserResponse
func (c *ClientWithResponses) AscanActionScanAsUserWithResponse(ctx context.Context, params *AscanActionScanAsUserParams, reqEditors ...RequestEditorFn) (*AscanActionScanAsUserResponse, error) {
	rsp, err := c.AscanActionScanAsUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionScanAsUserResponse(rsp)
}

// AscanActionSetEnabledPoliciesWithResponse request returning *AscanActionSetEnabledPoliciesResponse
func (c *ClientWithResponses) AscanActionSetEnabledPoliciesWithResponse(ctx context.Context, params *AscanActionSetEnabledPoliciesParams, reqEditors ...RequestEditorFn) (*AscanActionSetEnabledPoliciesResponse, error) {
	rsp, err := c.AscanActionSetEnabledPolicies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetEnabledPoliciesResponse(rsp)
}

// AscanActionSetOptionAddQueryParamWithResponse request returning *AscanActionSetOptionAddQueryParamResponse
func (c *ClientWithResponses) AscanActionSetOptionAddQueryParamWithResponse(ctx context.Context, params *AscanActionSetOptionAddQueryParamParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionAddQueryParamResponse, error) {
	rsp, err := c.AscanActionSetOptionAddQueryParam(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionAddQueryParamResponse(rsp)
}

// AscanActionSetOptionAllowAttackOnStartWithResponse request returning *AscanActionSetOptionAllowAttackOnStartResponse
func (c *ClientWithResponses) AscanActionSetOptionAllowAttackOnStartWithResponse(ctx context.Context, params *AscanActionSetOptionAllowAttackOnStartParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionAllowAttackOnStartResponse, error) {
	rsp, err := c.AscanActionSetOptionAllowAttackOnStart(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionAllowAttackOnStartResponse(rsp)
}

// AscanActionSetOptionAttackPolicyWithResponse request returning *AscanActionSetOptionAttackPolicyResponse
func (c *ClientWithResponses) AscanActionSetOptionAttackPolicyWithResponse(ctx context.Context, params *AscanActionSetOptionAttackPolicyParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionAttackPolicyResponse, error) {
	rsp, err := c.AscanActionSetOptionAttackPolicy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionAttackPolicyResponse(rsp)
}

// AscanActionSetOptionDefaultPolicyWithResponse request returning *AscanActionSetOptionDefaultPolicyResponse
func (c *ClientWithResponses) AscanActionSetOptionDefaultPolicyWithResponse(ctx context.Context, params *AscanActionSetOptionDefaultPolicyParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionDefaultPolicyResponse, error) {
	rsp, err := c.AscanActionSetOptionDefaultPolicy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionDefaultPolicyResponse(rsp)
}

// AscanActionSetOptionDelayInMsWithResponse request returning *AscanActionSetOptionDelayInMsResponse
func (c *ClientWithResponses) AscanActionSetOptionDelayInMsWithResponse(ctx context.Context, params *AscanActionSetOptionDelayInMsParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionDelayInMsResponse, error) {
	rsp, err := c.AscanActionSetOptionDelayInMs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionDelayInMsResponse(rsp)
}

// AscanActionSetOptionEncodeCookieValuesWithResponse request returning *AscanActionSetOptionEncodeCookieValuesResponse
func (c *ClientWithResponses) AscanActionSetOptionEncodeCookieValuesWithResponse(ctx context.Context, params *AscanActionSetOptionEncodeCookieValuesParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionEncodeCookieValuesResponse, error) {
	rsp, err := c.AscanActionSetOptionEncodeCookieValues(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionEncodeCookieValuesResponse(rsp)
}

// AscanActionSetOptionHandleAntiCSRFTokensWithResponse request returning *AscanActionSetOptionHandleAntiCSRFTokensResponse
func (c *ClientWithResponses) AscanActionSetOptionHandleAntiCSRFTokensWithResponse(ctx context.Context, params *AscanActionSetOptionHandleAntiCSRFTokensParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionHandleAntiCSRFTokensResponse, error) {
	rsp, err := c.AscanActionSetOptionHandleAntiCSRFTokens(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionHandleAntiCSRFTokensResponse(rsp)
}

// AscanActionSetOptionHostPerScanWithResponse request returning *AscanActionSetOptionHostPerScanResponse
func (c *ClientWithResponses) AscanActionSetOptionHostPerScanWithResponse(ctx context.Context, params *AscanActionSetOptionHostPerScanParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionHostPerScanResponse, error) {
	rsp, err := c.AscanActionSetOptionHostPerScan(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionHostPerScanResponse(rsp)
}

// AscanActionSetOptionInjectPluginIdInHeaderWithResponse request returning *AscanActionSetOptionInjectPluginIdInHeaderResponse
func (c *ClientWithResponses) AscanActionSetOptionInjectPluginIdInHeaderWithResponse(ctx context.Context, params *AscanActionSetOptionInjectPluginIdInHeaderParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionInjectPluginIdInHeaderResponse, error) {
	rsp, err := c.AscanActionSetOptionInjectPluginIdInHeader(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionInjectPluginIdInHeaderResponse(rsp)
}

// AscanActionSetOptionMaxAlertsPerRuleWithResponse request returning *AscanActionSetOptionMaxAlertsPerRuleResponse
func (c *ClientWithResponses) AscanActionSetOptionMaxAlertsPerRuleWithResponse(ctx context.Context, params *AscanActionSetOptionMaxAlertsPerRuleParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionMaxAlertsPerRuleResponse, error) {
	rsp, err := c.AscanActionSetOptionMaxAlertsPerRule(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionMaxAlertsPerRuleResponse(rsp)
}

// AscanActionSetOptionMaxChartTimeInMinsWithResponse request returning *AscanActionSetOptionMaxChartTimeInMinsResponse
func (c *ClientWithResponses) AscanActionSetOptionMaxChartTimeInMinsWithResponse(ctx context.Context, params *AscanActionSetOptionMaxChartTimeInMinsParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionMaxChartTimeInMinsResponse, error) {
	rsp, err := c.AscanActionSetOptionMaxChartTimeInMins(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionMaxChartTimeInMinsResponse(rsp)
}

// AscanActionSetOptionMaxResultsToListWithResponse request returning *AscanActionSetOptionMaxResultsToListResponse
func (c *ClientWithResponses) AscanActionSetOptionMaxResultsToListWithResponse(ctx context.Context, params *AscanActionSetOptionMaxResultsToListParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionMaxResultsToListResponse, error) {
	rsp, err := c.AscanActionSetOptionMaxResultsToList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionMaxResultsToListResponse(rsp)
}

// AscanActionSetOptionMaxRuleDurationInMinsWithResponse request returning *AscanActionSetOptionMaxRuleDurationInMinsResponse
func (c *ClientWithResponses) AscanActionSetOptionMaxRuleDurationInMinsWithResponse(ctx context.Context, params *AscanActionSetOptionMaxRuleDurationInMinsParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionMaxRuleDurationInMinsResponse, error) {
	rsp, err := c.AscanActionSetOptionMaxRuleDurationInMins(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionMaxRuleDurationInMinsResponse(rsp)
}

// AscanActionSetOptionMaxScanDurationInMinsWithResponse request returning *AscanActionSetOptionMaxScanDurationInMinsResponse
func (c *ClientWithResponses) AscanActionSetOptionMaxScanDurationInMinsWithResponse(ctx context.Context, params *AscanActionSetOptionMaxScanDurationInMinsParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionMaxScanDurationInMinsResponse, error) {
	rsp, err := c.AscanActionSetOptionMaxScanDurationInMins(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionMaxScanDurationInMinsResponse(rsp)
}

// AscanActionSetOptionMaxScansInUIWithResponse request returning *AscanActionSetOptionMaxScansInUIResponse
func (c *ClientWithResponses) AscanActionSetOptionMaxScansInUIWithResponse(ctx context.Context, params *AscanActionSetOptionMaxScansInUIParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionMaxScansInUIResponse, error) {
	rsp, err := c.AscanActionSetOptionMaxScansInUI(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionMaxScansInUIResponse(rsp)
}

// AscanActionSetOptionPromptInAttackModeWithResponse request returning *AscanActionSetOptionPromptInAttackModeResponse
func (c *ClientWithResponses) AscanActionSetOptionPromptInAttackModeWithResponse(ctx context.Context, params *AscanActionSetOptionPromptInAttackModeParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionPromptInAttackModeResponse, error) {
	rsp, err := c.AscanActionSetOptionPromptInAttackMode(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionPromptInAttackModeResponse(rsp)
}

// AscanActionSetOptionPromptToClearFinishedScansWithResponse request returning *AscanActionSetOptionPromptToClearFinishedScansResponse
func (c *ClientWithResponses) AscanActionSetOptionPromptToClearFinishedScansWithResponse(ctx context.Context, params *AscanActionSetOptionPromptToClearFinishedScansParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionPromptToClearFinishedScansResponse, error) {
	rsp, err := c.AscanActionSetOptionPromptToClearFinishedScans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionPromptToClearFinishedScansResponse(rsp)
}

// AscanActionSetOptionRescanInAttackModeWithResponse request returning *AscanActionSetOptionRescanInAttackModeResponse
func (c *ClientWithResponses) AscanActionSetOptionRescanInAttackModeWithResponse(ctx context.Context, params *AscanActionSetOptionRescanInAttackModeParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionRescanInAttackModeResponse, error) {
	rsp, err := c.AscanActionSetOptionRescanInAttackMode(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionRescanInAttackModeResponse(rsp)
}

// AscanActionSetOptionScanHeadersAllRequestsWithResponse request returning *AscanActionSetOptionScanHeadersAllRequestsResponse
func (c *ClientWithResponses) AscanActionSetOptionScanHeadersAllRequestsWithResponse(ctx context.Context, params *AscanActionSetOptionScanHeadersAllRequestsParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionScanHeadersAllRequestsResponse, error) {
	rsp, err := c.AscanActionSetOptionScanHeadersAllRequests(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionScanHeadersAllRequestsResponse(rsp)
}

// AscanActionSetOptionScanNullJsonValuesWithResponse request returning *AscanActionSetOptionScanNullJsonValuesResponse
func (c *ClientWithResponses) AscanActionSetOptionScanNullJsonValuesWithResponse(ctx context.Context, params *AscanActionSetOptionScanNullJsonValuesParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionScanNullJsonValuesResponse, error) {
	rsp, err := c.AscanActionSetOptionScanNullJsonValues(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionScanNullJsonValuesResponse(rsp)
}

// AscanActionSetOptionShowAdvancedDialogWithResponse request returning *AscanActionSetOptionShowAdvancedDialogResponse
func (c *ClientWithResponses) AscanActionSetOptionShowAdvancedDialogWithResponse(ctx context.Context, params *AscanActionSetOptionShowAdvancedDialogParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionShowAdvancedDialogResponse, error) {
	rsp, err := c.AscanActionSetOptionShowAdvancedDialog(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionShowAdvancedDialogResponse(rsp)
}

// AscanActionSetOptionTargetParamsEnabledRPCWithResponse request returning *AscanActionSetOptionTargetParamsEnabledRPCResponse
func (c *ClientWithResponses) AscanActionSetOptionTargetParamsEnabledRPCWithResponse(ctx context.Context, params *AscanActionSetOptionTargetParamsEnabledRPCParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionTargetParamsEnabledRPCResponse, error) {
	rsp, err := c.AscanActionSetOptionTargetParamsEnabledRPC(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionTargetParamsEnabledRPCResponse(rsp)
}

// AscanActionSetOptionTargetParamsInjectableWithResponse request returning *AscanActionSetOptionTargetParamsInjectableResponse
func (c *ClientWithResponses) AscanActionSetOptionTargetParamsInjectableWithResponse(ctx context.Context, params *AscanActionSetOptionTargetParamsInjectableParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionTargetParamsInjectableResponse, error) {
	rsp, err := c.AscanActionSetOptionTargetParamsInjectable(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionTargetParamsInjectableResponse(rsp)
}

// AscanActionSetOptionThreadPerHostWithResponse request returning *AscanActionSetOptionThreadPerHostResponse
func (c *ClientWithResponses) AscanActionSetOptionThreadPerHostWithResponse(ctx context.Context, params *AscanActionSetOptionThreadPerHostParams, reqEditors ...RequestEditorFn) (*AscanActionSetOptionThreadPerHostResponse, error) {
	rsp, err := c.AscanActionSetOptionThreadPerHost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetOptionThreadPerHostResponse(rsp)
}

// AscanActionSetPolicyAlertThresholdWithResponse request returning *AscanActionSetPolicyAlertThresholdResponse
func (c *ClientWithResponses) AscanActionSetPolicyAlertThresholdWithResponse(ctx context.Context, params *AscanActionSetPolicyAlertThresholdParams, reqEditors ...RequestEditorFn) (*AscanActionSetPolicyAlertThresholdResponse, error) {
	rsp, err := c.AscanActionSetPolicyAlertThreshold(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetPolicyAlertThresholdResponse(rsp)
}

// AscanActionSetPolicyAttackStrengthWithResponse request returning *AscanActionSetPolicyAttackStrengthResponse
func (c *ClientWithResponses) AscanActionSetPolicyAttackStrengthWithResponse(ctx context.Context, params *AscanActionSetPolicyAttackStrengthParams, reqEditors ...RequestEditorFn) (*AscanActionSetPolicyAttackStrengthResponse, error) {
	rsp, err := c.AscanActionSetPolicyAttackStrength(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetPolicyAttackStrengthResponse(rsp)
}

// AscanActionSetScannerAlertThresholdWithResponse request returning *AscanActionSetScannerAlertThresholdResponse
func (c *ClientWithResponses) AscanActionSetScannerAlertThresholdWithResponse(ctx context.Context, params *AscanActionSetScannerAlertThresholdParams, reqEditors ...RequestEditorFn) (*AscanActionSetScannerAlertThresholdResponse, error) {
	rsp, err := c.AscanActionSetScannerAlertThreshold(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetScannerAlertThresholdResponse(rsp)
}

// AscanActionSetScannerAttackStrengthWithResponse request returning *AscanActionSetScannerAttackStrengthResponse
func (c *ClientWithResponses) AscanActionSetScannerAttackStrengthWithResponse(ctx context.Context, params *AscanActionSetScannerAttackStrengthParams, reqEditors ...RequestEditorFn) (*AscanActionSetScannerAttackStrengthResponse, error) {
	rsp, err := c.AscanActionSetScannerAttackStrength(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSetScannerAttackStrengthResponse(rsp)
}

// AscanActionSkipScannerWithResponse request returning *AscanActionSkipScannerResponse
func (c *ClientWithResponses) AscanActionSkipScannerWithResponse(ctx context.Context, params *AscanActionSkipScannerParams, reqEditors ...RequestEditorFn) (*AscanActionSkipScannerResponse, error) {
	rsp, err := c.AscanActionSkipScanner(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionSkipScannerResponse(rsp)
}

// AscanActionStopWithResponse request returning *AscanActionStopResponse
func (c *ClientWithResponses) AscanActionStopWithResponse(ctx context.Context, params *AscanActionStopParams, reqEditors ...RequestEditorFn) (*AscanActionStopResponse, error) {
	rsp, err := c.AscanActionStop(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionStopResponse(rsp)
}

// AscanActionStopAllScansWithResponse request returning *AscanActionStopAllScansResponse
func (c *ClientWithResponses) AscanActionStopAllScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanActionStopAllScansResponse, error) {
	rsp, err := c.AscanActionStopAllScans(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionStopAllScansResponse(rsp)
}

// AscanActionUpdateScanPolicyWithResponse request returning *AscanActionUpdateScanPolicyResponse
func (c *ClientWithResponses) AscanActionUpdateScanPolicyWithResponse(ctx context.Context, params *AscanActionUpdateScanPolicyParams, reqEditors ...RequestEditorFn) (*AscanActionUpdateScanPolicyResponse, error) {
	rsp, err := c.AscanActionUpdateScanPolicy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanActionUpdateScanPolicyResponse(rsp)
}

// AscanViewAlertsIdsWithResponse request returning *AscanViewAlertsIdsResponse
func (c *ClientWithResponses) AscanViewAlertsIdsWithResponse(ctx context.Context, params *AscanViewAlertsIdsParams, reqEditors ...RequestEditorFn) (*AscanViewAlertsIdsResponse, error) {
	rsp, err := c.AscanViewAlertsIds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewAlertsIdsResponse(rsp)
}

// AscanViewAttackModeQueueWithResponse request returning *AscanViewAttackModeQueueResponse
func (c *ClientWithResponses) AscanViewAttackModeQueueWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewAttackModeQueueResponse, error) {
	rsp, err := c.AscanViewAttackModeQueue(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewAttackModeQueueResponse(rsp)
}

// AscanViewExcludedFromScanWithResponse request returning *AscanViewExcludedFromScanResponse
func (c *ClientWithResponses) AscanViewExcludedFromScanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewExcludedFromScanResponse, error) {
	rsp, err := c.AscanViewExcludedFromScan(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewExcludedFromScanResponse(rsp)
}

// AscanViewExcludedParamTypesWithResponse request returning *AscanViewExcludedParamTypesResponse
func (c *ClientWithResponses) AscanViewExcludedParamTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewExcludedParamTypesResponse, error) {
	rsp, err := c.AscanViewExcludedParamTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewExcludedParamTypesResponse(rsp)
}

// AscanViewExcludedParamsWithResponse request returning *AscanViewExcludedParamsResponse
func (c *ClientWithResponses) AscanViewExcludedParamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewExcludedParamsResponse, error) {
	rsp, err := c.AscanViewExcludedParams(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewExcludedParamsResponse(rsp)
}

// AscanViewMessagesIdsWithResponse request returning *AscanViewMessagesIdsResponse
func (c *ClientWithResponses) AscanViewMessagesIdsWithResponse(ctx context.Context, params *AscanViewMessagesIdsParams, reqEditors ...RequestEditorFn) (*AscanViewMessagesIdsResponse, error) {
	rsp, err := c.AscanViewMessagesIds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewMessagesIdsResponse(rsp)
}

// AscanViewOptionAddQueryParamWithResponse request returning *AscanViewOptionAddQueryParamResponse
func (c *ClientWithResponses) AscanViewOptionAddQueryParamWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionAddQueryParamResponse, error) {
	rsp, err := c.AscanViewOptionAddQueryParam(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionAddQueryParamResponse(rsp)
}

// AscanViewOptionAllowAttackOnStartWithResponse request returning *AscanViewOptionAllowAttackOnStartResponse
func (c *ClientWithResponses) AscanViewOptionAllowAttackOnStartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionAllowAttackOnStartResponse, error) {
	rsp, err := c.AscanViewOptionAllowAttackOnStart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionAllowAttackOnStartResponse(rsp)
}

// AscanViewOptionAttackPolicyWithResponse request returning *AscanViewOptionAttackPolicyResponse
func (c *ClientWithResponses) AscanViewOptionAttackPolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionAttackPolicyResponse, error) {
	rsp, err := c.AscanViewOptionAttackPolicy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionAttackPolicyResponse(rsp)
}

// AscanViewOptionDefaultPolicyWithResponse request returning *AscanViewOptionDefaultPolicyResponse
func (c *ClientWithResponses) AscanViewOptionDefaultPolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionDefaultPolicyResponse, error) {
	rsp, err := c.AscanViewOptionDefaultPolicy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionDefaultPolicyResponse(rsp)
}

// AscanViewOptionDelayInMsWithResponse request returning *AscanViewOptionDelayInMsResponse
func (c *ClientWithResponses) AscanViewOptionDelayInMsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionDelayInMsResponse, error) {
	rsp, err := c.AscanViewOptionDelayInMs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionDelayInMsResponse(rsp)
}

// AscanViewOptionEncodeCookieValuesWithResponse request returning *AscanViewOptionEncodeCookieValuesResponse
func (c *ClientWithResponses) AscanViewOptionEncodeCookieValuesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionEncodeCookieValuesResponse, error) {
	rsp, err := c.AscanViewOptionEncodeCookieValues(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionEncodeCookieValuesResponse(rsp)
}

// AscanViewOptionExcludedParamListWithResponse request returning *AscanViewOptionExcludedParamListResponse
func (c *ClientWithResponses) AscanViewOptionExcludedParamListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionExcludedParamListResponse, error) {
	rsp, err := c.AscanViewOptionExcludedParamList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionExcludedParamListResponse(rsp)
}

// AscanViewOptionHandleAntiCSRFTokensWithResponse request returning *AscanViewOptionHandleAntiCSRFTokensResponse
func (c *ClientWithResponses) AscanViewOptionHandleAntiCSRFTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionHandleAntiCSRFTokensResponse, error) {
	rsp, err := c.AscanViewOptionHandleAntiCSRFTokens(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionHandleAntiCSRFTokensResponse(rsp)
}

// AscanViewOptionHostPerScanWithResponse request returning *AscanViewOptionHostPerScanResponse
func (c *ClientWithResponses) AscanViewOptionHostPerScanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionHostPerScanResponse, error) {
	rsp, err := c.AscanViewOptionHostPerScan(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionHostPerScanResponse(rsp)
}

// AscanViewOptionInjectPluginIdInHeaderWithResponse request returning *AscanViewOptionInjectPluginIdInHeaderResponse
func (c *ClientWithResponses) AscanViewOptionInjectPluginIdInHeaderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionInjectPluginIdInHeaderResponse, error) {
	rsp, err := c.AscanViewOptionInjectPluginIdInHeader(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionInjectPluginIdInHeaderResponse(rsp)
}

// AscanViewOptionMaxAlertsPerRuleWithResponse request returning *AscanViewOptionMaxAlertsPerRuleResponse
func (c *ClientWithResponses) AscanViewOptionMaxAlertsPerRuleWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionMaxAlertsPerRuleResponse, error) {
	rsp, err := c.AscanViewOptionMaxAlertsPerRule(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionMaxAlertsPerRuleResponse(rsp)
}

// AscanViewOptionMaxChartTimeInMinsWithResponse request returning *AscanViewOptionMaxChartTimeInMinsResponse
func (c *ClientWithResponses) AscanViewOptionMaxChartTimeInMinsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionMaxChartTimeInMinsResponse, error) {
	rsp, err := c.AscanViewOptionMaxChartTimeInMins(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionMaxChartTimeInMinsResponse(rsp)
}

// AscanViewOptionMaxResultsToListWithResponse request returning *AscanViewOptionMaxResultsToListResponse
func (c *ClientWithResponses) AscanViewOptionMaxResultsToListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionMaxResultsToListResponse, error) {
	rsp, err := c.AscanViewOptionMaxResultsToList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionMaxResultsToListResponse(rsp)
}

// AscanViewOptionMaxRuleDurationInMinsWithResponse request returning *AscanViewOptionMaxRuleDurationInMinsResponse
func (c *ClientWithResponses) AscanViewOptionMaxRuleDurationInMinsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionMaxRuleDurationInMinsResponse, error) {
	rsp, err := c.AscanViewOptionMaxRuleDurationInMins(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionMaxRuleDurationInMinsResponse(rsp)
}

// AscanViewOptionMaxScanDurationInMinsWithResponse request returning *AscanViewOptionMaxScanDurationInMinsResponse
func (c *ClientWithResponses) AscanViewOptionMaxScanDurationInMinsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionMaxScanDurationInMinsResponse, error) {
	rsp, err := c.AscanViewOptionMaxScanDurationInMins(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionMaxScanDurationInMinsResponse(rsp)
}

// AscanViewOptionMaxScansInUIWithResponse request returning *AscanViewOptionMaxScansInUIResponse
func (c *ClientWithResponses) AscanViewOptionMaxScansInUIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionMaxScansInUIResponse, error) {
	rsp, err := c.AscanViewOptionMaxScansInUI(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionMaxScansInUIResponse(rsp)
}

// AscanViewOptionPromptInAttackModeWithResponse request returning *AscanViewOptionPromptInAttackModeResponse
func (c *ClientWithResponses) AscanViewOptionPromptInAttackModeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionPromptInAttackModeResponse, error) {
	rsp, err := c.AscanViewOptionPromptInAttackMode(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionPromptInAttackModeResponse(rsp)
}

// AscanViewOptionPromptToClearFinishedScansWithResponse request returning *AscanViewOptionPromptToClearFinishedScansResponse
func (c *ClientWithResponses) AscanViewOptionPromptToClearFinishedScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionPromptToClearFinishedScansResponse, error) {
	rsp, err := c.AscanViewOptionPromptToClearFinishedScans(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionPromptToClearFinishedScansResponse(rsp)
}

// AscanViewOptionRescanInAttackModeWithResponse request returning *AscanViewOptionRescanInAttackModeResponse
func (c *ClientWithResponses) AscanViewOptionRescanInAttackModeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionRescanInAttackModeResponse, error) {
	rsp, err := c.AscanViewOptionRescanInAttackMode(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionRescanInAttackModeResponse(rsp)
}

// AscanViewOptionScanHeadersAllRequestsWithResponse request returning *AscanViewOptionScanHeadersAllRequestsResponse
func (c *ClientWithResponses) AscanViewOptionScanHeadersAllRequestsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionScanHeadersAllRequestsResponse, error) {
	rsp, err := c.AscanViewOptionScanHeadersAllRequests(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionScanHeadersAllRequestsResponse(rsp)
}

// AscanViewOptionScanNullJsonValuesWithResponse request returning *AscanViewOptionScanNullJsonValuesResponse
func (c *ClientWithResponses) AscanViewOptionScanNullJsonValuesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionScanNullJsonValuesResponse, error) {
	rsp, err := c.AscanViewOptionScanNullJsonValues(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionScanNullJsonValuesResponse(rsp)
}

// AscanViewOptionShowAdvancedDialogWithResponse request returning *AscanViewOptionShowAdvancedDialogResponse
func (c *ClientWithResponses) AscanViewOptionShowAdvancedDialogWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionShowAdvancedDialogResponse, error) {
	rsp, err := c.AscanViewOptionShowAdvancedDialog(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionShowAdvancedDialogResponse(rsp)
}

// AscanViewOptionTargetParamsEnabledRPCWithResponse request returning *AscanViewOptionTargetParamsEnabledRPCResponse
func (c *ClientWithResponses) AscanViewOptionTargetParamsEnabledRPCWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionTargetParamsEnabledRPCResponse, error) {
	rsp, err := c.AscanViewOptionTargetParamsEnabledRPC(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionTargetParamsEnabledRPCResponse(rsp)
}

// AscanViewOptionTargetParamsInjectableWithResponse request returning *AscanViewOptionTargetParamsInjectableResponse
func (c *ClientWithResponses) AscanViewOptionTargetParamsInjectableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionTargetParamsInjectableResponse, error) {
	rsp, err := c.AscanViewOptionTargetParamsInjectable(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionTargetParamsInjectableResponse(rsp)
}

// AscanViewOptionThreadPerHostWithResponse request returning *AscanViewOptionThreadPerHostResponse
func (c *ClientWithResponses) AscanViewOptionThreadPerHostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewOptionThreadPerHostResponse, error) {
	rsp, err := c.AscanViewOptionThreadPerHost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewOptionThreadPerHostResponse(rsp)
}

// AscanViewPoliciesWithResponse request returning *AscanViewPoliciesResponse
func (c *ClientWithResponses) AscanViewPoliciesWithResponse(ctx context.Context, params *AscanViewPoliciesParams, reqEditors ...RequestEditorFn) (*AscanViewPoliciesResponse, error) {
	rsp, err := c.AscanViewPolicies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewPoliciesResponse(rsp)
}

// AscanViewScanPolicyNamesWithResponse request returning *AscanViewScanPolicyNamesResponse
func (c *ClientWithResponses) AscanViewScanPolicyNamesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewScanPolicyNamesResponse, error) {
	rsp, err := c.AscanViewScanPolicyNames(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewScanPolicyNamesResponse(rsp)
}

// AscanViewScanProgressWithResponse request returning *AscanViewScanProgressResponse
func (c *ClientWithResponses) AscanViewScanProgressWithResponse(ctx context.Context, params *AscanViewScanProgressParams, reqEditors ...RequestEditorFn) (*AscanViewScanProgressResponse, error) {
	rsp, err := c.AscanViewScanProgress(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewScanProgressResponse(rsp)
}

// AscanViewScannersWithResponse request returning *AscanViewScannersResponse
func (c *ClientWithResponses) AscanViewScannersWithResponse(ctx context.Context, params *AscanViewScannersParams, reqEditors ...RequestEditorFn) (*AscanViewScannersResponse, error) {
	rsp, err := c.AscanViewScanners(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewScannersResponse(rsp)
}

// AscanViewScansWithResponse request returning *AscanViewScansResponse
func (c *ClientWithResponses) AscanViewScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AscanViewScansResponse, error) {
	rsp, err := c.AscanViewScans(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewScansResponse(rsp)
}

// AscanViewStatusWithResponse request returning *AscanViewStatusResponse
func (c *ClientWithResponses) AscanViewStatusWithResponse(ctx context.Context, params *AscanViewStatusParams, reqEditors ...RequestEditorFn) (*AscanViewStatusResponse, error) {
	rsp, err := c.AscanViewStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAscanViewStatusResponse(rsp)
}

// AuthenticationActionSetAuthenticationMethodWithResponse request returning *AuthenticationActionSetAuthenticationMethodResponse
func (c *ClientWithResponses) AuthenticationActionSetAuthenticationMethodWithResponse(ctx context.Context, params *AuthenticationActionSetAuthenticationMethodParams, reqEditors ...RequestEditorFn) (*AuthenticationActionSetAuthenticationMethodResponse, error) {
	rsp, err := c.AuthenticationActionSetAuthenticationMethod(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthenticationActionSetAuthenticationMethodResponse(rsp)
}

// AuthenticationActionSetLoggedInIndicatorWithResponse request returning *AuthenticationActionSetLoggedInIndicatorResponse
func (c *ClientWithResponses) AuthenticationActionSetLoggedInIndicatorWithResponse(ctx context.Context, params *AuthenticationActionSetLoggedInIndicatorParams, reqEditors ...RequestEditorFn) (*AuthenticationActionSetLoggedInIndicatorResponse, error) {
	rsp, err := c.AuthenticationActionSetLoggedInIndicator(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthenticationActionSetLoggedInIndicatorResponse(rsp)
}

// AuthenticationActionSetLoggedOutIndicatorWithResponse request returning *AuthenticationActionSetLoggedOutIndicatorResponse
func (c *ClientWithResponses) AuthenticationActionSetLoggedOutIndicatorWithResponse(ctx context.Context, params *AuthenticationActionSetLoggedOutIndicatorParams, reqEditors ...RequestEditorFn) (*AuthenticationActionSetLoggedOutIndicatorResponse, error) {
	rsp, err := c.AuthenticationActionSetLoggedOutIndicator(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthenticationActionSetLoggedOutIndicatorResponse(rsp)
}

// AuthenticationViewGetAuthenticationMethodWithResponse request returning *AuthenticationViewGetAuthenticationMethodResponse
func (c *ClientWithResponses) AuthenticationViewGetAuthenticationMethodWithResponse(ctx context.Context, params *AuthenticationViewGetAuthenticationMethodParams, reqEditors ...RequestEditorFn) (*AuthenticationViewGetAuthenticationMethodResponse, error) {
	rsp, err := c.AuthenticationViewGetAuthenticationMethod(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthenticationViewGetAuthenticationMethodResponse(rsp)
}

// AuthenticationViewGetAuthenticationMethodConfigParamsWithResponse request returning *AuthenticationViewGetAuthenticationMethodConfigParamsResponse
func (c *ClientWithResponses) AuthenticationViewGetAuthenticationMethodConfigParamsWithResponse(ctx context.Context, params *AuthenticationViewGetAuthenticationMethodConfigParamsParams, reqEditors ...RequestEditorFn) (*AuthenticationViewGetAuthenticationMethodConfigParamsResponse, error) {
	rsp, err := c.AuthenticationViewGetAuthenticationMethodConfigParams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthenticationViewGetAuthenticationMethodConfigParamsResponse(rsp)
}

// AuthenticationViewGetLoggedInIndicatorWithResponse request returning *AuthenticationViewGetLoggedInIndicatorResponse
func (c *ClientWithResponses) AuthenticationViewGetLoggedInIndicatorWithResponse(ctx context.Context, params *AuthenticationViewGetLoggedInIndicatorParams, reqEditors ...RequestEditorFn) (*AuthenticationViewGetLoggedInIndicatorResponse, error) {
	rsp, err := c.AuthenticationViewGetLoggedInIndicator(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthenticationViewGetLoggedInIndicatorResponse(rsp)
}

// AuthenticationViewGetLoggedOutIndicatorWithResponse request returning *AuthenticationViewGetLoggedOutIndicatorResponse
func (c *ClientWithResponses) AuthenticationViewGetLoggedOutIndicatorWithResponse(ctx context.Context, params *AuthenticationViewGetLoggedOutIndicatorParams, reqEditors ...RequestEditorFn) (*AuthenticationViewGetLoggedOutIndicatorResponse, error) {
	rsp, err := c.AuthenticationViewGetLoggedOutIndicator(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthenticationViewGetLoggedOutIndicatorResponse(rsp)
}

// AuthenticationViewGetSupportedAuthenticationMethodsWithResponse request returning *AuthenticationViewGetSupportedAuthenticationMethodsResponse
func (c *ClientWithResponses) AuthenticationViewGetSupportedAuthenticationMethodsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthenticationViewGetSupportedAuthenticationMethodsResponse, error) {
	rsp, err := c.AuthenticationViewGetSupportedAuthenticationMethods(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthenticationViewGetSupportedAuthenticationMethodsResponse(rsp)
}

// AuthorizationActionSetBasicAuthorizationDetectionMethodWithResponse request returning *AuthorizationActionSetBasicAuthorizationDetectionMethodResponse
func (c *ClientWithResponses) AuthorizationActionSetBasicAuthorizationDetectionMethodWithResponse(ctx context.Context, params *AuthorizationActionSetBasicAuthorizationDetectionMethodParams, reqEditors ...RequestEditorFn) (*AuthorizationActionSetBasicAuthorizationDetectionMethodResponse, error) {
	rsp, err := c.AuthorizationActionSetBasicAuthorizationDetectionMethod(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthorizationActionSetBasicAuthorizationDetectionMethodResponse(rsp)
}

// AuthorizationViewGetAuthorizationDetectionMethodWithResponse request returning *AuthorizationViewGetAuthorizationDetectionMethodResponse
func (c *ClientWithResponses) AuthorizationViewGetAuthorizationDetectionMethodWithResponse(ctx context.Context, params *AuthorizationViewGetAuthorizationDetectionMethodParams, reqEditors ...RequestEditorFn) (*AuthorizationViewGetAuthorizationDetectionMethodResponse, error) {
	rsp, err := c.AuthorizationViewGetAuthorizationDetectionMethod(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthorizationViewGetAuthorizationDetectionMethodResponse(rsp)
}

// AutomationActionEndDelayJobWithResponse request returning *AutomationActionEndDelayJobResponse
func (c *ClientWithResponses) AutomationActionEndDelayJobWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutomationActionEndDelayJobResponse, error) {
	rsp, err := c.AutomationActionEndDelayJob(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutomationActionEndDelayJobResponse(rsp)
}

// AutomationActionRunPlanWithResponse request returning *AutomationActionRunPlanResponse
func (c *ClientWithResponses) AutomationActionRunPlanWithResponse(ctx context.Context, params *AutomationActionRunPlanParams, reqEditors ...RequestEditorFn) (*AutomationActionRunPlanResponse, error) {
	rsp, err := c.AutomationActionRunPlan(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutomationActionRunPlanResponse(rsp)
}

// AutomationViewPlanProgressWithResponse request returning *AutomationViewPlanProgressResponse
func (c *ClientWithResponses) AutomationViewPlanProgressWithResponse(ctx context.Context, params *AutomationViewPlanProgressParams, reqEditors ...RequestEditorFn) (*AutomationViewPlanProgressResponse, error) {
	rsp, err := c.AutomationViewPlanProgress(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutomationViewPlanProgressResponse(rsp)
}

// AutoupdateActionDownloadLatestReleaseWithResponse request returning *AutoupdateActionDownloadLatestReleaseResponse
func (c *ClientWithResponses) AutoupdateActionDownloadLatestReleaseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateActionDownloadLatestReleaseResponse, error) {
	rsp, err := c.AutoupdateActionDownloadLatestRelease(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateActionDownloadLatestReleaseResponse(rsp)
}

// AutoupdateActionInstallAddonWithResponse request returning *AutoupdateActionInstallAddonResponse
func (c *ClientWithResponses) AutoupdateActionInstallAddonWithResponse(ctx context.Context, params *AutoupdateActionInstallAddonParams, reqEditors ...RequestEditorFn) (*AutoupdateActionInstallAddonResponse, error) {
	rsp, err := c.AutoupdateActionInstallAddon(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateActionInstallAddonResponse(rsp)
}

// AutoupdateActionInstallLocalAddonWithResponse request returning *AutoupdateActionInstallLocalAddonResponse
func (c *ClientWithResponses) AutoupdateActionInstallLocalAddonWithResponse(ctx context.Context, params *AutoupdateActionInstallLocalAddonParams, reqEditors ...RequestEditorFn) (*AutoupdateActionInstallLocalAddonResponse, error) {
	rsp, err := c.AutoupdateActionInstallLocalAddon(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateActionInstallLocalAddonResponse(rsp)
}

// AutoupdateActionSetOptionCheckAddonUpdatesWithResponse request returning *AutoupdateActionSetOptionCheckAddonUpdatesResponse
func (c *ClientWithResponses) AutoupdateActionSetOptionCheckAddonUpdatesWithResponse(ctx context.Context, params *AutoupdateActionSetOptionCheckAddonUpdatesParams, reqEditors ...RequestEditorFn) (*AutoupdateActionSetOptionCheckAddonUpdatesResponse, error) {
	rsp, err := c.AutoupdateActionSetOptionCheckAddonUpdates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateActionSetOptionCheckAddonUpdatesResponse(rsp)
}

// AutoupdateActionSetOptionCheckOnStartWithResponse request returning *AutoupdateActionSetOptionCheckOnStartResponse
func (c *ClientWithResponses) AutoupdateActionSetOptionCheckOnStartWithResponse(ctx context.Context, params *AutoupdateActionSetOptionCheckOnStartParams, reqEditors ...RequestEditorFn) (*AutoupdateActionSetOptionCheckOnStartResponse, error) {
	rsp, err := c.AutoupdateActionSetOptionCheckOnStart(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateActionSetOptionCheckOnStartResponse(rsp)
}

// AutoupdateActionSetOptionDownloadNewReleaseWithResponse request returning *AutoupdateActionSetOptionDownloadNewReleaseResponse
func (c *ClientWithResponses) AutoupdateActionSetOptionDownloadNewReleaseWithResponse(ctx context.Context, params *AutoupdateActionSetOptionDownloadNewReleaseParams, reqEditors ...RequestEditorFn) (*AutoupdateActionSetOptionDownloadNewReleaseResponse, error) {
	rsp, err := c.AutoupdateActionSetOptionDownloadNewRelease(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateActionSetOptionDownloadNewReleaseResponse(rsp)
}

// AutoupdateActionSetOptionInstallAddonUpdatesWithResponse request returning *AutoupdateActionSetOptionInstallAddonUpdatesResponse
func (c *ClientWithResponses) AutoupdateActionSetOptionInstallAddonUpdatesWithResponse(ctx context.Context, params *AutoupdateActionSetOptionInstallAddonUpdatesParams, reqEditors ...RequestEditorFn) (*AutoupdateActionSetOptionInstallAddonUpdatesResponse, error) {
	rsp, err := c.AutoupdateActionSetOptionInstallAddonUpdates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateActionSetOptionInstallAddonUpdatesResponse(rsp)
}

// AutoupdateActionSetOptionInstallScannerRulesWithResponse request returning *AutoupdateActionSetOptionInstallScannerRulesResponse
func (c *ClientWithResponses) AutoupdateActionSetOptionInstallScannerRulesWithResponse(ctx context.Context, params *AutoupdateActionSetOptionInstallScannerRulesParams, reqEditors ...RequestEditorFn) (*AutoupdateActionSetOptionInstallScannerRulesResponse, error) {
	rsp, err := c.AutoupdateActionSetOptionInstallScannerRules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateActionSetOptionInstallScannerRulesResponse(rsp)
}

// AutoupdateActionSetOptionReportAlphaAddonsWithResponse request returning *AutoupdateActionSetOptionReportAlphaAddonsResponse
func (c *ClientWithResponses) AutoupdateActionSetOptionReportAlphaAddonsWithResponse(ctx context.Context, params *AutoupdateActionSetOptionReportAlphaAddonsParams, reqEditors ...RequestEditorFn) (*AutoupdateActionSetOptionReportAlphaAddonsResponse, error) {
	rsp, err := c.AutoupdateActionSetOptionReportAlphaAddons(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateActionSetOptionReportAlphaAddonsResponse(rsp)
}

// AutoupdateActionSetOptionReportBetaAddonsWithResponse request returning *AutoupdateActionSetOptionReportBetaAddonsResponse
func (c *ClientWithResponses) AutoupdateActionSetOptionReportBetaAddonsWithResponse(ctx context.Context, params *AutoupdateActionSetOptionReportBetaAddonsParams, reqEditors ...RequestEditorFn) (*AutoupdateActionSetOptionReportBetaAddonsResponse, error) {
	rsp, err := c.AutoupdateActionSetOptionReportBetaAddons(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateActionSetOptionReportBetaAddonsResponse(rsp)
}

// AutoupdateActionSetOptionReportReleaseAddonsWithResponse request returning *AutoupdateActionSetOptionReportReleaseAddonsResponse
func (c *ClientWithResponses) AutoupdateActionSetOptionReportReleaseAddonsWithResponse(ctx context.Context, params *AutoupdateActionSetOptionReportReleaseAddonsParams, reqEditors ...RequestEditorFn) (*AutoupdateActionSetOptionReportReleaseAddonsResponse, error) {
	rsp, err := c.AutoupdateActionSetOptionReportReleaseAddons(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateActionSetOptionReportReleaseAddonsResponse(rsp)
}

// AutoupdateActionUninstallAddonWithResponse request returning *AutoupdateActionUninstallAddonResponse
func (c *ClientWithResponses) AutoupdateActionUninstallAddonWithResponse(ctx context.Context, params *AutoupdateActionUninstallAddonParams, reqEditors ...RequestEditorFn) (*AutoupdateActionUninstallAddonResponse, error) {
	rsp, err := c.AutoupdateActionUninstallAddon(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateActionUninstallAddonResponse(rsp)
}

// AutoupdateViewInstalledAddonsWithResponse request returning *AutoupdateViewInstalledAddonsResponse
func (c *ClientWithResponses) AutoupdateViewInstalledAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewInstalledAddonsResponse, error) {
	rsp, err := c.AutoupdateViewInstalledAddons(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewInstalledAddonsResponse(rsp)
}

// AutoupdateViewIsLatestVersionWithResponse request returning *AutoupdateViewIsLatestVersionResponse
func (c *ClientWithResponses) AutoupdateViewIsLatestVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewIsLatestVersionResponse, error) {
	rsp, err := c.AutoupdateViewIsLatestVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewIsLatestVersionResponse(rsp)
}

// AutoupdateViewLatestVersionNumberWithResponse request returning *AutoupdateViewLatestVersionNumberResponse
func (c *ClientWithResponses) AutoupdateViewLatestVersionNumberWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewLatestVersionNumberResponse, error) {
	rsp, err := c.AutoupdateViewLatestVersionNumber(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewLatestVersionNumberResponse(rsp)
}

// AutoupdateViewLocalAddonsWithResponse request returning *AutoupdateViewLocalAddonsResponse
func (c *ClientWithResponses) AutoupdateViewLocalAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewLocalAddonsResponse, error) {
	rsp, err := c.AutoupdateViewLocalAddons(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewLocalAddonsResponse(rsp)
}

// AutoupdateViewMarketplaceAddonsWithResponse request returning *AutoupdateViewMarketplaceAddonsResponse
func (c *ClientWithResponses) AutoupdateViewMarketplaceAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewMarketplaceAddonsResponse, error) {
	rsp, err := c.AutoupdateViewMarketplaceAddons(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewMarketplaceAddonsResponse(rsp)
}

// AutoupdateViewNewAddonsWithResponse request returning *AutoupdateViewNewAddonsResponse
func (c *ClientWithResponses) AutoupdateViewNewAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewNewAddonsResponse, error) {
	rsp, err := c.AutoupdateViewNewAddons(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewNewAddonsResponse(rsp)
}

// AutoupdateViewOptionAddonDirectoriesWithResponse request returning *AutoupdateViewOptionAddonDirectoriesResponse
func (c *ClientWithResponses) AutoupdateViewOptionAddonDirectoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionAddonDirectoriesResponse, error) {
	rsp, err := c.AutoupdateViewOptionAddonDirectories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewOptionAddonDirectoriesResponse(rsp)
}

// AutoupdateViewOptionCheckAddonUpdatesWithResponse request returning *AutoupdateViewOptionCheckAddonUpdatesResponse
func (c *ClientWithResponses) AutoupdateViewOptionCheckAddonUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionCheckAddonUpdatesResponse, error) {
	rsp, err := c.AutoupdateViewOptionCheckAddonUpdates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewOptionCheckAddonUpdatesResponse(rsp)
}

// AutoupdateViewOptionCheckOnStartWithResponse request returning *AutoupdateViewOptionCheckOnStartResponse
func (c *ClientWithResponses) AutoupdateViewOptionCheckOnStartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionCheckOnStartResponse, error) {
	rsp, err := c.AutoupdateViewOptionCheckOnStart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewOptionCheckOnStartResponse(rsp)
}

// AutoupdateViewOptionDayLastCheckedWithResponse request returning *AutoupdateViewOptionDayLastCheckedResponse
func (c *ClientWithResponses) AutoupdateViewOptionDayLastCheckedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionDayLastCheckedResponse, error) {
	rsp, err := c.AutoupdateViewOptionDayLastChecked(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewOptionDayLastCheckedResponse(rsp)
}

// AutoupdateViewOptionDayLastInstallWarnedWithResponse request returning *AutoupdateViewOptionDayLastInstallWarnedResponse
func (c *ClientWithResponses) AutoupdateViewOptionDayLastInstallWarnedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionDayLastInstallWarnedResponse, error) {
	rsp, err := c.AutoupdateViewOptionDayLastInstallWarned(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewOptionDayLastInstallWarnedResponse(rsp)
}

// AutoupdateViewOptionDayLastUpdateWarnedWithResponse request returning *AutoupdateViewOptionDayLastUpdateWarnedResponse
func (c *ClientWithResponses) AutoupdateViewOptionDayLastUpdateWarnedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionDayLastUpdateWarnedResponse, error) {
	rsp, err := c.AutoupdateViewOptionDayLastUpdateWarned(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewOptionDayLastUpdateWarnedResponse(rsp)
}

// AutoupdateViewOptionDownloadDirectoryWithResponse request returning *AutoupdateViewOptionDownloadDirectoryResponse
func (c *ClientWithResponses) AutoupdateViewOptionDownloadDirectoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionDownloadDirectoryResponse, error) {
	rsp, err := c.AutoupdateViewOptionDownloadDirectory(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewOptionDownloadDirectoryResponse(rsp)
}

// AutoupdateViewOptionDownloadNewReleaseWithResponse request returning *AutoupdateViewOptionDownloadNewReleaseResponse
func (c *ClientWithResponses) AutoupdateViewOptionDownloadNewReleaseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionDownloadNewReleaseResponse, error) {
	rsp, err := c.AutoupdateViewOptionDownloadNewRelease(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewOptionDownloadNewReleaseResponse(rsp)
}

// AutoupdateViewOptionInstallAddonUpdatesWithResponse request returning *AutoupdateViewOptionInstallAddonUpdatesResponse
func (c *ClientWithResponses) AutoupdateViewOptionInstallAddonUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionInstallAddonUpdatesResponse, error) {
	rsp, err := c.AutoupdateViewOptionInstallAddonUpdates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewOptionInstallAddonUpdatesResponse(rsp)
}

// AutoupdateViewOptionInstallScannerRulesWithResponse request returning *AutoupdateViewOptionInstallScannerRulesResponse
func (c *ClientWithResponses) AutoupdateViewOptionInstallScannerRulesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionInstallScannerRulesResponse, error) {
	rsp, err := c.AutoupdateViewOptionInstallScannerRules(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewOptionInstallScannerRulesResponse(rsp)
}

// AutoupdateViewOptionReportAlphaAddonsWithResponse request returning *AutoupdateViewOptionReportAlphaAddonsResponse
func (c *ClientWithResponses) AutoupdateViewOptionReportAlphaAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionReportAlphaAddonsResponse, error) {
	rsp, err := c.AutoupdateViewOptionReportAlphaAddons(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewOptionReportAlphaAddonsResponse(rsp)
}

// AutoupdateViewOptionReportBetaAddonsWithResponse request returning *AutoupdateViewOptionReportBetaAddonsResponse
func (c *ClientWithResponses) AutoupdateViewOptionReportBetaAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionReportBetaAddonsResponse, error) {
	rsp, err := c.AutoupdateViewOptionReportBetaAddons(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewOptionReportBetaAddonsResponse(rsp)
}

// AutoupdateViewOptionReportReleaseAddonsWithResponse request returning *AutoupdateViewOptionReportReleaseAddonsResponse
func (c *ClientWithResponses) AutoupdateViewOptionReportReleaseAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewOptionReportReleaseAddonsResponse, error) {
	rsp, err := c.AutoupdateViewOptionReportReleaseAddons(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewOptionReportReleaseAddonsResponse(rsp)
}

// AutoupdateViewUpdatedAddonsWithResponse request returning *AutoupdateViewUpdatedAddonsResponse
func (c *ClientWithResponses) AutoupdateViewUpdatedAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AutoupdateViewUpdatedAddonsResponse, error) {
	rsp, err := c.AutoupdateViewUpdatedAddons(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAutoupdateViewUpdatedAddonsResponse(rsp)
}

// BreakActionAddHttpBreakpointWithResponse request returning *BreakActionAddHttpBreakpointResponse
func (c *ClientWithResponses) BreakActionAddHttpBreakpointWithResponse(ctx context.Context, params *BreakActionAddHttpBreakpointParams, reqEditors ...RequestEditorFn) (*BreakActionAddHttpBreakpointResponse, error) {
	rsp, err := c.BreakActionAddHttpBreakpoint(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBreakActionAddHttpBreakpointResponse(rsp)
}

// BreakActionBreakWithResponse request returning *BreakActionBreakResponse
func (c *ClientWithResponses) BreakActionBreakWithResponse(ctx context.Context, params *BreakActionBreakParams, reqEditors ...RequestEditorFn) (*BreakActionBreakResponse, error) {
	rsp, err := c.BreakActionBreak(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBreakActionBreakResponse(rsp)
}

// BreakActionContinueWithResponse request returning *BreakActionContinueResponse
func (c *ClientWithResponses) BreakActionContinueWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BreakActionContinueResponse, error) {
	rsp, err := c.BreakActionContinue(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBreakActionContinueResponse(rsp)
}

// BreakActionDropWithResponse request returning *BreakActionDropResponse
func (c *ClientWithResponses) BreakActionDropWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BreakActionDropResponse, error) {
	rsp, err := c.BreakActionDrop(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBreakActionDropResponse(rsp)
}

// BreakActionRemoveHttpBreakpointWithResponse request returning *BreakActionRemoveHttpBreakpointResponse
func (c *ClientWithResponses) BreakActionRemoveHttpBreakpointWithResponse(ctx context.Context, params *BreakActionRemoveHttpBreakpointParams, reqEditors ...RequestEditorFn) (*BreakActionRemoveHttpBreakpointResponse, error) {
	rsp, err := c.BreakActionRemoveHttpBreakpoint(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBreakActionRemoveHttpBreakpointResponse(rsp)
}

// BreakActionSetHttpMessageWithResponse request returning *BreakActionSetHttpMessageResponse
func (c *ClientWithResponses) BreakActionSetHttpMessageWithResponse(ctx context.Context, params *BreakActionSetHttpMessageParams, reqEditors ...RequestEditorFn) (*BreakActionSetHttpMessageResponse, error) {
	rsp, err := c.BreakActionSetHttpMessage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBreakActionSetHttpMessageResponse(rsp)
}

// BreakActionStepWithResponse request returning *BreakActionStepResponse
func (c *ClientWithResponses) BreakActionStepWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BreakActionStepResponse, error) {
	rsp, err := c.BreakActionStep(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBreakActionStepResponse(rsp)
}

// BreakViewHttpMessageWithResponse request returning *BreakViewHttpMessageResponse
func (c *ClientWithResponses) BreakViewHttpMessageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BreakViewHttpMessageResponse, error) {
	rsp, err := c.BreakViewHttpMessage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBreakViewHttpMessageResponse(rsp)
}

// BreakViewIsBreakAllWithResponse request returning *BreakViewIsBreakAllResponse
func (c *ClientWithResponses) BreakViewIsBreakAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BreakViewIsBreakAllResponse, error) {
	rsp, err := c.BreakViewIsBreakAll(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBreakViewIsBreakAllResponse(rsp)
}

// BreakViewIsBreakRequestWithResponse request returning *BreakViewIsBreakRequestResponse
func (c *ClientWithResponses) BreakViewIsBreakRequestWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BreakViewIsBreakRequestResponse, error) {
	rsp, err := c.BreakViewIsBreakRequest(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBreakViewIsBreakRequestResponse(rsp)
}

// BreakViewIsBreakResponseWithResponse request returning *BreakViewIsBreakResponseResponse
func (c *ClientWithResponses) BreakViewIsBreakResponseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BreakViewIsBreakResponseResponse, error) {
	rsp, err := c.BreakViewIsBreakResponse(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBreakViewIsBreakResponseResponse(rsp)
}

// ClientActionExportClientMapWithResponse request returning *ClientActionExportClientMapResponse
func (c *ClientWithResponses) ClientActionExportClientMapWithResponse(ctx context.Context, params *ClientActionExportClientMapParams, reqEditors ...RequestEditorFn) (*ClientActionExportClientMapResponse, error) {
	rsp, err := c.ClientActionExportClientMap(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClientActionExportClientMapResponse(rsp)
}

// ClientActionReportEventWithResponse request returning *ClientActionReportEventResponse
func (c *ClientWithResponses) ClientActionReportEventWithResponse(ctx context.Context, params *ClientActionReportEventParams, reqEditors ...RequestEditorFn) (*ClientActionReportEventResponse, error) {
	rsp, err := c.ClientActionReportEvent(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClientActionReportEventResponse(rsp)
}

// ClientActionReportObjectWithResponse request returning *ClientActionReportObjectResponse
func (c *ClientWithResponses) ClientActionReportObjectWithResponse(ctx context.Context, params *ClientActionReportObjectParams, reqEditors ...RequestEditorFn) (*ClientActionReportObjectResponse, error) {
	rsp, err := c.ClientActionReportObject(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClientActionReportObjectResponse(rsp)
}

// ClientActionReportZestScriptWithResponse request returning *ClientActionReportZestScriptResponse
func (c *ClientWithResponses) ClientActionReportZestScriptWithResponse(ctx context.Context, params *ClientActionReportZestScriptParams, reqEditors ...RequestEditorFn) (*ClientActionReportZestScriptResponse, error) {
	rsp, err := c.ClientActionReportZestScript(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClientActionReportZestScriptResponse(rsp)
}

// ClientActionReportZestStatementWithResponse request returning *ClientActionReportZestStatementResponse
func (c *ClientWithResponses) ClientActionReportZestStatementWithResponse(ctx context.Context, params *ClientActionReportZestStatementParams, reqEditors ...RequestEditorFn) (*ClientActionReportZestStatementResponse, error) {
	rsp, err := c.ClientActionReportZestStatement(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClientActionReportZestStatementResponse(rsp)
}

// ClientSpiderActionScanWithResponse request returning *ClientSpiderActionScanResponse
func (c *ClientWithResponses) ClientSpiderActionScanWithResponse(ctx context.Context, params *ClientSpiderActionScanParams, reqEditors ...RequestEditorFn) (*ClientSpiderActionScanResponse, error) {
	rsp, err := c.ClientSpiderActionScan(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClientSpiderActionScanResponse(rsp)
}

// ClientSpiderActionStopWithResponse request returning *ClientSpiderActionStopResponse
func (c *ClientWithResponses) ClientSpiderActionStopWithResponse(ctx context.Context, params *ClientSpiderActionStopParams, reqEditors ...RequestEditorFn) (*ClientSpiderActionStopResponse, error) {
	rsp, err := c.ClientSpiderActionStop(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClientSpiderActionStopResponse(rsp)
}

// ClientSpiderViewStatusWithResponse request returning *ClientSpiderViewStatusResponse
func (c *ClientWithResponses) ClientSpiderViewStatusWithResponse(ctx context.Context, params *ClientSpiderViewStatusParams, reqEditors ...RequestEditorFn) (*ClientSpiderViewStatusResponse, error) {
	rsp, err := c.ClientSpiderViewStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClientSpiderViewStatusResponse(rsp)
}

// ContextActionExcludeAllContextTechnologiesWithResponse request returning *ContextActionExcludeAllContextTechnologiesResponse
func (c *ClientWithResponses) ContextActionExcludeAllContextTechnologiesWithResponse(ctx context.Context, params *ContextActionExcludeAllContextTechnologiesParams, reqEditors ...RequestEditorFn) (*ContextActionExcludeAllContextTechnologiesResponse, error) {
	rsp, err := c.ContextActionExcludeAllContextTechnologies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextActionExcludeAllContextTechnologiesResponse(rsp)
}

// ContextActionExcludeContextTechnologiesWithResponse request returning *ContextActionExcludeContextTechnologiesResponse
func (c *ClientWithResponses) ContextActionExcludeContextTechnologiesWithResponse(ctx context.Context, params *ContextActionExcludeContextTechnologiesParams, reqEditors ...RequestEditorFn) (*ContextActionExcludeContextTechnologiesResponse, error) {
	rsp, err := c.ContextActionExcludeContextTechnologies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextActionExcludeContextTechnologiesResponse(rsp)
}

// ContextActionExcludeFromContextWithResponse request returning *ContextActionExcludeFromContextResponse
func (c *ClientWithResponses) ContextActionExcludeFromContextWithResponse(ctx context.Context, params *ContextActionExcludeFromContextParams, reqEditors ...RequestEditorFn) (*ContextActionExcludeFromContextResponse, error) {
	rsp, err := c.ContextActionExcludeFromContext(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextActionExcludeFromContextResponse(rsp)
}

// ContextActionExportContextWithResponse request returning *ContextActionExportContextResponse
func (c *ClientWithResponses) ContextActionExportContextWithResponse(ctx context.Context, params *ContextActionExportContextParams, reqEditors ...RequestEditorFn) (*ContextActionExportContextResponse, error) {
	rsp, err := c.ContextActionExportContext(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextActionExportContextResponse(rsp)
}

// ContextActionImportContextWithResponse request returning *ContextActionImportContextResponse
func (c *ClientWithResponses) ContextActionImportContextWithResponse(ctx context.Context, params *ContextActionImportContextParams, reqEditors ...RequestEditorFn) (*ContextActionImportContextResponse, error) {
	rsp, err := c.ContextActionImportContext(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextActionImportContextResponse(rsp)
}

// ContextActionIncludeAllContextTechnologiesWithResponse request returning *ContextActionIncludeAllContextTechnologiesResponse
func (c *ClientWithResponses) ContextActionIncludeAllContextTechnologiesWithResponse(ctx context.Context, params *ContextActionIncludeAllContextTechnologiesParams, reqEditors ...RequestEditorFn) (*ContextActionIncludeAllContextTechnologiesResponse, error) {
	rsp, err := c.ContextActionIncludeAllContextTechnologies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextActionIncludeAllContextTechnologiesResponse(rsp)
}

// ContextActionIncludeContextTechnologiesWithResponse request returning *ContextActionIncludeContextTechnologiesResponse
func (c *ClientWithResponses) ContextActionIncludeContextTechnologiesWithResponse(ctx context.Context, params *ContextActionIncludeContextTechnologiesParams, reqEditors ...RequestEditorFn) (*ContextActionIncludeContextTechnologiesResponse, error) {
	rsp, err := c.ContextActionIncludeContextTechnologies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextActionIncludeContextTechnologiesResponse(rsp)
}

// ContextActionIncludeInContextWithResponse request returning *ContextActionIncludeInContextResponse
func (c *ClientWithResponses) ContextActionIncludeInContextWithResponse(ctx context.Context, params *ContextActionIncludeInContextParams, reqEditors ...RequestEditorFn) (*ContextActionIncludeInContextResponse, error) {
	rsp, err := c.ContextActionIncludeInContext(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextActionIncludeInContextResponse(rsp)
}

// ContextActionNewContextWithResponse request returning *ContextActionNewContextResponse
func (c *ClientWithResponses) ContextActionNewContextWithResponse(ctx context.Context, params *ContextActionNewContextParams, reqEditors ...RequestEditorFn) (*ContextActionNewContextResponse, error) {
	rsp, err := c.ContextActionNewContext(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextActionNewContextResponse(rsp)
}

// ContextActionRemoveContextWithResponse request returning *ContextActionRemoveContextResponse
func (c *ClientWithResponses) ContextActionRemoveContextWithResponse(ctx context.Context, params *ContextActionRemoveContextParams, reqEditors ...RequestEditorFn) (*ContextActionRemoveContextResponse, error) {
	rsp, err := c.ContextActionRemoveContext(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextActionRemoveContextResponse(rsp)
}

// ContextActionSetContextCheckingStrategyWithResponse request returning *ContextActionSetContextCheckingStrategyResponse
func (c *ClientWithResponses) ContextActionSetContextCheckingStrategyWithResponse(ctx context.Context, params *ContextActionSetContextCheckingStrategyParams, reqEditors ...RequestEditorFn) (*ContextActionSetContextCheckingStrategyResponse, error) {
	rsp, err := c.ContextActionSetContextCheckingStrategy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextActionSetContextCheckingStrategyResponse(rsp)
}

// ContextActionSetContextInScopeWithResponse request returning *ContextActionSetContextInScopeResponse
func (c *ClientWithResponses) ContextActionSetContextInScopeWithResponse(ctx context.Context, params *ContextActionSetContextInScopeParams, reqEditors ...RequestEditorFn) (*ContextActionSetContextInScopeResponse, error) {
	rsp, err := c.ContextActionSetContextInScope(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextActionSetContextInScopeResponse(rsp)
}

// ContextActionSetContextRegexsWithResponse request returning *ContextActionSetContextRegexsResponse
func (c *ClientWithResponses) ContextActionSetContextRegexsWithResponse(ctx context.Context, params *ContextActionSetContextRegexsParams, reqEditors ...RequestEditorFn) (*ContextActionSetContextRegexsResponse, error) {
	rsp, err := c.ContextActionSetContextRegexs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextActionSetContextRegexsResponse(rsp)
}

// ContextViewContextWithResponse request returning *ContextViewContextResponse
func (c *ClientWithResponses) ContextViewContextWithResponse(ctx context.Context, params *ContextViewContextParams, reqEditors ...RequestEditorFn) (*ContextViewContextResponse, error) {
	rsp, err := c.ContextViewContext(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextViewContextResponse(rsp)
}

// ContextViewContextListWithResponse request returning *ContextViewContextListResponse
func (c *ClientWithResponses) ContextViewContextListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ContextViewContextListResponse, error) {
	rsp, err := c.ContextViewContextList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextViewContextListResponse(rsp)
}

// ContextViewExcludeRegexsWithResponse request returning *ContextViewExcludeRegexsResponse
func (c *ClientWithResponses) ContextViewExcludeRegexsWithResponse(ctx context.Context, params *ContextViewExcludeRegexsParams, reqEditors ...RequestEditorFn) (*ContextViewExcludeRegexsResponse, error) {
	rsp, err := c.ContextViewExcludeRegexs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextViewExcludeRegexsResponse(rsp)
}

// ContextViewExcludedTechnologyListWithResponse request returning *ContextViewExcludedTechnologyListResponse
func (c *ClientWithResponses) ContextViewExcludedTechnologyListWithResponse(ctx context.Context, params *ContextViewExcludedTechnologyListParams, reqEditors ...RequestEditorFn) (*ContextViewExcludedTechnologyListResponse, error) {
	rsp, err := c.ContextViewExcludedTechnologyList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextViewExcludedTechnologyListResponse(rsp)
}

// ContextViewIncludeRegexsWithResponse request returning *ContextViewIncludeRegexsResponse
func (c *ClientWithResponses) ContextViewIncludeRegexsWithResponse(ctx context.Context, params *ContextViewIncludeRegexsParams, reqEditors ...RequestEditorFn) (*ContextViewIncludeRegexsResponse, error) {
	rsp, err := c.ContextViewIncludeRegexs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextViewIncludeRegexsResponse(rsp)
}

// ContextViewIncludedTechnologyListWithResponse request returning *ContextViewIncludedTechnologyListResponse
func (c *ClientWithResponses) ContextViewIncludedTechnologyListWithResponse(ctx context.Context, params *ContextViewIncludedTechnologyListParams, reqEditors ...RequestEditorFn) (*ContextViewIncludedTechnologyListResponse, error) {
	rsp, err := c.ContextViewIncludedTechnologyList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextViewIncludedTechnologyListResponse(rsp)
}

// ContextViewTechnologyListWithResponse request returning *ContextViewTechnologyListResponse
func (c *ClientWithResponses) ContextViewTechnologyListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ContextViewTechnologyListResponse, error) {
	rsp, err := c.ContextViewTechnologyList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextViewTechnologyListResponse(rsp)
}

// ContextViewUrlsWithResponse request returning *ContextViewUrlsResponse
func (c *ClientWithResponses) ContextViewUrlsWithResponse(ctx context.Context, params *ContextViewUrlsParams, reqEditors ...RequestEditorFn) (*ContextViewUrlsResponse, error) {
	rsp, err := c.ContextViewUrls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextViewUrlsResponse(rsp)
}

// CoreActionAccessUrlWithResponse request returning *CoreActionAccessUrlResponse
func (c *ClientWithResponses) CoreActionAccessUrlWithResponse(ctx context.Context, params *CoreActionAccessUrlParams, reqEditors ...RequestEditorFn) (*CoreActionAccessUrlResponse, error) {
	rsp, err := c.CoreActionAccessUrl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionAccessUrlResponse(rsp)
}

// CoreActionAddProxyChainExcludedDomainWithResponse request returning *CoreActionAddProxyChainExcludedDomainResponse
func (c *ClientWithResponses) CoreActionAddProxyChainExcludedDomainWithResponse(ctx context.Context, params *CoreActionAddProxyChainExcludedDomainParams, reqEditors ...RequestEditorFn) (*CoreActionAddProxyChainExcludedDomainResponse, error) {
	rsp, err := c.CoreActionAddProxyChainExcludedDomain(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionAddProxyChainExcludedDomainResponse(rsp)
}

// CoreActionClearExcludedFromProxyWithResponse request returning *CoreActionClearExcludedFromProxyResponse
func (c *ClientWithResponses) CoreActionClearExcludedFromProxyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreActionClearExcludedFromProxyResponse, error) {
	rsp, err := c.CoreActionClearExcludedFromProxy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionClearExcludedFromProxyResponse(rsp)
}

// CoreActionCreateSbomZipWithResponse request returning *CoreActionCreateSbomZipResponse
func (c *ClientWithResponses) CoreActionCreateSbomZipWithResponse(ctx context.Context, params *CoreActionCreateSbomZipParams, reqEditors ...RequestEditorFn) (*CoreActionCreateSbomZipResponse, error) {
	rsp, err := c.CoreActionCreateSbomZip(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionCreateSbomZipResponse(rsp)
}

// CoreActionDeleteAlertWithResponse request returning *CoreActionDeleteAlertResponse
func (c *ClientWithResponses) CoreActionDeleteAlertWithResponse(ctx context.Context, params *CoreActionDeleteAlertParams, reqEditors ...RequestEditorFn) (*CoreActionDeleteAlertResponse, error) {
	rsp, err := c.CoreActionDeleteAlert(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionDeleteAlertResponse(rsp)
}

// CoreActionDeleteAllAlertsWithResponse request returning *CoreActionDeleteAllAlertsResponse
func (c *ClientWithResponses) CoreActionDeleteAllAlertsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreActionDeleteAllAlertsResponse, error) {
	rsp, err := c.CoreActionDeleteAllAlerts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionDeleteAllAlertsResponse(rsp)
}

// CoreActionDeleteSiteNodeWithResponse request returning *CoreActionDeleteSiteNodeResponse
func (c *ClientWithResponses) CoreActionDeleteSiteNodeWithResponse(ctx context.Context, params *CoreActionDeleteSiteNodeParams, reqEditors ...RequestEditorFn) (*CoreActionDeleteSiteNodeResponse, error) {
	rsp, err := c.CoreActionDeleteSiteNode(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionDeleteSiteNodeResponse(rsp)
}

// CoreActionDisableAllProxyChainExcludedDomainsWithResponse request returning *CoreActionDisableAllProxyChainExcludedDomainsResponse
func (c *ClientWithResponses) CoreActionDisableAllProxyChainExcludedDomainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreActionDisableAllProxyChainExcludedDomainsResponse, error) {
	rsp, err := c.CoreActionDisableAllProxyChainExcludedDomains(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionDisableAllProxyChainExcludedDomainsResponse(rsp)
}

// CoreActionDisableClientCertificateWithResponse request returning *CoreActionDisableClientCertificateResponse
func (c *ClientWithResponses) CoreActionDisableClientCertificateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreActionDisableClientCertificateResponse, error) {
	rsp, err := c.CoreActionDisableClientCertificate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionDisableClientCertificateResponse(rsp)
}

// CoreActionEnableAllProxyChainExcludedDomainsWithResponse request returning *CoreActionEnableAllProxyChainExcludedDomainsResponse
func (c *ClientWithResponses) CoreActionEnableAllProxyChainExcludedDomainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreActionEnableAllProxyChainExcludedDomainsResponse, error) {
	rsp, err := c.CoreActionEnableAllProxyChainExcludedDomains(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionEnableAllProxyChainExcludedDomainsResponse(rsp)
}

// CoreActionEnablePKCS12ClientCertificateWithResponse request returning *CoreActionEnablePKCS12ClientCertificateResponse
func (c *ClientWithResponses) CoreActionEnablePKCS12ClientCertificateWithResponse(ctx context.Context, params *CoreActionEnablePKCS12ClientCertificateParams, reqEditors ...RequestEditorFn) (*CoreActionEnablePKCS12ClientCertificateResponse, error) {
	rsp, err := c.CoreActionEnablePKCS12ClientCertificate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionEnablePKCS12ClientCertificateResponse(rsp)
}

// CoreActionExcludeFromProxyWithResponse request returning *CoreActionExcludeFromProxyResponse
func (c *ClientWithResponses) CoreActionExcludeFromProxyWithResponse(ctx context.Context, params *CoreActionExcludeFromProxyParams, reqEditors ...RequestEditorFn) (*CoreActionExcludeFromProxyResponse, error) {
	rsp, err := c.CoreActionExcludeFromProxy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionExcludeFromProxyResponse(rsp)
}

// CoreActionGenerateRootCAWithResponse request returning *CoreActionGenerateRootCAResponse
func (c *ClientWithResponses) CoreActionGenerateRootCAWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreActionGenerateRootCAResponse, error) {
	rsp, err := c.CoreActionGenerateRootCA(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionGenerateRootCAResponse(rsp)
}

// CoreActionLoadSessionWithResponse request returning *CoreActionLoadSessionResponse
func (c *ClientWithResponses) CoreActionLoadSessionWithResponse(ctx context.Context, params *CoreActionLoadSessionParams, reqEditors ...RequestEditorFn) (*CoreActionLoadSessionResponse, error) {
	rsp, err := c.CoreActionLoadSession(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionLoadSessionResponse(rsp)
}

// CoreActionModifyProxyChainExcludedDomainWithResponse request returning *CoreActionModifyProxyChainExcludedDomainResponse
func (c *ClientWithResponses) CoreActionModifyProxyChainExcludedDomainWithResponse(ctx context.Context, params *CoreActionModifyProxyChainExcludedDomainParams, reqEditors ...RequestEditorFn) (*CoreActionModifyProxyChainExcludedDomainResponse, error) {
	rsp, err := c.CoreActionModifyProxyChainExcludedDomain(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionModifyProxyChainExcludedDomainResponse(rsp)
}

// CoreActionNewSessionWithResponse request returning *CoreActionNewSessionResponse
func (c *ClientWithResponses) CoreActionNewSessionWithResponse(ctx context.Context, params *CoreActionNewSessionParams, reqEditors ...RequestEditorFn) (*CoreActionNewSessionResponse, error) {
	rsp, err := c.CoreActionNewSession(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionNewSessionResponse(rsp)
}

// CoreActionRemoveProxyChainExcludedDomainWithResponse request returning *CoreActionRemoveProxyChainExcludedDomainResponse
func (c *ClientWithResponses) CoreActionRemoveProxyChainExcludedDomainWithResponse(ctx context.Context, params *CoreActionRemoveProxyChainExcludedDomainParams, reqEditors ...RequestEditorFn) (*CoreActionRemoveProxyChainExcludedDomainResponse, error) {
	rsp, err := c.CoreActionRemoveProxyChainExcludedDomain(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionRemoveProxyChainExcludedDomainResponse(rsp)
}

// CoreActionRunGarbageCollectionWithResponse request returning *CoreActionRunGarbageCollectionResponse
func (c *ClientWithResponses) CoreActionRunGarbageCollectionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreActionRunGarbageCollectionResponse, error) {
	rsp, err := c.CoreActionRunGarbageCollection(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionRunGarbageCollectionResponse(rsp)
}

// CoreActionSaveSessionWithResponse request returning *CoreActionSaveSessionResponse
func (c *ClientWithResponses) CoreActionSaveSessionWithResponse(ctx context.Context, params *CoreActionSaveSessionParams, reqEditors ...RequestEditorFn) (*CoreActionSaveSessionResponse, error) {
	rsp, err := c.CoreActionSaveSession(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSaveSessionResponse(rsp)
}

// CoreActionSendRequestWithResponse request returning *CoreActionSendRequestResponse
func (c *ClientWithResponses) CoreActionSendRequestWithResponse(ctx context.Context, params *CoreActionSendRequestParams, reqEditors ...RequestEditorFn) (*CoreActionSendRequestResponse, error) {
	rsp, err := c.CoreActionSendRequest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSendRequestResponse(rsp)
}

// CoreActionSetHomeDirectoryWithResponse request returning *CoreActionSetHomeDirectoryResponse
func (c *ClientWithResponses) CoreActionSetHomeDirectoryWithResponse(ctx context.Context, params *CoreActionSetHomeDirectoryParams, reqEditors ...RequestEditorFn) (*CoreActionSetHomeDirectoryResponse, error) {
	rsp, err := c.CoreActionSetHomeDirectory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetHomeDirectoryResponse(rsp)
}

// CoreActionSetLogLevelWithResponse request returning *CoreActionSetLogLevelResponse
func (c *ClientWithResponses) CoreActionSetLogLevelWithResponse(ctx context.Context, params *CoreActionSetLogLevelParams, reqEditors ...RequestEditorFn) (*CoreActionSetLogLevelResponse, error) {
	rsp, err := c.CoreActionSetLogLevel(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetLogLevelResponse(rsp)
}

// CoreActionSetModeWithResponse request returning *CoreActionSetModeResponse
func (c *ClientWithResponses) CoreActionSetModeWithResponse(ctx context.Context, params *CoreActionSetModeParams, reqEditors ...RequestEditorFn) (*CoreActionSetModeResponse, error) {
	rsp, err := c.CoreActionSetMode(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetModeResponse(rsp)
}

// CoreActionSetOptionAlertOverridesFilePathWithResponse request returning *CoreActionSetOptionAlertOverridesFilePathResponse
func (c *ClientWithResponses) CoreActionSetOptionAlertOverridesFilePathWithResponse(ctx context.Context, params *CoreActionSetOptionAlertOverridesFilePathParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionAlertOverridesFilePathResponse, error) {
	rsp, err := c.CoreActionSetOptionAlertOverridesFilePath(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionAlertOverridesFilePathResponse(rsp)
}

// CoreActionSetOptionDefaultUserAgentWithResponse request returning *CoreActionSetOptionDefaultUserAgentResponse
func (c *ClientWithResponses) CoreActionSetOptionDefaultUserAgentWithResponse(ctx context.Context, params *CoreActionSetOptionDefaultUserAgentParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionDefaultUserAgentResponse, error) {
	rsp, err := c.CoreActionSetOptionDefaultUserAgent(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionDefaultUserAgentResponse(rsp)
}

// CoreActionSetOptionDnsTtlSuccessfulQueriesWithResponse request returning *CoreActionSetOptionDnsTtlSuccessfulQueriesResponse
func (c *ClientWithResponses) CoreActionSetOptionDnsTtlSuccessfulQueriesWithResponse(ctx context.Context, params *CoreActionSetOptionDnsTtlSuccessfulQueriesParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionDnsTtlSuccessfulQueriesResponse, error) {
	rsp, err := c.CoreActionSetOptionDnsTtlSuccessfulQueries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionDnsTtlSuccessfulQueriesResponse(rsp)
}

// CoreActionSetOptionHttpStateEnabledWithResponse request returning *CoreActionSetOptionHttpStateEnabledResponse
func (c *ClientWithResponses) CoreActionSetOptionHttpStateEnabledWithResponse(ctx context.Context, params *CoreActionSetOptionHttpStateEnabledParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionHttpStateEnabledResponse, error) {
	rsp, err := c.CoreActionSetOptionHttpStateEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionHttpStateEnabledResponse(rsp)
}

// CoreActionSetOptionMaximumAlertInstancesWithResponse request returning *CoreActionSetOptionMaximumAlertInstancesResponse
func (c *ClientWithResponses) CoreActionSetOptionMaximumAlertInstancesWithResponse(ctx context.Context, params *CoreActionSetOptionMaximumAlertInstancesParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionMaximumAlertInstancesResponse, error) {
	rsp, err := c.CoreActionSetOptionMaximumAlertInstances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionMaximumAlertInstancesResponse(rsp)
}

// CoreActionSetOptionMergeRelatedAlertsWithResponse request returning *CoreActionSetOptionMergeRelatedAlertsResponse
func (c *ClientWithResponses) CoreActionSetOptionMergeRelatedAlertsWithResponse(ctx context.Context, params *CoreActionSetOptionMergeRelatedAlertsParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionMergeRelatedAlertsResponse, error) {
	rsp, err := c.CoreActionSetOptionMergeRelatedAlerts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionMergeRelatedAlertsResponse(rsp)
}

// CoreActionSetOptionProxyChainNameWithResponse request returning *CoreActionSetOptionProxyChainNameResponse
func (c *ClientWithResponses) CoreActionSetOptionProxyChainNameWithResponse(ctx context.Context, params *CoreActionSetOptionProxyChainNameParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionProxyChainNameResponse, error) {
	rsp, err := c.CoreActionSetOptionProxyChainName(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionProxyChainNameResponse(rsp)
}

// CoreActionSetOptionProxyChainPasswordWithResponse request returning *CoreActionSetOptionProxyChainPasswordResponse
func (c *ClientWithResponses) CoreActionSetOptionProxyChainPasswordWithResponse(ctx context.Context, params *CoreActionSetOptionProxyChainPasswordParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionProxyChainPasswordResponse, error) {
	rsp, err := c.CoreActionSetOptionProxyChainPassword(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionProxyChainPasswordResponse(rsp)
}

// CoreActionSetOptionProxyChainPortWithResponse request returning *CoreActionSetOptionProxyChainPortResponse
func (c *ClientWithResponses) CoreActionSetOptionProxyChainPortWithResponse(ctx context.Context, params *CoreActionSetOptionProxyChainPortParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionProxyChainPortResponse, error) {
	rsp, err := c.CoreActionSetOptionProxyChainPort(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionProxyChainPortResponse(rsp)
}

// CoreActionSetOptionProxyChainPromptWithResponse request returning *CoreActionSetOptionProxyChainPromptResponse
func (c *ClientWithResponses) CoreActionSetOptionProxyChainPromptWithResponse(ctx context.Context, params *CoreActionSetOptionProxyChainPromptParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionProxyChainPromptResponse, error) {
	rsp, err := c.CoreActionSetOptionProxyChainPrompt(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionProxyChainPromptResponse(rsp)
}

// CoreActionSetOptionProxyChainRealmWithResponse request returning *CoreActionSetOptionProxyChainRealmResponse
func (c *ClientWithResponses) CoreActionSetOptionProxyChainRealmWithResponse(ctx context.Context, params *CoreActionSetOptionProxyChainRealmParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionProxyChainRealmResponse, error) {
	rsp, err := c.CoreActionSetOptionProxyChainRealm(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionProxyChainRealmResponse(rsp)
}

// CoreActionSetOptionProxyChainSkipNameWithResponse request returning *CoreActionSetOptionProxyChainSkipNameResponse
func (c *ClientWithResponses) CoreActionSetOptionProxyChainSkipNameWithResponse(ctx context.Context, params *CoreActionSetOptionProxyChainSkipNameParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionProxyChainSkipNameResponse, error) {
	rsp, err := c.CoreActionSetOptionProxyChainSkipName(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionProxyChainSkipNameResponse(rsp)
}

// CoreActionSetOptionProxyChainUserNameWithResponse request returning *CoreActionSetOptionProxyChainUserNameResponse
func (c *ClientWithResponses) CoreActionSetOptionProxyChainUserNameWithResponse(ctx context.Context, params *CoreActionSetOptionProxyChainUserNameParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionProxyChainUserNameResponse, error) {
	rsp, err := c.CoreActionSetOptionProxyChainUserName(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionProxyChainUserNameResponse(rsp)
}

// CoreActionSetOptionSingleCookieRequestHeaderWithResponse request returning *CoreActionSetOptionSingleCookieRequestHeaderResponse
func (c *ClientWithResponses) CoreActionSetOptionSingleCookieRequestHeaderWithResponse(ctx context.Context, params *CoreActionSetOptionSingleCookieRequestHeaderParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionSingleCookieRequestHeaderResponse, error) {
	rsp, err := c.CoreActionSetOptionSingleCookieRequestHeader(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionSingleCookieRequestHeaderResponse(rsp)
}

// CoreActionSetOptionTimeoutInSecsWithResponse request returning *CoreActionSetOptionTimeoutInSecsResponse
func (c *ClientWithResponses) CoreActionSetOptionTimeoutInSecsWithResponse(ctx context.Context, params *CoreActionSetOptionTimeoutInSecsParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionTimeoutInSecsResponse, error) {
	rsp, err := c.CoreActionSetOptionTimeoutInSecs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionTimeoutInSecsResponse(rsp)
}

// CoreActionSetOptionUseProxyChainWithResponse request returning *CoreActionSetOptionUseProxyChainResponse
func (c *ClientWithResponses) CoreActionSetOptionUseProxyChainWithResponse(ctx context.Context, params *CoreActionSetOptionUseProxyChainParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionUseProxyChainResponse, error) {
	rsp, err := c.CoreActionSetOptionUseProxyChain(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionUseProxyChainResponse(rsp)
}

// CoreActionSetOptionUseProxyChainAuthWithResponse request returning *CoreActionSetOptionUseProxyChainAuthResponse
func (c *ClientWithResponses) CoreActionSetOptionUseProxyChainAuthWithResponse(ctx context.Context, params *CoreActionSetOptionUseProxyChainAuthParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionUseProxyChainAuthResponse, error) {
	rsp, err := c.CoreActionSetOptionUseProxyChainAuth(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionUseProxyChainAuthResponse(rsp)
}

// CoreActionSetOptionUseSocksProxyWithResponse request returning *CoreActionSetOptionUseSocksProxyResponse
func (c *ClientWithResponses) CoreActionSetOptionUseSocksProxyWithResponse(ctx context.Context, params *CoreActionSetOptionUseSocksProxyParams, reqEditors ...RequestEditorFn) (*CoreActionSetOptionUseSocksProxyResponse, error) {
	rsp, err := c.CoreActionSetOptionUseSocksProxy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSetOptionUseSocksProxyResponse(rsp)
}

// CoreActionShutdownWithResponse request returning *CoreActionShutdownResponse
func (c *ClientWithResponses) CoreActionShutdownWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreActionShutdownResponse, error) {
	rsp, err := c.CoreActionShutdown(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionShutdownResponse(rsp)
}

// CoreActionSnapshotSessionWithResponse request returning *CoreActionSnapshotSessionResponse
func (c *ClientWithResponses) CoreActionSnapshotSessionWithResponse(ctx context.Context, params *CoreActionSnapshotSessionParams, reqEditors ...RequestEditorFn) (*CoreActionSnapshotSessionResponse, error) {
	rsp, err := c.CoreActionSnapshotSession(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreActionSnapshotSessionResponse(rsp)
}

// CoreViewAlertWithResponse request returning *CoreViewAlertResponse
func (c *ClientWithResponses) CoreViewAlertWithResponse(ctx context.Context, params *CoreViewAlertParams, reqEditors ...RequestEditorFn) (*CoreViewAlertResponse, error) {
	rsp, err := c.CoreViewAlert(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewAlertResponse(rsp)
}

// CoreViewAlertsWithResponse request returning *CoreViewAlertsResponse
func (c *ClientWithResponses) CoreViewAlertsWithResponse(ctx context.Context, params *CoreViewAlertsParams, reqEditors ...RequestEditorFn) (*CoreViewAlertsResponse, error) {
	rsp, err := c.CoreViewAlerts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewAlertsResponse(rsp)
}

// CoreViewAlertsSummaryWithResponse request returning *CoreViewAlertsSummaryResponse
func (c *ClientWithResponses) CoreViewAlertsSummaryWithResponse(ctx context.Context, params *CoreViewAlertsSummaryParams, reqEditors ...RequestEditorFn) (*CoreViewAlertsSummaryResponse, error) {
	rsp, err := c.CoreViewAlertsSummary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewAlertsSummaryResponse(rsp)
}

// CoreViewChildNodesWithResponse request returning *CoreViewChildNodesResponse
func (c *ClientWithResponses) CoreViewChildNodesWithResponse(ctx context.Context, params *CoreViewChildNodesParams, reqEditors ...RequestEditorFn) (*CoreViewChildNodesResponse, error) {
	rsp, err := c.CoreViewChildNodes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewChildNodesResponse(rsp)
}

// CoreViewExcludedFromProxyWithResponse request returning *CoreViewExcludedFromProxyResponse
func (c *ClientWithResponses) CoreViewExcludedFromProxyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewExcludedFromProxyResponse, error) {
	rsp, err := c.CoreViewExcludedFromProxy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewExcludedFromProxyResponse(rsp)
}

// CoreViewGetLogLevelWithResponse request returning *CoreViewGetLogLevelResponse
func (c *ClientWithResponses) CoreViewGetLogLevelWithResponse(ctx context.Context, params *CoreViewGetLogLevelParams, reqEditors ...RequestEditorFn) (*CoreViewGetLogLevelResponse, error) {
	rsp, err := c.CoreViewGetLogLevel(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewGetLogLevelResponse(rsp)
}

// CoreViewHomeDirectoryWithResponse request returning *CoreViewHomeDirectoryResponse
func (c *ClientWithResponses) CoreViewHomeDirectoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewHomeDirectoryResponse, error) {
	rsp, err := c.CoreViewHomeDirectory(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewHomeDirectoryResponse(rsp)
}

// CoreViewHostsWithResponse request returning *CoreViewHostsResponse
func (c *ClientWithResponses) CoreViewHostsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewHostsResponse, error) {
	rsp, err := c.CoreViewHosts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewHostsResponse(rsp)
}

// CoreViewMessageWithResponse request returning *CoreViewMessageResponse
func (c *ClientWithResponses) CoreViewMessageWithResponse(ctx context.Context, params *CoreViewMessageParams, reqEditors ...RequestEditorFn) (*CoreViewMessageResponse, error) {
	rsp, err := c.CoreViewMessage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewMessageResponse(rsp)
}

// CoreViewMessagesWithResponse request returning *CoreViewMessagesResponse
func (c *ClientWithResponses) CoreViewMessagesWithResponse(ctx context.Context, params *CoreViewMessagesParams, reqEditors ...RequestEditorFn) (*CoreViewMessagesResponse, error) {
	rsp, err := c.CoreViewMessages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewMessagesResponse(rsp)
}

// CoreViewMessagesByIdWithResponse request returning *CoreViewMessagesByIdResponse
func (c *ClientWithResponses) CoreViewMessagesByIdWithResponse(ctx context.Context, params *CoreViewMessagesByIdParams, reqEditors ...RequestEditorFn) (*CoreViewMessagesByIdResponse, error) {
	rsp, err := c.CoreViewMessagesById(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewMessagesByIdResponse(rsp)
}

// CoreViewModeWithResponse request returning *CoreViewModeResponse
func (c *ClientWithResponses) CoreViewModeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewModeResponse, error) {
	rsp, err := c.CoreViewMode(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewModeResponse(rsp)
}

// CoreViewNumberOfAlertsWithResponse request returning *CoreViewNumberOfAlertsResponse
func (c *ClientWithResponses) CoreViewNumberOfAlertsWithResponse(ctx context.Context, params *CoreViewNumberOfAlertsParams, reqEditors ...RequestEditorFn) (*CoreViewNumberOfAlertsResponse, error) {
	rsp, err := c.CoreViewNumberOfAlerts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewNumberOfAlertsResponse(rsp)
}

// CoreViewNumberOfMessagesWithResponse request returning *CoreViewNumberOfMessagesResponse
func (c *ClientWithResponses) CoreViewNumberOfMessagesWithResponse(ctx context.Context, params *CoreViewNumberOfMessagesParams, reqEditors ...RequestEditorFn) (*CoreViewNumberOfMessagesResponse, error) {
	rsp, err := c.CoreViewNumberOfMessages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewNumberOfMessagesResponse(rsp)
}

// CoreViewOptionAlertOverridesFilePathWithResponse request returning *CoreViewOptionAlertOverridesFilePathResponse
func (c *ClientWithResponses) CoreViewOptionAlertOverridesFilePathWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionAlertOverridesFilePathResponse, error) {
	rsp, err := c.CoreViewOptionAlertOverridesFilePath(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionAlertOverridesFilePathResponse(rsp)
}

// CoreViewOptionDefaultUserAgentWithResponse request returning *CoreViewOptionDefaultUserAgentResponse
func (c *ClientWithResponses) CoreViewOptionDefaultUserAgentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionDefaultUserAgentResponse, error) {
	rsp, err := c.CoreViewOptionDefaultUserAgent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionDefaultUserAgentResponse(rsp)
}

// CoreViewOptionDnsTtlSuccessfulQueriesWithResponse request returning *CoreViewOptionDnsTtlSuccessfulQueriesResponse
func (c *ClientWithResponses) CoreViewOptionDnsTtlSuccessfulQueriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionDnsTtlSuccessfulQueriesResponse, error) {
	rsp, err := c.CoreViewOptionDnsTtlSuccessfulQueries(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionDnsTtlSuccessfulQueriesResponse(rsp)
}

// CoreViewOptionHttpStateWithResponse request returning *CoreViewOptionHttpStateResponse
func (c *ClientWithResponses) CoreViewOptionHttpStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionHttpStateResponse, error) {
	rsp, err := c.CoreViewOptionHttpState(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionHttpStateResponse(rsp)
}

// CoreViewOptionHttpStateEnabledWithResponse request returning *CoreViewOptionHttpStateEnabledResponse
func (c *ClientWithResponses) CoreViewOptionHttpStateEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionHttpStateEnabledResponse, error) {
	rsp, err := c.CoreViewOptionHttpStateEnabled(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionHttpStateEnabledResponse(rsp)
}

// CoreViewOptionMaximumAlertInstancesWithResponse request returning *CoreViewOptionMaximumAlertInstancesResponse
func (c *ClientWithResponses) CoreViewOptionMaximumAlertInstancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionMaximumAlertInstancesResponse, error) {
	rsp, err := c.CoreViewOptionMaximumAlertInstances(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionMaximumAlertInstancesResponse(rsp)
}

// CoreViewOptionMergeRelatedAlertsWithResponse request returning *CoreViewOptionMergeRelatedAlertsResponse
func (c *ClientWithResponses) CoreViewOptionMergeRelatedAlertsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionMergeRelatedAlertsResponse, error) {
	rsp, err := c.CoreViewOptionMergeRelatedAlerts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionMergeRelatedAlertsResponse(rsp)
}

// CoreViewOptionProxyChainNameWithResponse request returning *CoreViewOptionProxyChainNameResponse
func (c *ClientWithResponses) CoreViewOptionProxyChainNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyChainNameResponse, error) {
	rsp, err := c.CoreViewOptionProxyChainName(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionProxyChainNameResponse(rsp)
}

// CoreViewOptionProxyChainPasswordWithResponse request returning *CoreViewOptionProxyChainPasswordResponse
func (c *ClientWithResponses) CoreViewOptionProxyChainPasswordWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyChainPasswordResponse, error) {
	rsp, err := c.CoreViewOptionProxyChainPassword(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionProxyChainPasswordResponse(rsp)
}

// CoreViewOptionProxyChainPortWithResponse request returning *CoreViewOptionProxyChainPortResponse
func (c *ClientWithResponses) CoreViewOptionProxyChainPortWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyChainPortResponse, error) {
	rsp, err := c.CoreViewOptionProxyChainPort(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionProxyChainPortResponse(rsp)
}

// CoreViewOptionProxyChainPromptWithResponse request returning *CoreViewOptionProxyChainPromptResponse
func (c *ClientWithResponses) CoreViewOptionProxyChainPromptWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyChainPromptResponse, error) {
	rsp, err := c.CoreViewOptionProxyChainPrompt(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionProxyChainPromptResponse(rsp)
}

// CoreViewOptionProxyChainRealmWithResponse request returning *CoreViewOptionProxyChainRealmResponse
func (c *ClientWithResponses) CoreViewOptionProxyChainRealmWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyChainRealmResponse, error) {
	rsp, err := c.CoreViewOptionProxyChainRealm(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionProxyChainRealmResponse(rsp)
}

// CoreViewOptionProxyChainSkipNameWithResponse request returning *CoreViewOptionProxyChainSkipNameResponse
func (c *ClientWithResponses) CoreViewOptionProxyChainSkipNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyChainSkipNameResponse, error) {
	rsp, err := c.CoreViewOptionProxyChainSkipName(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionProxyChainSkipNameResponse(rsp)
}

// CoreViewOptionProxyChainUserNameWithResponse request returning *CoreViewOptionProxyChainUserNameResponse
func (c *ClientWithResponses) CoreViewOptionProxyChainUserNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyChainUserNameResponse, error) {
	rsp, err := c.CoreViewOptionProxyChainUserName(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionProxyChainUserNameResponse(rsp)
}

// CoreViewOptionProxyExcludedDomainsWithResponse request returning *CoreViewOptionProxyExcludedDomainsResponse
func (c *ClientWithResponses) CoreViewOptionProxyExcludedDomainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyExcludedDomainsResponse, error) {
	rsp, err := c.CoreViewOptionProxyExcludedDomains(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionProxyExcludedDomainsResponse(rsp)
}

// CoreViewOptionProxyExcludedDomainsEnabledWithResponse request returning *CoreViewOptionProxyExcludedDomainsEnabledResponse
func (c *ClientWithResponses) CoreViewOptionProxyExcludedDomainsEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionProxyExcludedDomainsEnabledResponse, error) {
	rsp, err := c.CoreViewOptionProxyExcludedDomainsEnabled(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionProxyExcludedDomainsEnabledResponse(rsp)
}

// CoreViewOptionSingleCookieRequestHeaderWithResponse request returning *CoreViewOptionSingleCookieRequestHeaderResponse
func (c *ClientWithResponses) CoreViewOptionSingleCookieRequestHeaderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionSingleCookieRequestHeaderResponse, error) {
	rsp, err := c.CoreViewOptionSingleCookieRequestHeader(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionSingleCookieRequestHeaderResponse(rsp)
}

// CoreViewOptionTimeoutInSecsWithResponse request returning *CoreViewOptionTimeoutInSecsResponse
func (c *ClientWithResponses) CoreViewOptionTimeoutInSecsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionTimeoutInSecsResponse, error) {
	rsp, err := c.CoreViewOptionTimeoutInSecs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionTimeoutInSecsResponse(rsp)
}

// CoreViewOptionUseProxyChainWithResponse request returning *CoreViewOptionUseProxyChainResponse
func (c *ClientWithResponses) CoreViewOptionUseProxyChainWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionUseProxyChainResponse, error) {
	rsp, err := c.CoreViewOptionUseProxyChain(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionUseProxyChainResponse(rsp)
}

// CoreViewOptionUseProxyChainAuthWithResponse request returning *CoreViewOptionUseProxyChainAuthResponse
func (c *ClientWithResponses) CoreViewOptionUseProxyChainAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionUseProxyChainAuthResponse, error) {
	rsp, err := c.CoreViewOptionUseProxyChainAuth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionUseProxyChainAuthResponse(rsp)
}

// CoreViewOptionUseSocksProxyWithResponse request returning *CoreViewOptionUseSocksProxyResponse
func (c *ClientWithResponses) CoreViewOptionUseSocksProxyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewOptionUseSocksProxyResponse, error) {
	rsp, err := c.CoreViewOptionUseSocksProxy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewOptionUseSocksProxyResponse(rsp)
}

// CoreViewProxyChainExcludedDomainsWithResponse request returning *CoreViewProxyChainExcludedDomainsResponse
func (c *ClientWithResponses) CoreViewProxyChainExcludedDomainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewProxyChainExcludedDomainsResponse, error) {
	rsp, err := c.CoreViewProxyChainExcludedDomains(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewProxyChainExcludedDomainsResponse(rsp)
}

// CoreViewSessionLocationWithResponse request returning *CoreViewSessionLocationResponse
func (c *ClientWithResponses) CoreViewSessionLocationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewSessionLocationResponse, error) {
	rsp, err := c.CoreViewSessionLocation(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewSessionLocationResponse(rsp)
}

// CoreViewSitesWithResponse request returning *CoreViewSitesResponse
func (c *ClientWithResponses) CoreViewSitesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewSitesResponse, error) {
	rsp, err := c.CoreViewSites(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewSitesResponse(rsp)
}

// CoreViewUrlsWithResponse request returning *CoreViewUrlsResponse
func (c *ClientWithResponses) CoreViewUrlsWithResponse(ctx context.Context, params *CoreViewUrlsParams, reqEditors ...RequestEditorFn) (*CoreViewUrlsResponse, error) {
	rsp, err := c.CoreViewUrls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewUrlsResponse(rsp)
}

// CoreViewVersionWithResponse request returning *CoreViewVersionResponse
func (c *ClientWithResponses) CoreViewVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewVersionResponse, error) {
	rsp, err := c.CoreViewVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewVersionResponse(rsp)
}

// CoreViewZapHomePathWithResponse request returning *CoreViewZapHomePathResponse
func (c *ClientWithResponses) CoreViewZapHomePathWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreViewZapHomePathResponse, error) {
	rsp, err := c.CoreViewZapHomePath(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreViewZapHomePathResponse(rsp)
}

// CustompayloadsActionAddCustomPayloadWithResponse request returning *CustompayloadsActionAddCustomPayloadResponse
func (c *ClientWithResponses) CustompayloadsActionAddCustomPayloadWithResponse(ctx context.Context, params *CustompayloadsActionAddCustomPayloadParams, reqEditors ...RequestEditorFn) (*CustompayloadsActionAddCustomPayloadResponse, error) {
	rsp, err := c.CustompayloadsActionAddCustomPayload(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustompayloadsActionAddCustomPayloadResponse(rsp)
}

// CustompayloadsActionDisableCustomPayloadWithResponse request returning *CustompayloadsActionDisableCustomPayloadResponse
func (c *ClientWithResponses) CustompayloadsActionDisableCustomPayloadWithResponse(ctx context.Context, params *CustompayloadsActionDisableCustomPayloadParams, reqEditors ...RequestEditorFn) (*CustompayloadsActionDisableCustomPayloadResponse, error) {
	rsp, err := c.CustompayloadsActionDisableCustomPayload(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustompayloadsActionDisableCustomPayloadResponse(rsp)
}

// CustompayloadsActionDisableCustomPayloadsWithResponse request returning *CustompayloadsActionDisableCustomPayloadsResponse
func (c *ClientWithResponses) CustompayloadsActionDisableCustomPayloadsWithResponse(ctx context.Context, params *CustompayloadsActionDisableCustomPayloadsParams, reqEditors ...RequestEditorFn) (*CustompayloadsActionDisableCustomPayloadsResponse, error) {
	rsp, err := c.CustompayloadsActionDisableCustomPayloads(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustompayloadsActionDisableCustomPayloadsResponse(rsp)
}

// CustompayloadsActionEnableCustomPayloadWithResponse request returning *CustompayloadsActionEnableCustomPayloadResponse
func (c *ClientWithResponses) CustompayloadsActionEnableCustomPayloadWithResponse(ctx context.Context, params *CustompayloadsActionEnableCustomPayloadParams, reqEditors ...RequestEditorFn) (*CustompayloadsActionEnableCustomPayloadResponse, error) {
	rsp, err := c.CustompayloadsActionEnableCustomPayload(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustompayloadsActionEnableCustomPayloadResponse(rsp)
}

// CustompayloadsActionEnableCustomPayloadsWithResponse request returning *CustompayloadsActionEnableCustomPayloadsResponse
func (c *ClientWithResponses) CustompayloadsActionEnableCustomPayloadsWithResponse(ctx context.Context, params *CustompayloadsActionEnableCustomPayloadsParams, reqEditors ...RequestEditorFn) (*CustompayloadsActionEnableCustomPayloadsResponse, error) {
	rsp, err := c.CustompayloadsActionEnableCustomPayloads(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustompayloadsActionEnableCustomPayloadsResponse(rsp)
}

// CustompayloadsActionRemoveCustomPayloadWithResponse request returning *CustompayloadsActionRemoveCustomPayloadResponse
func (c *ClientWithResponses) CustompayloadsActionRemoveCustomPayloadWithResponse(ctx context.Context, params *CustompayloadsActionRemoveCustomPayloadParams, reqEditors ...RequestEditorFn) (*CustompayloadsActionRemoveCustomPayloadResponse, error) {
	rsp, err := c.CustompayloadsActionRemoveCustomPayload(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustompayloadsActionRemoveCustomPayloadResponse(rsp)
}

// CustompayloadsViewCustomPayloadsWithResponse request returning *CustompayloadsViewCustomPayloadsResponse
func (c *ClientWithResponses) CustompayloadsViewCustomPayloadsWithResponse(ctx context.Context, params *CustompayloadsViewCustomPayloadsParams, reqEditors ...RequestEditorFn) (*CustompayloadsViewCustomPayloadsResponse, error) {
	rsp, err := c.CustompayloadsViewCustomPayloads(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustompayloadsViewCustomPayloadsResponse(rsp)
}

// CustompayloadsViewCustomPayloadsCategoriesWithResponse request returning *CustompayloadsViewCustomPayloadsCategoriesResponse
func (c *ClientWithResponses) CustompayloadsViewCustomPayloadsCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CustompayloadsViewCustomPayloadsCategoriesResponse, error) {
	rsp, err := c.CustompayloadsViewCustomPayloadsCategories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustompayloadsViewCustomPayloadsCategoriesResponse(rsp)
}

// EximActionExportSitesTreeWithResponse request returning *EximActionExportSitesTreeResponse
func (c *ClientWithResponses) EximActionExportSitesTreeWithResponse(ctx context.Context, params *EximActionExportSitesTreeParams, reqEditors ...RequestEditorFn) (*EximActionExportSitesTreeResponse, error) {
	rsp, err := c.EximActionExportSitesTree(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEximActionExportSitesTreeResponse(rsp)
}

// EximActionImportHarWithResponse request returning *EximActionImportHarResponse
func (c *ClientWithResponses) EximActionImportHarWithResponse(ctx context.Context, params *EximActionImportHarParams, reqEditors ...RequestEditorFn) (*EximActionImportHarResponse, error) {
	rsp, err := c.EximActionImportHar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEximActionImportHarResponse(rsp)
}

// EximActionImportModsec2LogsWithResponse request returning *EximActionImportModsec2LogsResponse
func (c *ClientWithResponses) EximActionImportModsec2LogsWithResponse(ctx context.Context, params *EximActionImportModsec2LogsParams, reqEditors ...RequestEditorFn) (*EximActionImportModsec2LogsResponse, error) {
	rsp, err := c.EximActionImportModsec2Logs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEximActionImportModsec2LogsResponse(rsp)
}

// EximActionImportUrlsWithResponse request returning *EximActionImportUrlsResponse
func (c *ClientWithResponses) EximActionImportUrlsWithResponse(ctx context.Context, params *EximActionImportUrlsParams, reqEditors ...RequestEditorFn) (*EximActionImportUrlsResponse, error) {
	rsp, err := c.EximActionImportUrls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEximActionImportUrlsResponse(rsp)
}

// EximActionImportZapLogsWithResponse request returning *EximActionImportZapLogsResponse
func (c *ClientWithResponses) EximActionImportZapLogsWithResponse(ctx context.Context, params *EximActionImportZapLogsParams, reqEditors ...RequestEditorFn) (*EximActionImportZapLogsResponse, error) {
	rsp, err := c.EximActionImportZapLogs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEximActionImportZapLogsResponse(rsp)
}

// EximActionPruneSitesTreeWithResponse request returning *EximActionPruneSitesTreeResponse
func (c *ClientWithResponses) EximActionPruneSitesTreeWithResponse(ctx context.Context, params *EximActionPruneSitesTreeParams, reqEditors ...RequestEditorFn) (*EximActionPruneSitesTreeResponse, error) {
	rsp, err := c.EximActionPruneSitesTree(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEximActionPruneSitesTreeResponse(rsp)
}

// ForcedUserActionSetForcedUserWithResponse request returning *ForcedUserActionSetForcedUserResponse
func (c *ClientWithResponses) ForcedUserActionSetForcedUserWithResponse(ctx context.Context, params *ForcedUserActionSetForcedUserParams, reqEditors ...RequestEditorFn) (*ForcedUserActionSetForcedUserResponse, error) {
	rsp, err := c.ForcedUserActionSetForcedUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseForcedUserActionSetForcedUserResponse(rsp)
}

// ForcedUserActionSetForcedUserModeEnabledWithResponse request returning *ForcedUserActionSetForcedUserModeEnabledResponse
func (c *ClientWithResponses) ForcedUserActionSetForcedUserModeEnabledWithResponse(ctx context.Context, params *ForcedUserActionSetForcedUserModeEnabledParams, reqEditors ...RequestEditorFn) (*ForcedUserActionSetForcedUserModeEnabledResponse, error) {
	rsp, err := c.ForcedUserActionSetForcedUserModeEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseForcedUserActionSetForcedUserModeEnabledResponse(rsp)
}

// ForcedUserViewGetForcedUserWithResponse request returning *ForcedUserViewGetForcedUserResponse
func (c *ClientWithResponses) ForcedUserViewGetForcedUserWithResponse(ctx context.Context, params *ForcedUserViewGetForcedUserParams, reqEditors ...RequestEditorFn) (*ForcedUserViewGetForcedUserResponse, error) {
	rsp, err := c.ForcedUserViewGetForcedUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseForcedUserViewGetForcedUserResponse(rsp)
}

// ForcedUserViewIsForcedUserModeEnabledWithResponse request returning *ForcedUserViewIsForcedUserModeEnabledResponse
func (c *ClientWithResponses) ForcedUserViewIsForcedUserModeEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ForcedUserViewIsForcedUserModeEnabledResponse, error) {
	rsp, err := c.ForcedUserViewIsForcedUserModeEnabled(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseForcedUserViewIsForcedUserModeEnabledResponse(rsp)
}

// GraphqlActionImportFileWithResponse request returning *GraphqlActionImportFileResponse
func (c *ClientWithResponses) GraphqlActionImportFileWithResponse(ctx context.Context, params *GraphqlActionImportFileParams, reqEditors ...RequestEditorFn) (*GraphqlActionImportFileResponse, error) {
	rsp, err := c.GraphqlActionImportFile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlActionImportFileResponse(rsp)
}

// GraphqlActionImportUrlWithResponse request returning *GraphqlActionImportUrlResponse
func (c *ClientWithResponses) GraphqlActionImportUrlWithResponse(ctx context.Context, params *GraphqlActionImportUrlParams, reqEditors ...RequestEditorFn) (*GraphqlActionImportUrlResponse, error) {
	rsp, err := c.GraphqlActionImportUrl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlActionImportUrlResponse(rsp)
}

// GraphqlActionSetOptionArgsTypeWithResponse request returning *GraphqlActionSetOptionArgsTypeResponse
func (c *ClientWithResponses) GraphqlActionSetOptionArgsTypeWithResponse(ctx context.Context, params *GraphqlActionSetOptionArgsTypeParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionArgsTypeResponse, error) {
	rsp, err := c.GraphqlActionSetOptionArgsType(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlActionSetOptionArgsTypeResponse(rsp)
}

// GraphqlActionSetOptionLenientMaxQueryDepthEnabledWithResponse request returning *GraphqlActionSetOptionLenientMaxQueryDepthEnabledResponse
func (c *ClientWithResponses) GraphqlActionSetOptionLenientMaxQueryDepthEnabledWithResponse(ctx context.Context, params *GraphqlActionSetOptionLenientMaxQueryDepthEnabledParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionLenientMaxQueryDepthEnabledResponse, error) {
	rsp, err := c.GraphqlActionSetOptionLenientMaxQueryDepthEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlActionSetOptionLenientMaxQueryDepthEnabledResponse(rsp)
}

// GraphqlActionSetOptionMaxAdditionalQueryDepthWithResponse request returning *GraphqlActionSetOptionMaxAdditionalQueryDepthResponse
func (c *ClientWithResponses) GraphqlActionSetOptionMaxAdditionalQueryDepthWithResponse(ctx context.Context, params *GraphqlActionSetOptionMaxAdditionalQueryDepthParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionMaxAdditionalQueryDepthResponse, error) {
	rsp, err := c.GraphqlActionSetOptionMaxAdditionalQueryDepth(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlActionSetOptionMaxAdditionalQueryDepthResponse(rsp)
}

// GraphqlActionSetOptionMaxArgsDepthWithResponse request returning *GraphqlActionSetOptionMaxArgsDepthResponse
func (c *ClientWithResponses) GraphqlActionSetOptionMaxArgsDepthWithResponse(ctx context.Context, params *GraphqlActionSetOptionMaxArgsDepthParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionMaxArgsDepthResponse, error) {
	rsp, err := c.GraphqlActionSetOptionMaxArgsDepth(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlActionSetOptionMaxArgsDepthResponse(rsp)
}

// GraphqlActionSetOptionMaxQueryDepthWithResponse request returning *GraphqlActionSetOptionMaxQueryDepthResponse
func (c *ClientWithResponses) GraphqlActionSetOptionMaxQueryDepthWithResponse(ctx context.Context, params *GraphqlActionSetOptionMaxQueryDepthParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionMaxQueryDepthResponse, error) {
	rsp, err := c.GraphqlActionSetOptionMaxQueryDepth(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlActionSetOptionMaxQueryDepthResponse(rsp)
}

// GraphqlActionSetOptionOptionalArgsEnabledWithResponse request returning *GraphqlActionSetOptionOptionalArgsEnabledResponse
func (c *ClientWithResponses) GraphqlActionSetOptionOptionalArgsEnabledWithResponse(ctx context.Context, params *GraphqlActionSetOptionOptionalArgsEnabledParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionOptionalArgsEnabledResponse, error) {
	rsp, err := c.GraphqlActionSetOptionOptionalArgsEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlActionSetOptionOptionalArgsEnabledResponse(rsp)
}

// GraphqlActionSetOptionQueryGenEnabledWithResponse request returning *GraphqlActionSetOptionQueryGenEnabledResponse
func (c *ClientWithResponses) GraphqlActionSetOptionQueryGenEnabledWithResponse(ctx context.Context, params *GraphqlActionSetOptionQueryGenEnabledParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionQueryGenEnabledResponse, error) {
	rsp, err := c.GraphqlActionSetOptionQueryGenEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlActionSetOptionQueryGenEnabledResponse(rsp)
}

// GraphqlActionSetOptionQuerySplitTypeWithResponse request returning *GraphqlActionSetOptionQuerySplitTypeResponse
func (c *ClientWithResponses) GraphqlActionSetOptionQuerySplitTypeWithResponse(ctx context.Context, params *GraphqlActionSetOptionQuerySplitTypeParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionQuerySplitTypeResponse, error) {
	rsp, err := c.GraphqlActionSetOptionQuerySplitType(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlActionSetOptionQuerySplitTypeResponse(rsp)
}

// GraphqlActionSetOptionRequestMethodWithResponse request returning *GraphqlActionSetOptionRequestMethodResponse
func (c *ClientWithResponses) GraphqlActionSetOptionRequestMethodWithResponse(ctx context.Context, params *GraphqlActionSetOptionRequestMethodParams, reqEditors ...RequestEditorFn) (*GraphqlActionSetOptionRequestMethodResponse, error) {
	rsp, err := c.GraphqlActionSetOptionRequestMethod(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlActionSetOptionRequestMethodResponse(rsp)
}

// GraphqlViewOptionArgsTypeWithResponse request returning *GraphqlViewOptionArgsTypeResponse
func (c *ClientWithResponses) GraphqlViewOptionArgsTypeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionArgsTypeResponse, error) {
	rsp, err := c.GraphqlViewOptionArgsType(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlViewOptionArgsTypeResponse(rsp)
}

// GraphqlViewOptionLenientMaxQueryDepthEnabledWithResponse request returning *GraphqlViewOptionLenientMaxQueryDepthEnabledResponse
func (c *ClientWithResponses) GraphqlViewOptionLenientMaxQueryDepthEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionLenientMaxQueryDepthEnabledResponse, error) {
	rsp, err := c.GraphqlViewOptionLenientMaxQueryDepthEnabled(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlViewOptionLenientMaxQueryDepthEnabledResponse(rsp)
}

// GraphqlViewOptionMaxAdditionalQueryDepthWithResponse request returning *GraphqlViewOptionMaxAdditionalQueryDepthResponse
func (c *ClientWithResponses) GraphqlViewOptionMaxAdditionalQueryDepthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionMaxAdditionalQueryDepthResponse, error) {
	rsp, err := c.GraphqlViewOptionMaxAdditionalQueryDepth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlViewOptionMaxAdditionalQueryDepthResponse(rsp)
}

// GraphqlViewOptionMaxArgsDepthWithResponse request returning *GraphqlViewOptionMaxArgsDepthResponse
func (c *ClientWithResponses) GraphqlViewOptionMaxArgsDepthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionMaxArgsDepthResponse, error) {
	rsp, err := c.GraphqlViewOptionMaxArgsDepth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlViewOptionMaxArgsDepthResponse(rsp)
}

// GraphqlViewOptionMaxQueryDepthWithResponse request returning *GraphqlViewOptionMaxQueryDepthResponse
func (c *ClientWithResponses) GraphqlViewOptionMaxQueryDepthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionMaxQueryDepthResponse, error) {
	rsp, err := c.GraphqlViewOptionMaxQueryDepth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlViewOptionMaxQueryDepthResponse(rsp)
}

// GraphqlViewOptionOptionalArgsEnabledWithResponse request returning *GraphqlViewOptionOptionalArgsEnabledResponse
func (c *ClientWithResponses) GraphqlViewOptionOptionalArgsEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionOptionalArgsEnabledResponse, error) {
	rsp, err := c.GraphqlViewOptionOptionalArgsEnabled(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlViewOptionOptionalArgsEnabledResponse(rsp)
}

// GraphqlViewOptionQueryGenEnabledWithResponse request returning *GraphqlViewOptionQueryGenEnabledResponse
func (c *ClientWithResponses) GraphqlViewOptionQueryGenEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionQueryGenEnabledResponse, error) {
	rsp, err := c.GraphqlViewOptionQueryGenEnabled(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlViewOptionQueryGenEnabledResponse(rsp)
}

// GraphqlViewOptionQuerySplitTypeWithResponse request returning *GraphqlViewOptionQuerySplitTypeResponse
func (c *ClientWithResponses) GraphqlViewOptionQuerySplitTypeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionQuerySplitTypeResponse, error) {
	rsp, err := c.GraphqlViewOptionQuerySplitType(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlViewOptionQuerySplitTypeResponse(rsp)
}

// GraphqlViewOptionRequestMethodWithResponse request returning *GraphqlViewOptionRequestMethodResponse
func (c *ClientWithResponses) GraphqlViewOptionRequestMethodWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GraphqlViewOptionRequestMethodResponse, error) {
	rsp, err := c.GraphqlViewOptionRequestMethod(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGraphqlViewOptionRequestMethodResponse(rsp)
}

// HttpSessionsActionAddDefaultSessionTokenWithResponse request returning *HttpSessionsActionAddDefaultSessionTokenResponse
func (c *ClientWithResponses) HttpSessionsActionAddDefaultSessionTokenWithResponse(ctx context.Context, params *HttpSessionsActionAddDefaultSessionTokenParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionAddDefaultSessionTokenResponse, error) {
	rsp, err := c.HttpSessionsActionAddDefaultSessionToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHttpSessionsActionAddDefaultSessionTokenResponse(rsp)
}

// HttpSessionsActionAddSessionTokenWithResponse request returning *HttpSessionsActionAddSessionTokenResponse
func (c *ClientWithResponses) HttpSessionsActionAddSessionTokenWithResponse(ctx context.Context, params *HttpSessionsActionAddSessionTokenParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionAddSessionTokenResponse, error) {
	rsp, err := c.HttpSessionsActionAddSessionToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHttpSessionsActionAddSessionTokenResponse(rsp)
}

// HttpSessionsActionCreateEmptySessionWithResponse request returning *HttpSessionsActionCreateEmptySessionResponse
func (c *ClientWithResponses) HttpSessionsActionCreateEmptySessionWithResponse(ctx context.Context, params *HttpSessionsActionCreateEmptySessionParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionCreateEmptySessionResponse, error) {
	rsp, err := c.HttpSessionsActionCreateEmptySession(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHttpSessionsActionCreateEmptySessionResponse(rsp)
}

// HttpSessionsActionRemoveDefaultSessionTokenWithResponse request returning *HttpSessionsActionRemoveDefaultSessionTokenResponse
func (c *ClientWithResponses) HttpSessionsActionRemoveDefaultSessionTokenWithResponse(ctx context.Context, params *HttpSessionsActionRemoveDefaultSessionTokenParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionRemoveDefaultSessionTokenResponse, error) {
	rsp, err := c.HttpSessionsActionRemoveDefaultSessionToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHttpSessionsActionRemoveDefaultSessionTokenResponse(rsp)
}

// HttpSessionsActionRemoveSessionWithResponse request returning *HttpSessionsActionRemoveSessionResponse
func (c *ClientWithResponses) HttpSessionsActionRemoveSessionWithResponse(ctx context.Context, params *HttpSessionsActionRemoveSessionParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionRemoveSessionResponse, error) {
	rsp, err := c.HttpSessionsActionRemoveSession(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHttpSessionsActionRemoveSessionResponse(rsp)
}

// HttpSessionsActionRemoveSessionTokenWithResponse request returning *HttpSessionsActionRemoveSessionTokenResponse
func (c *ClientWithResponses) HttpSessionsActionRemoveSessionTokenWithResponse(ctx context.Context, params *HttpSessionsActionRemoveSessionTokenParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionRemoveSessionTokenResponse, error) {
	rsp, err := c.HttpSessionsActionRemoveSessionToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHttpSessionsActionRemoveSessionTokenResponse(rsp)
}

// HttpSessionsActionRenameSessionWithResponse request returning *HttpSessionsActionRenameSessionResponse
func (c *ClientWithResponses) HttpSessionsActionRenameSessionWithResponse(ctx context.Context, params *HttpSessionsActionRenameSessionParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionRenameSessionResponse, error) {
	rsp, err := c.HttpSessionsActionRenameSession(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHttpSessionsActionRenameSessionResponse(rsp)
}

// HttpSessionsActionSetActiveSessionWithResponse request returning *HttpSessionsActionSetActiveSessionResponse
func (c *ClientWithResponses) HttpSessionsActionSetActiveSessionWithResponse(ctx context.Context, params *HttpSessionsActionSetActiveSessionParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionSetActiveSessionResponse, error) {
	rsp, err := c.HttpSessionsActionSetActiveSession(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHttpSessionsActionSetActiveSessionResponse(rsp)
}

// HttpSessionsActionSetDefaultSessionTokenEnabledWithResponse request returning *HttpSessionsActionSetDefaultSessionTokenEnabledResponse
func (c *ClientWithResponses) HttpSessionsActionSetDefaultSessionTokenEnabledWithResponse(ctx context.Context, params *HttpSessionsActionSetDefaultSessionTokenEnabledParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionSetDefaultSessionTokenEnabledResponse, error) {
	rsp, err := c.HttpSessionsActionSetDefaultSessionTokenEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHttpSessionsActionSetDefaultSessionTokenEnabledResponse(rsp)
}

// HttpSessionsActionSetSessionTokenValueWithResponse request returning *HttpSessionsActionSetSessionTokenValueResponse
func (c *ClientWithResponses) HttpSessionsActionSetSessionTokenValueWithResponse(ctx context.Context, params *HttpSessionsActionSetSessionTokenValueParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionSetSessionTokenValueResponse, error) {
	rsp, err := c.HttpSessionsActionSetSessionTokenValue(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHttpSessionsActionSetSessionTokenValueResponse(rsp)
}

// HttpSessionsActionUnsetActiveSessionWithResponse request returning *HttpSessionsActionUnsetActiveSessionResponse
func (c *ClientWithResponses) HttpSessionsActionUnsetActiveSessionWithResponse(ctx context.Context, params *HttpSessionsActionUnsetActiveSessionParams, reqEditors ...RequestEditorFn) (*HttpSessionsActionUnsetActiveSessionResponse, error) {
	rsp, err := c.HttpSessionsActionUnsetActiveSession(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHttpSessionsActionUnsetActiveSessionResponse(rsp)
}

// HttpSessionsViewActiveSessionWithResponse request returning *HttpSessionsViewActiveSessionResponse
func (c *ClientWithResponses) HttpSessionsViewActiveSessionWithResponse(ctx context.Context, params *HttpSessionsViewActiveSessionParams, reqEditors ...RequestEditorFn) (*HttpSessionsViewActiveSessionResponse, error) {
	rsp, err := c.HttpSessionsViewActiveSession(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHttpSessionsViewActiveSessionResponse(rsp)
}

// HttpSessionsViewDefaultSessionTokensWithResponse request returning *HttpSessionsViewDefaultSessionTokensResponse
func (c *ClientWithResponses) HttpSessionsViewDefaultSessionTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HttpSessionsViewDefaultSessionTokensResponse, error) {
	rsp, err := c.HttpSessionsViewDefaultSessionTokens(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHttpSessionsViewDefaultSessionTokensResponse(rsp)
}

// HttpSessionsViewSessionTokensWithResponse request returning *HttpSessionsViewSessionTokensResponse
func (c *ClientWithResponses) HttpSessionsViewSessionTokensWithResponse(ctx context.Context, params *HttpSessionsViewSessionTokensParams, reqEditors ...RequestEditorFn) (*HttpSessionsViewSessionTokensResponse, error) {
	rsp, err := c.HttpSessionsViewSessionTokens(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHttpSessionsViewSessionTokensResponse(rsp)
}

// HttpSessionsViewSessionsWithResponse request returning *HttpSessionsViewSessionsResponse
func (c *ClientWithResponses) HttpSessionsViewSessionsWithResponse(ctx context.Context, params *HttpSessionsViewSessionsParams, reqEditors ...RequestEditorFn) (*HttpSessionsViewSessionsResponse, error) {
	rsp, err := c.HttpSessionsViewSessions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHttpSessionsViewSessionsResponse(rsp)
}

// HttpSessionsViewSitesWithResponse request returning *HttpSessionsViewSitesResponse
func (c *ClientWithResponses) HttpSessionsViewSitesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HttpSessionsViewSitesResponse, error) {
	rsp, err := c.HttpSessionsViewSites(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHttpSessionsViewSitesResponse(rsp)
}

// HudActionLogWithResponse request returning *HudActionLogResponse
func (c *ClientWithResponses) HudActionLogWithResponse(ctx context.Context, params *HudActionLogParams, reqEditors ...RequestEditorFn) (*HudActionLogResponse, error) {
	rsp, err := c.HudActionLog(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudActionLogResponse(rsp)
}

// HudActionRecordRequestWithResponse request returning *HudActionRecordRequestResponse
func (c *ClientWithResponses) HudActionRecordRequestWithResponse(ctx context.Context, params *HudActionRecordRequestParams, reqEditors ...RequestEditorFn) (*HudActionRecordRequestResponse, error) {
	rsp, err := c.HudActionRecordRequest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudActionRecordRequestResponse(rsp)
}

// HudActionResetTutorialTasksWithResponse request returning *HudActionResetTutorialTasksResponse
func (c *ClientWithResponses) HudActionResetTutorialTasksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudActionResetTutorialTasksResponse, error) {
	rsp, err := c.HudActionResetTutorialTasks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudActionResetTutorialTasksResponse(rsp)
}

// HudActionSetOptionBaseDirectoryWithResponse request returning *HudActionSetOptionBaseDirectoryResponse
func (c *ClientWithResponses) HudActionSetOptionBaseDirectoryWithResponse(ctx context.Context, params *HudActionSetOptionBaseDirectoryParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionBaseDirectoryResponse, error) {
	rsp, err := c.HudActionSetOptionBaseDirectory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudActionSetOptionBaseDirectoryResponse(rsp)
}

// HudActionSetOptionDevelopmentModeWithResponse request returning *HudActionSetOptionDevelopmentModeResponse
func (c *ClientWithResponses) HudActionSetOptionDevelopmentModeWithResponse(ctx context.Context, params *HudActionSetOptionDevelopmentModeParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionDevelopmentModeResponse, error) {
	rsp, err := c.HudActionSetOptionDevelopmentMode(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudActionSetOptionDevelopmentModeResponse(rsp)
}

// HudActionSetOptionEnableOnDomainMsgsWithResponse request returning *HudActionSetOptionEnableOnDomainMsgsResponse
func (c *ClientWithResponses) HudActionSetOptionEnableOnDomainMsgsWithResponse(ctx context.Context, params *HudActionSetOptionEnableOnDomainMsgsParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionEnableOnDomainMsgsResponse, error) {
	rsp, err := c.HudActionSetOptionEnableOnDomainMsgs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudActionSetOptionEnableOnDomainMsgsResponse(rsp)
}

// HudActionSetOptionEnabledForDaemonWithResponse request returning *HudActionSetOptionEnabledForDaemonResponse
func (c *ClientWithResponses) HudActionSetOptionEnabledForDaemonWithResponse(ctx context.Context, params *HudActionSetOptionEnabledForDaemonParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionEnabledForDaemonResponse, error) {
	rsp, err := c.HudActionSetOptionEnabledForDaemon(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudActionSetOptionEnabledForDaemonResponse(rsp)
}

// HudActionSetOptionEnabledForDesktopWithResponse request returning *HudActionSetOptionEnabledForDesktopResponse
func (c *ClientWithResponses) HudActionSetOptionEnabledForDesktopWithResponse(ctx context.Context, params *HudActionSetOptionEnabledForDesktopParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionEnabledForDesktopResponse, error) {
	rsp, err := c.HudActionSetOptionEnabledForDesktop(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudActionSetOptionEnabledForDesktopResponse(rsp)
}

// HudActionSetOptionInScopeOnlyWithResponse request returning *HudActionSetOptionInScopeOnlyResponse
func (c *ClientWithResponses) HudActionSetOptionInScopeOnlyWithResponse(ctx context.Context, params *HudActionSetOptionInScopeOnlyParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionInScopeOnlyResponse, error) {
	rsp, err := c.HudActionSetOptionInScopeOnly(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudActionSetOptionInScopeOnlyResponse(rsp)
}

// HudActionSetOptionRemoveCSPWithResponse request returning *HudActionSetOptionRemoveCSPResponse
func (c *ClientWithResponses) HudActionSetOptionRemoveCSPWithResponse(ctx context.Context, params *HudActionSetOptionRemoveCSPParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionRemoveCSPResponse, error) {
	rsp, err := c.HudActionSetOptionRemoveCSP(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudActionSetOptionRemoveCSPResponse(rsp)
}

// HudActionSetOptionShowWelcomeScreenWithResponse request returning *HudActionSetOptionShowWelcomeScreenResponse
func (c *ClientWithResponses) HudActionSetOptionShowWelcomeScreenWithResponse(ctx context.Context, params *HudActionSetOptionShowWelcomeScreenParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionShowWelcomeScreenResponse, error) {
	rsp, err := c.HudActionSetOptionShowWelcomeScreen(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudActionSetOptionShowWelcomeScreenResponse(rsp)
}

// HudActionSetOptionSkipTutorialTasksWithResponse request returning *HudActionSetOptionSkipTutorialTasksResponse
func (c *ClientWithResponses) HudActionSetOptionSkipTutorialTasksWithResponse(ctx context.Context, params *HudActionSetOptionSkipTutorialTasksParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionSkipTutorialTasksResponse, error) {
	rsp, err := c.HudActionSetOptionSkipTutorialTasks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudActionSetOptionSkipTutorialTasksResponse(rsp)
}

// HudActionSetOptionTutorialTaskDoneWithResponse request returning *HudActionSetOptionTutorialTaskDoneResponse
func (c *ClientWithResponses) HudActionSetOptionTutorialTaskDoneWithResponse(ctx context.Context, params *HudActionSetOptionTutorialTaskDoneParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionTutorialTaskDoneResponse, error) {
	rsp, err := c.HudActionSetOptionTutorialTaskDone(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudActionSetOptionTutorialTaskDoneResponse(rsp)
}

// HudActionSetOptionTutorialTestModeWithResponse request returning *HudActionSetOptionTutorialTestModeResponse
func (c *ClientWithResponses) HudActionSetOptionTutorialTestModeWithResponse(ctx context.Context, params *HudActionSetOptionTutorialTestModeParams, reqEditors ...RequestEditorFn) (*HudActionSetOptionTutorialTestModeResponse, error) {
	rsp, err := c.HudActionSetOptionTutorialTestMode(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudActionSetOptionTutorialTestModeResponse(rsp)
}

// HudActionSetUiOptionWithResponse request returning *HudActionSetUiOptionResponse
func (c *ClientWithResponses) HudActionSetUiOptionWithResponse(ctx context.Context, params *HudActionSetUiOptionParams, reqEditors ...RequestEditorFn) (*HudActionSetUiOptionResponse, error) {
	rsp, err := c.HudActionSetUiOption(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudActionSetUiOptionResponse(rsp)
}

// HudViewGetUiOptionWithResponse request returning *HudViewGetUiOptionResponse
func (c *ClientWithResponses) HudViewGetUiOptionWithResponse(ctx context.Context, params *HudViewGetUiOptionParams, reqEditors ...RequestEditorFn) (*HudViewGetUiOptionResponse, error) {
	rsp, err := c.HudViewGetUiOption(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewGetUiOptionResponse(rsp)
}

// HudViewHeartbeatWithResponse request returning *HudViewHeartbeatResponse
func (c *ClientWithResponses) HudViewHeartbeatWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewHeartbeatResponse, error) {
	rsp, err := c.HudViewHeartbeat(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewHeartbeatResponse(rsp)
}

// HudViewHudAlertDataWithResponse request returning *HudViewHudAlertDataResponse
func (c *ClientWithResponses) HudViewHudAlertDataWithResponse(ctx context.Context, params *HudViewHudAlertDataParams, reqEditors ...RequestEditorFn) (*HudViewHudAlertDataResponse, error) {
	rsp, err := c.HudViewHudAlertData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewHudAlertDataResponse(rsp)
}

// HudViewOptionAllowUnsafeEvalWithResponse request returning *HudViewOptionAllowUnsafeEvalResponse
func (c *ClientWithResponses) HudViewOptionAllowUnsafeEvalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionAllowUnsafeEvalResponse, error) {
	rsp, err := c.HudViewOptionAllowUnsafeEval(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewOptionAllowUnsafeEvalResponse(rsp)
}

// HudViewOptionBaseDirectoryWithResponse request returning *HudViewOptionBaseDirectoryResponse
func (c *ClientWithResponses) HudViewOptionBaseDirectoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionBaseDirectoryResponse, error) {
	rsp, err := c.HudViewOptionBaseDirectory(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewOptionBaseDirectoryResponse(rsp)
}

// HudViewOptionDevelopmentModeWithResponse request returning *HudViewOptionDevelopmentModeResponse
func (c *ClientWithResponses) HudViewOptionDevelopmentModeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionDevelopmentModeResponse, error) {
	rsp, err := c.HudViewOptionDevelopmentMode(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewOptionDevelopmentModeResponse(rsp)
}

// HudViewOptionEnableOnDomainMsgsWithResponse request returning *HudViewOptionEnableOnDomainMsgsResponse
func (c *ClientWithResponses) HudViewOptionEnableOnDomainMsgsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionEnableOnDomainMsgsResponse, error) {
	rsp, err := c.HudViewOptionEnableOnDomainMsgs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewOptionEnableOnDomainMsgsResponse(rsp)
}

// HudViewOptionEnableTelemetryWithResponse request returning *HudViewOptionEnableTelemetryResponse
func (c *ClientWithResponses) HudViewOptionEnableTelemetryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionEnableTelemetryResponse, error) {
	rsp, err := c.HudViewOptionEnableTelemetry(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewOptionEnableTelemetryResponse(rsp)
}

// HudViewOptionEnabledForDaemonWithResponse request returning *HudViewOptionEnabledForDaemonResponse
func (c *ClientWithResponses) HudViewOptionEnabledForDaemonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionEnabledForDaemonResponse, error) {
	rsp, err := c.HudViewOptionEnabledForDaemon(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewOptionEnabledForDaemonResponse(rsp)
}

// HudViewOptionEnabledForDesktopWithResponse request returning *HudViewOptionEnabledForDesktopResponse
func (c *ClientWithResponses) HudViewOptionEnabledForDesktopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionEnabledForDesktopResponse, error) {
	rsp, err := c.HudViewOptionEnabledForDesktop(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewOptionEnabledForDesktopResponse(rsp)
}

// HudViewOptionInScopeOnlyWithResponse request returning *HudViewOptionInScopeOnlyResponse
func (c *ClientWithResponses) HudViewOptionInScopeOnlyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionInScopeOnlyResponse, error) {
	rsp, err := c.HudViewOptionInScopeOnly(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewOptionInScopeOnlyResponse(rsp)
}

// HudViewOptionRemoveCSPWithResponse request returning *HudViewOptionRemoveCSPResponse
func (c *ClientWithResponses) HudViewOptionRemoveCSPWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionRemoveCSPResponse, error) {
	rsp, err := c.HudViewOptionRemoveCSP(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewOptionRemoveCSPResponse(rsp)
}

// HudViewOptionShowWelcomeScreenWithResponse request returning *HudViewOptionShowWelcomeScreenResponse
func (c *ClientWithResponses) HudViewOptionShowWelcomeScreenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionShowWelcomeScreenResponse, error) {
	rsp, err := c.HudViewOptionShowWelcomeScreen(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewOptionShowWelcomeScreenResponse(rsp)
}

// HudViewOptionSkipTutorialTasksWithResponse request returning *HudViewOptionSkipTutorialTasksResponse
func (c *ClientWithResponses) HudViewOptionSkipTutorialTasksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionSkipTutorialTasksResponse, error) {
	rsp, err := c.HudViewOptionSkipTutorialTasks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewOptionSkipTutorialTasksResponse(rsp)
}

// HudViewOptionTutorialHostWithResponse request returning *HudViewOptionTutorialHostResponse
func (c *ClientWithResponses) HudViewOptionTutorialHostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionTutorialHostResponse, error) {
	rsp, err := c.HudViewOptionTutorialHost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewOptionTutorialHostResponse(rsp)
}

// HudViewOptionTutorialPortWithResponse request returning *HudViewOptionTutorialPortResponse
func (c *ClientWithResponses) HudViewOptionTutorialPortWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionTutorialPortResponse, error) {
	rsp, err := c.HudViewOptionTutorialPort(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewOptionTutorialPortResponse(rsp)
}

// HudViewOptionTutorialTasksDoneWithResponse request returning *HudViewOptionTutorialTasksDoneResponse
func (c *ClientWithResponses) HudViewOptionTutorialTasksDoneWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionTutorialTasksDoneResponse, error) {
	rsp, err := c.HudViewOptionTutorialTasksDone(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewOptionTutorialTasksDoneResponse(rsp)
}

// HudViewOptionTutorialTestModeWithResponse request returning *HudViewOptionTutorialTestModeResponse
func (c *ClientWithResponses) HudViewOptionTutorialTestModeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionTutorialTestModeResponse, error) {
	rsp, err := c.HudViewOptionTutorialTestMode(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewOptionTutorialTestModeResponse(rsp)
}

// HudViewOptionTutorialUpdatesWithResponse request returning *HudViewOptionTutorialUpdatesResponse
func (c *ClientWithResponses) HudViewOptionTutorialUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewOptionTutorialUpdatesResponse, error) {
	rsp, err := c.HudViewOptionTutorialUpdates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewOptionTutorialUpdatesResponse(rsp)
}

// HudViewTutorialUpdatesWithResponse request returning *HudViewTutorialUpdatesResponse
func (c *ClientWithResponses) HudViewTutorialUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewTutorialUpdatesResponse, error) {
	rsp, err := c.HudViewTutorialUpdates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewTutorialUpdatesResponse(rsp)
}

// HudViewUpgradedDomainsWithResponse request returning *HudViewUpgradedDomainsResponse
func (c *ClientWithResponses) HudViewUpgradedDomainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudViewUpgradedDomainsResponse, error) {
	rsp, err := c.HudViewUpgradedDomains(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudViewUpgradedDomainsResponse(rsp)
}

// LocalProxiesActionAddAdditionalProxyWithResponse request returning *LocalProxiesActionAddAdditionalProxyResponse
func (c *ClientWithResponses) LocalProxiesActionAddAdditionalProxyWithResponse(ctx context.Context, params *LocalProxiesActionAddAdditionalProxyParams, reqEditors ...RequestEditorFn) (*LocalProxiesActionAddAdditionalProxyResponse, error) {
	rsp, err := c.LocalProxiesActionAddAdditionalProxy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocalProxiesActionAddAdditionalProxyResponse(rsp)
}

// LocalProxiesActionRemoveAdditionalProxyWithResponse request returning *LocalProxiesActionRemoveAdditionalProxyResponse
func (c *ClientWithResponses) LocalProxiesActionRemoveAdditionalProxyWithResponse(ctx context.Context, params *LocalProxiesActionRemoveAdditionalProxyParams, reqEditors ...RequestEditorFn) (*LocalProxiesActionRemoveAdditionalProxyResponse, error) {
	rsp, err := c.LocalProxiesActionRemoveAdditionalProxy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocalProxiesActionRemoveAdditionalProxyResponse(rsp)
}

// LocalProxiesViewAdditionalProxiesWithResponse request returning *LocalProxiesViewAdditionalProxiesResponse
func (c *ClientWithResponses) LocalProxiesViewAdditionalProxiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LocalProxiesViewAdditionalProxiesResponse, error) {
	rsp, err := c.LocalProxiesViewAdditionalProxies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocalProxiesViewAdditionalProxiesResponse(rsp)
}

// NetworkActionAddAliasWithResponse request returning *NetworkActionAddAliasResponse
func (c *ClientWithResponses) NetworkActionAddAliasWithResponse(ctx context.Context, params *NetworkActionAddAliasParams, reqEditors ...RequestEditorFn) (*NetworkActionAddAliasResponse, error) {
	rsp, err := c.NetworkActionAddAlias(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionAddAliasResponse(rsp)
}

// NetworkActionAddHttpProxyExclusionWithResponse request returning *NetworkActionAddHttpProxyExclusionResponse
func (c *ClientWithResponses) NetworkActionAddHttpProxyExclusionWithResponse(ctx context.Context, params *NetworkActionAddHttpProxyExclusionParams, reqEditors ...RequestEditorFn) (*NetworkActionAddHttpProxyExclusionResponse, error) {
	rsp, err := c.NetworkActionAddHttpProxyExclusion(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionAddHttpProxyExclusionResponse(rsp)
}

// NetworkActionAddLocalServerWithResponse request returning *NetworkActionAddLocalServerResponse
func (c *ClientWithResponses) NetworkActionAddLocalServerWithResponse(ctx context.Context, params *NetworkActionAddLocalServerParams, reqEditors ...RequestEditorFn) (*NetworkActionAddLocalServerResponse, error) {
	rsp, err := c.NetworkActionAddLocalServer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionAddLocalServerResponse(rsp)
}

// NetworkActionAddPassThroughWithResponse request returning *NetworkActionAddPassThroughResponse
func (c *ClientWithResponses) NetworkActionAddPassThroughWithResponse(ctx context.Context, params *NetworkActionAddPassThroughParams, reqEditors ...RequestEditorFn) (*NetworkActionAddPassThroughResponse, error) {
	rsp, err := c.NetworkActionAddPassThrough(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionAddPassThroughResponse(rsp)
}

// NetworkActionAddPkcs12ClientCertificateWithResponse request returning *NetworkActionAddPkcs12ClientCertificateResponse
func (c *ClientWithResponses) NetworkActionAddPkcs12ClientCertificateWithResponse(ctx context.Context, params *NetworkActionAddPkcs12ClientCertificateParams, reqEditors ...RequestEditorFn) (*NetworkActionAddPkcs12ClientCertificateResponse, error) {
	rsp, err := c.NetworkActionAddPkcs12ClientCertificate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionAddPkcs12ClientCertificateResponse(rsp)
}

// NetworkActionAddRateLimitRuleWithResponse request returning *NetworkActionAddRateLimitRuleResponse
func (c *ClientWithResponses) NetworkActionAddRateLimitRuleWithResponse(ctx context.Context, params *NetworkActionAddRateLimitRuleParams, reqEditors ...RequestEditorFn) (*NetworkActionAddRateLimitRuleResponse, error) {
	rsp, err := c.NetworkActionAddRateLimitRule(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionAddRateLimitRuleResponse(rsp)
}

// NetworkActionGenerateRootCaCertWithResponse request returning *NetworkActionGenerateRootCaCertResponse
func (c *ClientWithResponses) NetworkActionGenerateRootCaCertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkActionGenerateRootCaCertResponse, error) {
	rsp, err := c.NetworkActionGenerateRootCaCert(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionGenerateRootCaCertResponse(rsp)
}

// NetworkActionImportRootCaCertWithResponse request returning *NetworkActionImportRootCaCertResponse
func (c *ClientWithResponses) NetworkActionImportRootCaCertWithResponse(ctx context.Context, params *NetworkActionImportRootCaCertParams, reqEditors ...RequestEditorFn) (*NetworkActionImportRootCaCertResponse, error) {
	rsp, err := c.NetworkActionImportRootCaCert(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionImportRootCaCertResponse(rsp)
}

// NetworkActionRemoveAliasWithResponse request returning *NetworkActionRemoveAliasResponse
func (c *ClientWithResponses) NetworkActionRemoveAliasWithResponse(ctx context.Context, params *NetworkActionRemoveAliasParams, reqEditors ...RequestEditorFn) (*NetworkActionRemoveAliasResponse, error) {
	rsp, err := c.NetworkActionRemoveAlias(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionRemoveAliasResponse(rsp)
}

// NetworkActionRemoveHttpProxyExclusionWithResponse request returning *NetworkActionRemoveHttpProxyExclusionResponse
func (c *ClientWithResponses) NetworkActionRemoveHttpProxyExclusionWithResponse(ctx context.Context, params *NetworkActionRemoveHttpProxyExclusionParams, reqEditors ...RequestEditorFn) (*NetworkActionRemoveHttpProxyExclusionResponse, error) {
	rsp, err := c.NetworkActionRemoveHttpProxyExclusion(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionRemoveHttpProxyExclusionResponse(rsp)
}

// NetworkActionRemoveLocalServerWithResponse request returning *NetworkActionRemoveLocalServerResponse
func (c *ClientWithResponses) NetworkActionRemoveLocalServerWithResponse(ctx context.Context, params *NetworkActionRemoveLocalServerParams, reqEditors ...RequestEditorFn) (*NetworkActionRemoveLocalServerResponse, error) {
	rsp, err := c.NetworkActionRemoveLocalServer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionRemoveLocalServerResponse(rsp)
}

// NetworkActionRemovePassThroughWithResponse request returning *NetworkActionRemovePassThroughResponse
func (c *ClientWithResponses) NetworkActionRemovePassThroughWithResponse(ctx context.Context, params *NetworkActionRemovePassThroughParams, reqEditors ...RequestEditorFn) (*NetworkActionRemovePassThroughResponse, error) {
	rsp, err := c.NetworkActionRemovePassThrough(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionRemovePassThroughResponse(rsp)
}

// NetworkActionRemoveRateLimitRuleWithResponse request returning *NetworkActionRemoveRateLimitRuleResponse
func (c *ClientWithResponses) NetworkActionRemoveRateLimitRuleWithResponse(ctx context.Context, params *NetworkActionRemoveRateLimitRuleParams, reqEditors ...RequestEditorFn) (*NetworkActionRemoveRateLimitRuleResponse, error) {
	rsp, err := c.NetworkActionRemoveRateLimitRule(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionRemoveRateLimitRuleResponse(rsp)
}

// NetworkActionSetAliasEnabledWithResponse request returning *NetworkActionSetAliasEnabledResponse
func (c *ClientWithResponses) NetworkActionSetAliasEnabledWithResponse(ctx context.Context, params *NetworkActionSetAliasEnabledParams, reqEditors ...RequestEditorFn) (*NetworkActionSetAliasEnabledResponse, error) {
	rsp, err := c.NetworkActionSetAliasEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionSetAliasEnabledResponse(rsp)
}

// NetworkActionSetConnectionTimeoutWithResponse request returning *NetworkActionSetConnectionTimeoutResponse
func (c *ClientWithResponses) NetworkActionSetConnectionTimeoutWithResponse(ctx context.Context, params *NetworkActionSetConnectionTimeoutParams, reqEditors ...RequestEditorFn) (*NetworkActionSetConnectionTimeoutResponse, error) {
	rsp, err := c.NetworkActionSetConnectionTimeout(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionSetConnectionTimeoutResponse(rsp)
}

// NetworkActionSetDefaultUserAgentWithResponse request returning *NetworkActionSetDefaultUserAgentResponse
func (c *ClientWithResponses) NetworkActionSetDefaultUserAgentWithResponse(ctx context.Context, params *NetworkActionSetDefaultUserAgentParams, reqEditors ...RequestEditorFn) (*NetworkActionSetDefaultUserAgentResponse, error) {
	rsp, err := c.NetworkActionSetDefaultUserAgent(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionSetDefaultUserAgentResponse(rsp)
}

// NetworkActionSetDnsTtlSuccessfulQueriesWithResponse request returning *NetworkActionSetDnsTtlSuccessfulQueriesResponse
func (c *ClientWithResponses) NetworkActionSetDnsTtlSuccessfulQueriesWithResponse(ctx context.Context, params *NetworkActionSetDnsTtlSuccessfulQueriesParams, reqEditors ...RequestEditorFn) (*NetworkActionSetDnsTtlSuccessfulQueriesResponse, error) {
	rsp, err := c.NetworkActionSetDnsTtlSuccessfulQueries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionSetDnsTtlSuccessfulQueriesResponse(rsp)
}

// NetworkActionSetHttpProxyWithResponse request returning *NetworkActionSetHttpProxyResponse
func (c *ClientWithResponses) NetworkActionSetHttpProxyWithResponse(ctx context.Context, params *NetworkActionSetHttpProxyParams, reqEditors ...RequestEditorFn) (*NetworkActionSetHttpProxyResponse, error) {
	rsp, err := c.NetworkActionSetHttpProxy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionSetHttpProxyResponse(rsp)
}

// NetworkActionSetHttpProxyAuthEnabledWithResponse request returning *NetworkActionSetHttpProxyAuthEnabledResponse
func (c *ClientWithResponses) NetworkActionSetHttpProxyAuthEnabledWithResponse(ctx context.Context, params *NetworkActionSetHttpProxyAuthEnabledParams, reqEditors ...RequestEditorFn) (*NetworkActionSetHttpProxyAuthEnabledResponse, error) {
	rsp, err := c.NetworkActionSetHttpProxyAuthEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionSetHttpProxyAuthEnabledResponse(rsp)
}

// NetworkActionSetHttpProxyEnabledWithResponse request returning *NetworkActionSetHttpProxyEnabledResponse
func (c *ClientWithResponses) NetworkActionSetHttpProxyEnabledWithResponse(ctx context.Context, params *NetworkActionSetHttpProxyEnabledParams, reqEditors ...RequestEditorFn) (*NetworkActionSetHttpProxyEnabledResponse, error) {
	rsp, err := c.NetworkActionSetHttpProxyEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionSetHttpProxyEnabledResponse(rsp)
}

// NetworkActionSetHttpProxyExclusionEnabledWithResponse request returning *NetworkActionSetHttpProxyExclusionEnabledResponse
func (c *ClientWithResponses) NetworkActionSetHttpProxyExclusionEnabledWithResponse(ctx context.Context, params *NetworkActionSetHttpProxyExclusionEnabledParams, reqEditors ...RequestEditorFn) (*NetworkActionSetHttpProxyExclusionEnabledResponse, error) {
	rsp, err := c.NetworkActionSetHttpProxyExclusionEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionSetHttpProxyExclusionEnabledResponse(rsp)
}

// NetworkActionSetPassThroughEnabledWithResponse request returning *NetworkActionSetPassThroughEnabledResponse
func (c *ClientWithResponses) NetworkActionSetPassThroughEnabledWithResponse(ctx context.Context, params *NetworkActionSetPassThroughEnabledParams, reqEditors ...RequestEditorFn) (*NetworkActionSetPassThroughEnabledResponse, error) {
	rsp, err := c.NetworkActionSetPassThroughEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionSetPassThroughEnabledResponse(rsp)
}

// NetworkActionSetRateLimitRuleEnabledWithResponse request returning *NetworkActionSetRateLimitRuleEnabledResponse
func (c *ClientWithResponses) NetworkActionSetRateLimitRuleEnabledWithResponse(ctx context.Context, params *NetworkActionSetRateLimitRuleEnabledParams, reqEditors ...RequestEditorFn) (*NetworkActionSetRateLimitRuleEnabledResponse, error) {
	rsp, err := c.NetworkActionSetRateLimitRuleEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionSetRateLimitRuleEnabledResponse(rsp)
}

// NetworkActionSetRootCaCertValidityWithResponse request returning *NetworkActionSetRootCaCertValidityResponse
func (c *ClientWithResponses) NetworkActionSetRootCaCertValidityWithResponse(ctx context.Context, params *NetworkActionSetRootCaCertValidityParams, reqEditors ...RequestEditorFn) (*NetworkActionSetRootCaCertValidityResponse, error) {
	rsp, err := c.NetworkActionSetRootCaCertValidity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionSetRootCaCertValidityResponse(rsp)
}

// NetworkActionSetServerCertValidityWithResponse request returning *NetworkActionSetServerCertValidityResponse
func (c *ClientWithResponses) NetworkActionSetServerCertValidityWithResponse(ctx context.Context, params *NetworkActionSetServerCertValidityParams, reqEditors ...RequestEditorFn) (*NetworkActionSetServerCertValidityResponse, error) {
	rsp, err := c.NetworkActionSetServerCertValidity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionSetServerCertValidityResponse(rsp)
}

// NetworkActionSetSocksProxyWithResponse request returning *NetworkActionSetSocksProxyResponse
func (c *ClientWithResponses) NetworkActionSetSocksProxyWithResponse(ctx context.Context, params *NetworkActionSetSocksProxyParams, reqEditors ...RequestEditorFn) (*NetworkActionSetSocksProxyResponse, error) {
	rsp, err := c.NetworkActionSetSocksProxy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionSetSocksProxyResponse(rsp)
}

// NetworkActionSetSocksProxyEnabledWithResponse request returning *NetworkActionSetSocksProxyEnabledResponse
func (c *ClientWithResponses) NetworkActionSetSocksProxyEnabledWithResponse(ctx context.Context, params *NetworkActionSetSocksProxyEnabledParams, reqEditors ...RequestEditorFn) (*NetworkActionSetSocksProxyEnabledResponse, error) {
	rsp, err := c.NetworkActionSetSocksProxyEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionSetSocksProxyEnabledResponse(rsp)
}

// NetworkActionSetUseClientCertificateWithResponse request returning *NetworkActionSetUseClientCertificateResponse
func (c *ClientWithResponses) NetworkActionSetUseClientCertificateWithResponse(ctx context.Context, params *NetworkActionSetUseClientCertificateParams, reqEditors ...RequestEditorFn) (*NetworkActionSetUseClientCertificateResponse, error) {
	rsp, err := c.NetworkActionSetUseClientCertificate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionSetUseClientCertificateResponse(rsp)
}

// NetworkActionSetUseGlobalHttpStateWithResponse request returning *NetworkActionSetUseGlobalHttpStateResponse
func (c *ClientWithResponses) NetworkActionSetUseGlobalHttpStateWithResponse(ctx context.Context, params *NetworkActionSetUseGlobalHttpStateParams, reqEditors ...RequestEditorFn) (*NetworkActionSetUseGlobalHttpStateResponse, error) {
	rsp, err := c.NetworkActionSetUseGlobalHttpState(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkActionSetUseGlobalHttpStateResponse(rsp)
}

// NetworkViewGetAliasesWithResponse request returning *NetworkViewGetAliasesResponse
func (c *ClientWithResponses) NetworkViewGetAliasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetAliasesResponse, error) {
	rsp, err := c.NetworkViewGetAliases(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkViewGetAliasesResponse(rsp)
}

// NetworkViewGetConnectionTimeoutWithResponse request returning *NetworkViewGetConnectionTimeoutResponse
func (c *ClientWithResponses) NetworkViewGetConnectionTimeoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetConnectionTimeoutResponse, error) {
	rsp, err := c.NetworkViewGetConnectionTimeout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkViewGetConnectionTimeoutResponse(rsp)
}

// NetworkViewGetDefaultUserAgentWithResponse request returning *NetworkViewGetDefaultUserAgentResponse
func (c *ClientWithResponses) NetworkViewGetDefaultUserAgentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetDefaultUserAgentResponse, error) {
	rsp, err := c.NetworkViewGetDefaultUserAgent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkViewGetDefaultUserAgentResponse(rsp)
}

// NetworkViewGetDnsTtlSuccessfulQueriesWithResponse request returning *NetworkViewGetDnsTtlSuccessfulQueriesResponse
func (c *ClientWithResponses) NetworkViewGetDnsTtlSuccessfulQueriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetDnsTtlSuccessfulQueriesResponse, error) {
	rsp, err := c.NetworkViewGetDnsTtlSuccessfulQueries(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkViewGetDnsTtlSuccessfulQueriesResponse(rsp)
}

// NetworkViewGetHttpProxyWithResponse request returning *NetworkViewGetHttpProxyResponse
func (c *ClientWithResponses) NetworkViewGetHttpProxyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetHttpProxyResponse, error) {
	rsp, err := c.NetworkViewGetHttpProxy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkViewGetHttpProxyResponse(rsp)
}

// NetworkViewGetHttpProxyExclusionsWithResponse request returning *NetworkViewGetHttpProxyExclusionsResponse
func (c *ClientWithResponses) NetworkViewGetHttpProxyExclusionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetHttpProxyExclusionsResponse, error) {
	rsp, err := c.NetworkViewGetHttpProxyExclusions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkViewGetHttpProxyExclusionsResponse(rsp)
}

// NetworkViewGetLocalServersWithResponse request returning *NetworkViewGetLocalServersResponse
func (c *ClientWithResponses) NetworkViewGetLocalServersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetLocalServersResponse, error) {
	rsp, err := c.NetworkViewGetLocalServers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkViewGetLocalServersResponse(rsp)
}

// NetworkViewGetPassThroughsWithResponse request returning *NetworkViewGetPassThroughsResponse
func (c *ClientWithResponses) NetworkViewGetPassThroughsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetPassThroughsResponse, error) {
	rsp, err := c.NetworkViewGetPassThroughs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkViewGetPassThroughsResponse(rsp)
}

// NetworkViewGetRateLimitRulesWithResponse request returning *NetworkViewGetRateLimitRulesResponse
func (c *ClientWithResponses) NetworkViewGetRateLimitRulesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetRateLimitRulesResponse, error) {
	rsp, err := c.NetworkViewGetRateLimitRules(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkViewGetRateLimitRulesResponse(rsp)
}

// NetworkViewGetRootCaCertValidityWithResponse request returning *NetworkViewGetRootCaCertValidityResponse
func (c *ClientWithResponses) NetworkViewGetRootCaCertValidityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetRootCaCertValidityResponse, error) {
	rsp, err := c.NetworkViewGetRootCaCertValidity(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkViewGetRootCaCertValidityResponse(rsp)
}

// NetworkViewGetServerCertValidityWithResponse request returning *NetworkViewGetServerCertValidityResponse
func (c *ClientWithResponses) NetworkViewGetServerCertValidityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetServerCertValidityResponse, error) {
	rsp, err := c.NetworkViewGetServerCertValidity(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkViewGetServerCertValidityResponse(rsp)
}

// NetworkViewGetSocksProxyWithResponse request returning *NetworkViewGetSocksProxyResponse
func (c *ClientWithResponses) NetworkViewGetSocksProxyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewGetSocksProxyResponse, error) {
	rsp, err := c.NetworkViewGetSocksProxy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkViewGetSocksProxyResponse(rsp)
}

// NetworkViewIsHttpProxyAuthEnabledWithResponse request returning *NetworkViewIsHttpProxyAuthEnabledResponse
func (c *ClientWithResponses) NetworkViewIsHttpProxyAuthEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewIsHttpProxyAuthEnabledResponse, error) {
	rsp, err := c.NetworkViewIsHttpProxyAuthEnabled(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkViewIsHttpProxyAuthEnabledResponse(rsp)
}

// NetworkViewIsHttpProxyEnabledWithResponse request returning *NetworkViewIsHttpProxyEnabledResponse
func (c *ClientWithResponses) NetworkViewIsHttpProxyEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewIsHttpProxyEnabledResponse, error) {
	rsp, err := c.NetworkViewIsHttpProxyEnabled(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkViewIsHttpProxyEnabledResponse(rsp)
}

// NetworkViewIsSocksProxyEnabledWithResponse request returning *NetworkViewIsSocksProxyEnabledResponse
func (c *ClientWithResponses) NetworkViewIsSocksProxyEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewIsSocksProxyEnabledResponse, error) {
	rsp, err := c.NetworkViewIsSocksProxyEnabled(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkViewIsSocksProxyEnabledResponse(rsp)
}

// NetworkViewIsUseGlobalHttpStateWithResponse request returning *NetworkViewIsUseGlobalHttpStateResponse
func (c *ClientWithResponses) NetworkViewIsUseGlobalHttpStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkViewIsUseGlobalHttpStateResponse, error) {
	rsp, err := c.NetworkViewIsUseGlobalHttpState(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkViewIsUseGlobalHttpStateResponse(rsp)
}

// OastActionSetActiveScanServiceWithResponse request returning *OastActionSetActiveScanServiceResponse
func (c *ClientWithResponses) OastActionSetActiveScanServiceWithResponse(ctx context.Context, params *OastActionSetActiveScanServiceParams, reqEditors ...RequestEditorFn) (*OastActionSetActiveScanServiceResponse, error) {
	rsp, err := c.OastActionSetActiveScanService(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOastActionSetActiveScanServiceResponse(rsp)
}

// OastActionSetBoastOptionsWithResponse request returning *OastActionSetBoastOptionsResponse
func (c *ClientWithResponses) OastActionSetBoastOptionsWithResponse(ctx context.Context, params *OastActionSetBoastOptionsParams, reqEditors ...RequestEditorFn) (*OastActionSetBoastOptionsResponse, error) {
	rsp, err := c.OastActionSetBoastOptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOastActionSetBoastOptionsResponse(rsp)
}

// OastActionSetCallbackOptionsWithResponse request returning *OastActionSetCallbackOptionsResponse
func (c *ClientWithResponses) OastActionSetCallbackOptionsWithResponse(ctx context.Context, params *OastActionSetCallbackOptionsParams, reqEditors ...RequestEditorFn) (*OastActionSetCallbackOptionsResponse, error) {
	rsp, err := c.OastActionSetCallbackOptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOastActionSetCallbackOptionsResponse(rsp)
}

// OastActionSetDaysToKeepRecordsWithResponse request returning *OastActionSetDaysToKeepRecordsResponse
func (c *ClientWithResponses) OastActionSetDaysToKeepRecordsWithResponse(ctx context.Context, params *OastActionSetDaysToKeepRecordsParams, reqEditors ...RequestEditorFn) (*OastActionSetDaysToKeepRecordsResponse, error) {
	rsp, err := c.OastActionSetDaysToKeepRecords(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOastActionSetDaysToKeepRecordsResponse(rsp)
}

// OastActionSetInteractshOptionsWithResponse request returning *OastActionSetInteractshOptionsResponse
func (c *ClientWithResponses) OastActionSetInteractshOptionsWithResponse(ctx context.Context, params *OastActionSetInteractshOptionsParams, reqEditors ...RequestEditorFn) (*OastActionSetInteractshOptionsResponse, error) {
	rsp, err := c.OastActionSetInteractshOptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOastActionSetInteractshOptionsResponse(rsp)
}

// OastViewGetActiveScanServiceWithResponse request returning *OastViewGetActiveScanServiceResponse
func (c *ClientWithResponses) OastViewGetActiveScanServiceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OastViewGetActiveScanServiceResponse, error) {
	rsp, err := c.OastViewGetActiveScanService(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOastViewGetActiveScanServiceResponse(rsp)
}

// OastViewGetBoastOptionsWithResponse request returning *OastViewGetBoastOptionsResponse
func (c *ClientWithResponses) OastViewGetBoastOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OastViewGetBoastOptionsResponse, error) {
	rsp, err := c.OastViewGetBoastOptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOastViewGetBoastOptionsResponse(rsp)
}

// OastViewGetCallbackOptionsWithResponse request returning *OastViewGetCallbackOptionsResponse
func (c *ClientWithResponses) OastViewGetCallbackOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OastViewGetCallbackOptionsResponse, error) {
	rsp, err := c.OastViewGetCallbackOptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOastViewGetCallbackOptionsResponse(rsp)
}

// OastViewGetDaysToKeepRecordsWithResponse request returning *OastViewGetDaysToKeepRecordsResponse
func (c *ClientWithResponses) OastViewGetDaysToKeepRecordsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OastViewGetDaysToKeepRecordsResponse, error) {
	rsp, err := c.OastViewGetDaysToKeepRecords(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOastViewGetDaysToKeepRecordsResponse(rsp)
}

// OastViewGetInteractshOptionsWithResponse request returning *OastViewGetInteractshOptionsResponse
func (c *ClientWithResponses) OastViewGetInteractshOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OastViewGetInteractshOptionsResponse, error) {
	rsp, err := c.OastViewGetInteractshOptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOastViewGetInteractshOptionsResponse(rsp)
}

// OastViewGetServicesWithResponse request returning *OastViewGetServicesResponse
func (c *ClientWithResponses) OastViewGetServicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OastViewGetServicesResponse, error) {
	rsp, err := c.OastViewGetServices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOastViewGetServicesResponse(rsp)
}

// OpenapiActionImportFileWithResponse request returning *OpenapiActionImportFileResponse
func (c *ClientWithResponses) OpenapiActionImportFileWithResponse(ctx context.Context, params *OpenapiActionImportFileParams, reqEditors ...RequestEditorFn) (*OpenapiActionImportFileResponse, error) {
	rsp, err := c.OpenapiActionImportFile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpenapiActionImportFileResponse(rsp)
}

// OpenapiActionImportUrlWithResponse request returning *OpenapiActionImportUrlResponse
func (c *ClientWithResponses) OpenapiActionImportUrlWithResponse(ctx context.Context, params *OpenapiActionImportUrlParams, reqEditors ...RequestEditorFn) (*OpenapiActionImportUrlResponse, error) {
	rsp, err := c.OpenapiActionImportUrl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpenapiActionImportUrlResponse(rsp)
}

// ParamDiggerActionHelloWorldWithResponse request returning *ParamDiggerActionHelloWorldResponse
func (c *ClientWithResponses) ParamDiggerActionHelloWorldWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ParamDiggerActionHelloWorldResponse, error) {
	rsp, err := c.ParamDiggerActionHelloWorld(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseParamDiggerActionHelloWorldResponse(rsp)
}

// ParamsViewParamsWithResponse request returning *ParamsViewParamsResponse
func (c *ClientWithResponses) ParamsViewParamsWithResponse(ctx context.Context, params *ParamsViewParamsParams, reqEditors ...RequestEditorFn) (*ParamsViewParamsResponse, error) {
	rsp, err := c.ParamsViewParams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseParamsViewParamsResponse(rsp)
}

// PnhActionMonitorWithResponse request returning *PnhActionMonitorResponse
func (c *ClientWithResponses) PnhActionMonitorWithResponse(ctx context.Context, params *PnhActionMonitorParams, reqEditors ...RequestEditorFn) (*PnhActionMonitorResponse, error) {
	rsp, err := c.PnhActionMonitor(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePnhActionMonitorResponse(rsp)
}

// PnhActionOracleWithResponse request returning *PnhActionOracleResponse
func (c *ClientWithResponses) PnhActionOracleWithResponse(ctx context.Context, params *PnhActionOracleParams, reqEditors ...RequestEditorFn) (*PnhActionOracleResponse, error) {
	rsp, err := c.PnhActionOracle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePnhActionOracleResponse(rsp)
}

// PnhActionStartMonitoringWithResponse request returning *PnhActionStartMonitoringResponse
func (c *ClientWithResponses) PnhActionStartMonitoringWithResponse(ctx context.Context, params *PnhActionStartMonitoringParams, reqEditors ...RequestEditorFn) (*PnhActionStartMonitoringResponse, error) {
	rsp, err := c.PnhActionStartMonitoring(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePnhActionStartMonitoringResponse(rsp)
}

// PnhActionStopMonitoringWithResponse request returning *PnhActionStopMonitoringResponse
func (c *ClientWithResponses) PnhActionStopMonitoringWithResponse(ctx context.Context, params *PnhActionStopMonitoringParams, reqEditors ...RequestEditorFn) (*PnhActionStopMonitoringResponse, error) {
	rsp, err := c.PnhActionStopMonitoring(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePnhActionStopMonitoringResponse(rsp)
}

// PostmanActionImportFileWithResponse request returning *PostmanActionImportFileResponse
func (c *ClientWithResponses) PostmanActionImportFileWithResponse(ctx context.Context, params *PostmanActionImportFileParams, reqEditors ...RequestEditorFn) (*PostmanActionImportFileResponse, error) {
	rsp, err := c.PostmanActionImportFile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmanActionImportFileResponse(rsp)
}

// PostmanActionImportUrlWithResponse request returning *PostmanActionImportUrlResponse
func (c *ClientWithResponses) PostmanActionImportUrlWithResponse(ctx context.Context, params *PostmanActionImportUrlParams, reqEditors ...RequestEditorFn) (*PostmanActionImportUrlResponse, error) {
	rsp, err := c.PostmanActionImportUrl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmanActionImportUrlResponse(rsp)
}

// PscanActionClearQueueWithResponse request returning *PscanActionClearQueueResponse
func (c *ClientWithResponses) PscanActionClearQueueWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanActionClearQueueResponse, error) {
	rsp, err := c.PscanActionClearQueue(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanActionClearQueueResponse(rsp)
}

// PscanActionDisableAllScannersWithResponse request returning *PscanActionDisableAllScannersResponse
func (c *ClientWithResponses) PscanActionDisableAllScannersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanActionDisableAllScannersResponse, error) {
	rsp, err := c.PscanActionDisableAllScanners(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanActionDisableAllScannersResponse(rsp)
}

// PscanActionDisableAllTagsWithResponse request returning *PscanActionDisableAllTagsResponse
func (c *ClientWithResponses) PscanActionDisableAllTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanActionDisableAllTagsResponse, error) {
	rsp, err := c.PscanActionDisableAllTags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanActionDisableAllTagsResponse(rsp)
}

// PscanActionDisableScannersWithResponse request returning *PscanActionDisableScannersResponse
func (c *ClientWithResponses) PscanActionDisableScannersWithResponse(ctx context.Context, params *PscanActionDisableScannersParams, reqEditors ...RequestEditorFn) (*PscanActionDisableScannersResponse, error) {
	rsp, err := c.PscanActionDisableScanners(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanActionDisableScannersResponse(rsp)
}

// PscanActionEnableAllScannersWithResponse request returning *PscanActionEnableAllScannersResponse
func (c *ClientWithResponses) PscanActionEnableAllScannersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanActionEnableAllScannersResponse, error) {
	rsp, err := c.PscanActionEnableAllScanners(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanActionEnableAllScannersResponse(rsp)
}

// PscanActionEnableAllTagsWithResponse request returning *PscanActionEnableAllTagsResponse
func (c *ClientWithResponses) PscanActionEnableAllTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanActionEnableAllTagsResponse, error) {
	rsp, err := c.PscanActionEnableAllTags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanActionEnableAllTagsResponse(rsp)
}

// PscanActionEnableScannersWithResponse request returning *PscanActionEnableScannersResponse
func (c *ClientWithResponses) PscanActionEnableScannersWithResponse(ctx context.Context, params *PscanActionEnableScannersParams, reqEditors ...RequestEditorFn) (*PscanActionEnableScannersResponse, error) {
	rsp, err := c.PscanActionEnableScanners(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanActionEnableScannersResponse(rsp)
}

// PscanActionSetEnabledWithResponse request returning *PscanActionSetEnabledResponse
func (c *ClientWithResponses) PscanActionSetEnabledWithResponse(ctx context.Context, params *PscanActionSetEnabledParams, reqEditors ...RequestEditorFn) (*PscanActionSetEnabledResponse, error) {
	rsp, err := c.PscanActionSetEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanActionSetEnabledResponse(rsp)
}

// PscanActionSetMaxAlertsPerRuleWithResponse request returning *PscanActionSetMaxAlertsPerRuleResponse
func (c *ClientWithResponses) PscanActionSetMaxAlertsPerRuleWithResponse(ctx context.Context, params *PscanActionSetMaxAlertsPerRuleParams, reqEditors ...RequestEditorFn) (*PscanActionSetMaxAlertsPerRuleResponse, error) {
	rsp, err := c.PscanActionSetMaxAlertsPerRule(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanActionSetMaxAlertsPerRuleResponse(rsp)
}

// PscanActionSetScanOnlyInScopeWithResponse request returning *PscanActionSetScanOnlyInScopeResponse
func (c *ClientWithResponses) PscanActionSetScanOnlyInScopeWithResponse(ctx context.Context, params *PscanActionSetScanOnlyInScopeParams, reqEditors ...RequestEditorFn) (*PscanActionSetScanOnlyInScopeResponse, error) {
	rsp, err := c.PscanActionSetScanOnlyInScope(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanActionSetScanOnlyInScopeResponse(rsp)
}

// PscanActionSetScannerAlertThresholdWithResponse request returning *PscanActionSetScannerAlertThresholdResponse
func (c *ClientWithResponses) PscanActionSetScannerAlertThresholdWithResponse(ctx context.Context, params *PscanActionSetScannerAlertThresholdParams, reqEditors ...RequestEditorFn) (*PscanActionSetScannerAlertThresholdResponse, error) {
	rsp, err := c.PscanActionSetScannerAlertThreshold(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanActionSetScannerAlertThresholdResponse(rsp)
}

// PscanViewCurrentRuleWithResponse request returning *PscanViewCurrentRuleResponse
func (c *ClientWithResponses) PscanViewCurrentRuleWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanViewCurrentRuleResponse, error) {
	rsp, err := c.PscanViewCurrentRule(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanViewCurrentRuleResponse(rsp)
}

// PscanViewCurrentTasksWithResponse request returning *PscanViewCurrentTasksResponse
func (c *ClientWithResponses) PscanViewCurrentTasksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanViewCurrentTasksResponse, error) {
	rsp, err := c.PscanViewCurrentTasks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanViewCurrentTasksResponse(rsp)
}

// PscanViewMaxAlertsPerRuleWithResponse request returning *PscanViewMaxAlertsPerRuleResponse
func (c *ClientWithResponses) PscanViewMaxAlertsPerRuleWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanViewMaxAlertsPerRuleResponse, error) {
	rsp, err := c.PscanViewMaxAlertsPerRule(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanViewMaxAlertsPerRuleResponse(rsp)
}

// PscanViewRecordsToScanWithResponse request returning *PscanViewRecordsToScanResponse
func (c *ClientWithResponses) PscanViewRecordsToScanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanViewRecordsToScanResponse, error) {
	rsp, err := c.PscanViewRecordsToScan(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanViewRecordsToScanResponse(rsp)
}

// PscanViewScanOnlyInScopeWithResponse request returning *PscanViewScanOnlyInScopeResponse
func (c *ClientWithResponses) PscanViewScanOnlyInScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanViewScanOnlyInScopeResponse, error) {
	rsp, err := c.PscanViewScanOnlyInScope(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanViewScanOnlyInScopeResponse(rsp)
}

// PscanViewScannersWithResponse request returning *PscanViewScannersResponse
func (c *ClientWithResponses) PscanViewScannersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PscanViewScannersResponse, error) {
	rsp, err := c.PscanViewScanners(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePscanViewScannersResponse(rsp)
}

// ReplacerActionAddRuleWithResponse request returning *ReplacerActionAddRuleResponse
func (c *ClientWithResponses) ReplacerActionAddRuleWithResponse(ctx context.Context, params *ReplacerActionAddRuleParams, reqEditors ...RequestEditorFn) (*ReplacerActionAddRuleResponse, error) {
	rsp, err := c.ReplacerActionAddRule(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplacerActionAddRuleResponse(rsp)
}

// ReplacerActionRemoveRuleWithResponse request returning *ReplacerActionRemoveRuleResponse
func (c *ClientWithResponses) ReplacerActionRemoveRuleWithResponse(ctx context.Context, params *ReplacerActionRemoveRuleParams, reqEditors ...RequestEditorFn) (*ReplacerActionRemoveRuleResponse, error) {
	rsp, err := c.ReplacerActionRemoveRule(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplacerActionRemoveRuleResponse(rsp)
}

// ReplacerActionSetEnabledWithResponse request returning *ReplacerActionSetEnabledResponse
func (c *ClientWithResponses) ReplacerActionSetEnabledWithResponse(ctx context.Context, params *ReplacerActionSetEnabledParams, reqEditors ...RequestEditorFn) (*ReplacerActionSetEnabledResponse, error) {
	rsp, err := c.ReplacerActionSetEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplacerActionSetEnabledResponse(rsp)
}

// ReplacerViewRulesWithResponse request returning *ReplacerViewRulesResponse
func (c *ClientWithResponses) ReplacerViewRulesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReplacerViewRulesResponse, error) {
	rsp, err := c.ReplacerViewRules(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplacerViewRulesResponse(rsp)
}

// ReportsActionGenerateWithResponse request returning *ReportsActionGenerateResponse
func (c *ClientWithResponses) ReportsActionGenerateWithResponse(ctx context.Context, params *ReportsActionGenerateParams, reqEditors ...RequestEditorFn) (*ReportsActionGenerateResponse, error) {
	rsp, err := c.ReportsActionGenerate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportsActionGenerateResponse(rsp)
}

// ReportsViewTemplateDetailsWithResponse request returning *ReportsViewTemplateDetailsResponse
func (c *ClientWithResponses) ReportsViewTemplateDetailsWithResponse(ctx context.Context, params *ReportsViewTemplateDetailsParams, reqEditors ...RequestEditorFn) (*ReportsViewTemplateDetailsResponse, error) {
	rsp, err := c.ReportsViewTemplateDetails(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportsViewTemplateDetailsResponse(rsp)
}

// ReportsViewTemplatesWithResponse request returning *ReportsViewTemplatesResponse
func (c *ClientWithResponses) ReportsViewTemplatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReportsViewTemplatesResponse, error) {
	rsp, err := c.ReportsViewTemplates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportsViewTemplatesResponse(rsp)
}

// RetestActionRetestWithResponse request returning *RetestActionRetestResponse
func (c *ClientWithResponses) RetestActionRetestWithResponse(ctx context.Context, params *RetestActionRetestParams, reqEditors ...RequestEditorFn) (*RetestActionRetestResponse, error) {
	rsp, err := c.RetestActionRetest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetestActionRetestResponse(rsp)
}

// RevealActionSetRevealWithResponse request returning *RevealActionSetRevealResponse
func (c *ClientWithResponses) RevealActionSetRevealWithResponse(ctx context.Context, params *RevealActionSetRevealParams, reqEditors ...RequestEditorFn) (*RevealActionSetRevealResponse, error) {
	rsp, err := c.RevealActionSetReveal(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevealActionSetRevealResponse(rsp)
}

// RevealViewRevealWithResponse request returning *RevealViewRevealResponse
func (c *ClientWithResponses) RevealViewRevealWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RevealViewRevealResponse, error) {
	rsp, err := c.RevealViewReveal(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevealViewRevealResponse(rsp)
}

// RevisitActionRevisitSiteOffWithResponse request returning *RevisitActionRevisitSiteOffResponse
func (c *ClientWithResponses) RevisitActionRevisitSiteOffWithResponse(ctx context.Context, params *RevisitActionRevisitSiteOffParams, reqEditors ...RequestEditorFn) (*RevisitActionRevisitSiteOffResponse, error) {
	rsp, err := c.RevisitActionRevisitSiteOff(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevisitActionRevisitSiteOffResponse(rsp)
}

// RevisitActionRevisitSiteOnWithResponse request returning *RevisitActionRevisitSiteOnResponse
func (c *ClientWithResponses) RevisitActionRevisitSiteOnWithResponse(ctx context.Context, params *RevisitActionRevisitSiteOnParams, reqEditors ...RequestEditorFn) (*RevisitActionRevisitSiteOnResponse, error) {
	rsp, err := c.RevisitActionRevisitSiteOn(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevisitActionRevisitSiteOnResponse(rsp)
}

// RevisitViewRevisitListWithResponse request returning *RevisitViewRevisitListResponse
func (c *ClientWithResponses) RevisitViewRevisitListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RevisitViewRevisitListResponse, error) {
	rsp, err := c.RevisitViewRevisitList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevisitViewRevisitListResponse(rsp)
}

// RuleConfigActionResetAllRuleConfigValuesWithResponse request returning *RuleConfigActionResetAllRuleConfigValuesResponse
func (c *ClientWithResponses) RuleConfigActionResetAllRuleConfigValuesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RuleConfigActionResetAllRuleConfigValuesResponse, error) {
	rsp, err := c.RuleConfigActionResetAllRuleConfigValues(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleConfigActionResetAllRuleConfigValuesResponse(rsp)
}

// RuleConfigActionResetRuleConfigValueWithResponse request returning *RuleConfigActionResetRuleConfigValueResponse
func (c *ClientWithResponses) RuleConfigActionResetRuleConfigValueWithResponse(ctx context.Context, params *RuleConfigActionResetRuleConfigValueParams, reqEditors ...RequestEditorFn) (*RuleConfigActionResetRuleConfigValueResponse, error) {
	rsp, err := c.RuleConfigActionResetRuleConfigValue(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleConfigActionResetRuleConfigValueResponse(rsp)
}

// RuleConfigActionSetRuleConfigValueWithResponse request returning *RuleConfigActionSetRuleConfigValueResponse
func (c *ClientWithResponses) RuleConfigActionSetRuleConfigValueWithResponse(ctx context.Context, params *RuleConfigActionSetRuleConfigValueParams, reqEditors ...RequestEditorFn) (*RuleConfigActionSetRuleConfigValueResponse, error) {
	rsp, err := c.RuleConfigActionSetRuleConfigValue(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleConfigActionSetRuleConfigValueResponse(rsp)
}

// RuleConfigViewAllRuleConfigsWithResponse request returning *RuleConfigViewAllRuleConfigsResponse
func (c *ClientWithResponses) RuleConfigViewAllRuleConfigsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RuleConfigViewAllRuleConfigsResponse, error) {
	rsp, err := c.RuleConfigViewAllRuleConfigs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleConfigViewAllRuleConfigsResponse(rsp)
}

// RuleConfigViewRuleConfigValueWithResponse request returning *RuleConfigViewRuleConfigValueResponse
func (c *ClientWithResponses) RuleConfigViewRuleConfigValueWithResponse(ctx context.Context, params *RuleConfigViewRuleConfigValueParams, reqEditors ...RequestEditorFn) (*RuleConfigViewRuleConfigValueResponse, error) {
	rsp, err := c.RuleConfigViewRuleConfigValue(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleConfigViewRuleConfigValueResponse(rsp)
}

// ScriptActionClearGlobalCustomVarWithResponse request returning *ScriptActionClearGlobalCustomVarResponse
func (c *ClientWithResponses) ScriptActionClearGlobalCustomVarWithResponse(ctx context.Context, params *ScriptActionClearGlobalCustomVarParams, reqEditors ...RequestEditorFn) (*ScriptActionClearGlobalCustomVarResponse, error) {
	rsp, err := c.ScriptActionClearGlobalCustomVar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptActionClearGlobalCustomVarResponse(rsp)
}

// ScriptActionClearGlobalVarWithResponse request returning *ScriptActionClearGlobalVarResponse
func (c *ClientWithResponses) ScriptActionClearGlobalVarWithResponse(ctx context.Context, params *ScriptActionClearGlobalVarParams, reqEditors ...RequestEditorFn) (*ScriptActionClearGlobalVarResponse, error) {
	rsp, err := c.ScriptActionClearGlobalVar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptActionClearGlobalVarResponse(rsp)
}

// ScriptActionClearGlobalVarsWithResponse request returning *ScriptActionClearGlobalVarsResponse
func (c *ClientWithResponses) ScriptActionClearGlobalVarsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScriptActionClearGlobalVarsResponse, error) {
	rsp, err := c.ScriptActionClearGlobalVars(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptActionClearGlobalVarsResponse(rsp)
}

// ScriptActionClearScriptCustomVarWithResponse request returning *ScriptActionClearScriptCustomVarResponse
func (c *ClientWithResponses) ScriptActionClearScriptCustomVarWithResponse(ctx context.Context, params *ScriptActionClearScriptCustomVarParams, reqEditors ...RequestEditorFn) (*ScriptActionClearScriptCustomVarResponse, error) {
	rsp, err := c.ScriptActionClearScriptCustomVar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptActionClearScriptCustomVarResponse(rsp)
}

// ScriptActionClearScriptVarWithResponse request returning *ScriptActionClearScriptVarResponse
func (c *ClientWithResponses) ScriptActionClearScriptVarWithResponse(ctx context.Context, params *ScriptActionClearScriptVarParams, reqEditors ...RequestEditorFn) (*ScriptActionClearScriptVarResponse, error) {
	rsp, err := c.ScriptActionClearScriptVar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptActionClearScriptVarResponse(rsp)
}

// ScriptActionClearScriptVarsWithResponse request returning *ScriptActionClearScriptVarsResponse
func (c *ClientWithResponses) ScriptActionClearScriptVarsWithResponse(ctx context.Context, params *ScriptActionClearScriptVarsParams, reqEditors ...RequestEditorFn) (*ScriptActionClearScriptVarsResponse, error) {
	rsp, err := c.ScriptActionClearScriptVars(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptActionClearScriptVarsResponse(rsp)
}

// ScriptActionDisableWithResponse request returning *ScriptActionDisableResponse
func (c *ClientWithResponses) ScriptActionDisableWithResponse(ctx context.Context, params *ScriptActionDisableParams, reqEditors ...RequestEditorFn) (*ScriptActionDisableResponse, error) {
	rsp, err := c.ScriptActionDisable(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptActionDisableResponse(rsp)
}

// ScriptActionEnableWithResponse request returning *ScriptActionEnableResponse
func (c *ClientWithResponses) ScriptActionEnableWithResponse(ctx context.Context, params *ScriptActionEnableParams, reqEditors ...RequestEditorFn) (*ScriptActionEnableResponse, error) {
	rsp, err := c.ScriptActionEnable(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptActionEnableResponse(rsp)
}

// ScriptActionLoadWithResponse request returning *ScriptActionLoadResponse
func (c *ClientWithResponses) ScriptActionLoadWithResponse(ctx context.Context, params *ScriptActionLoadParams, reqEditors ...RequestEditorFn) (*ScriptActionLoadResponse, error) {
	rsp, err := c.ScriptActionLoad(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptActionLoadResponse(rsp)
}

// ScriptActionRemoveWithResponse request returning *ScriptActionRemoveResponse
func (c *ClientWithResponses) ScriptActionRemoveWithResponse(ctx context.Context, params *ScriptActionRemoveParams, reqEditors ...RequestEditorFn) (*ScriptActionRemoveResponse, error) {
	rsp, err := c.ScriptActionRemove(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptActionRemoveResponse(rsp)
}

// ScriptActionRunStandAloneScriptWithResponse request returning *ScriptActionRunStandAloneScriptResponse
func (c *ClientWithResponses) ScriptActionRunStandAloneScriptWithResponse(ctx context.Context, params *ScriptActionRunStandAloneScriptParams, reqEditors ...RequestEditorFn) (*ScriptActionRunStandAloneScriptResponse, error) {
	rsp, err := c.ScriptActionRunStandAloneScript(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptActionRunStandAloneScriptResponse(rsp)
}

// ScriptActionSetGlobalVarWithResponse request returning *ScriptActionSetGlobalVarResponse
func (c *ClientWithResponses) ScriptActionSetGlobalVarWithResponse(ctx context.Context, params *ScriptActionSetGlobalVarParams, reqEditors ...RequestEditorFn) (*ScriptActionSetGlobalVarResponse, error) {
	rsp, err := c.ScriptActionSetGlobalVar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptActionSetGlobalVarResponse(rsp)
}

// ScriptActionSetScriptVarWithResponse request returning *ScriptActionSetScriptVarResponse
func (c *ClientWithResponses) ScriptActionSetScriptVarWithResponse(ctx context.Context, params *ScriptActionSetScriptVarParams, reqEditors ...RequestEditorFn) (*ScriptActionSetScriptVarResponse, error) {
	rsp, err := c.ScriptActionSetScriptVar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptActionSetScriptVarResponse(rsp)
}

// ScriptViewGlobalCustomVarWithResponse request returning *ScriptViewGlobalCustomVarResponse
func (c *ClientWithResponses) ScriptViewGlobalCustomVarWithResponse(ctx context.Context, params *ScriptViewGlobalCustomVarParams, reqEditors ...RequestEditorFn) (*ScriptViewGlobalCustomVarResponse, error) {
	rsp, err := c.ScriptViewGlobalCustomVar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptViewGlobalCustomVarResponse(rsp)
}

// ScriptViewGlobalCustomVarsWithResponse request returning *ScriptViewGlobalCustomVarsResponse
func (c *ClientWithResponses) ScriptViewGlobalCustomVarsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScriptViewGlobalCustomVarsResponse, error) {
	rsp, err := c.ScriptViewGlobalCustomVars(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptViewGlobalCustomVarsResponse(rsp)
}

// ScriptViewGlobalVarWithResponse request returning *ScriptViewGlobalVarResponse
func (c *ClientWithResponses) ScriptViewGlobalVarWithResponse(ctx context.Context, params *ScriptViewGlobalVarParams, reqEditors ...RequestEditorFn) (*ScriptViewGlobalVarResponse, error) {
	rsp, err := c.ScriptViewGlobalVar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptViewGlobalVarResponse(rsp)
}

// ScriptViewGlobalVarsWithResponse request returning *ScriptViewGlobalVarsResponse
func (c *ClientWithResponses) ScriptViewGlobalVarsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScriptViewGlobalVarsResponse, error) {
	rsp, err := c.ScriptViewGlobalVars(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptViewGlobalVarsResponse(rsp)
}

// ScriptViewListEnginesWithResponse request returning *ScriptViewListEnginesResponse
func (c *ClientWithResponses) ScriptViewListEnginesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScriptViewListEnginesResponse, error) {
	rsp, err := c.ScriptViewListEngines(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptViewListEnginesResponse(rsp)
}

// ScriptViewListScriptsWithResponse request returning *ScriptViewListScriptsResponse
func (c *ClientWithResponses) ScriptViewListScriptsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScriptViewListScriptsResponse, error) {
	rsp, err := c.ScriptViewListScripts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptViewListScriptsResponse(rsp)
}

// ScriptViewListTypesWithResponse request returning *ScriptViewListTypesResponse
func (c *ClientWithResponses) ScriptViewListTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScriptViewListTypesResponse, error) {
	rsp, err := c.ScriptViewListTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptViewListTypesResponse(rsp)
}

// ScriptViewScriptCustomVarWithResponse request returning *ScriptViewScriptCustomVarResponse
func (c *ClientWithResponses) ScriptViewScriptCustomVarWithResponse(ctx context.Context, params *ScriptViewScriptCustomVarParams, reqEditors ...RequestEditorFn) (*ScriptViewScriptCustomVarResponse, error) {
	rsp, err := c.ScriptViewScriptCustomVar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptViewScriptCustomVarResponse(rsp)
}

// ScriptViewScriptCustomVarsWithResponse request returning *ScriptViewScriptCustomVarsResponse
func (c *ClientWithResponses) ScriptViewScriptCustomVarsWithResponse(ctx context.Context, params *ScriptViewScriptCustomVarsParams, reqEditors ...RequestEditorFn) (*ScriptViewScriptCustomVarsResponse, error) {
	rsp, err := c.ScriptViewScriptCustomVars(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptViewScriptCustomVarsResponse(rsp)
}

// ScriptViewScriptVarWithResponse request returning *ScriptViewScriptVarResponse
func (c *ClientWithResponses) ScriptViewScriptVarWithResponse(ctx context.Context, params *ScriptViewScriptVarParams, reqEditors ...RequestEditorFn) (*ScriptViewScriptVarResponse, error) {
	rsp, err := c.ScriptViewScriptVar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptViewScriptVarResponse(rsp)
}

// ScriptViewScriptVarsWithResponse request returning *ScriptViewScriptVarsResponse
func (c *ClientWithResponses) ScriptViewScriptVarsWithResponse(ctx context.Context, params *ScriptViewScriptVarsParams, reqEditors ...RequestEditorFn) (*ScriptViewScriptVarsResponse, error) {
	rsp, err := c.ScriptViewScriptVars(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScriptViewScriptVarsResponse(rsp)
}

// SearchViewMessagesByHeaderRegexWithResponse request returning *SearchViewMessagesByHeaderRegexResponse
func (c *ClientWithResponses) SearchViewMessagesByHeaderRegexWithResponse(ctx context.Context, params *SearchViewMessagesByHeaderRegexParams, reqEditors ...RequestEditorFn) (*SearchViewMessagesByHeaderRegexResponse, error) {
	rsp, err := c.SearchViewMessagesByHeaderRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchViewMessagesByHeaderRegexResponse(rsp)
}

// SearchViewMessagesByNoteRegexWithResponse request returning *SearchViewMessagesByNoteRegexResponse
func (c *ClientWithResponses) SearchViewMessagesByNoteRegexWithResponse(ctx context.Context, params *SearchViewMessagesByNoteRegexParams, reqEditors ...RequestEditorFn) (*SearchViewMessagesByNoteRegexResponse, error) {
	rsp, err := c.SearchViewMessagesByNoteRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchViewMessagesByNoteRegexResponse(rsp)
}

// SearchViewMessagesByRequestRegexWithResponse request returning *SearchViewMessagesByRequestRegexResponse
func (c *ClientWithResponses) SearchViewMessagesByRequestRegexWithResponse(ctx context.Context, params *SearchViewMessagesByRequestRegexParams, reqEditors ...RequestEditorFn) (*SearchViewMessagesByRequestRegexResponse, error) {
	rsp, err := c.SearchViewMessagesByRequestRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchViewMessagesByRequestRegexResponse(rsp)
}

// SearchViewMessagesByResponseRegexWithResponse request returning *SearchViewMessagesByResponseRegexResponse
func (c *ClientWithResponses) SearchViewMessagesByResponseRegexWithResponse(ctx context.Context, params *SearchViewMessagesByResponseRegexParams, reqEditors ...RequestEditorFn) (*SearchViewMessagesByResponseRegexResponse, error) {
	rsp, err := c.SearchViewMessagesByResponseRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchViewMessagesByResponseRegexResponse(rsp)
}

// SearchViewMessagesByTagRegexWithResponse request returning *SearchViewMessagesByTagRegexResponse
func (c *ClientWithResponses) SearchViewMessagesByTagRegexWithResponse(ctx context.Context, params *SearchViewMessagesByTagRegexParams, reqEditors ...RequestEditorFn) (*SearchViewMessagesByTagRegexResponse, error) {
	rsp, err := c.SearchViewMessagesByTagRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchViewMessagesByTagRegexResponse(rsp)
}

// SearchViewMessagesByUrlRegexWithResponse request returning *SearchViewMessagesByUrlRegexResponse
func (c *ClientWithResponses) SearchViewMessagesByUrlRegexWithResponse(ctx context.Context, params *SearchViewMessagesByUrlRegexParams, reqEditors ...RequestEditorFn) (*SearchViewMessagesByUrlRegexResponse, error) {
	rsp, err := c.SearchViewMessagesByUrlRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchViewMessagesByUrlRegexResponse(rsp)
}

// SearchViewUrlsByHeaderRegexWithResponse request returning *SearchViewUrlsByHeaderRegexResponse
func (c *ClientWithResponses) SearchViewUrlsByHeaderRegexWithResponse(ctx context.Context, params *SearchViewUrlsByHeaderRegexParams, reqEditors ...RequestEditorFn) (*SearchViewUrlsByHeaderRegexResponse, error) {
	rsp, err := c.SearchViewUrlsByHeaderRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchViewUrlsByHeaderRegexResponse(rsp)
}

// SearchViewUrlsByNoteRegexWithResponse request returning *SearchViewUrlsByNoteRegexResponse
func (c *ClientWithResponses) SearchViewUrlsByNoteRegexWithResponse(ctx context.Context, params *SearchViewUrlsByNoteRegexParams, reqEditors ...RequestEditorFn) (*SearchViewUrlsByNoteRegexResponse, error) {
	rsp, err := c.SearchViewUrlsByNoteRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchViewUrlsByNoteRegexResponse(rsp)
}

// SearchViewUrlsByRequestRegexWithResponse request returning *SearchViewUrlsByRequestRegexResponse
func (c *ClientWithResponses) SearchViewUrlsByRequestRegexWithResponse(ctx context.Context, params *SearchViewUrlsByRequestRegexParams, reqEditors ...RequestEditorFn) (*SearchViewUrlsByRequestRegexResponse, error) {
	rsp, err := c.SearchViewUrlsByRequestRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchViewUrlsByRequestRegexResponse(rsp)
}

// SearchViewUrlsByResponseRegexWithResponse request returning *SearchViewUrlsByResponseRegexResponse
func (c *ClientWithResponses) SearchViewUrlsByResponseRegexWithResponse(ctx context.Context, params *SearchViewUrlsByResponseRegexParams, reqEditors ...RequestEditorFn) (*SearchViewUrlsByResponseRegexResponse, error) {
	rsp, err := c.SearchViewUrlsByResponseRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchViewUrlsByResponseRegexResponse(rsp)
}

// SearchViewUrlsByTagRegexWithResponse request returning *SearchViewUrlsByTagRegexResponse
func (c *ClientWithResponses) SearchViewUrlsByTagRegexWithResponse(ctx context.Context, params *SearchViewUrlsByTagRegexParams, reqEditors ...RequestEditorFn) (*SearchViewUrlsByTagRegexResponse, error) {
	rsp, err := c.SearchViewUrlsByTagRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchViewUrlsByTagRegexResponse(rsp)
}

// SearchViewUrlsByUrlRegexWithResponse request returning *SearchViewUrlsByUrlRegexResponse
func (c *ClientWithResponses) SearchViewUrlsByUrlRegexWithResponse(ctx context.Context, params *SearchViewUrlsByUrlRegexParams, reqEditors ...RequestEditorFn) (*SearchViewUrlsByUrlRegexResponse, error) {
	rsp, err := c.SearchViewUrlsByUrlRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchViewUrlsByUrlRegexResponse(rsp)
}

// SeleniumActionAddBrowserArgumentWithResponse request returning *SeleniumActionAddBrowserArgumentResponse
func (c *ClientWithResponses) SeleniumActionAddBrowserArgumentWithResponse(ctx context.Context, params *SeleniumActionAddBrowserArgumentParams, reqEditors ...RequestEditorFn) (*SeleniumActionAddBrowserArgumentResponse, error) {
	rsp, err := c.SeleniumActionAddBrowserArgument(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumActionAddBrowserArgumentResponse(rsp)
}

// SeleniumActionLaunchBrowserWithResponse request returning *SeleniumActionLaunchBrowserResponse
func (c *ClientWithResponses) SeleniumActionLaunchBrowserWithResponse(ctx context.Context, params *SeleniumActionLaunchBrowserParams, reqEditors ...RequestEditorFn) (*SeleniumActionLaunchBrowserResponse, error) {
	rsp, err := c.SeleniumActionLaunchBrowser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumActionLaunchBrowserResponse(rsp)
}

// SeleniumActionRemoveBrowserArgumentWithResponse request returning *SeleniumActionRemoveBrowserArgumentResponse
func (c *ClientWithResponses) SeleniumActionRemoveBrowserArgumentWithResponse(ctx context.Context, params *SeleniumActionRemoveBrowserArgumentParams, reqEditors ...RequestEditorFn) (*SeleniumActionRemoveBrowserArgumentResponse, error) {
	rsp, err := c.SeleniumActionRemoveBrowserArgument(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumActionRemoveBrowserArgumentResponse(rsp)
}

// SeleniumActionSetBrowserArgumentEnabledWithResponse request returning *SeleniumActionSetBrowserArgumentEnabledResponse
func (c *ClientWithResponses) SeleniumActionSetBrowserArgumentEnabledWithResponse(ctx context.Context, params *SeleniumActionSetBrowserArgumentEnabledParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetBrowserArgumentEnabledResponse, error) {
	rsp, err := c.SeleniumActionSetBrowserArgumentEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumActionSetBrowserArgumentEnabledResponse(rsp)
}

// SeleniumActionSetOptionChromeBinaryPathWithResponse request returning *SeleniumActionSetOptionChromeBinaryPathResponse
func (c *ClientWithResponses) SeleniumActionSetOptionChromeBinaryPathWithResponse(ctx context.Context, params *SeleniumActionSetOptionChromeBinaryPathParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetOptionChromeBinaryPathResponse, error) {
	rsp, err := c.SeleniumActionSetOptionChromeBinaryPath(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumActionSetOptionChromeBinaryPathResponse(rsp)
}

// SeleniumActionSetOptionChromeDriverPathWithResponse request returning *SeleniumActionSetOptionChromeDriverPathResponse
func (c *ClientWithResponses) SeleniumActionSetOptionChromeDriverPathWithResponse(ctx context.Context, params *SeleniumActionSetOptionChromeDriverPathParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetOptionChromeDriverPathResponse, error) {
	rsp, err := c.SeleniumActionSetOptionChromeDriverPath(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumActionSetOptionChromeDriverPathResponse(rsp)
}

// SeleniumActionSetOptionFirefoxBinaryPathWithResponse request returning *SeleniumActionSetOptionFirefoxBinaryPathResponse
func (c *ClientWithResponses) SeleniumActionSetOptionFirefoxBinaryPathWithResponse(ctx context.Context, params *SeleniumActionSetOptionFirefoxBinaryPathParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetOptionFirefoxBinaryPathResponse, error) {
	rsp, err := c.SeleniumActionSetOptionFirefoxBinaryPath(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumActionSetOptionFirefoxBinaryPathResponse(rsp)
}

// SeleniumActionSetOptionFirefoxDefaultProfileWithResponse request returning *SeleniumActionSetOptionFirefoxDefaultProfileResponse
func (c *ClientWithResponses) SeleniumActionSetOptionFirefoxDefaultProfileWithResponse(ctx context.Context, params *SeleniumActionSetOptionFirefoxDefaultProfileParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetOptionFirefoxDefaultProfileResponse, error) {
	rsp, err := c.SeleniumActionSetOptionFirefoxDefaultProfile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumActionSetOptionFirefoxDefaultProfileResponse(rsp)
}

// SeleniumActionSetOptionFirefoxDriverPathWithResponse request returning *SeleniumActionSetOptionFirefoxDriverPathResponse
func (c *ClientWithResponses) SeleniumActionSetOptionFirefoxDriverPathWithResponse(ctx context.Context, params *SeleniumActionSetOptionFirefoxDriverPathParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetOptionFirefoxDriverPathResponse, error) {
	rsp, err := c.SeleniumActionSetOptionFirefoxDriverPath(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumActionSetOptionFirefoxDriverPathResponse(rsp)
}

// SeleniumActionSetOptionIeDriverPathWithResponse request returning *SeleniumActionSetOptionIeDriverPathResponse
func (c *ClientWithResponses) SeleniumActionSetOptionIeDriverPathWithResponse(ctx context.Context, params *SeleniumActionSetOptionIeDriverPathParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetOptionIeDriverPathResponse, error) {
	rsp, err := c.SeleniumActionSetOptionIeDriverPath(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumActionSetOptionIeDriverPathResponse(rsp)
}

// SeleniumActionSetOptionLastDirectoryWithResponse request returning *SeleniumActionSetOptionLastDirectoryResponse
func (c *ClientWithResponses) SeleniumActionSetOptionLastDirectoryWithResponse(ctx context.Context, params *SeleniumActionSetOptionLastDirectoryParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetOptionLastDirectoryResponse, error) {
	rsp, err := c.SeleniumActionSetOptionLastDirectory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumActionSetOptionLastDirectoryResponse(rsp)
}

// SeleniumActionSetOptionPhantomJsBinaryPathWithResponse request returning *SeleniumActionSetOptionPhantomJsBinaryPathResponse
func (c *ClientWithResponses) SeleniumActionSetOptionPhantomJsBinaryPathWithResponse(ctx context.Context, params *SeleniumActionSetOptionPhantomJsBinaryPathParams, reqEditors ...RequestEditorFn) (*SeleniumActionSetOptionPhantomJsBinaryPathResponse, error) {
	rsp, err := c.SeleniumActionSetOptionPhantomJsBinaryPath(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumActionSetOptionPhantomJsBinaryPathResponse(rsp)
}

// SeleniumViewGetBrowserArgumentsWithResponse request returning *SeleniumViewGetBrowserArgumentsResponse
func (c *ClientWithResponses) SeleniumViewGetBrowserArgumentsWithResponse(ctx context.Context, params *SeleniumViewGetBrowserArgumentsParams, reqEditors ...RequestEditorFn) (*SeleniumViewGetBrowserArgumentsResponse, error) {
	rsp, err := c.SeleniumViewGetBrowserArguments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumViewGetBrowserArgumentsResponse(rsp)
}

// SeleniumViewOptionBrowserExtensionsWithResponse request returning *SeleniumViewOptionBrowserExtensionsResponse
func (c *ClientWithResponses) SeleniumViewOptionBrowserExtensionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionBrowserExtensionsResponse, error) {
	rsp, err := c.SeleniumViewOptionBrowserExtensions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumViewOptionBrowserExtensionsResponse(rsp)
}

// SeleniumViewOptionChromeBinaryPathWithResponse request returning *SeleniumViewOptionChromeBinaryPathResponse
func (c *ClientWithResponses) SeleniumViewOptionChromeBinaryPathWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionChromeBinaryPathResponse, error) {
	rsp, err := c.SeleniumViewOptionChromeBinaryPath(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumViewOptionChromeBinaryPathResponse(rsp)
}

// SeleniumViewOptionChromeDriverPathWithResponse request returning *SeleniumViewOptionChromeDriverPathResponse
func (c *ClientWithResponses) SeleniumViewOptionChromeDriverPathWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionChromeDriverPathResponse, error) {
	rsp, err := c.SeleniumViewOptionChromeDriverPath(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumViewOptionChromeDriverPathResponse(rsp)
}

// SeleniumViewOptionFirefoxBinaryPathWithResponse request returning *SeleniumViewOptionFirefoxBinaryPathResponse
func (c *ClientWithResponses) SeleniumViewOptionFirefoxBinaryPathWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionFirefoxBinaryPathResponse, error) {
	rsp, err := c.SeleniumViewOptionFirefoxBinaryPath(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumViewOptionFirefoxBinaryPathResponse(rsp)
}

// SeleniumViewOptionFirefoxDefaultProfileWithResponse request returning *SeleniumViewOptionFirefoxDefaultProfileResponse
func (c *ClientWithResponses) SeleniumViewOptionFirefoxDefaultProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionFirefoxDefaultProfileResponse, error) {
	rsp, err := c.SeleniumViewOptionFirefoxDefaultProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumViewOptionFirefoxDefaultProfileResponse(rsp)
}

// SeleniumViewOptionFirefoxDriverPathWithResponse request returning *SeleniumViewOptionFirefoxDriverPathResponse
func (c *ClientWithResponses) SeleniumViewOptionFirefoxDriverPathWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionFirefoxDriverPathResponse, error) {
	rsp, err := c.SeleniumViewOptionFirefoxDriverPath(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumViewOptionFirefoxDriverPathResponse(rsp)
}

// SeleniumViewOptionIeDriverPathWithResponse request returning *SeleniumViewOptionIeDriverPathResponse
func (c *ClientWithResponses) SeleniumViewOptionIeDriverPathWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionIeDriverPathResponse, error) {
	rsp, err := c.SeleniumViewOptionIeDriverPath(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumViewOptionIeDriverPathResponse(rsp)
}

// SeleniumViewOptionLastDirectoryWithResponse request returning *SeleniumViewOptionLastDirectoryResponse
func (c *ClientWithResponses) SeleniumViewOptionLastDirectoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionLastDirectoryResponse, error) {
	rsp, err := c.SeleniumViewOptionLastDirectory(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumViewOptionLastDirectoryResponse(rsp)
}

// SeleniumViewOptionPhantomJsBinaryPathWithResponse request returning *SeleniumViewOptionPhantomJsBinaryPathResponse
func (c *ClientWithResponses) SeleniumViewOptionPhantomJsBinaryPathWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeleniumViewOptionPhantomJsBinaryPathResponse, error) {
	rsp, err := c.SeleniumViewOptionPhantomJsBinaryPath(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeleniumViewOptionPhantomJsBinaryPathResponse(rsp)
}

// SessionManagementActionSetSessionManagementMethodWithResponse request returning *SessionManagementActionSetSessionManagementMethodResponse
func (c *ClientWithResponses) SessionManagementActionSetSessionManagementMethodWithResponse(ctx context.Context, params *SessionManagementActionSetSessionManagementMethodParams, reqEditors ...RequestEditorFn) (*SessionManagementActionSetSessionManagementMethodResponse, error) {
	rsp, err := c.SessionManagementActionSetSessionManagementMethod(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSessionManagementActionSetSessionManagementMethodResponse(rsp)
}

// SessionManagementViewGetSessionManagementMethodWithResponse request returning *SessionManagementViewGetSessionManagementMethodResponse
func (c *ClientWithResponses) SessionManagementViewGetSessionManagementMethodWithResponse(ctx context.Context, params *SessionManagementViewGetSessionManagementMethodParams, reqEditors ...RequestEditorFn) (*SessionManagementViewGetSessionManagementMethodResponse, error) {
	rsp, err := c.SessionManagementViewGetSessionManagementMethod(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSessionManagementViewGetSessionManagementMethodResponse(rsp)
}

// SessionManagementViewGetSessionManagementMethodConfigParamsWithResponse request returning *SessionManagementViewGetSessionManagementMethodConfigParamsResponse
func (c *ClientWithResponses) SessionManagementViewGetSessionManagementMethodConfigParamsWithResponse(ctx context.Context, params *SessionManagementViewGetSessionManagementMethodConfigParamsParams, reqEditors ...RequestEditorFn) (*SessionManagementViewGetSessionManagementMethodConfigParamsResponse, error) {
	rsp, err := c.SessionManagementViewGetSessionManagementMethodConfigParams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSessionManagementViewGetSessionManagementMethodConfigParamsResponse(rsp)
}

// SessionManagementViewGetSupportedSessionManagementMethodsWithResponse request returning *SessionManagementViewGetSupportedSessionManagementMethodsResponse
func (c *ClientWithResponses) SessionManagementViewGetSupportedSessionManagementMethodsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SessionManagementViewGetSupportedSessionManagementMethodsResponse, error) {
	rsp, err := c.SessionManagementViewGetSupportedSessionManagementMethods(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSessionManagementViewGetSupportedSessionManagementMethodsResponse(rsp)
}

// SoapActionImportFileWithResponse request returning *SoapActionImportFileResponse
func (c *ClientWithResponses) SoapActionImportFileWithResponse(ctx context.Context, params *SoapActionImportFileParams, reqEditors ...RequestEditorFn) (*SoapActionImportFileResponse, error) {
	rsp, err := c.SoapActionImportFile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSoapActionImportFileResponse(rsp)
}

// SoapActionImportUrlWithResponse request returning *SoapActionImportUrlResponse
func (c *ClientWithResponses) SoapActionImportUrlWithResponse(ctx context.Context, params *SoapActionImportUrlParams, reqEditors ...RequestEditorFn) (*SoapActionImportUrlResponse, error) {
	rsp, err := c.SoapActionImportUrl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSoapActionImportUrlResponse(rsp)
}

// SpiderActionAddDomainAlwaysInScopeWithResponse request returning *SpiderActionAddDomainAlwaysInScopeResponse
func (c *ClientWithResponses) SpiderActionAddDomainAlwaysInScopeWithResponse(ctx context.Context, params *SpiderActionAddDomainAlwaysInScopeParams, reqEditors ...RequestEditorFn) (*SpiderActionAddDomainAlwaysInScopeResponse, error) {
	rsp, err := c.SpiderActionAddDomainAlwaysInScope(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionAddDomainAlwaysInScopeResponse(rsp)
}

// SpiderActionClearExcludedFromScanWithResponse request returning *SpiderActionClearExcludedFromScanResponse
func (c *ClientWithResponses) SpiderActionClearExcludedFromScanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderActionClearExcludedFromScanResponse, error) {
	rsp, err := c.SpiderActionClearExcludedFromScan(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionClearExcludedFromScanResponse(rsp)
}

// SpiderActionDisableAllDomainsAlwaysInScopeWithResponse request returning *SpiderActionDisableAllDomainsAlwaysInScopeResponse
func (c *ClientWithResponses) SpiderActionDisableAllDomainsAlwaysInScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderActionDisableAllDomainsAlwaysInScopeResponse, error) {
	rsp, err := c.SpiderActionDisableAllDomainsAlwaysInScope(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionDisableAllDomainsAlwaysInScopeResponse(rsp)
}

// SpiderActionEnableAllDomainsAlwaysInScopeWithResponse request returning *SpiderActionEnableAllDomainsAlwaysInScopeResponse
func (c *ClientWithResponses) SpiderActionEnableAllDomainsAlwaysInScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderActionEnableAllDomainsAlwaysInScopeResponse, error) {
	rsp, err := c.SpiderActionEnableAllDomainsAlwaysInScope(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionEnableAllDomainsAlwaysInScopeResponse(rsp)
}

// SpiderActionExcludeFromScanWithResponse request returning *SpiderActionExcludeFromScanResponse
func (c *ClientWithResponses) SpiderActionExcludeFromScanWithResponse(ctx context.Context, params *SpiderActionExcludeFromScanParams, reqEditors ...RequestEditorFn) (*SpiderActionExcludeFromScanResponse, error) {
	rsp, err := c.SpiderActionExcludeFromScan(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionExcludeFromScanResponse(rsp)
}

// SpiderActionModifyDomainAlwaysInScopeWithResponse request returning *SpiderActionModifyDomainAlwaysInScopeResponse
func (c *ClientWithResponses) SpiderActionModifyDomainAlwaysInScopeWithResponse(ctx context.Context, params *SpiderActionModifyDomainAlwaysInScopeParams, reqEditors ...RequestEditorFn) (*SpiderActionModifyDomainAlwaysInScopeResponse, error) {
	rsp, err := c.SpiderActionModifyDomainAlwaysInScope(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionModifyDomainAlwaysInScopeResponse(rsp)
}

// SpiderActionPauseWithResponse request returning *SpiderActionPauseResponse
func (c *ClientWithResponses) SpiderActionPauseWithResponse(ctx context.Context, params *SpiderActionPauseParams, reqEditors ...RequestEditorFn) (*SpiderActionPauseResponse, error) {
	rsp, err := c.SpiderActionPause(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionPauseResponse(rsp)
}

// SpiderActionPauseAllScansWithResponse request returning *SpiderActionPauseAllScansResponse
func (c *ClientWithResponses) SpiderActionPauseAllScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderActionPauseAllScansResponse, error) {
	rsp, err := c.SpiderActionPauseAllScans(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionPauseAllScansResponse(rsp)
}

// SpiderActionRemoveAllScansWithResponse request returning *SpiderActionRemoveAllScansResponse
func (c *ClientWithResponses) SpiderActionRemoveAllScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderActionRemoveAllScansResponse, error) {
	rsp, err := c.SpiderActionRemoveAllScans(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionRemoveAllScansResponse(rsp)
}

// SpiderActionRemoveDomainAlwaysInScopeWithResponse request returning *SpiderActionRemoveDomainAlwaysInScopeResponse
func (c *ClientWithResponses) SpiderActionRemoveDomainAlwaysInScopeWithResponse(ctx context.Context, params *SpiderActionRemoveDomainAlwaysInScopeParams, reqEditors ...RequestEditorFn) (*SpiderActionRemoveDomainAlwaysInScopeResponse, error) {
	rsp, err := c.SpiderActionRemoveDomainAlwaysInScope(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionRemoveDomainAlwaysInScopeResponse(rsp)
}

// SpiderActionRemoveScanWithResponse request returning *SpiderActionRemoveScanResponse
func (c *ClientWithResponses) SpiderActionRemoveScanWithResponse(ctx context.Context, params *SpiderActionRemoveScanParams, reqEditors ...RequestEditorFn) (*SpiderActionRemoveScanResponse, error) {
	rsp, err := c.SpiderActionRemoveScan(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionRemoveScanResponse(rsp)
}

// SpiderActionResumeWithResponse request returning *SpiderActionResumeResponse
func (c *ClientWithResponses) SpiderActionResumeWithResponse(ctx context.Context, params *SpiderActionResumeParams, reqEditors ...RequestEditorFn) (*SpiderActionResumeResponse, error) {
	rsp, err := c.SpiderActionResume(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionResumeResponse(rsp)
}

// SpiderActionResumeAllScansWithResponse request returning *SpiderActionResumeAllScansResponse
func (c *ClientWithResponses) SpiderActionResumeAllScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderActionResumeAllScansResponse, error) {
	rsp, err := c.SpiderActionResumeAllScans(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionResumeAllScansResponse(rsp)
}

// SpiderActionScanWithResponse request returning *SpiderActionScanResponse
func (c *ClientWithResponses) SpiderActionScanWithResponse(ctx context.Context, params *SpiderActionScanParams, reqEditors ...RequestEditorFn) (*SpiderActionScanResponse, error) {
	rsp, err := c.SpiderActionScan(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionScanResponse(rsp)
}

// SpiderActionScanAsUserWithResponse request returning *SpiderActionScanAsUserResponse
func (c *ClientWithResponses) SpiderActionScanAsUserWithResponse(ctx context.Context, params *SpiderActionScanAsUserParams, reqEditors ...RequestEditorFn) (*SpiderActionScanAsUserResponse, error) {
	rsp, err := c.SpiderActionScanAsUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionScanAsUserResponse(rsp)
}

// SpiderActionSetOptionAcceptCookiesWithResponse request returning *SpiderActionSetOptionAcceptCookiesResponse
func (c *ClientWithResponses) SpiderActionSetOptionAcceptCookiesWithResponse(ctx context.Context, params *SpiderActionSetOptionAcceptCookiesParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionAcceptCookiesResponse, error) {
	rsp, err := c.SpiderActionSetOptionAcceptCookies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionAcceptCookiesResponse(rsp)
}

// SpiderActionSetOptionHandleODataParametersVisitedWithResponse request returning *SpiderActionSetOptionHandleODataParametersVisitedResponse
func (c *ClientWithResponses) SpiderActionSetOptionHandleODataParametersVisitedWithResponse(ctx context.Context, params *SpiderActionSetOptionHandleODataParametersVisitedParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionHandleODataParametersVisitedResponse, error) {
	rsp, err := c.SpiderActionSetOptionHandleODataParametersVisited(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionHandleODataParametersVisitedResponse(rsp)
}

// SpiderActionSetOptionHandleParametersWithResponse request returning *SpiderActionSetOptionHandleParametersResponse
func (c *ClientWithResponses) SpiderActionSetOptionHandleParametersWithResponse(ctx context.Context, params *SpiderActionSetOptionHandleParametersParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionHandleParametersResponse, error) {
	rsp, err := c.SpiderActionSetOptionHandleParameters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionHandleParametersResponse(rsp)
}

// SpiderActionSetOptionLogoutAvoidanceWithResponse request returning *SpiderActionSetOptionLogoutAvoidanceResponse
func (c *ClientWithResponses) SpiderActionSetOptionLogoutAvoidanceWithResponse(ctx context.Context, params *SpiderActionSetOptionLogoutAvoidanceParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionLogoutAvoidanceResponse, error) {
	rsp, err := c.SpiderActionSetOptionLogoutAvoidance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionLogoutAvoidanceResponse(rsp)
}

// SpiderActionSetOptionMaxChildrenWithResponse request returning *SpiderActionSetOptionMaxChildrenResponse
func (c *ClientWithResponses) SpiderActionSetOptionMaxChildrenWithResponse(ctx context.Context, params *SpiderActionSetOptionMaxChildrenParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionMaxChildrenResponse, error) {
	rsp, err := c.SpiderActionSetOptionMaxChildren(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionMaxChildrenResponse(rsp)
}

// SpiderActionSetOptionMaxDepthWithResponse request returning *SpiderActionSetOptionMaxDepthResponse
func (c *ClientWithResponses) SpiderActionSetOptionMaxDepthWithResponse(ctx context.Context, params *SpiderActionSetOptionMaxDepthParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionMaxDepthResponse, error) {
	rsp, err := c.SpiderActionSetOptionMaxDepth(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionMaxDepthResponse(rsp)
}

// SpiderActionSetOptionMaxDurationWithResponse request returning *SpiderActionSetOptionMaxDurationResponse
func (c *ClientWithResponses) SpiderActionSetOptionMaxDurationWithResponse(ctx context.Context, params *SpiderActionSetOptionMaxDurationParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionMaxDurationResponse, error) {
	rsp, err := c.SpiderActionSetOptionMaxDuration(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionMaxDurationResponse(rsp)
}

// SpiderActionSetOptionMaxParseSizeBytesWithResponse request returning *SpiderActionSetOptionMaxParseSizeBytesResponse
func (c *ClientWithResponses) SpiderActionSetOptionMaxParseSizeBytesWithResponse(ctx context.Context, params *SpiderActionSetOptionMaxParseSizeBytesParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionMaxParseSizeBytesResponse, error) {
	rsp, err := c.SpiderActionSetOptionMaxParseSizeBytes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionMaxParseSizeBytesResponse(rsp)
}

// SpiderActionSetOptionMaxScansInUIWithResponse request returning *SpiderActionSetOptionMaxScansInUIResponse
func (c *ClientWithResponses) SpiderActionSetOptionMaxScansInUIWithResponse(ctx context.Context, params *SpiderActionSetOptionMaxScansInUIParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionMaxScansInUIResponse, error) {
	rsp, err := c.SpiderActionSetOptionMaxScansInUI(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionMaxScansInUIResponse(rsp)
}

// SpiderActionSetOptionParseCommentsWithResponse request returning *SpiderActionSetOptionParseCommentsResponse
func (c *ClientWithResponses) SpiderActionSetOptionParseCommentsWithResponse(ctx context.Context, params *SpiderActionSetOptionParseCommentsParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionParseCommentsResponse, error) {
	rsp, err := c.SpiderActionSetOptionParseComments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionParseCommentsResponse(rsp)
}

// SpiderActionSetOptionParseDsStoreWithResponse request returning *SpiderActionSetOptionParseDsStoreResponse
func (c *ClientWithResponses) SpiderActionSetOptionParseDsStoreWithResponse(ctx context.Context, params *SpiderActionSetOptionParseDsStoreParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionParseDsStoreResponse, error) {
	rsp, err := c.SpiderActionSetOptionParseDsStore(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionParseDsStoreResponse(rsp)
}

// SpiderActionSetOptionParseGitWithResponse request returning *SpiderActionSetOptionParseGitResponse
func (c *ClientWithResponses) SpiderActionSetOptionParseGitWithResponse(ctx context.Context, params *SpiderActionSetOptionParseGitParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionParseGitResponse, error) {
	rsp, err := c.SpiderActionSetOptionParseGit(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionParseGitResponse(rsp)
}

// SpiderActionSetOptionParseRobotsTxtWithResponse request returning *SpiderActionSetOptionParseRobotsTxtResponse
func (c *ClientWithResponses) SpiderActionSetOptionParseRobotsTxtWithResponse(ctx context.Context, params *SpiderActionSetOptionParseRobotsTxtParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionParseRobotsTxtResponse, error) {
	rsp, err := c.SpiderActionSetOptionParseRobotsTxt(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionParseRobotsTxtResponse(rsp)
}

// SpiderActionSetOptionParseSVNEntriesWithResponse request returning *SpiderActionSetOptionParseSVNEntriesResponse
func (c *ClientWithResponses) SpiderActionSetOptionParseSVNEntriesWithResponse(ctx context.Context, params *SpiderActionSetOptionParseSVNEntriesParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionParseSVNEntriesResponse, error) {
	rsp, err := c.SpiderActionSetOptionParseSVNEntries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionParseSVNEntriesResponse(rsp)
}

// SpiderActionSetOptionParseSitemapXmlWithResponse request returning *SpiderActionSetOptionParseSitemapXmlResponse
func (c *ClientWithResponses) SpiderActionSetOptionParseSitemapXmlWithResponse(ctx context.Context, params *SpiderActionSetOptionParseSitemapXmlParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionParseSitemapXmlResponse, error) {
	rsp, err := c.SpiderActionSetOptionParseSitemapXml(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionParseSitemapXmlResponse(rsp)
}

// SpiderActionSetOptionPostFormWithResponse request returning *SpiderActionSetOptionPostFormResponse
func (c *ClientWithResponses) SpiderActionSetOptionPostFormWithResponse(ctx context.Context, params *SpiderActionSetOptionPostFormParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionPostFormResponse, error) {
	rsp, err := c.SpiderActionSetOptionPostForm(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionPostFormResponse(rsp)
}

// SpiderActionSetOptionProcessFormWithResponse request returning *SpiderActionSetOptionProcessFormResponse
func (c *ClientWithResponses) SpiderActionSetOptionProcessFormWithResponse(ctx context.Context, params *SpiderActionSetOptionProcessFormParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionProcessFormResponse, error) {
	rsp, err := c.SpiderActionSetOptionProcessForm(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionProcessFormResponse(rsp)
}

// SpiderActionSetOptionSendRefererHeaderWithResponse request returning *SpiderActionSetOptionSendRefererHeaderResponse
func (c *ClientWithResponses) SpiderActionSetOptionSendRefererHeaderWithResponse(ctx context.Context, params *SpiderActionSetOptionSendRefererHeaderParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionSendRefererHeaderResponse, error) {
	rsp, err := c.SpiderActionSetOptionSendRefererHeader(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionSendRefererHeaderResponse(rsp)
}

// SpiderActionSetOptionShowAdvancedDialogWithResponse request returning *SpiderActionSetOptionShowAdvancedDialogResponse
func (c *ClientWithResponses) SpiderActionSetOptionShowAdvancedDialogWithResponse(ctx context.Context, params *SpiderActionSetOptionShowAdvancedDialogParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionShowAdvancedDialogResponse, error) {
	rsp, err := c.SpiderActionSetOptionShowAdvancedDialog(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionShowAdvancedDialogResponse(rsp)
}

// SpiderActionSetOptionSkipURLStringWithResponse request returning *SpiderActionSetOptionSkipURLStringResponse
func (c *ClientWithResponses) SpiderActionSetOptionSkipURLStringWithResponse(ctx context.Context, params *SpiderActionSetOptionSkipURLStringParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionSkipURLStringResponse, error) {
	rsp, err := c.SpiderActionSetOptionSkipURLString(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionSkipURLStringResponse(rsp)
}

// SpiderActionSetOptionThreadCountWithResponse request returning *SpiderActionSetOptionThreadCountResponse
func (c *ClientWithResponses) SpiderActionSetOptionThreadCountWithResponse(ctx context.Context, params *SpiderActionSetOptionThreadCountParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionThreadCountResponse, error) {
	rsp, err := c.SpiderActionSetOptionThreadCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionThreadCountResponse(rsp)
}

// SpiderActionSetOptionUserAgentWithResponse request returning *SpiderActionSetOptionUserAgentResponse
func (c *ClientWithResponses) SpiderActionSetOptionUserAgentWithResponse(ctx context.Context, params *SpiderActionSetOptionUserAgentParams, reqEditors ...RequestEditorFn) (*SpiderActionSetOptionUserAgentResponse, error) {
	rsp, err := c.SpiderActionSetOptionUserAgent(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionSetOptionUserAgentResponse(rsp)
}

// SpiderActionStopWithResponse request returning *SpiderActionStopResponse
func (c *ClientWithResponses) SpiderActionStopWithResponse(ctx context.Context, params *SpiderActionStopParams, reqEditors ...RequestEditorFn) (*SpiderActionStopResponse, error) {
	rsp, err := c.SpiderActionStop(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionStopResponse(rsp)
}

// SpiderActionStopAllScansWithResponse request returning *SpiderActionStopAllScansResponse
func (c *ClientWithResponses) SpiderActionStopAllScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderActionStopAllScansResponse, error) {
	rsp, err := c.SpiderActionStopAllScans(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderActionStopAllScansResponse(rsp)
}

// SpiderViewAddedNodesWithResponse request returning *SpiderViewAddedNodesResponse
func (c *ClientWithResponses) SpiderViewAddedNodesWithResponse(ctx context.Context, params *SpiderViewAddedNodesParams, reqEditors ...RequestEditorFn) (*SpiderViewAddedNodesResponse, error) {
	rsp, err := c.SpiderViewAddedNodes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewAddedNodesResponse(rsp)
}

// SpiderViewAllUrlsWithResponse request returning *SpiderViewAllUrlsResponse
func (c *ClientWithResponses) SpiderViewAllUrlsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewAllUrlsResponse, error) {
	rsp, err := c.SpiderViewAllUrls(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewAllUrlsResponse(rsp)
}

// SpiderViewDomainsAlwaysInScopeWithResponse request returning *SpiderViewDomainsAlwaysInScopeResponse
func (c *ClientWithResponses) SpiderViewDomainsAlwaysInScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewDomainsAlwaysInScopeResponse, error) {
	rsp, err := c.SpiderViewDomainsAlwaysInScope(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewDomainsAlwaysInScopeResponse(rsp)
}

// SpiderViewExcludedFromScanWithResponse request returning *SpiderViewExcludedFromScanResponse
func (c *ClientWithResponses) SpiderViewExcludedFromScanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewExcludedFromScanResponse, error) {
	rsp, err := c.SpiderViewExcludedFromScan(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewExcludedFromScanResponse(rsp)
}

// SpiderViewFullResultsWithResponse request returning *SpiderViewFullResultsResponse
func (c *ClientWithResponses) SpiderViewFullResultsWithResponse(ctx context.Context, params *SpiderViewFullResultsParams, reqEditors ...RequestEditorFn) (*SpiderViewFullResultsResponse, error) {
	rsp, err := c.SpiderViewFullResults(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewFullResultsResponse(rsp)
}

// SpiderViewOptionAcceptCookiesWithResponse request returning *SpiderViewOptionAcceptCookiesResponse
func (c *ClientWithResponses) SpiderViewOptionAcceptCookiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionAcceptCookiesResponse, error) {
	rsp, err := c.SpiderViewOptionAcceptCookies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionAcceptCookiesResponse(rsp)
}

// SpiderViewOptionDomainsAlwaysInScopeWithResponse request returning *SpiderViewOptionDomainsAlwaysInScopeResponse
func (c *ClientWithResponses) SpiderViewOptionDomainsAlwaysInScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionDomainsAlwaysInScopeResponse, error) {
	rsp, err := c.SpiderViewOptionDomainsAlwaysInScope(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionDomainsAlwaysInScopeResponse(rsp)
}

// SpiderViewOptionDomainsAlwaysInScopeEnabledWithResponse request returning *SpiderViewOptionDomainsAlwaysInScopeEnabledResponse
func (c *ClientWithResponses) SpiderViewOptionDomainsAlwaysInScopeEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionDomainsAlwaysInScopeEnabledResponse, error) {
	rsp, err := c.SpiderViewOptionDomainsAlwaysInScopeEnabled(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionDomainsAlwaysInScopeEnabledResponse(rsp)
}

// SpiderViewOptionHandleODataParametersVisitedWithResponse request returning *SpiderViewOptionHandleODataParametersVisitedResponse
func (c *ClientWithResponses) SpiderViewOptionHandleODataParametersVisitedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionHandleODataParametersVisitedResponse, error) {
	rsp, err := c.SpiderViewOptionHandleODataParametersVisited(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionHandleODataParametersVisitedResponse(rsp)
}

// SpiderViewOptionHandleParametersWithResponse request returning *SpiderViewOptionHandleParametersResponse
func (c *ClientWithResponses) SpiderViewOptionHandleParametersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionHandleParametersResponse, error) {
	rsp, err := c.SpiderViewOptionHandleParameters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionHandleParametersResponse(rsp)
}

// SpiderViewOptionLogoutAvoidanceWithResponse request returning *SpiderViewOptionLogoutAvoidanceResponse
func (c *ClientWithResponses) SpiderViewOptionLogoutAvoidanceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionLogoutAvoidanceResponse, error) {
	rsp, err := c.SpiderViewOptionLogoutAvoidance(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionLogoutAvoidanceResponse(rsp)
}

// SpiderViewOptionMaxChildrenWithResponse request returning *SpiderViewOptionMaxChildrenResponse
func (c *ClientWithResponses) SpiderViewOptionMaxChildrenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionMaxChildrenResponse, error) {
	rsp, err := c.SpiderViewOptionMaxChildren(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionMaxChildrenResponse(rsp)
}

// SpiderViewOptionMaxDepthWithResponse request returning *SpiderViewOptionMaxDepthResponse
func (c *ClientWithResponses) SpiderViewOptionMaxDepthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionMaxDepthResponse, error) {
	rsp, err := c.SpiderViewOptionMaxDepth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionMaxDepthResponse(rsp)
}

// SpiderViewOptionMaxDurationWithResponse request returning *SpiderViewOptionMaxDurationResponse
func (c *ClientWithResponses) SpiderViewOptionMaxDurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionMaxDurationResponse, error) {
	rsp, err := c.SpiderViewOptionMaxDuration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionMaxDurationResponse(rsp)
}

// SpiderViewOptionMaxParseSizeBytesWithResponse request returning *SpiderViewOptionMaxParseSizeBytesResponse
func (c *ClientWithResponses) SpiderViewOptionMaxParseSizeBytesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionMaxParseSizeBytesResponse, error) {
	rsp, err := c.SpiderViewOptionMaxParseSizeBytes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionMaxParseSizeBytesResponse(rsp)
}

// SpiderViewOptionMaxScansInUIWithResponse request returning *SpiderViewOptionMaxScansInUIResponse
func (c *ClientWithResponses) SpiderViewOptionMaxScansInUIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionMaxScansInUIResponse, error) {
	rsp, err := c.SpiderViewOptionMaxScansInUI(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionMaxScansInUIResponse(rsp)
}

// SpiderViewOptionParseCommentsWithResponse request returning *SpiderViewOptionParseCommentsResponse
func (c *ClientWithResponses) SpiderViewOptionParseCommentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionParseCommentsResponse, error) {
	rsp, err := c.SpiderViewOptionParseComments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionParseCommentsResponse(rsp)
}

// SpiderViewOptionParseDsStoreWithResponse request returning *SpiderViewOptionParseDsStoreResponse
func (c *ClientWithResponses) SpiderViewOptionParseDsStoreWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionParseDsStoreResponse, error) {
	rsp, err := c.SpiderViewOptionParseDsStore(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionParseDsStoreResponse(rsp)
}

// SpiderViewOptionParseGitWithResponse request returning *SpiderViewOptionParseGitResponse
func (c *ClientWithResponses) SpiderViewOptionParseGitWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionParseGitResponse, error) {
	rsp, err := c.SpiderViewOptionParseGit(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionParseGitResponse(rsp)
}

// SpiderViewOptionParseRobotsTxtWithResponse request returning *SpiderViewOptionParseRobotsTxtResponse
func (c *ClientWithResponses) SpiderViewOptionParseRobotsTxtWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionParseRobotsTxtResponse, error) {
	rsp, err := c.SpiderViewOptionParseRobotsTxt(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionParseRobotsTxtResponse(rsp)
}

// SpiderViewOptionParseSVNEntriesWithResponse request returning *SpiderViewOptionParseSVNEntriesResponse
func (c *ClientWithResponses) SpiderViewOptionParseSVNEntriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionParseSVNEntriesResponse, error) {
	rsp, err := c.SpiderViewOptionParseSVNEntries(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionParseSVNEntriesResponse(rsp)
}

// SpiderViewOptionParseSitemapXmlWithResponse request returning *SpiderViewOptionParseSitemapXmlResponse
func (c *ClientWithResponses) SpiderViewOptionParseSitemapXmlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionParseSitemapXmlResponse, error) {
	rsp, err := c.SpiderViewOptionParseSitemapXml(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionParseSitemapXmlResponse(rsp)
}

// SpiderViewOptionPostFormWithResponse request returning *SpiderViewOptionPostFormResponse
func (c *ClientWithResponses) SpiderViewOptionPostFormWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionPostFormResponse, error) {
	rsp, err := c.SpiderViewOptionPostForm(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionPostFormResponse(rsp)
}

// SpiderViewOptionProcessFormWithResponse request returning *SpiderViewOptionProcessFormResponse
func (c *ClientWithResponses) SpiderViewOptionProcessFormWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionProcessFormResponse, error) {
	rsp, err := c.SpiderViewOptionProcessForm(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionProcessFormResponse(rsp)
}

// SpiderViewOptionSendRefererHeaderWithResponse request returning *SpiderViewOptionSendRefererHeaderResponse
func (c *ClientWithResponses) SpiderViewOptionSendRefererHeaderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionSendRefererHeaderResponse, error) {
	rsp, err := c.SpiderViewOptionSendRefererHeader(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionSendRefererHeaderResponse(rsp)
}

// SpiderViewOptionShowAdvancedDialogWithResponse request returning *SpiderViewOptionShowAdvancedDialogResponse
func (c *ClientWithResponses) SpiderViewOptionShowAdvancedDialogWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionShowAdvancedDialogResponse, error) {
	rsp, err := c.SpiderViewOptionShowAdvancedDialog(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionShowAdvancedDialogResponse(rsp)
}

// SpiderViewOptionSkipURLStringWithResponse request returning *SpiderViewOptionSkipURLStringResponse
func (c *ClientWithResponses) SpiderViewOptionSkipURLStringWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionSkipURLStringResponse, error) {
	rsp, err := c.SpiderViewOptionSkipURLString(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionSkipURLStringResponse(rsp)
}

// SpiderViewOptionThreadCountWithResponse request returning *SpiderViewOptionThreadCountResponse
func (c *ClientWithResponses) SpiderViewOptionThreadCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionThreadCountResponse, error) {
	rsp, err := c.SpiderViewOptionThreadCount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionThreadCountResponse(rsp)
}

// SpiderViewOptionUserAgentWithResponse request returning *SpiderViewOptionUserAgentResponse
func (c *ClientWithResponses) SpiderViewOptionUserAgentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewOptionUserAgentResponse, error) {
	rsp, err := c.SpiderViewOptionUserAgent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewOptionUserAgentResponse(rsp)
}

// SpiderViewResultsWithResponse request returning *SpiderViewResultsResponse
func (c *ClientWithResponses) SpiderViewResultsWithResponse(ctx context.Context, params *SpiderViewResultsParams, reqEditors ...RequestEditorFn) (*SpiderViewResultsResponse, error) {
	rsp, err := c.SpiderViewResults(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewResultsResponse(rsp)
}

// SpiderViewScansWithResponse request returning *SpiderViewScansResponse
func (c *ClientWithResponses) SpiderViewScansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SpiderViewScansResponse, error) {
	rsp, err := c.SpiderViewScans(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewScansResponse(rsp)
}

// SpiderViewStatusWithResponse request returning *SpiderViewStatusResponse
func (c *ClientWithResponses) SpiderViewStatusWithResponse(ctx context.Context, params *SpiderViewStatusParams, reqEditors ...RequestEditorFn) (*SpiderViewStatusResponse, error) {
	rsp, err := c.SpiderViewStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpiderViewStatusResponse(rsp)
}

// StatsActionClearStatsWithResponse request returning *StatsActionClearStatsResponse
func (c *ClientWithResponses) StatsActionClearStatsWithResponse(ctx context.Context, params *StatsActionClearStatsParams, reqEditors ...RequestEditorFn) (*StatsActionClearStatsResponse, error) {
	rsp, err := c.StatsActionClearStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatsActionClearStatsResponse(rsp)
}

// StatsActionSetOptionInMemoryEnabledWithResponse request returning *StatsActionSetOptionInMemoryEnabledResponse
func (c *ClientWithResponses) StatsActionSetOptionInMemoryEnabledWithResponse(ctx context.Context, params *StatsActionSetOptionInMemoryEnabledParams, reqEditors ...RequestEditorFn) (*StatsActionSetOptionInMemoryEnabledResponse, error) {
	rsp, err := c.StatsActionSetOptionInMemoryEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatsActionSetOptionInMemoryEnabledResponse(rsp)
}

// StatsActionSetOptionStatsdHostWithResponse request returning *StatsActionSetOptionStatsdHostResponse
func (c *ClientWithResponses) StatsActionSetOptionStatsdHostWithResponse(ctx context.Context, params *StatsActionSetOptionStatsdHostParams, reqEditors ...RequestEditorFn) (*StatsActionSetOptionStatsdHostResponse, error) {
	rsp, err := c.StatsActionSetOptionStatsdHost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatsActionSetOptionStatsdHostResponse(rsp)
}

// StatsActionSetOptionStatsdPortWithResponse request returning *StatsActionSetOptionStatsdPortResponse
func (c *ClientWithResponses) StatsActionSetOptionStatsdPortWithResponse(ctx context.Context, params *StatsActionSetOptionStatsdPortParams, reqEditors ...RequestEditorFn) (*StatsActionSetOptionStatsdPortResponse, error) {
	rsp, err := c.StatsActionSetOptionStatsdPort(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatsActionSetOptionStatsdPortResponse(rsp)
}

// StatsActionSetOptionStatsdPrefixWithResponse request returning *StatsActionSetOptionStatsdPrefixResponse
func (c *ClientWithResponses) StatsActionSetOptionStatsdPrefixWithResponse(ctx context.Context, params *StatsActionSetOptionStatsdPrefixParams, reqEditors ...RequestEditorFn) (*StatsActionSetOptionStatsdPrefixResponse, error) {
	rsp, err := c.StatsActionSetOptionStatsdPrefix(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatsActionSetOptionStatsdPrefixResponse(rsp)
}

// StatsViewAllSitesStatsWithResponse request returning *StatsViewAllSitesStatsResponse
func (c *ClientWithResponses) StatsViewAllSitesStatsWithResponse(ctx context.Context, params *StatsViewAllSitesStatsParams, reqEditors ...RequestEditorFn) (*StatsViewAllSitesStatsResponse, error) {
	rsp, err := c.StatsViewAllSitesStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatsViewAllSitesStatsResponse(rsp)
}

// StatsViewOptionInMemoryEnabledWithResponse request returning *StatsViewOptionInMemoryEnabledResponse
func (c *ClientWithResponses) StatsViewOptionInMemoryEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatsViewOptionInMemoryEnabledResponse, error) {
	rsp, err := c.StatsViewOptionInMemoryEnabled(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatsViewOptionInMemoryEnabledResponse(rsp)
}

// StatsViewOptionStatsdEnabledWithResponse request returning *StatsViewOptionStatsdEnabledResponse
func (c *ClientWithResponses) StatsViewOptionStatsdEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatsViewOptionStatsdEnabledResponse, error) {
	rsp, err := c.StatsViewOptionStatsdEnabled(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatsViewOptionStatsdEnabledResponse(rsp)
}

// StatsViewOptionStatsdHostWithResponse request returning *StatsViewOptionStatsdHostResponse
func (c *ClientWithResponses) StatsViewOptionStatsdHostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatsViewOptionStatsdHostResponse, error) {
	rsp, err := c.StatsViewOptionStatsdHost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatsViewOptionStatsdHostResponse(rsp)
}

// StatsViewOptionStatsdPortWithResponse request returning *StatsViewOptionStatsdPortResponse
func (c *ClientWithResponses) StatsViewOptionStatsdPortWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatsViewOptionStatsdPortResponse, error) {
	rsp, err := c.StatsViewOptionStatsdPort(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatsViewOptionStatsdPortResponse(rsp)
}

// StatsViewOptionStatsdPrefixWithResponse request returning *StatsViewOptionStatsdPrefixResponse
func (c *ClientWithResponses) StatsViewOptionStatsdPrefixWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatsViewOptionStatsdPrefixResponse, error) {
	rsp, err := c.StatsViewOptionStatsdPrefix(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatsViewOptionStatsdPrefixResponse(rsp)
}

// StatsViewSiteStatsWithResponse request returning *StatsViewSiteStatsResponse
func (c *ClientWithResponses) StatsViewSiteStatsWithResponse(ctx context.Context, params *StatsViewSiteStatsParams, reqEditors ...RequestEditorFn) (*StatsViewSiteStatsResponse, error) {
	rsp, err := c.StatsViewSiteStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatsViewSiteStatsResponse(rsp)
}

// StatsViewStatsWithResponse request returning *StatsViewStatsResponse
func (c *ClientWithResponses) StatsViewStatsWithResponse(ctx context.Context, params *StatsViewStatsParams, reqEditors ...RequestEditorFn) (*StatsViewStatsResponse, error) {
	rsp, err := c.StatsViewStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatsViewStatsResponse(rsp)
}

// UsersActionAuthenticateAsUserWithResponse request returning *UsersActionAuthenticateAsUserResponse
func (c *ClientWithResponses) UsersActionAuthenticateAsUserWithResponse(ctx context.Context, params *UsersActionAuthenticateAsUserParams, reqEditors ...RequestEditorFn) (*UsersActionAuthenticateAsUserResponse, error) {
	rsp, err := c.UsersActionAuthenticateAsUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersActionAuthenticateAsUserResponse(rsp)
}

// UsersActionNewUserWithResponse request returning *UsersActionNewUserResponse
func (c *ClientWithResponses) UsersActionNewUserWithResponse(ctx context.Context, params *UsersActionNewUserParams, reqEditors ...RequestEditorFn) (*UsersActionNewUserResponse, error) {
	rsp, err := c.UsersActionNewUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersActionNewUserResponse(rsp)
}

// UsersActionPollAsUserWithResponse request returning *UsersActionPollAsUserResponse
func (c *ClientWithResponses) UsersActionPollAsUserWithResponse(ctx context.Context, params *UsersActionPollAsUserParams, reqEditors ...RequestEditorFn) (*UsersActionPollAsUserResponse, error) {
	rsp, err := c.UsersActionPollAsUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersActionPollAsUserResponse(rsp)
}

// UsersActionRemoveUserWithResponse request returning *UsersActionRemoveUserResponse
func (c *ClientWithResponses) UsersActionRemoveUserWithResponse(ctx context.Context, params *UsersActionRemoveUserParams, reqEditors ...RequestEditorFn) (*UsersActionRemoveUserResponse, error) {
	rsp, err := c.UsersActionRemoveUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersActionRemoveUserResponse(rsp)
}

// UsersActionSetAuthenticationCredentialsWithResponse request returning *UsersActionSetAuthenticationCredentialsResponse
func (c *ClientWithResponses) UsersActionSetAuthenticationCredentialsWithResponse(ctx context.Context, params *UsersActionSetAuthenticationCredentialsParams, reqEditors ...RequestEditorFn) (*UsersActionSetAuthenticationCredentialsResponse, error) {
	rsp, err := c.UsersActionSetAuthenticationCredentials(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersActionSetAuthenticationCredentialsResponse(rsp)
}

// UsersActionSetAuthenticationStateWithResponse request returning *UsersActionSetAuthenticationStateResponse
func (c *ClientWithResponses) UsersActionSetAuthenticationStateWithResponse(ctx context.Context, params *UsersActionSetAuthenticationStateParams, reqEditors ...RequestEditorFn) (*UsersActionSetAuthenticationStateResponse, error) {
	rsp, err := c.UsersActionSetAuthenticationState(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersActionSetAuthenticationStateResponse(rsp)
}

// UsersActionSetCookieWithResponse request returning *UsersActionSetCookieResponse
func (c *ClientWithResponses) UsersActionSetCookieWithResponse(ctx context.Context, params *UsersActionSetCookieParams, reqEditors ...RequestEditorFn) (*UsersActionSetCookieResponse, error) {
	rsp, err := c.UsersActionSetCookie(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersActionSetCookieResponse(rsp)
}

// UsersActionSetUserEnabledWithResponse request returning *UsersActionSetUserEnabledResponse
func (c *ClientWithResponses) UsersActionSetUserEnabledWithResponse(ctx context.Context, params *UsersActionSetUserEnabledParams, reqEditors ...RequestEditorFn) (*UsersActionSetUserEnabledResponse, error) {
	rsp, err := c.UsersActionSetUserEnabled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersActionSetUserEnabledResponse(rsp)
}

// UsersActionSetUserNameWithResponse request returning *UsersActionSetUserNameResponse
func (c *ClientWithResponses) UsersActionSetUserNameWithResponse(ctx context.Context, params *UsersActionSetUserNameParams, reqEditors ...RequestEditorFn) (*UsersActionSetUserNameResponse, error) {
	rsp, err := c.UsersActionSetUserName(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersActionSetUserNameResponse(rsp)
}

// UsersViewGetAuthenticationCredentialsWithResponse request returning *UsersViewGetAuthenticationCredentialsResponse
func (c *ClientWithResponses) UsersViewGetAuthenticationCredentialsWithResponse(ctx context.Context, params *UsersViewGetAuthenticationCredentialsParams, reqEditors ...RequestEditorFn) (*UsersViewGetAuthenticationCredentialsResponse, error) {
	rsp, err := c.UsersViewGetAuthenticationCredentials(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersViewGetAuthenticationCredentialsResponse(rsp)
}

// UsersViewGetAuthenticationCredentialsConfigParamsWithResponse request returning *UsersViewGetAuthenticationCredentialsConfigParamsResponse
func (c *ClientWithResponses) UsersViewGetAuthenticationCredentialsConfigParamsWithResponse(ctx context.Context, params *UsersViewGetAuthenticationCredentialsConfigParamsParams, reqEditors ...RequestEditorFn) (*UsersViewGetAuthenticationCredentialsConfigParamsResponse, error) {
	rsp, err := c.UsersViewGetAuthenticationCredentialsConfigParams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersViewGetAuthenticationCredentialsConfigParamsResponse(rsp)
}

// UsersViewGetAuthenticationSessionWithResponse request returning *UsersViewGetAuthenticationSessionResponse
func (c *ClientWithResponses) UsersViewGetAuthenticationSessionWithResponse(ctx context.Context, params *UsersViewGetAuthenticationSessionParams, reqEditors ...RequestEditorFn) (*UsersViewGetAuthenticationSessionResponse, error) {
	rsp, err := c.UsersViewGetAuthenticationSession(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersViewGetAuthenticationSessionResponse(rsp)
}

// UsersViewGetAuthenticationStateWithResponse request returning *UsersViewGetAuthenticationStateResponse
func (c *ClientWithResponses) UsersViewGetAuthenticationStateWithResponse(ctx context.Context, params *UsersViewGetAuthenticationStateParams, reqEditors ...RequestEditorFn) (*UsersViewGetAuthenticationStateResponse, error) {
	rsp, err := c.UsersViewGetAuthenticationState(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersViewGetAuthenticationStateResponse(rsp)
}

// UsersViewGetUserByIdWithResponse request returning *UsersViewGetUserByIdResponse
func (c *ClientWithResponses) UsersViewGetUserByIdWithResponse(ctx context.Context, params *UsersViewGetUserByIdParams, reqEditors ...RequestEditorFn) (*UsersViewGetUserByIdResponse, error) {
	rsp, err := c.UsersViewGetUserById(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersViewGetUserByIdResponse(rsp)
}

// UsersViewUsersListWithResponse request returning *UsersViewUsersListResponse
func (c *ClientWithResponses) UsersViewUsersListWithResponse(ctx context.Context, params *UsersViewUsersListParams, reqEditors ...RequestEditorFn) (*UsersViewUsersListResponse, error) {
	rsp, err := c.UsersViewUsersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersViewUsersListResponse(rsp)
}

// WappalyzerViewListAllWithResponse request returning *WappalyzerViewListAllResponse
func (c *ClientWithResponses) WappalyzerViewListAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WappalyzerViewListAllResponse, error) {
	rsp, err := c.WappalyzerViewListAll(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWappalyzerViewListAllResponse(rsp)
}

// WappalyzerViewListSiteWithResponse request returning *WappalyzerViewListSiteResponse
func (c *ClientWithResponses) WappalyzerViewListSiteWithResponse(ctx context.Context, params *WappalyzerViewListSiteParams, reqEditors ...RequestEditorFn) (*WappalyzerViewListSiteResponse, error) {
	rsp, err := c.WappalyzerViewListSite(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWappalyzerViewListSiteResponse(rsp)
}

// WappalyzerViewListSitesWithResponse request returning *WappalyzerViewListSitesResponse
func (c *ClientWithResponses) WappalyzerViewListSitesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WappalyzerViewListSitesResponse, error) {
	rsp, err := c.WappalyzerViewListSites(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWappalyzerViewListSitesResponse(rsp)
}

// WebsocketActionSendTextMessageWithResponse request returning *WebsocketActionSendTextMessageResponse
func (c *ClientWithResponses) WebsocketActionSendTextMessageWithResponse(ctx context.Context, params *WebsocketActionSendTextMessageParams, reqEditors ...RequestEditorFn) (*WebsocketActionSendTextMessageResponse, error) {
	rsp, err := c.WebsocketActionSendTextMessage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebsocketActionSendTextMessageResponse(rsp)
}

// WebsocketActionSetBreakTextMessageWithResponse request returning *WebsocketActionSetBreakTextMessageResponse
func (c *ClientWithResponses) WebsocketActionSetBreakTextMessageWithResponse(ctx context.Context, params *WebsocketActionSetBreakTextMessageParams, reqEditors ...RequestEditorFn) (*WebsocketActionSetBreakTextMessageResponse, error) {
	rsp, err := c.WebsocketActionSetBreakTextMessage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebsocketActionSetBreakTextMessageResponse(rsp)
}

// WebsocketViewBreakTextMessageWithResponse request returning *WebsocketViewBreakTextMessageResponse
func (c *ClientWithResponses) WebsocketViewBreakTextMessageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WebsocketViewBreakTextMessageResponse, error) {
	rsp, err := c.WebsocketViewBreakTextMessage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebsocketViewBreakTextMessageResponse(rsp)
}

// WebsocketViewChannelsWithResponse request returning *WebsocketViewChannelsResponse
func (c *ClientWithResponses) WebsocketViewChannelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WebsocketViewChannelsResponse, error) {
	rsp, err := c.WebsocketViewChannels(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebsocketViewChannelsResponse(rsp)
}

// WebsocketViewMessageWithResponse request returning *WebsocketViewMessageResponse
func (c *ClientWithResponses) WebsocketViewMessageWithResponse(ctx context.Context, params *WebsocketViewMessageParams, reqEditors ...RequestEditorFn) (*WebsocketViewMessageResponse, error) {
	rsp, err := c.WebsocketViewMessage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebsocketViewMessageResponse(rsp)
}

// WebsocketViewMessagesWithResponse request returning *WebsocketViewMessagesResponse
func (c *ClientWithResponses) WebsocketViewMessagesWithResponse(ctx context.Context, params *WebsocketViewMessagesParams, reqEditors ...RequestEditorFn) (*WebsocketViewMessagesResponse, error) {
	rsp, err := c.WebsocketViewMessages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebsocketViewMessagesResponse(rsp)
}

// AcsrfOtherGenFormWithResponse request returning *AcsrfOtherGenFormResponse
func (c *ClientWithResponses) AcsrfOtherGenFormWithResponse(ctx context.Context, params *AcsrfOtherGenFormParams, reqEditors ...RequestEditorFn) (*AcsrfOtherGenFormResponse, error) {
	rsp, err := c.AcsrfOtherGenForm(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcsrfOtherGenFormResponse(rsp)
}

// CoreOtherFileDownloadWithResponse request returning *CoreOtherFileDownloadResponse
func (c *ClientWithResponses) CoreOtherFileDownloadWithResponse(ctx context.Context, params *CoreOtherFileDownloadParams, reqEditors ...RequestEditorFn) (*CoreOtherFileDownloadResponse, error) {
	rsp, err := c.CoreOtherFileDownload(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreOtherFileDownloadResponse(rsp)
}

// CoreOtherFileUploadWithResponse request returning *CoreOtherFileUploadResponse
func (c *ClientWithResponses) CoreOtherFileUploadWithResponse(ctx context.Context, params *CoreOtherFileUploadParams, reqEditors ...RequestEditorFn) (*CoreOtherFileUploadResponse, error) {
	rsp, err := c.CoreOtherFileUpload(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreOtherFileUploadResponse(rsp)
}

// CoreOtherHtmlreportWithResponse request returning *CoreOtherHtmlreportResponse
func (c *ClientWithResponses) CoreOtherHtmlreportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreOtherHtmlreportResponse, error) {
	rsp, err := c.CoreOtherHtmlreport(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreOtherHtmlreportResponse(rsp)
}

// CoreOtherJsonreportWithResponse request returning *CoreOtherJsonreportResponse
func (c *ClientWithResponses) CoreOtherJsonreportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreOtherJsonreportResponse, error) {
	rsp, err := c.CoreOtherJsonreport(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreOtherJsonreportResponse(rsp)
}

// CoreOtherMdreportWithResponse request returning *CoreOtherMdreportResponse
func (c *ClientWithResponses) CoreOtherMdreportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreOtherMdreportResponse, error) {
	rsp, err := c.CoreOtherMdreport(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreOtherMdreportResponse(rsp)
}

// CoreOtherMessageHarWithResponse request returning *CoreOtherMessageHarResponse
func (c *ClientWithResponses) CoreOtherMessageHarWithResponse(ctx context.Context, params *CoreOtherMessageHarParams, reqEditors ...RequestEditorFn) (*CoreOtherMessageHarResponse, error) {
	rsp, err := c.CoreOtherMessageHar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreOtherMessageHarResponse(rsp)
}

// CoreOtherMessagesHarWithResponse request returning *CoreOtherMessagesHarResponse
func (c *ClientWithResponses) CoreOtherMessagesHarWithResponse(ctx context.Context, params *CoreOtherMessagesHarParams, reqEditors ...RequestEditorFn) (*CoreOtherMessagesHarResponse, error) {
	rsp, err := c.CoreOtherMessagesHar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreOtherMessagesHarResponse(rsp)
}

// CoreOtherMessagesHarByIdWithResponse request returning *CoreOtherMessagesHarByIdResponse
func (c *ClientWithResponses) CoreOtherMessagesHarByIdWithResponse(ctx context.Context, params *CoreOtherMessagesHarByIdParams, reqEditors ...RequestEditorFn) (*CoreOtherMessagesHarByIdResponse, error) {
	rsp, err := c.CoreOtherMessagesHarById(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreOtherMessagesHarByIdResponse(rsp)
}

// CoreOtherProxyPacWithResponse request returning *CoreOtherProxyPacResponse
func (c *ClientWithResponses) CoreOtherProxyPacWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreOtherProxyPacResponse, error) {
	rsp, err := c.CoreOtherProxyPac(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreOtherProxyPacResponse(rsp)
}

// CoreOtherRootcertWithResponse request returning *CoreOtherRootcertResponse
func (c *ClientWithResponses) CoreOtherRootcertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreOtherRootcertResponse, error) {
	rsp, err := c.CoreOtherRootcert(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreOtherRootcertResponse(rsp)
}

// CoreOtherSendHarRequestWithResponse request returning *CoreOtherSendHarRequestResponse
func (c *ClientWithResponses) CoreOtherSendHarRequestWithResponse(ctx context.Context, params *CoreOtherSendHarRequestParams, reqEditors ...RequestEditorFn) (*CoreOtherSendHarRequestResponse, error) {
	rsp, err := c.CoreOtherSendHarRequest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreOtherSendHarRequestResponse(rsp)
}

// CoreOtherSetproxyWithResponse request returning *CoreOtherSetproxyResponse
func (c *ClientWithResponses) CoreOtherSetproxyWithResponse(ctx context.Context, params *CoreOtherSetproxyParams, reqEditors ...RequestEditorFn) (*CoreOtherSetproxyResponse, error) {
	rsp, err := c.CoreOtherSetproxy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreOtherSetproxyResponse(rsp)
}

// CoreOtherXmlreportWithResponse request returning *CoreOtherXmlreportResponse
func (c *ClientWithResponses) CoreOtherXmlreportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CoreOtherXmlreportResponse, error) {
	rsp, err := c.CoreOtherXmlreport(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCoreOtherXmlreportResponse(rsp)
}

// DevOtherOpenapiWithResponse request returning *DevOtherOpenapiResponse
func (c *ClientWithResponses) DevOtherOpenapiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DevOtherOpenapiResponse, error) {
	rsp, err := c.DevOtherOpenapi(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevOtherOpenapiResponse(rsp)
}

// EximOtherExportHarWithResponse request returning *EximOtherExportHarResponse
func (c *ClientWithResponses) EximOtherExportHarWithResponse(ctx context.Context, params *EximOtherExportHarParams, reqEditors ...RequestEditorFn) (*EximOtherExportHarResponse, error) {
	rsp, err := c.EximOtherExportHar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEximOtherExportHarResponse(rsp)
}

// EximOtherExportHarByIdWithResponse request returning *EximOtherExportHarByIdResponse
func (c *ClientWithResponses) EximOtherExportHarByIdWithResponse(ctx context.Context, params *EximOtherExportHarByIdParams, reqEditors ...RequestEditorFn) (*EximOtherExportHarByIdResponse, error) {
	rsp, err := c.EximOtherExportHarById(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEximOtherExportHarByIdResponse(rsp)
}

// EximOtherSendHarRequestWithResponse request returning *EximOtherSendHarRequestResponse
func (c *ClientWithResponses) EximOtherSendHarRequestWithResponse(ctx context.Context, params *EximOtherSendHarRequestParams, reqEditors ...RequestEditorFn) (*EximOtherSendHarRequestResponse, error) {
	rsp, err := c.EximOtherSendHarRequest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEximOtherSendHarRequestResponse(rsp)
}

// HudOtherChangesInHtmlWithResponse request returning *HudOtherChangesInHtmlResponse
func (c *ClientWithResponses) HudOtherChangesInHtmlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HudOtherChangesInHtmlResponse, error) {
	rsp, err := c.HudOtherChangesInHtml(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHudOtherChangesInHtmlResponse(rsp)
}

// KeyboardOtherCheatsheetActionOrderWithResponse request returning *KeyboardOtherCheatsheetActionOrderResponse
func (c *ClientWithResponses) KeyboardOtherCheatsheetActionOrderWithResponse(ctx context.Context, params *KeyboardOtherCheatsheetActionOrderParams, reqEditors ...RequestEditorFn) (*KeyboardOtherCheatsheetActionOrderResponse, error) {
	rsp, err := c.KeyboardOtherCheatsheetActionOrder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeyboardOtherCheatsheetActionOrderResponse(rsp)
}

// KeyboardOtherCheatsheetKeyOrderWithResponse request returning *KeyboardOtherCheatsheetKeyOrderResponse
func (c *ClientWithResponses) KeyboardOtherCheatsheetKeyOrderWithResponse(ctx context.Context, params *KeyboardOtherCheatsheetKeyOrderParams, reqEditors ...RequestEditorFn) (*KeyboardOtherCheatsheetKeyOrderResponse, error) {
	rsp, err := c.KeyboardOtherCheatsheetKeyOrder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeyboardOtherCheatsheetKeyOrderResponse(rsp)
}

// NetworkOtherProxyPacWithResponse request returning *NetworkOtherProxyPacResponse
func (c *ClientWithResponses) NetworkOtherProxyPacWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkOtherProxyPacResponse, error) {
	rsp, err := c.NetworkOtherProxyPac(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkOtherProxyPacResponse(rsp)
}

// NetworkOtherRootCaCertWithResponse request returning *NetworkOtherRootCaCertResponse
func (c *ClientWithResponses) NetworkOtherRootCaCertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkOtherRootCaCertResponse, error) {
	rsp, err := c.NetworkOtherRootCaCert(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkOtherRootCaCertResponse(rsp)
}

// NetworkOtherSetProxyWithResponse request returning *NetworkOtherSetProxyResponse
func (c *ClientWithResponses) NetworkOtherSetProxyWithResponse(ctx context.Context, params *NetworkOtherSetProxyParams, reqEditors ...RequestEditorFn) (*NetworkOtherSetProxyResponse, error) {
	rsp, err := c.NetworkOtherSetProxy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkOtherSetProxyResponse(rsp)
}

// PnhOtherFxPnhXpiWithResponse request returning *PnhOtherFxPnhXpiResponse
func (c *ClientWithResponses) PnhOtherFxPnhXpiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PnhOtherFxPnhXpiResponse, error) {
	rsp, err := c.PnhOtherFxPnhXpi(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePnhOtherFxPnhXpiResponse(rsp)
}

// PnhOtherManifestWithResponse request returning *PnhOtherManifestResponse
func (c *ClientWithResponses) PnhOtherManifestWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PnhOtherManifestResponse, error) {
	rsp, err := c.PnhOtherManifest(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePnhOtherManifestResponse(rsp)
}

// PnhOtherPnhWithResponse request returning *PnhOtherPnhResponse
func (c *ClientWithResponses) PnhOtherPnhWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PnhOtherPnhResponse, error) {
	rsp, err := c.PnhOtherPnh(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePnhOtherPnhResponse(rsp)
}

// PnhOtherServiceWithResponse request returning *PnhOtherServiceResponse
func (c *ClientWithResponses) PnhOtherServiceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PnhOtherServiceResponse, error) {
	rsp, err := c.PnhOtherService(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePnhOtherServiceResponse(rsp)
}

// QuickstartlaunchOtherStartPageWithResponse request returning *QuickstartlaunchOtherStartPageResponse
func (c *ClientWithResponses) QuickstartlaunchOtherStartPageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*QuickstartlaunchOtherStartPageResponse, error) {
	rsp, err := c.QuickstartlaunchOtherStartPage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuickstartlaunchOtherStartPageResponse(rsp)
}

// SearchOtherHarByHeaderRegexWithResponse request returning *SearchOtherHarByHeaderRegexResponse
func (c *ClientWithResponses) SearchOtherHarByHeaderRegexWithResponse(ctx context.Context, params *SearchOtherHarByHeaderRegexParams, reqEditors ...RequestEditorFn) (*SearchOtherHarByHeaderRegexResponse, error) {
	rsp, err := c.SearchOtherHarByHeaderRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchOtherHarByHeaderRegexResponse(rsp)
}

// SearchOtherHarByNoteRegexWithResponse request returning *SearchOtherHarByNoteRegexResponse
func (c *ClientWithResponses) SearchOtherHarByNoteRegexWithResponse(ctx context.Context, params *SearchOtherHarByNoteRegexParams, reqEditors ...RequestEditorFn) (*SearchOtherHarByNoteRegexResponse, error) {
	rsp, err := c.SearchOtherHarByNoteRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchOtherHarByNoteRegexResponse(rsp)
}

// SearchOtherHarByRequestRegexWithResponse request returning *SearchOtherHarByRequestRegexResponse
func (c *ClientWithResponses) SearchOtherHarByRequestRegexWithResponse(ctx context.Context, params *SearchOtherHarByRequestRegexParams, reqEditors ...RequestEditorFn) (*SearchOtherHarByRequestRegexResponse, error) {
	rsp, err := c.SearchOtherHarByRequestRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchOtherHarByRequestRegexResponse(rsp)
}

// SearchOtherHarByResponseRegexWithResponse request returning *SearchOtherHarByResponseRegexResponse
func (c *ClientWithResponses) SearchOtherHarByResponseRegexWithResponse(ctx context.Context, params *SearchOtherHarByResponseRegexParams, reqEditors ...RequestEditorFn) (*SearchOtherHarByResponseRegexResponse, error) {
	rsp, err := c.SearchOtherHarByResponseRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchOtherHarByResponseRegexResponse(rsp)
}

// SearchOtherHarByTagRegexWithResponse request returning *SearchOtherHarByTagRegexResponse
func (c *ClientWithResponses) SearchOtherHarByTagRegexWithResponse(ctx context.Context, params *SearchOtherHarByTagRegexParams, reqEditors ...RequestEditorFn) (*SearchOtherHarByTagRegexResponse, error) {
	rsp, err := c.SearchOtherHarByTagRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchOtherHarByTagRegexResponse(rsp)
}

// SearchOtherHarByUrlRegexWithResponse request returning *SearchOtherHarByUrlRegexResponse
func (c *ClientWithResponses) SearchOtherHarByUrlRegexWithResponse(ctx context.Context, params *SearchOtherHarByUrlRegexParams, reqEditors ...RequestEditorFn) (*SearchOtherHarByUrlRegexResponse, error) {
	rsp, err := c.SearchOtherHarByUrlRegex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchOtherHarByUrlRegexResponse(rsp)
}

// ParseAccessControlActionScanResponse parses an HTTP response from a AccessControlActionScanWithResponse call
func ParseAccessControlActionScanResponse(rsp *http.Response) (*AccessControlActionScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessControlActionScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccessControlActionWriteHTMLreportResponse parses an HTTP response from a AccessControlActionWriteHTMLreportWithResponse call
func ParseAccessControlActionWriteHTMLreportResponse(rsp *http.Response) (*AccessControlActionWriteHTMLreportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessControlActionWriteHTMLreportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccessControlViewGetScanProgressResponse parses an HTTP response from a AccessControlViewGetScanProgressWithResponse call
func ParseAccessControlViewGetScanProgressResponse(rsp *http.Response) (*AccessControlViewGetScanProgressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessControlViewGetScanProgressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccessControlViewGetScanStatusResponse parses an HTTP response from a AccessControlViewGetScanStatusWithResponse call
func ParseAccessControlViewGetScanStatusResponse(rsp *http.Response) (*AccessControlViewGetScanStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessControlViewGetScanStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAcsrfActionAddOptionTokenResponse parses an HTTP response from a AcsrfActionAddOptionTokenWithResponse call
func ParseAcsrfActionAddOptionTokenResponse(rsp *http.Response) (*AcsrfActionAddOptionTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcsrfActionAddOptionTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAcsrfActionRemoveOptionTokenResponse parses an HTTP response from a AcsrfActionRemoveOptionTokenWithResponse call
func ParseAcsrfActionRemoveOptionTokenResponse(rsp *http.Response) (*AcsrfActionRemoveOptionTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcsrfActionRemoveOptionTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAcsrfActionSetOptionPartialMatchingEnabledResponse parses an HTTP response from a AcsrfActionSetOptionPartialMatchingEnabledWithResponse call
func ParseAcsrfActionSetOptionPartialMatchingEnabledResponse(rsp *http.Response) (*AcsrfActionSetOptionPartialMatchingEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcsrfActionSetOptionPartialMatchingEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAcsrfViewOptionPartialMatchingEnabledResponse parses an HTTP response from a AcsrfViewOptionPartialMatchingEnabledWithResponse call
func ParseAcsrfViewOptionPartialMatchingEnabledResponse(rsp *http.Response) (*AcsrfViewOptionPartialMatchingEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcsrfViewOptionPartialMatchingEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAcsrfViewOptionTokensNamesResponse parses an HTTP response from a AcsrfViewOptionTokensNamesWithResponse call
func ParseAcsrfViewOptionTokensNamesResponse(rsp *http.Response) (*AcsrfViewOptionTokensNamesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcsrfViewOptionTokensNamesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionAddAllowedResourceResponse parses an HTTP response from a AjaxSpiderActionAddAllowedResourceWithResponse call
func ParseAjaxSpiderActionAddAllowedResourceResponse(rsp *http.Response) (*AjaxSpiderActionAddAllowedResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionAddAllowedResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionAddExcludedElementResponse parses an HTTP response from a AjaxSpiderActionAddExcludedElementWithResponse call
func ParseAjaxSpiderActionAddExcludedElementResponse(rsp *http.Response) (*AjaxSpiderActionAddExcludedElementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionAddExcludedElementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionModifyExcludedElementResponse parses an HTTP response from a AjaxSpiderActionModifyExcludedElementWithResponse call
func ParseAjaxSpiderActionModifyExcludedElementResponse(rsp *http.Response) (*AjaxSpiderActionModifyExcludedElementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionModifyExcludedElementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionRemoveAllowedResourceResponse parses an HTTP response from a AjaxSpiderActionRemoveAllowedResourceWithResponse call
func ParseAjaxSpiderActionRemoveAllowedResourceResponse(rsp *http.Response) (*AjaxSpiderActionRemoveAllowedResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionRemoveAllowedResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionRemoveExcludedElementResponse parses an HTTP response from a AjaxSpiderActionRemoveExcludedElementWithResponse call
func ParseAjaxSpiderActionRemoveExcludedElementResponse(rsp *http.Response) (*AjaxSpiderActionRemoveExcludedElementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionRemoveExcludedElementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionScanResponse parses an HTTP response from a AjaxSpiderActionScanWithResponse call
func ParseAjaxSpiderActionScanResponse(rsp *http.Response) (*AjaxSpiderActionScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionScanAsUserResponse parses an HTTP response from a AjaxSpiderActionScanAsUserWithResponse call
func ParseAjaxSpiderActionScanAsUserResponse(rsp *http.Response) (*AjaxSpiderActionScanAsUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionScanAsUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionSetEnabledAllowedResourceResponse parses an HTTP response from a AjaxSpiderActionSetEnabledAllowedResourceWithResponse call
func ParseAjaxSpiderActionSetEnabledAllowedResourceResponse(rsp *http.Response) (*AjaxSpiderActionSetEnabledAllowedResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionSetEnabledAllowedResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionSetOptionBrowserIdResponse parses an HTTP response from a AjaxSpiderActionSetOptionBrowserIdWithResponse call
func ParseAjaxSpiderActionSetOptionBrowserIdResponse(rsp *http.Response) (*AjaxSpiderActionSetOptionBrowserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionSetOptionBrowserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionSetOptionClickDefaultElemsResponse parses an HTTP response from a AjaxSpiderActionSetOptionClickDefaultElemsWithResponse call
func ParseAjaxSpiderActionSetOptionClickDefaultElemsResponse(rsp *http.Response) (*AjaxSpiderActionSetOptionClickDefaultElemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionSetOptionClickDefaultElemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionSetOptionClickElemsOnceResponse parses an HTTP response from a AjaxSpiderActionSetOptionClickElemsOnceWithResponse call
func ParseAjaxSpiderActionSetOptionClickElemsOnceResponse(rsp *http.Response) (*AjaxSpiderActionSetOptionClickElemsOnceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionSetOptionClickElemsOnceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionSetOptionEnableExtensionsResponse parses an HTTP response from a AjaxSpiderActionSetOptionEnableExtensionsWithResponse call
func ParseAjaxSpiderActionSetOptionEnableExtensionsResponse(rsp *http.Response) (*AjaxSpiderActionSetOptionEnableExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionSetOptionEnableExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionSetOptionEventWaitResponse parses an HTTP response from a AjaxSpiderActionSetOptionEventWaitWithResponse call
func ParseAjaxSpiderActionSetOptionEventWaitResponse(rsp *http.Response) (*AjaxSpiderActionSetOptionEventWaitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionSetOptionEventWaitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionSetOptionLogoutAvoidanceResponse parses an HTTP response from a AjaxSpiderActionSetOptionLogoutAvoidanceWithResponse call
func ParseAjaxSpiderActionSetOptionLogoutAvoidanceResponse(rsp *http.Response) (*AjaxSpiderActionSetOptionLogoutAvoidanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionSetOptionLogoutAvoidanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionSetOptionMaxCrawlDepthResponse parses an HTTP response from a AjaxSpiderActionSetOptionMaxCrawlDepthWithResponse call
func ParseAjaxSpiderActionSetOptionMaxCrawlDepthResponse(rsp *http.Response) (*AjaxSpiderActionSetOptionMaxCrawlDepthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionSetOptionMaxCrawlDepthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionSetOptionMaxCrawlStatesResponse parses an HTTP response from a AjaxSpiderActionSetOptionMaxCrawlStatesWithResponse call
func ParseAjaxSpiderActionSetOptionMaxCrawlStatesResponse(rsp *http.Response) (*AjaxSpiderActionSetOptionMaxCrawlStatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionSetOptionMaxCrawlStatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionSetOptionMaxDurationResponse parses an HTTP response from a AjaxSpiderActionSetOptionMaxDurationWithResponse call
func ParseAjaxSpiderActionSetOptionMaxDurationResponse(rsp *http.Response) (*AjaxSpiderActionSetOptionMaxDurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionSetOptionMaxDurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionSetOptionNumberOfBrowsersResponse parses an HTTP response from a AjaxSpiderActionSetOptionNumberOfBrowsersWithResponse call
func ParseAjaxSpiderActionSetOptionNumberOfBrowsersResponse(rsp *http.Response) (*AjaxSpiderActionSetOptionNumberOfBrowsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionSetOptionNumberOfBrowsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionSetOptionRandomInputsResponse parses an HTTP response from a AjaxSpiderActionSetOptionRandomInputsWithResponse call
func ParseAjaxSpiderActionSetOptionRandomInputsResponse(rsp *http.Response) (*AjaxSpiderActionSetOptionRandomInputsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionSetOptionRandomInputsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionSetOptionReloadWaitResponse parses an HTTP response from a AjaxSpiderActionSetOptionReloadWaitWithResponse call
func ParseAjaxSpiderActionSetOptionReloadWaitResponse(rsp *http.Response) (*AjaxSpiderActionSetOptionReloadWaitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionSetOptionReloadWaitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionSetOptionScopeCheckResponse parses an HTTP response from a AjaxSpiderActionSetOptionScopeCheckWithResponse call
func ParseAjaxSpiderActionSetOptionScopeCheckResponse(rsp *http.Response) (*AjaxSpiderActionSetOptionScopeCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionSetOptionScopeCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderActionStopResponse parses an HTTP response from a AjaxSpiderActionStopWithResponse call
func ParseAjaxSpiderActionStopResponse(rsp *http.Response) (*AjaxSpiderActionStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderActionStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewAllowedResourcesResponse parses an HTTP response from a AjaxSpiderViewAllowedResourcesWithResponse call
func ParseAjaxSpiderViewAllowedResourcesResponse(rsp *http.Response) (*AjaxSpiderViewAllowedResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewAllowedResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewExcludedElementsResponse parses an HTTP response from a AjaxSpiderViewExcludedElementsWithResponse call
func ParseAjaxSpiderViewExcludedElementsResponse(rsp *http.Response) (*AjaxSpiderViewExcludedElementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewExcludedElementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewFullResultsResponse parses an HTTP response from a AjaxSpiderViewFullResultsWithResponse call
func ParseAjaxSpiderViewFullResultsResponse(rsp *http.Response) (*AjaxSpiderViewFullResultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewFullResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewNumberOfResultsResponse parses an HTTP response from a AjaxSpiderViewNumberOfResultsWithResponse call
func ParseAjaxSpiderViewNumberOfResultsResponse(rsp *http.Response) (*AjaxSpiderViewNumberOfResultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewNumberOfResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewOptionBrowserIdResponse parses an HTTP response from a AjaxSpiderViewOptionBrowserIdWithResponse call
func ParseAjaxSpiderViewOptionBrowserIdResponse(rsp *http.Response) (*AjaxSpiderViewOptionBrowserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewOptionBrowserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewOptionClickDefaultElemsResponse parses an HTTP response from a AjaxSpiderViewOptionClickDefaultElemsWithResponse call
func ParseAjaxSpiderViewOptionClickDefaultElemsResponse(rsp *http.Response) (*AjaxSpiderViewOptionClickDefaultElemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewOptionClickDefaultElemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewOptionClickElemsOnceResponse parses an HTTP response from a AjaxSpiderViewOptionClickElemsOnceWithResponse call
func ParseAjaxSpiderViewOptionClickElemsOnceResponse(rsp *http.Response) (*AjaxSpiderViewOptionClickElemsOnceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewOptionClickElemsOnceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewOptionEnableExtensionsResponse parses an HTTP response from a AjaxSpiderViewOptionEnableExtensionsWithResponse call
func ParseAjaxSpiderViewOptionEnableExtensionsResponse(rsp *http.Response) (*AjaxSpiderViewOptionEnableExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewOptionEnableExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewOptionEventWaitResponse parses an HTTP response from a AjaxSpiderViewOptionEventWaitWithResponse call
func ParseAjaxSpiderViewOptionEventWaitResponse(rsp *http.Response) (*AjaxSpiderViewOptionEventWaitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewOptionEventWaitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewOptionLogoutAvoidanceResponse parses an HTTP response from a AjaxSpiderViewOptionLogoutAvoidanceWithResponse call
func ParseAjaxSpiderViewOptionLogoutAvoidanceResponse(rsp *http.Response) (*AjaxSpiderViewOptionLogoutAvoidanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewOptionLogoutAvoidanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewOptionMaxCrawlDepthResponse parses an HTTP response from a AjaxSpiderViewOptionMaxCrawlDepthWithResponse call
func ParseAjaxSpiderViewOptionMaxCrawlDepthResponse(rsp *http.Response) (*AjaxSpiderViewOptionMaxCrawlDepthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewOptionMaxCrawlDepthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewOptionMaxCrawlStatesResponse parses an HTTP response from a AjaxSpiderViewOptionMaxCrawlStatesWithResponse call
func ParseAjaxSpiderViewOptionMaxCrawlStatesResponse(rsp *http.Response) (*AjaxSpiderViewOptionMaxCrawlStatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewOptionMaxCrawlStatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewOptionMaxDurationResponse parses an HTTP response from a AjaxSpiderViewOptionMaxDurationWithResponse call
func ParseAjaxSpiderViewOptionMaxDurationResponse(rsp *http.Response) (*AjaxSpiderViewOptionMaxDurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewOptionMaxDurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewOptionNumberOfBrowsersResponse parses an HTTP response from a AjaxSpiderViewOptionNumberOfBrowsersWithResponse call
func ParseAjaxSpiderViewOptionNumberOfBrowsersResponse(rsp *http.Response) (*AjaxSpiderViewOptionNumberOfBrowsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewOptionNumberOfBrowsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewOptionRandomInputsResponse parses an HTTP response from a AjaxSpiderViewOptionRandomInputsWithResponse call
func ParseAjaxSpiderViewOptionRandomInputsResponse(rsp *http.Response) (*AjaxSpiderViewOptionRandomInputsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewOptionRandomInputsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewOptionReloadWaitResponse parses an HTTP response from a AjaxSpiderViewOptionReloadWaitWithResponse call
func ParseAjaxSpiderViewOptionReloadWaitResponse(rsp *http.Response) (*AjaxSpiderViewOptionReloadWaitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewOptionReloadWaitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewOptionScopeCheckResponse parses an HTTP response from a AjaxSpiderViewOptionScopeCheckWithResponse call
func ParseAjaxSpiderViewOptionScopeCheckResponse(rsp *http.Response) (*AjaxSpiderViewOptionScopeCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewOptionScopeCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewResultsResponse parses an HTTP response from a AjaxSpiderViewResultsWithResponse call
func ParseAjaxSpiderViewResultsResponse(rsp *http.Response) (*AjaxSpiderViewResultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAjaxSpiderViewStatusResponse parses an HTTP response from a AjaxSpiderViewStatusWithResponse call
func ParseAjaxSpiderViewStatusResponse(rsp *http.Response) (*AjaxSpiderViewStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AjaxSpiderViewStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertActionAddAlertResponse parses an HTTP response from a AlertActionAddAlertWithResponse call
func ParseAlertActionAddAlertResponse(rsp *http.Response) (*AlertActionAddAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertActionAddAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertActionDeleteAlertResponse parses an HTTP response from a AlertActionDeleteAlertWithResponse call
func ParseAlertActionDeleteAlertResponse(rsp *http.Response) (*AlertActionDeleteAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertActionDeleteAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertActionDeleteAlertsResponse parses an HTTP response from a AlertActionDeleteAlertsWithResponse call
func ParseAlertActionDeleteAlertsResponse(rsp *http.Response) (*AlertActionDeleteAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertActionDeleteAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertActionDeleteAllAlertsResponse parses an HTTP response from a AlertActionDeleteAllAlertsWithResponse call
func ParseAlertActionDeleteAllAlertsResponse(rsp *http.Response) (*AlertActionDeleteAllAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertActionDeleteAllAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertActionUpdateAlertResponse parses an HTTP response from a AlertActionUpdateAlertWithResponse call
func ParseAlertActionUpdateAlertResponse(rsp *http.Response) (*AlertActionUpdateAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertActionUpdateAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertActionUpdateAlertsConfidenceResponse parses an HTTP response from a AlertActionUpdateAlertsConfidenceWithResponse call
func ParseAlertActionUpdateAlertsConfidenceResponse(rsp *http.Response) (*AlertActionUpdateAlertsConfidenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertActionUpdateAlertsConfidenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertActionUpdateAlertsRiskResponse parses an HTTP response from a AlertActionUpdateAlertsRiskWithResponse call
func ParseAlertActionUpdateAlertsRiskResponse(rsp *http.Response) (*AlertActionUpdateAlertsRiskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertActionUpdateAlertsRiskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertViewAlertResponse parses an HTTP response from a AlertViewAlertWithResponse call
func ParseAlertViewAlertResponse(rsp *http.Response) (*AlertViewAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertViewAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertViewAlertCountsByRiskResponse parses an HTTP response from a AlertViewAlertCountsByRiskWithResponse call
func ParseAlertViewAlertCountsByRiskResponse(rsp *http.Response) (*AlertViewAlertCountsByRiskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertViewAlertCountsByRiskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertViewAlertsResponse parses an HTTP response from a AlertViewAlertsWithResponse call
func ParseAlertViewAlertsResponse(rsp *http.Response) (*AlertViewAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertViewAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertViewAlertsByRiskResponse parses an HTTP response from a AlertViewAlertsByRiskWithResponse call
func ParseAlertViewAlertsByRiskResponse(rsp *http.Response) (*AlertViewAlertsByRiskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertViewAlertsByRiskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertViewAlertsSummaryResponse parses an HTTP response from a AlertViewAlertsSummaryWithResponse call
func ParseAlertViewAlertsSummaryResponse(rsp *http.Response) (*AlertViewAlertsSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertViewAlertsSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertViewNumberOfAlertsResponse parses an HTTP response from a AlertViewNumberOfAlertsWithResponse call
func ParseAlertViewNumberOfAlertsResponse(rsp *http.Response) (*AlertViewNumberOfAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertViewNumberOfAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertFilterActionAddAlertFilterResponse parses an HTTP response from a AlertFilterActionAddAlertFilterWithResponse call
func ParseAlertFilterActionAddAlertFilterResponse(rsp *http.Response) (*AlertFilterActionAddAlertFilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertFilterActionAddAlertFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertFilterActionAddGlobalAlertFilterResponse parses an HTTP response from a AlertFilterActionAddGlobalAlertFilterWithResponse call
func ParseAlertFilterActionAddGlobalAlertFilterResponse(rsp *http.Response) (*AlertFilterActionAddGlobalAlertFilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertFilterActionAddGlobalAlertFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertFilterActionApplyAllResponse parses an HTTP response from a AlertFilterActionApplyAllWithResponse call
func ParseAlertFilterActionApplyAllResponse(rsp *http.Response) (*AlertFilterActionApplyAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertFilterActionApplyAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertFilterActionApplyContextResponse parses an HTTP response from a AlertFilterActionApplyContextWithResponse call
func ParseAlertFilterActionApplyContextResponse(rsp *http.Response) (*AlertFilterActionApplyContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertFilterActionApplyContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertFilterActionApplyGlobalResponse parses an HTTP response from a AlertFilterActionApplyGlobalWithResponse call
func ParseAlertFilterActionApplyGlobalResponse(rsp *http.Response) (*AlertFilterActionApplyGlobalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertFilterActionApplyGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertFilterActionRemoveAlertFilterResponse parses an HTTP response from a AlertFilterActionRemoveAlertFilterWithResponse call
func ParseAlertFilterActionRemoveAlertFilterResponse(rsp *http.Response) (*AlertFilterActionRemoveAlertFilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertFilterActionRemoveAlertFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertFilterActionRemoveGlobalAlertFilterResponse parses an HTTP response from a AlertFilterActionRemoveGlobalAlertFilterWithResponse call
func ParseAlertFilterActionRemoveGlobalAlertFilterResponse(rsp *http.Response) (*AlertFilterActionRemoveGlobalAlertFilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertFilterActionRemoveGlobalAlertFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertFilterActionTestAllResponse parses an HTTP response from a AlertFilterActionTestAllWithResponse call
func ParseAlertFilterActionTestAllResponse(rsp *http.Response) (*AlertFilterActionTestAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertFilterActionTestAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertFilterActionTestContextResponse parses an HTTP response from a AlertFilterActionTestContextWithResponse call
func ParseAlertFilterActionTestContextResponse(rsp *http.Response) (*AlertFilterActionTestContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertFilterActionTestContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertFilterActionTestGlobalResponse parses an HTTP response from a AlertFilterActionTestGlobalWithResponse call
func ParseAlertFilterActionTestGlobalResponse(rsp *http.Response) (*AlertFilterActionTestGlobalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertFilterActionTestGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertFilterViewAlertFilterListResponse parses an HTTP response from a AlertFilterViewAlertFilterListWithResponse call
func ParseAlertFilterViewAlertFilterListResponse(rsp *http.Response) (*AlertFilterViewAlertFilterListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertFilterViewAlertFilterListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertFilterViewGlobalAlertFilterListResponse parses an HTTP response from a AlertFilterViewGlobalAlertFilterListWithResponse call
func ParseAlertFilterViewGlobalAlertFilterListResponse(rsp *http.Response) (*AlertFilterViewGlobalAlertFilterListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertFilterViewGlobalAlertFilterListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionAddExcludedParamResponse parses an HTTP response from a AscanActionAddExcludedParamWithResponse call
func ParseAscanActionAddExcludedParamResponse(rsp *http.Response) (*AscanActionAddExcludedParamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionAddExcludedParamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionAddScanPolicyResponse parses an HTTP response from a AscanActionAddScanPolicyWithResponse call
func ParseAscanActionAddScanPolicyResponse(rsp *http.Response) (*AscanActionAddScanPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionAddScanPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionClearExcludedFromScanResponse parses an HTTP response from a AscanActionClearExcludedFromScanWithResponse call
func ParseAscanActionClearExcludedFromScanResponse(rsp *http.Response) (*AscanActionClearExcludedFromScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionClearExcludedFromScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionDisableAllScannersResponse parses an HTTP response from a AscanActionDisableAllScannersWithResponse call
func ParseAscanActionDisableAllScannersResponse(rsp *http.Response) (*AscanActionDisableAllScannersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionDisableAllScannersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionDisableScannersResponse parses an HTTP response from a AscanActionDisableScannersWithResponse call
func ParseAscanActionDisableScannersResponse(rsp *http.Response) (*AscanActionDisableScannersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionDisableScannersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionEnableAllScannersResponse parses an HTTP response from a AscanActionEnableAllScannersWithResponse call
func ParseAscanActionEnableAllScannersResponse(rsp *http.Response) (*AscanActionEnableAllScannersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionEnableAllScannersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionEnableScannersResponse parses an HTTP response from a AscanActionEnableScannersWithResponse call
func ParseAscanActionEnableScannersResponse(rsp *http.Response) (*AscanActionEnableScannersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionEnableScannersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionExcludeFromScanResponse parses an HTTP response from a AscanActionExcludeFromScanWithResponse call
func ParseAscanActionExcludeFromScanResponse(rsp *http.Response) (*AscanActionExcludeFromScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionExcludeFromScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionImportScanPolicyResponse parses an HTTP response from a AscanActionImportScanPolicyWithResponse call
func ParseAscanActionImportScanPolicyResponse(rsp *http.Response) (*AscanActionImportScanPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionImportScanPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionModifyExcludedParamResponse parses an HTTP response from a AscanActionModifyExcludedParamWithResponse call
func ParseAscanActionModifyExcludedParamResponse(rsp *http.Response) (*AscanActionModifyExcludedParamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionModifyExcludedParamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionPauseResponse parses an HTTP response from a AscanActionPauseWithResponse call
func ParseAscanActionPauseResponse(rsp *http.Response) (*AscanActionPauseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionPauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionPauseAllScansResponse parses an HTTP response from a AscanActionPauseAllScansWithResponse call
func ParseAscanActionPauseAllScansResponse(rsp *http.Response) (*AscanActionPauseAllScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionPauseAllScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionRemoveAllScansResponse parses an HTTP response from a AscanActionRemoveAllScansWithResponse call
func ParseAscanActionRemoveAllScansResponse(rsp *http.Response) (*AscanActionRemoveAllScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionRemoveAllScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionRemoveExcludedParamResponse parses an HTTP response from a AscanActionRemoveExcludedParamWithResponse call
func ParseAscanActionRemoveExcludedParamResponse(rsp *http.Response) (*AscanActionRemoveExcludedParamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionRemoveExcludedParamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionRemoveScanResponse parses an HTTP response from a AscanActionRemoveScanWithResponse call
func ParseAscanActionRemoveScanResponse(rsp *http.Response) (*AscanActionRemoveScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionRemoveScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionRemoveScanPolicyResponse parses an HTTP response from a AscanActionRemoveScanPolicyWithResponse call
func ParseAscanActionRemoveScanPolicyResponse(rsp *http.Response) (*AscanActionRemoveScanPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionRemoveScanPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionResumeResponse parses an HTTP response from a AscanActionResumeWithResponse call
func ParseAscanActionResumeResponse(rsp *http.Response) (*AscanActionResumeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionResumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionResumeAllScansResponse parses an HTTP response from a AscanActionResumeAllScansWithResponse call
func ParseAscanActionResumeAllScansResponse(rsp *http.Response) (*AscanActionResumeAllScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionResumeAllScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionScanResponse parses an HTTP response from a AscanActionScanWithResponse call
func ParseAscanActionScanResponse(rsp *http.Response) (*AscanActionScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionScanAsUserResponse parses an HTTP response from a AscanActionScanAsUserWithResponse call
func ParseAscanActionScanAsUserResponse(rsp *http.Response) (*AscanActionScanAsUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionScanAsUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetEnabledPoliciesResponse parses an HTTP response from a AscanActionSetEnabledPoliciesWithResponse call
func ParseAscanActionSetEnabledPoliciesResponse(rsp *http.Response) (*AscanActionSetEnabledPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetEnabledPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionAddQueryParamResponse parses an HTTP response from a AscanActionSetOptionAddQueryParamWithResponse call
func ParseAscanActionSetOptionAddQueryParamResponse(rsp *http.Response) (*AscanActionSetOptionAddQueryParamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionAddQueryParamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionAllowAttackOnStartResponse parses an HTTP response from a AscanActionSetOptionAllowAttackOnStartWithResponse call
func ParseAscanActionSetOptionAllowAttackOnStartResponse(rsp *http.Response) (*AscanActionSetOptionAllowAttackOnStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionAllowAttackOnStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionAttackPolicyResponse parses an HTTP response from a AscanActionSetOptionAttackPolicyWithResponse call
func ParseAscanActionSetOptionAttackPolicyResponse(rsp *http.Response) (*AscanActionSetOptionAttackPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionAttackPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionDefaultPolicyResponse parses an HTTP response from a AscanActionSetOptionDefaultPolicyWithResponse call
func ParseAscanActionSetOptionDefaultPolicyResponse(rsp *http.Response) (*AscanActionSetOptionDefaultPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionDefaultPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionDelayInMsResponse parses an HTTP response from a AscanActionSetOptionDelayInMsWithResponse call
func ParseAscanActionSetOptionDelayInMsResponse(rsp *http.Response) (*AscanActionSetOptionDelayInMsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionDelayInMsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionEncodeCookieValuesResponse parses an HTTP response from a AscanActionSetOptionEncodeCookieValuesWithResponse call
func ParseAscanActionSetOptionEncodeCookieValuesResponse(rsp *http.Response) (*AscanActionSetOptionEncodeCookieValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionEncodeCookieValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionHandleAntiCSRFTokensResponse parses an HTTP response from a AscanActionSetOptionHandleAntiCSRFTokensWithResponse call
func ParseAscanActionSetOptionHandleAntiCSRFTokensResponse(rsp *http.Response) (*AscanActionSetOptionHandleAntiCSRFTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionHandleAntiCSRFTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionHostPerScanResponse parses an HTTP response from a AscanActionSetOptionHostPerScanWithResponse call
func ParseAscanActionSetOptionHostPerScanResponse(rsp *http.Response) (*AscanActionSetOptionHostPerScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionHostPerScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionInjectPluginIdInHeaderResponse parses an HTTP response from a AscanActionSetOptionInjectPluginIdInHeaderWithResponse call
func ParseAscanActionSetOptionInjectPluginIdInHeaderResponse(rsp *http.Response) (*AscanActionSetOptionInjectPluginIdInHeaderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionInjectPluginIdInHeaderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionMaxAlertsPerRuleResponse parses an HTTP response from a AscanActionSetOptionMaxAlertsPerRuleWithResponse call
func ParseAscanActionSetOptionMaxAlertsPerRuleResponse(rsp *http.Response) (*AscanActionSetOptionMaxAlertsPerRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionMaxAlertsPerRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionMaxChartTimeInMinsResponse parses an HTTP response from a AscanActionSetOptionMaxChartTimeInMinsWithResponse call
func ParseAscanActionSetOptionMaxChartTimeInMinsResponse(rsp *http.Response) (*AscanActionSetOptionMaxChartTimeInMinsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionMaxChartTimeInMinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionMaxResultsToListResponse parses an HTTP response from a AscanActionSetOptionMaxResultsToListWithResponse call
func ParseAscanActionSetOptionMaxResultsToListResponse(rsp *http.Response) (*AscanActionSetOptionMaxResultsToListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionMaxResultsToListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionMaxRuleDurationInMinsResponse parses an HTTP response from a AscanActionSetOptionMaxRuleDurationInMinsWithResponse call
func ParseAscanActionSetOptionMaxRuleDurationInMinsResponse(rsp *http.Response) (*AscanActionSetOptionMaxRuleDurationInMinsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionMaxRuleDurationInMinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionMaxScanDurationInMinsResponse parses an HTTP response from a AscanActionSetOptionMaxScanDurationInMinsWithResponse call
func ParseAscanActionSetOptionMaxScanDurationInMinsResponse(rsp *http.Response) (*AscanActionSetOptionMaxScanDurationInMinsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionMaxScanDurationInMinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionMaxScansInUIResponse parses an HTTP response from a AscanActionSetOptionMaxScansInUIWithResponse call
func ParseAscanActionSetOptionMaxScansInUIResponse(rsp *http.Response) (*AscanActionSetOptionMaxScansInUIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionMaxScansInUIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionPromptInAttackModeResponse parses an HTTP response from a AscanActionSetOptionPromptInAttackModeWithResponse call
func ParseAscanActionSetOptionPromptInAttackModeResponse(rsp *http.Response) (*AscanActionSetOptionPromptInAttackModeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionPromptInAttackModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionPromptToClearFinishedScansResponse parses an HTTP response from a AscanActionSetOptionPromptToClearFinishedScansWithResponse call
func ParseAscanActionSetOptionPromptToClearFinishedScansResponse(rsp *http.Response) (*AscanActionSetOptionPromptToClearFinishedScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionPromptToClearFinishedScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionRescanInAttackModeResponse parses an HTTP response from a AscanActionSetOptionRescanInAttackModeWithResponse call
func ParseAscanActionSetOptionRescanInAttackModeResponse(rsp *http.Response) (*AscanActionSetOptionRescanInAttackModeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionRescanInAttackModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionScanHeadersAllRequestsResponse parses an HTTP response from a AscanActionSetOptionScanHeadersAllRequestsWithResponse call
func ParseAscanActionSetOptionScanHeadersAllRequestsResponse(rsp *http.Response) (*AscanActionSetOptionScanHeadersAllRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionScanHeadersAllRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionScanNullJsonValuesResponse parses an HTTP response from a AscanActionSetOptionScanNullJsonValuesWithResponse call
func ParseAscanActionSetOptionScanNullJsonValuesResponse(rsp *http.Response) (*AscanActionSetOptionScanNullJsonValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionScanNullJsonValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionShowAdvancedDialogResponse parses an HTTP response from a AscanActionSetOptionShowAdvancedDialogWithResponse call
func ParseAscanActionSetOptionShowAdvancedDialogResponse(rsp *http.Response) (*AscanActionSetOptionShowAdvancedDialogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionShowAdvancedDialogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionTargetParamsEnabledRPCResponse parses an HTTP response from a AscanActionSetOptionTargetParamsEnabledRPCWithResponse call
func ParseAscanActionSetOptionTargetParamsEnabledRPCResponse(rsp *http.Response) (*AscanActionSetOptionTargetParamsEnabledRPCResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionTargetParamsEnabledRPCResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionTargetParamsInjectableResponse parses an HTTP response from a AscanActionSetOptionTargetParamsInjectableWithResponse call
func ParseAscanActionSetOptionTargetParamsInjectableResponse(rsp *http.Response) (*AscanActionSetOptionTargetParamsInjectableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionTargetParamsInjectableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetOptionThreadPerHostResponse parses an HTTP response from a AscanActionSetOptionThreadPerHostWithResponse call
func ParseAscanActionSetOptionThreadPerHostResponse(rsp *http.Response) (*AscanActionSetOptionThreadPerHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetOptionThreadPerHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetPolicyAlertThresholdResponse parses an HTTP response from a AscanActionSetPolicyAlertThresholdWithResponse call
func ParseAscanActionSetPolicyAlertThresholdResponse(rsp *http.Response) (*AscanActionSetPolicyAlertThresholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetPolicyAlertThresholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetPolicyAttackStrengthResponse parses an HTTP response from a AscanActionSetPolicyAttackStrengthWithResponse call
func ParseAscanActionSetPolicyAttackStrengthResponse(rsp *http.Response) (*AscanActionSetPolicyAttackStrengthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetPolicyAttackStrengthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetScannerAlertThresholdResponse parses an HTTP response from a AscanActionSetScannerAlertThresholdWithResponse call
func ParseAscanActionSetScannerAlertThresholdResponse(rsp *http.Response) (*AscanActionSetScannerAlertThresholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetScannerAlertThresholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSetScannerAttackStrengthResponse parses an HTTP response from a AscanActionSetScannerAttackStrengthWithResponse call
func ParseAscanActionSetScannerAttackStrengthResponse(rsp *http.Response) (*AscanActionSetScannerAttackStrengthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSetScannerAttackStrengthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionSkipScannerResponse parses an HTTP response from a AscanActionSkipScannerWithResponse call
func ParseAscanActionSkipScannerResponse(rsp *http.Response) (*AscanActionSkipScannerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionSkipScannerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionStopResponse parses an HTTP response from a AscanActionStopWithResponse call
func ParseAscanActionStopResponse(rsp *http.Response) (*AscanActionStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionStopAllScansResponse parses an HTTP response from a AscanActionStopAllScansWithResponse call
func ParseAscanActionStopAllScansResponse(rsp *http.Response) (*AscanActionStopAllScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionStopAllScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanActionUpdateScanPolicyResponse parses an HTTP response from a AscanActionUpdateScanPolicyWithResponse call
func ParseAscanActionUpdateScanPolicyResponse(rsp *http.Response) (*AscanActionUpdateScanPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanActionUpdateScanPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewAlertsIdsResponse parses an HTTP response from a AscanViewAlertsIdsWithResponse call
func ParseAscanViewAlertsIdsResponse(rsp *http.Response) (*AscanViewAlertsIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewAlertsIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewAttackModeQueueResponse parses an HTTP response from a AscanViewAttackModeQueueWithResponse call
func ParseAscanViewAttackModeQueueResponse(rsp *http.Response) (*AscanViewAttackModeQueueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewAttackModeQueueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewExcludedFromScanResponse parses an HTTP response from a AscanViewExcludedFromScanWithResponse call
func ParseAscanViewExcludedFromScanResponse(rsp *http.Response) (*AscanViewExcludedFromScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewExcludedFromScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewExcludedParamTypesResponse parses an HTTP response from a AscanViewExcludedParamTypesWithResponse call
func ParseAscanViewExcludedParamTypesResponse(rsp *http.Response) (*AscanViewExcludedParamTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewExcludedParamTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewExcludedParamsResponse parses an HTTP response from a AscanViewExcludedParamsWithResponse call
func ParseAscanViewExcludedParamsResponse(rsp *http.Response) (*AscanViewExcludedParamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewExcludedParamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewMessagesIdsResponse parses an HTTP response from a AscanViewMessagesIdsWithResponse call
func ParseAscanViewMessagesIdsResponse(rsp *http.Response) (*AscanViewMessagesIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewMessagesIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionAddQueryParamResponse parses an HTTP response from a AscanViewOptionAddQueryParamWithResponse call
func ParseAscanViewOptionAddQueryParamResponse(rsp *http.Response) (*AscanViewOptionAddQueryParamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionAddQueryParamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionAllowAttackOnStartResponse parses an HTTP response from a AscanViewOptionAllowAttackOnStartWithResponse call
func ParseAscanViewOptionAllowAttackOnStartResponse(rsp *http.Response) (*AscanViewOptionAllowAttackOnStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionAllowAttackOnStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionAttackPolicyResponse parses an HTTP response from a AscanViewOptionAttackPolicyWithResponse call
func ParseAscanViewOptionAttackPolicyResponse(rsp *http.Response) (*AscanViewOptionAttackPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionAttackPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionDefaultPolicyResponse parses an HTTP response from a AscanViewOptionDefaultPolicyWithResponse call
func ParseAscanViewOptionDefaultPolicyResponse(rsp *http.Response) (*AscanViewOptionDefaultPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionDefaultPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionDelayInMsResponse parses an HTTP response from a AscanViewOptionDelayInMsWithResponse call
func ParseAscanViewOptionDelayInMsResponse(rsp *http.Response) (*AscanViewOptionDelayInMsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionDelayInMsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionEncodeCookieValuesResponse parses an HTTP response from a AscanViewOptionEncodeCookieValuesWithResponse call
func ParseAscanViewOptionEncodeCookieValuesResponse(rsp *http.Response) (*AscanViewOptionEncodeCookieValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionEncodeCookieValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionExcludedParamListResponse parses an HTTP response from a AscanViewOptionExcludedParamListWithResponse call
func ParseAscanViewOptionExcludedParamListResponse(rsp *http.Response) (*AscanViewOptionExcludedParamListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionExcludedParamListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionHandleAntiCSRFTokensResponse parses an HTTP response from a AscanViewOptionHandleAntiCSRFTokensWithResponse call
func ParseAscanViewOptionHandleAntiCSRFTokensResponse(rsp *http.Response) (*AscanViewOptionHandleAntiCSRFTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionHandleAntiCSRFTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionHostPerScanResponse parses an HTTP response from a AscanViewOptionHostPerScanWithResponse call
func ParseAscanViewOptionHostPerScanResponse(rsp *http.Response) (*AscanViewOptionHostPerScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionHostPerScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionInjectPluginIdInHeaderResponse parses an HTTP response from a AscanViewOptionInjectPluginIdInHeaderWithResponse call
func ParseAscanViewOptionInjectPluginIdInHeaderResponse(rsp *http.Response) (*AscanViewOptionInjectPluginIdInHeaderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionInjectPluginIdInHeaderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionMaxAlertsPerRuleResponse parses an HTTP response from a AscanViewOptionMaxAlertsPerRuleWithResponse call
func ParseAscanViewOptionMaxAlertsPerRuleResponse(rsp *http.Response) (*AscanViewOptionMaxAlertsPerRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionMaxAlertsPerRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionMaxChartTimeInMinsResponse parses an HTTP response from a AscanViewOptionMaxChartTimeInMinsWithResponse call
func ParseAscanViewOptionMaxChartTimeInMinsResponse(rsp *http.Response) (*AscanViewOptionMaxChartTimeInMinsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionMaxChartTimeInMinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionMaxResultsToListResponse parses an HTTP response from a AscanViewOptionMaxResultsToListWithResponse call
func ParseAscanViewOptionMaxResultsToListResponse(rsp *http.Response) (*AscanViewOptionMaxResultsToListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionMaxResultsToListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionMaxRuleDurationInMinsResponse parses an HTTP response from a AscanViewOptionMaxRuleDurationInMinsWithResponse call
func ParseAscanViewOptionMaxRuleDurationInMinsResponse(rsp *http.Response) (*AscanViewOptionMaxRuleDurationInMinsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionMaxRuleDurationInMinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionMaxScanDurationInMinsResponse parses an HTTP response from a AscanViewOptionMaxScanDurationInMinsWithResponse call
func ParseAscanViewOptionMaxScanDurationInMinsResponse(rsp *http.Response) (*AscanViewOptionMaxScanDurationInMinsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionMaxScanDurationInMinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionMaxScansInUIResponse parses an HTTP response from a AscanViewOptionMaxScansInUIWithResponse call
func ParseAscanViewOptionMaxScansInUIResponse(rsp *http.Response) (*AscanViewOptionMaxScansInUIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionMaxScansInUIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionPromptInAttackModeResponse parses an HTTP response from a AscanViewOptionPromptInAttackModeWithResponse call
func ParseAscanViewOptionPromptInAttackModeResponse(rsp *http.Response) (*AscanViewOptionPromptInAttackModeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionPromptInAttackModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionPromptToClearFinishedScansResponse parses an HTTP response from a AscanViewOptionPromptToClearFinishedScansWithResponse call
func ParseAscanViewOptionPromptToClearFinishedScansResponse(rsp *http.Response) (*AscanViewOptionPromptToClearFinishedScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionPromptToClearFinishedScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionRescanInAttackModeResponse parses an HTTP response from a AscanViewOptionRescanInAttackModeWithResponse call
func ParseAscanViewOptionRescanInAttackModeResponse(rsp *http.Response) (*AscanViewOptionRescanInAttackModeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionRescanInAttackModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionScanHeadersAllRequestsResponse parses an HTTP response from a AscanViewOptionScanHeadersAllRequestsWithResponse call
func ParseAscanViewOptionScanHeadersAllRequestsResponse(rsp *http.Response) (*AscanViewOptionScanHeadersAllRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionScanHeadersAllRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionScanNullJsonValuesResponse parses an HTTP response from a AscanViewOptionScanNullJsonValuesWithResponse call
func ParseAscanViewOptionScanNullJsonValuesResponse(rsp *http.Response) (*AscanViewOptionScanNullJsonValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionScanNullJsonValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionShowAdvancedDialogResponse parses an HTTP response from a AscanViewOptionShowAdvancedDialogWithResponse call
func ParseAscanViewOptionShowAdvancedDialogResponse(rsp *http.Response) (*AscanViewOptionShowAdvancedDialogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionShowAdvancedDialogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionTargetParamsEnabledRPCResponse parses an HTTP response from a AscanViewOptionTargetParamsEnabledRPCWithResponse call
func ParseAscanViewOptionTargetParamsEnabledRPCResponse(rsp *http.Response) (*AscanViewOptionTargetParamsEnabledRPCResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionTargetParamsEnabledRPCResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionTargetParamsInjectableResponse parses an HTTP response from a AscanViewOptionTargetParamsInjectableWithResponse call
func ParseAscanViewOptionTargetParamsInjectableResponse(rsp *http.Response) (*AscanViewOptionTargetParamsInjectableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionTargetParamsInjectableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewOptionThreadPerHostResponse parses an HTTP response from a AscanViewOptionThreadPerHostWithResponse call
func ParseAscanViewOptionThreadPerHostResponse(rsp *http.Response) (*AscanViewOptionThreadPerHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewOptionThreadPerHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewPoliciesResponse parses an HTTP response from a AscanViewPoliciesWithResponse call
func ParseAscanViewPoliciesResponse(rsp *http.Response) (*AscanViewPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewScanPolicyNamesResponse parses an HTTP response from a AscanViewScanPolicyNamesWithResponse call
func ParseAscanViewScanPolicyNamesResponse(rsp *http.Response) (*AscanViewScanPolicyNamesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewScanPolicyNamesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewScanProgressResponse parses an HTTP response from a AscanViewScanProgressWithResponse call
func ParseAscanViewScanProgressResponse(rsp *http.Response) (*AscanViewScanProgressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewScanProgressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewScannersResponse parses an HTTP response from a AscanViewScannersWithResponse call
func ParseAscanViewScannersResponse(rsp *http.Response) (*AscanViewScannersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewScannersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewScansResponse parses an HTTP response from a AscanViewScansWithResponse call
func ParseAscanViewScansResponse(rsp *http.Response) (*AscanViewScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAscanViewStatusResponse parses an HTTP response from a AscanViewStatusWithResponse call
func ParseAscanViewStatusResponse(rsp *http.Response) (*AscanViewStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AscanViewStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthenticationActionSetAuthenticationMethodResponse parses an HTTP response from a AuthenticationActionSetAuthenticationMethodWithResponse call
func ParseAuthenticationActionSetAuthenticationMethodResponse(rsp *http.Response) (*AuthenticationActionSetAuthenticationMethodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthenticationActionSetAuthenticationMethodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthenticationActionSetLoggedInIndicatorResponse parses an HTTP response from a AuthenticationActionSetLoggedInIndicatorWithResponse call
func ParseAuthenticationActionSetLoggedInIndicatorResponse(rsp *http.Response) (*AuthenticationActionSetLoggedInIndicatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthenticationActionSetLoggedInIndicatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthenticationActionSetLoggedOutIndicatorResponse parses an HTTP response from a AuthenticationActionSetLoggedOutIndicatorWithResponse call
func ParseAuthenticationActionSetLoggedOutIndicatorResponse(rsp *http.Response) (*AuthenticationActionSetLoggedOutIndicatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthenticationActionSetLoggedOutIndicatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthenticationViewGetAuthenticationMethodResponse parses an HTTP response from a AuthenticationViewGetAuthenticationMethodWithResponse call
func ParseAuthenticationViewGetAuthenticationMethodResponse(rsp *http.Response) (*AuthenticationViewGetAuthenticationMethodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthenticationViewGetAuthenticationMethodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthenticationViewGetAuthenticationMethodConfigParamsResponse parses an HTTP response from a AuthenticationViewGetAuthenticationMethodConfigParamsWithResponse call
func ParseAuthenticationViewGetAuthenticationMethodConfigParamsResponse(rsp *http.Response) (*AuthenticationViewGetAuthenticationMethodConfigParamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthenticationViewGetAuthenticationMethodConfigParamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthenticationViewGetLoggedInIndicatorResponse parses an HTTP response from a AuthenticationViewGetLoggedInIndicatorWithResponse call
func ParseAuthenticationViewGetLoggedInIndicatorResponse(rsp *http.Response) (*AuthenticationViewGetLoggedInIndicatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthenticationViewGetLoggedInIndicatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthenticationViewGetLoggedOutIndicatorResponse parses an HTTP response from a AuthenticationViewGetLoggedOutIndicatorWithResponse call
func ParseAuthenticationViewGetLoggedOutIndicatorResponse(rsp *http.Response) (*AuthenticationViewGetLoggedOutIndicatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthenticationViewGetLoggedOutIndicatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthenticationViewGetSupportedAuthenticationMethodsResponse parses an HTTP response from a AuthenticationViewGetSupportedAuthenticationMethodsWithResponse call
func ParseAuthenticationViewGetSupportedAuthenticationMethodsResponse(rsp *http.Response) (*AuthenticationViewGetSupportedAuthenticationMethodsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthenticationViewGetSupportedAuthenticationMethodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthorizationActionSetBasicAuthorizationDetectionMethodResponse parses an HTTP response from a AuthorizationActionSetBasicAuthorizationDetectionMethodWithResponse call
func ParseAuthorizationActionSetBasicAuthorizationDetectionMethodResponse(rsp *http.Response) (*AuthorizationActionSetBasicAuthorizationDetectionMethodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthorizationActionSetBasicAuthorizationDetectionMethodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthorizationViewGetAuthorizationDetectionMethodResponse parses an HTTP response from a AuthorizationViewGetAuthorizationDetectionMethodWithResponse call
func ParseAuthorizationViewGetAuthorizationDetectionMethodResponse(rsp *http.Response) (*AuthorizationViewGetAuthorizationDetectionMethodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthorizationViewGetAuthorizationDetectionMethodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutomationActionEndDelayJobResponse parses an HTTP response from a AutomationActionEndDelayJobWithResponse call
func ParseAutomationActionEndDelayJobResponse(rsp *http.Response) (*AutomationActionEndDelayJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutomationActionEndDelayJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutomationActionRunPlanResponse parses an HTTP response from a AutomationActionRunPlanWithResponse call
func ParseAutomationActionRunPlanResponse(rsp *http.Response) (*AutomationActionRunPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutomationActionRunPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutomationViewPlanProgressResponse parses an HTTP response from a AutomationViewPlanProgressWithResponse call
func ParseAutomationViewPlanProgressResponse(rsp *http.Response) (*AutomationViewPlanProgressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutomationViewPlanProgressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateActionDownloadLatestReleaseResponse parses an HTTP response from a AutoupdateActionDownloadLatestReleaseWithResponse call
func ParseAutoupdateActionDownloadLatestReleaseResponse(rsp *http.Response) (*AutoupdateActionDownloadLatestReleaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateActionDownloadLatestReleaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateActionInstallAddonResponse parses an HTTP response from a AutoupdateActionInstallAddonWithResponse call
func ParseAutoupdateActionInstallAddonResponse(rsp *http.Response) (*AutoupdateActionInstallAddonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateActionInstallAddonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateActionInstallLocalAddonResponse parses an HTTP response from a AutoupdateActionInstallLocalAddonWithResponse call
func ParseAutoupdateActionInstallLocalAddonResponse(rsp *http.Response) (*AutoupdateActionInstallLocalAddonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateActionInstallLocalAddonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateActionSetOptionCheckAddonUpdatesResponse parses an HTTP response from a AutoupdateActionSetOptionCheckAddonUpdatesWithResponse call
func ParseAutoupdateActionSetOptionCheckAddonUpdatesResponse(rsp *http.Response) (*AutoupdateActionSetOptionCheckAddonUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateActionSetOptionCheckAddonUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateActionSetOptionCheckOnStartResponse parses an HTTP response from a AutoupdateActionSetOptionCheckOnStartWithResponse call
func ParseAutoupdateActionSetOptionCheckOnStartResponse(rsp *http.Response) (*AutoupdateActionSetOptionCheckOnStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateActionSetOptionCheckOnStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateActionSetOptionDownloadNewReleaseResponse parses an HTTP response from a AutoupdateActionSetOptionDownloadNewReleaseWithResponse call
func ParseAutoupdateActionSetOptionDownloadNewReleaseResponse(rsp *http.Response) (*AutoupdateActionSetOptionDownloadNewReleaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateActionSetOptionDownloadNewReleaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateActionSetOptionInstallAddonUpdatesResponse parses an HTTP response from a AutoupdateActionSetOptionInstallAddonUpdatesWithResponse call
func ParseAutoupdateActionSetOptionInstallAddonUpdatesResponse(rsp *http.Response) (*AutoupdateActionSetOptionInstallAddonUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateActionSetOptionInstallAddonUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateActionSetOptionInstallScannerRulesResponse parses an HTTP response from a AutoupdateActionSetOptionInstallScannerRulesWithResponse call
func ParseAutoupdateActionSetOptionInstallScannerRulesResponse(rsp *http.Response) (*AutoupdateActionSetOptionInstallScannerRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateActionSetOptionInstallScannerRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateActionSetOptionReportAlphaAddonsResponse parses an HTTP response from a AutoupdateActionSetOptionReportAlphaAddonsWithResponse call
func ParseAutoupdateActionSetOptionReportAlphaAddonsResponse(rsp *http.Response) (*AutoupdateActionSetOptionReportAlphaAddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateActionSetOptionReportAlphaAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateActionSetOptionReportBetaAddonsResponse parses an HTTP response from a AutoupdateActionSetOptionReportBetaAddonsWithResponse call
func ParseAutoupdateActionSetOptionReportBetaAddonsResponse(rsp *http.Response) (*AutoupdateActionSetOptionReportBetaAddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateActionSetOptionReportBetaAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateActionSetOptionReportReleaseAddonsResponse parses an HTTP response from a AutoupdateActionSetOptionReportReleaseAddonsWithResponse call
func ParseAutoupdateActionSetOptionReportReleaseAddonsResponse(rsp *http.Response) (*AutoupdateActionSetOptionReportReleaseAddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateActionSetOptionReportReleaseAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateActionUninstallAddonResponse parses an HTTP response from a AutoupdateActionUninstallAddonWithResponse call
func ParseAutoupdateActionUninstallAddonResponse(rsp *http.Response) (*AutoupdateActionUninstallAddonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateActionUninstallAddonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewInstalledAddonsResponse parses an HTTP response from a AutoupdateViewInstalledAddonsWithResponse call
func ParseAutoupdateViewInstalledAddonsResponse(rsp *http.Response) (*AutoupdateViewInstalledAddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewInstalledAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewIsLatestVersionResponse parses an HTTP response from a AutoupdateViewIsLatestVersionWithResponse call
func ParseAutoupdateViewIsLatestVersionResponse(rsp *http.Response) (*AutoupdateViewIsLatestVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewIsLatestVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewLatestVersionNumberResponse parses an HTTP response from a AutoupdateViewLatestVersionNumberWithResponse call
func ParseAutoupdateViewLatestVersionNumberResponse(rsp *http.Response) (*AutoupdateViewLatestVersionNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewLatestVersionNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewLocalAddonsResponse parses an HTTP response from a AutoupdateViewLocalAddonsWithResponse call
func ParseAutoupdateViewLocalAddonsResponse(rsp *http.Response) (*AutoupdateViewLocalAddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewLocalAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewMarketplaceAddonsResponse parses an HTTP response from a AutoupdateViewMarketplaceAddonsWithResponse call
func ParseAutoupdateViewMarketplaceAddonsResponse(rsp *http.Response) (*AutoupdateViewMarketplaceAddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewMarketplaceAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewNewAddonsResponse parses an HTTP response from a AutoupdateViewNewAddonsWithResponse call
func ParseAutoupdateViewNewAddonsResponse(rsp *http.Response) (*AutoupdateViewNewAddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewNewAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewOptionAddonDirectoriesResponse parses an HTTP response from a AutoupdateViewOptionAddonDirectoriesWithResponse call
func ParseAutoupdateViewOptionAddonDirectoriesResponse(rsp *http.Response) (*AutoupdateViewOptionAddonDirectoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewOptionAddonDirectoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewOptionCheckAddonUpdatesResponse parses an HTTP response from a AutoupdateViewOptionCheckAddonUpdatesWithResponse call
func ParseAutoupdateViewOptionCheckAddonUpdatesResponse(rsp *http.Response) (*AutoupdateViewOptionCheckAddonUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewOptionCheckAddonUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewOptionCheckOnStartResponse parses an HTTP response from a AutoupdateViewOptionCheckOnStartWithResponse call
func ParseAutoupdateViewOptionCheckOnStartResponse(rsp *http.Response) (*AutoupdateViewOptionCheckOnStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewOptionCheckOnStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewOptionDayLastCheckedResponse parses an HTTP response from a AutoupdateViewOptionDayLastCheckedWithResponse call
func ParseAutoupdateViewOptionDayLastCheckedResponse(rsp *http.Response) (*AutoupdateViewOptionDayLastCheckedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewOptionDayLastCheckedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewOptionDayLastInstallWarnedResponse parses an HTTP response from a AutoupdateViewOptionDayLastInstallWarnedWithResponse call
func ParseAutoupdateViewOptionDayLastInstallWarnedResponse(rsp *http.Response) (*AutoupdateViewOptionDayLastInstallWarnedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewOptionDayLastInstallWarnedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewOptionDayLastUpdateWarnedResponse parses an HTTP response from a AutoupdateViewOptionDayLastUpdateWarnedWithResponse call
func ParseAutoupdateViewOptionDayLastUpdateWarnedResponse(rsp *http.Response) (*AutoupdateViewOptionDayLastUpdateWarnedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewOptionDayLastUpdateWarnedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewOptionDownloadDirectoryResponse parses an HTTP response from a AutoupdateViewOptionDownloadDirectoryWithResponse call
func ParseAutoupdateViewOptionDownloadDirectoryResponse(rsp *http.Response) (*AutoupdateViewOptionDownloadDirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewOptionDownloadDirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewOptionDownloadNewReleaseResponse parses an HTTP response from a AutoupdateViewOptionDownloadNewReleaseWithResponse call
func ParseAutoupdateViewOptionDownloadNewReleaseResponse(rsp *http.Response) (*AutoupdateViewOptionDownloadNewReleaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewOptionDownloadNewReleaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewOptionInstallAddonUpdatesResponse parses an HTTP response from a AutoupdateViewOptionInstallAddonUpdatesWithResponse call
func ParseAutoupdateViewOptionInstallAddonUpdatesResponse(rsp *http.Response) (*AutoupdateViewOptionInstallAddonUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewOptionInstallAddonUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewOptionInstallScannerRulesResponse parses an HTTP response from a AutoupdateViewOptionInstallScannerRulesWithResponse call
func ParseAutoupdateViewOptionInstallScannerRulesResponse(rsp *http.Response) (*AutoupdateViewOptionInstallScannerRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewOptionInstallScannerRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewOptionReportAlphaAddonsResponse parses an HTTP response from a AutoupdateViewOptionReportAlphaAddonsWithResponse call
func ParseAutoupdateViewOptionReportAlphaAddonsResponse(rsp *http.Response) (*AutoupdateViewOptionReportAlphaAddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewOptionReportAlphaAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewOptionReportBetaAddonsResponse parses an HTTP response from a AutoupdateViewOptionReportBetaAddonsWithResponse call
func ParseAutoupdateViewOptionReportBetaAddonsResponse(rsp *http.Response) (*AutoupdateViewOptionReportBetaAddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewOptionReportBetaAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewOptionReportReleaseAddonsResponse parses an HTTP response from a AutoupdateViewOptionReportReleaseAddonsWithResponse call
func ParseAutoupdateViewOptionReportReleaseAddonsResponse(rsp *http.Response) (*AutoupdateViewOptionReportReleaseAddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewOptionReportReleaseAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAutoupdateViewUpdatedAddonsResponse parses an HTTP response from a AutoupdateViewUpdatedAddonsWithResponse call
func ParseAutoupdateViewUpdatedAddonsResponse(rsp *http.Response) (*AutoupdateViewUpdatedAddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AutoupdateViewUpdatedAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBreakActionAddHttpBreakpointResponse parses an HTTP response from a BreakActionAddHttpBreakpointWithResponse call
func ParseBreakActionAddHttpBreakpointResponse(rsp *http.Response) (*BreakActionAddHttpBreakpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BreakActionAddHttpBreakpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBreakActionBreakResponse parses an HTTP response from a BreakActionBreakWithResponse call
func ParseBreakActionBreakResponse(rsp *http.Response) (*BreakActionBreakResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BreakActionBreakResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBreakActionContinueResponse parses an HTTP response from a BreakActionContinueWithResponse call
func ParseBreakActionContinueResponse(rsp *http.Response) (*BreakActionContinueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BreakActionContinueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBreakActionDropResponse parses an HTTP response from a BreakActionDropWithResponse call
func ParseBreakActionDropResponse(rsp *http.Response) (*BreakActionDropResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BreakActionDropResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBreakActionRemoveHttpBreakpointResponse parses an HTTP response from a BreakActionRemoveHttpBreakpointWithResponse call
func ParseBreakActionRemoveHttpBreakpointResponse(rsp *http.Response) (*BreakActionRemoveHttpBreakpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BreakActionRemoveHttpBreakpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBreakActionSetHttpMessageResponse parses an HTTP response from a BreakActionSetHttpMessageWithResponse call
func ParseBreakActionSetHttpMessageResponse(rsp *http.Response) (*BreakActionSetHttpMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BreakActionSetHttpMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBreakActionStepResponse parses an HTTP response from a BreakActionStepWithResponse call
func ParseBreakActionStepResponse(rsp *http.Response) (*BreakActionStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BreakActionStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBreakViewHttpMessageResponse parses an HTTP response from a BreakViewHttpMessageWithResponse call
func ParseBreakViewHttpMessageResponse(rsp *http.Response) (*BreakViewHttpMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BreakViewHttpMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBreakViewIsBreakAllResponse parses an HTTP response from a BreakViewIsBreakAllWithResponse call
func ParseBreakViewIsBreakAllResponse(rsp *http.Response) (*BreakViewIsBreakAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BreakViewIsBreakAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBreakViewIsBreakRequestResponse parses an HTTP response from a BreakViewIsBreakRequestWithResponse call
func ParseBreakViewIsBreakRequestResponse(rsp *http.Response) (*BreakViewIsBreakRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BreakViewIsBreakRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBreakViewIsBreakResponseResponse parses an HTTP response from a BreakViewIsBreakResponseWithResponse call
func ParseBreakViewIsBreakResponseResponse(rsp *http.Response) (*BreakViewIsBreakResponseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BreakViewIsBreakResponseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClientActionExportClientMapResponse parses an HTTP response from a ClientActionExportClientMapWithResponse call
func ParseClientActionExportClientMapResponse(rsp *http.Response) (*ClientActionExportClientMapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClientActionExportClientMapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClientActionReportEventResponse parses an HTTP response from a ClientActionReportEventWithResponse call
func ParseClientActionReportEventResponse(rsp *http.Response) (*ClientActionReportEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClientActionReportEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClientActionReportObjectResponse parses an HTTP response from a ClientActionReportObjectWithResponse call
func ParseClientActionReportObjectResponse(rsp *http.Response) (*ClientActionReportObjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClientActionReportObjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClientActionReportZestScriptResponse parses an HTTP response from a ClientActionReportZestScriptWithResponse call
func ParseClientActionReportZestScriptResponse(rsp *http.Response) (*ClientActionReportZestScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClientActionReportZestScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClientActionReportZestStatementResponse parses an HTTP response from a ClientActionReportZestStatementWithResponse call
func ParseClientActionReportZestStatementResponse(rsp *http.Response) (*ClientActionReportZestStatementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClientActionReportZestStatementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClientSpiderActionScanResponse parses an HTTP response from a ClientSpiderActionScanWithResponse call
func ParseClientSpiderActionScanResponse(rsp *http.Response) (*ClientSpiderActionScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClientSpiderActionScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClientSpiderActionStopResponse parses an HTTP response from a ClientSpiderActionStopWithResponse call
func ParseClientSpiderActionStopResponse(rsp *http.Response) (*ClientSpiderActionStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClientSpiderActionStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClientSpiderViewStatusResponse parses an HTTP response from a ClientSpiderViewStatusWithResponse call
func ParseClientSpiderViewStatusResponse(rsp *http.Response) (*ClientSpiderViewStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClientSpiderViewStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextActionExcludeAllContextTechnologiesResponse parses an HTTP response from a ContextActionExcludeAllContextTechnologiesWithResponse call
func ParseContextActionExcludeAllContextTechnologiesResponse(rsp *http.Response) (*ContextActionExcludeAllContextTechnologiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextActionExcludeAllContextTechnologiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextActionExcludeContextTechnologiesResponse parses an HTTP response from a ContextActionExcludeContextTechnologiesWithResponse call
func ParseContextActionExcludeContextTechnologiesResponse(rsp *http.Response) (*ContextActionExcludeContextTechnologiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextActionExcludeContextTechnologiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextActionExcludeFromContextResponse parses an HTTP response from a ContextActionExcludeFromContextWithResponse call
func ParseContextActionExcludeFromContextResponse(rsp *http.Response) (*ContextActionExcludeFromContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextActionExcludeFromContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextActionExportContextResponse parses an HTTP response from a ContextActionExportContextWithResponse call
func ParseContextActionExportContextResponse(rsp *http.Response) (*ContextActionExportContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextActionExportContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextActionImportContextResponse parses an HTTP response from a ContextActionImportContextWithResponse call
func ParseContextActionImportContextResponse(rsp *http.Response) (*ContextActionImportContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextActionImportContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextActionIncludeAllContextTechnologiesResponse parses an HTTP response from a ContextActionIncludeAllContextTechnologiesWithResponse call
func ParseContextActionIncludeAllContextTechnologiesResponse(rsp *http.Response) (*ContextActionIncludeAllContextTechnologiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextActionIncludeAllContextTechnologiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextActionIncludeContextTechnologiesResponse parses an HTTP response from a ContextActionIncludeContextTechnologiesWithResponse call
func ParseContextActionIncludeContextTechnologiesResponse(rsp *http.Response) (*ContextActionIncludeContextTechnologiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextActionIncludeContextTechnologiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextActionIncludeInContextResponse parses an HTTP response from a ContextActionIncludeInContextWithResponse call
func ParseContextActionIncludeInContextResponse(rsp *http.Response) (*ContextActionIncludeInContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextActionIncludeInContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextActionNewContextResponse parses an HTTP response from a ContextActionNewContextWithResponse call
func ParseContextActionNewContextResponse(rsp *http.Response) (*ContextActionNewContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextActionNewContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextActionRemoveContextResponse parses an HTTP response from a ContextActionRemoveContextWithResponse call
func ParseContextActionRemoveContextResponse(rsp *http.Response) (*ContextActionRemoveContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextActionRemoveContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextActionSetContextCheckingStrategyResponse parses an HTTP response from a ContextActionSetContextCheckingStrategyWithResponse call
func ParseContextActionSetContextCheckingStrategyResponse(rsp *http.Response) (*ContextActionSetContextCheckingStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextActionSetContextCheckingStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextActionSetContextInScopeResponse parses an HTTP response from a ContextActionSetContextInScopeWithResponse call
func ParseContextActionSetContextInScopeResponse(rsp *http.Response) (*ContextActionSetContextInScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextActionSetContextInScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextActionSetContextRegexsResponse parses an HTTP response from a ContextActionSetContextRegexsWithResponse call
func ParseContextActionSetContextRegexsResponse(rsp *http.Response) (*ContextActionSetContextRegexsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextActionSetContextRegexsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextViewContextResponse parses an HTTP response from a ContextViewContextWithResponse call
func ParseContextViewContextResponse(rsp *http.Response) (*ContextViewContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextViewContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextViewContextListResponse parses an HTTP response from a ContextViewContextListWithResponse call
func ParseContextViewContextListResponse(rsp *http.Response) (*ContextViewContextListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextViewContextListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextViewExcludeRegexsResponse parses an HTTP response from a ContextViewExcludeRegexsWithResponse call
func ParseContextViewExcludeRegexsResponse(rsp *http.Response) (*ContextViewExcludeRegexsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextViewExcludeRegexsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextViewExcludedTechnologyListResponse parses an HTTP response from a ContextViewExcludedTechnologyListWithResponse call
func ParseContextViewExcludedTechnologyListResponse(rsp *http.Response) (*ContextViewExcludedTechnologyListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextViewExcludedTechnologyListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextViewIncludeRegexsResponse parses an HTTP response from a ContextViewIncludeRegexsWithResponse call
func ParseContextViewIncludeRegexsResponse(rsp *http.Response) (*ContextViewIncludeRegexsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextViewIncludeRegexsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextViewIncludedTechnologyListResponse parses an HTTP response from a ContextViewIncludedTechnologyListWithResponse call
func ParseContextViewIncludedTechnologyListResponse(rsp *http.Response) (*ContextViewIncludedTechnologyListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextViewIncludedTechnologyListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextViewTechnologyListResponse parses an HTTP response from a ContextViewTechnologyListWithResponse call
func ParseContextViewTechnologyListResponse(rsp *http.Response) (*ContextViewTechnologyListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextViewTechnologyListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextViewUrlsResponse parses an HTTP response from a ContextViewUrlsWithResponse call
func ParseContextViewUrlsResponse(rsp *http.Response) (*ContextViewUrlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextViewUrlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionAccessUrlResponse parses an HTTP response from a CoreActionAccessUrlWithResponse call
func ParseCoreActionAccessUrlResponse(rsp *http.Response) (*CoreActionAccessUrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionAccessUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionAddProxyChainExcludedDomainResponse parses an HTTP response from a CoreActionAddProxyChainExcludedDomainWithResponse call
func ParseCoreActionAddProxyChainExcludedDomainResponse(rsp *http.Response) (*CoreActionAddProxyChainExcludedDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionAddProxyChainExcludedDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionClearExcludedFromProxyResponse parses an HTTP response from a CoreActionClearExcludedFromProxyWithResponse call
func ParseCoreActionClearExcludedFromProxyResponse(rsp *http.Response) (*CoreActionClearExcludedFromProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionClearExcludedFromProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionCreateSbomZipResponse parses an HTTP response from a CoreActionCreateSbomZipWithResponse call
func ParseCoreActionCreateSbomZipResponse(rsp *http.Response) (*CoreActionCreateSbomZipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionCreateSbomZipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionDeleteAlertResponse parses an HTTP response from a CoreActionDeleteAlertWithResponse call
func ParseCoreActionDeleteAlertResponse(rsp *http.Response) (*CoreActionDeleteAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionDeleteAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionDeleteAllAlertsResponse parses an HTTP response from a CoreActionDeleteAllAlertsWithResponse call
func ParseCoreActionDeleteAllAlertsResponse(rsp *http.Response) (*CoreActionDeleteAllAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionDeleteAllAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionDeleteSiteNodeResponse parses an HTTP response from a CoreActionDeleteSiteNodeWithResponse call
func ParseCoreActionDeleteSiteNodeResponse(rsp *http.Response) (*CoreActionDeleteSiteNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionDeleteSiteNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionDisableAllProxyChainExcludedDomainsResponse parses an HTTP response from a CoreActionDisableAllProxyChainExcludedDomainsWithResponse call
func ParseCoreActionDisableAllProxyChainExcludedDomainsResponse(rsp *http.Response) (*CoreActionDisableAllProxyChainExcludedDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionDisableAllProxyChainExcludedDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionDisableClientCertificateResponse parses an HTTP response from a CoreActionDisableClientCertificateWithResponse call
func ParseCoreActionDisableClientCertificateResponse(rsp *http.Response) (*CoreActionDisableClientCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionDisableClientCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionEnableAllProxyChainExcludedDomainsResponse parses an HTTP response from a CoreActionEnableAllProxyChainExcludedDomainsWithResponse call
func ParseCoreActionEnableAllProxyChainExcludedDomainsResponse(rsp *http.Response) (*CoreActionEnableAllProxyChainExcludedDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionEnableAllProxyChainExcludedDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionEnablePKCS12ClientCertificateResponse parses an HTTP response from a CoreActionEnablePKCS12ClientCertificateWithResponse call
func ParseCoreActionEnablePKCS12ClientCertificateResponse(rsp *http.Response) (*CoreActionEnablePKCS12ClientCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionEnablePKCS12ClientCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionExcludeFromProxyResponse parses an HTTP response from a CoreActionExcludeFromProxyWithResponse call
func ParseCoreActionExcludeFromProxyResponse(rsp *http.Response) (*CoreActionExcludeFromProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionExcludeFromProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionGenerateRootCAResponse parses an HTTP response from a CoreActionGenerateRootCAWithResponse call
func ParseCoreActionGenerateRootCAResponse(rsp *http.Response) (*CoreActionGenerateRootCAResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionGenerateRootCAResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionLoadSessionResponse parses an HTTP response from a CoreActionLoadSessionWithResponse call
func ParseCoreActionLoadSessionResponse(rsp *http.Response) (*CoreActionLoadSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionLoadSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionModifyProxyChainExcludedDomainResponse parses an HTTP response from a CoreActionModifyProxyChainExcludedDomainWithResponse call
func ParseCoreActionModifyProxyChainExcludedDomainResponse(rsp *http.Response) (*CoreActionModifyProxyChainExcludedDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionModifyProxyChainExcludedDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionNewSessionResponse parses an HTTP response from a CoreActionNewSessionWithResponse call
func ParseCoreActionNewSessionResponse(rsp *http.Response) (*CoreActionNewSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionNewSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionRemoveProxyChainExcludedDomainResponse parses an HTTP response from a CoreActionRemoveProxyChainExcludedDomainWithResponse call
func ParseCoreActionRemoveProxyChainExcludedDomainResponse(rsp *http.Response) (*CoreActionRemoveProxyChainExcludedDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionRemoveProxyChainExcludedDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionRunGarbageCollectionResponse parses an HTTP response from a CoreActionRunGarbageCollectionWithResponse call
func ParseCoreActionRunGarbageCollectionResponse(rsp *http.Response) (*CoreActionRunGarbageCollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionRunGarbageCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSaveSessionResponse parses an HTTP response from a CoreActionSaveSessionWithResponse call
func ParseCoreActionSaveSessionResponse(rsp *http.Response) (*CoreActionSaveSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSaveSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSendRequestResponse parses an HTTP response from a CoreActionSendRequestWithResponse call
func ParseCoreActionSendRequestResponse(rsp *http.Response) (*CoreActionSendRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSendRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetHomeDirectoryResponse parses an HTTP response from a CoreActionSetHomeDirectoryWithResponse call
func ParseCoreActionSetHomeDirectoryResponse(rsp *http.Response) (*CoreActionSetHomeDirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetHomeDirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetLogLevelResponse parses an HTTP response from a CoreActionSetLogLevelWithResponse call
func ParseCoreActionSetLogLevelResponse(rsp *http.Response) (*CoreActionSetLogLevelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetLogLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetModeResponse parses an HTTP response from a CoreActionSetModeWithResponse call
func ParseCoreActionSetModeResponse(rsp *http.Response) (*CoreActionSetModeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionAlertOverridesFilePathResponse parses an HTTP response from a CoreActionSetOptionAlertOverridesFilePathWithResponse call
func ParseCoreActionSetOptionAlertOverridesFilePathResponse(rsp *http.Response) (*CoreActionSetOptionAlertOverridesFilePathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionAlertOverridesFilePathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionDefaultUserAgentResponse parses an HTTP response from a CoreActionSetOptionDefaultUserAgentWithResponse call
func ParseCoreActionSetOptionDefaultUserAgentResponse(rsp *http.Response) (*CoreActionSetOptionDefaultUserAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionDefaultUserAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionDnsTtlSuccessfulQueriesResponse parses an HTTP response from a CoreActionSetOptionDnsTtlSuccessfulQueriesWithResponse call
func ParseCoreActionSetOptionDnsTtlSuccessfulQueriesResponse(rsp *http.Response) (*CoreActionSetOptionDnsTtlSuccessfulQueriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionDnsTtlSuccessfulQueriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionHttpStateEnabledResponse parses an HTTP response from a CoreActionSetOptionHttpStateEnabledWithResponse call
func ParseCoreActionSetOptionHttpStateEnabledResponse(rsp *http.Response) (*CoreActionSetOptionHttpStateEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionHttpStateEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionMaximumAlertInstancesResponse parses an HTTP response from a CoreActionSetOptionMaximumAlertInstancesWithResponse call
func ParseCoreActionSetOptionMaximumAlertInstancesResponse(rsp *http.Response) (*CoreActionSetOptionMaximumAlertInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionMaximumAlertInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionMergeRelatedAlertsResponse parses an HTTP response from a CoreActionSetOptionMergeRelatedAlertsWithResponse call
func ParseCoreActionSetOptionMergeRelatedAlertsResponse(rsp *http.Response) (*CoreActionSetOptionMergeRelatedAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionMergeRelatedAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionProxyChainNameResponse parses an HTTP response from a CoreActionSetOptionProxyChainNameWithResponse call
func ParseCoreActionSetOptionProxyChainNameResponse(rsp *http.Response) (*CoreActionSetOptionProxyChainNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionProxyChainNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionProxyChainPasswordResponse parses an HTTP response from a CoreActionSetOptionProxyChainPasswordWithResponse call
func ParseCoreActionSetOptionProxyChainPasswordResponse(rsp *http.Response) (*CoreActionSetOptionProxyChainPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionProxyChainPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionProxyChainPortResponse parses an HTTP response from a CoreActionSetOptionProxyChainPortWithResponse call
func ParseCoreActionSetOptionProxyChainPortResponse(rsp *http.Response) (*CoreActionSetOptionProxyChainPortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionProxyChainPortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionProxyChainPromptResponse parses an HTTP response from a CoreActionSetOptionProxyChainPromptWithResponse call
func ParseCoreActionSetOptionProxyChainPromptResponse(rsp *http.Response) (*CoreActionSetOptionProxyChainPromptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionProxyChainPromptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionProxyChainRealmResponse parses an HTTP response from a CoreActionSetOptionProxyChainRealmWithResponse call
func ParseCoreActionSetOptionProxyChainRealmResponse(rsp *http.Response) (*CoreActionSetOptionProxyChainRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionProxyChainRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionProxyChainSkipNameResponse parses an HTTP response from a CoreActionSetOptionProxyChainSkipNameWithResponse call
func ParseCoreActionSetOptionProxyChainSkipNameResponse(rsp *http.Response) (*CoreActionSetOptionProxyChainSkipNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionProxyChainSkipNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionProxyChainUserNameResponse parses an HTTP response from a CoreActionSetOptionProxyChainUserNameWithResponse call
func ParseCoreActionSetOptionProxyChainUserNameResponse(rsp *http.Response) (*CoreActionSetOptionProxyChainUserNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionProxyChainUserNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionSingleCookieRequestHeaderResponse parses an HTTP response from a CoreActionSetOptionSingleCookieRequestHeaderWithResponse call
func ParseCoreActionSetOptionSingleCookieRequestHeaderResponse(rsp *http.Response) (*CoreActionSetOptionSingleCookieRequestHeaderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionSingleCookieRequestHeaderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionTimeoutInSecsResponse parses an HTTP response from a CoreActionSetOptionTimeoutInSecsWithResponse call
func ParseCoreActionSetOptionTimeoutInSecsResponse(rsp *http.Response) (*CoreActionSetOptionTimeoutInSecsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionTimeoutInSecsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionUseProxyChainResponse parses an HTTP response from a CoreActionSetOptionUseProxyChainWithResponse call
func ParseCoreActionSetOptionUseProxyChainResponse(rsp *http.Response) (*CoreActionSetOptionUseProxyChainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionUseProxyChainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionUseProxyChainAuthResponse parses an HTTP response from a CoreActionSetOptionUseProxyChainAuthWithResponse call
func ParseCoreActionSetOptionUseProxyChainAuthResponse(rsp *http.Response) (*CoreActionSetOptionUseProxyChainAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionUseProxyChainAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSetOptionUseSocksProxyResponse parses an HTTP response from a CoreActionSetOptionUseSocksProxyWithResponse call
func ParseCoreActionSetOptionUseSocksProxyResponse(rsp *http.Response) (*CoreActionSetOptionUseSocksProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSetOptionUseSocksProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionShutdownResponse parses an HTTP response from a CoreActionShutdownWithResponse call
func ParseCoreActionShutdownResponse(rsp *http.Response) (*CoreActionShutdownResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionShutdownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreActionSnapshotSessionResponse parses an HTTP response from a CoreActionSnapshotSessionWithResponse call
func ParseCoreActionSnapshotSessionResponse(rsp *http.Response) (*CoreActionSnapshotSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreActionSnapshotSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewAlertResponse parses an HTTP response from a CoreViewAlertWithResponse call
func ParseCoreViewAlertResponse(rsp *http.Response) (*CoreViewAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewAlertsResponse parses an HTTP response from a CoreViewAlertsWithResponse call
func ParseCoreViewAlertsResponse(rsp *http.Response) (*CoreViewAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewAlertsSummaryResponse parses an HTTP response from a CoreViewAlertsSummaryWithResponse call
func ParseCoreViewAlertsSummaryResponse(rsp *http.Response) (*CoreViewAlertsSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewAlertsSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewChildNodesResponse parses an HTTP response from a CoreViewChildNodesWithResponse call
func ParseCoreViewChildNodesResponse(rsp *http.Response) (*CoreViewChildNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewChildNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewExcludedFromProxyResponse parses an HTTP response from a CoreViewExcludedFromProxyWithResponse call
func ParseCoreViewExcludedFromProxyResponse(rsp *http.Response) (*CoreViewExcludedFromProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewExcludedFromProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewGetLogLevelResponse parses an HTTP response from a CoreViewGetLogLevelWithResponse call
func ParseCoreViewGetLogLevelResponse(rsp *http.Response) (*CoreViewGetLogLevelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewGetLogLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewHomeDirectoryResponse parses an HTTP response from a CoreViewHomeDirectoryWithResponse call
func ParseCoreViewHomeDirectoryResponse(rsp *http.Response) (*CoreViewHomeDirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewHomeDirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewHostsResponse parses an HTTP response from a CoreViewHostsWithResponse call
func ParseCoreViewHostsResponse(rsp *http.Response) (*CoreViewHostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewMessageResponse parses an HTTP response from a CoreViewMessageWithResponse call
func ParseCoreViewMessageResponse(rsp *http.Response) (*CoreViewMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewMessagesResponse parses an HTTP response from a CoreViewMessagesWithResponse call
func ParseCoreViewMessagesResponse(rsp *http.Response) (*CoreViewMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewMessagesByIdResponse parses an HTTP response from a CoreViewMessagesByIdWithResponse call
func ParseCoreViewMessagesByIdResponse(rsp *http.Response) (*CoreViewMessagesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewMessagesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewModeResponse parses an HTTP response from a CoreViewModeWithResponse call
func ParseCoreViewModeResponse(rsp *http.Response) (*CoreViewModeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewNumberOfAlertsResponse parses an HTTP response from a CoreViewNumberOfAlertsWithResponse call
func ParseCoreViewNumberOfAlertsResponse(rsp *http.Response) (*CoreViewNumberOfAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewNumberOfAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewNumberOfMessagesResponse parses an HTTP response from a CoreViewNumberOfMessagesWithResponse call
func ParseCoreViewNumberOfMessagesResponse(rsp *http.Response) (*CoreViewNumberOfMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewNumberOfMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionAlertOverridesFilePathResponse parses an HTTP response from a CoreViewOptionAlertOverridesFilePathWithResponse call
func ParseCoreViewOptionAlertOverridesFilePathResponse(rsp *http.Response) (*CoreViewOptionAlertOverridesFilePathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionAlertOverridesFilePathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionDefaultUserAgentResponse parses an HTTP response from a CoreViewOptionDefaultUserAgentWithResponse call
func ParseCoreViewOptionDefaultUserAgentResponse(rsp *http.Response) (*CoreViewOptionDefaultUserAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionDefaultUserAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionDnsTtlSuccessfulQueriesResponse parses an HTTP response from a CoreViewOptionDnsTtlSuccessfulQueriesWithResponse call
func ParseCoreViewOptionDnsTtlSuccessfulQueriesResponse(rsp *http.Response) (*CoreViewOptionDnsTtlSuccessfulQueriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionDnsTtlSuccessfulQueriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionHttpStateResponse parses an HTTP response from a CoreViewOptionHttpStateWithResponse call
func ParseCoreViewOptionHttpStateResponse(rsp *http.Response) (*CoreViewOptionHttpStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionHttpStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionHttpStateEnabledResponse parses an HTTP response from a CoreViewOptionHttpStateEnabledWithResponse call
func ParseCoreViewOptionHttpStateEnabledResponse(rsp *http.Response) (*CoreViewOptionHttpStateEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionHttpStateEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionMaximumAlertInstancesResponse parses an HTTP response from a CoreViewOptionMaximumAlertInstancesWithResponse call
func ParseCoreViewOptionMaximumAlertInstancesResponse(rsp *http.Response) (*CoreViewOptionMaximumAlertInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionMaximumAlertInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionMergeRelatedAlertsResponse parses an HTTP response from a CoreViewOptionMergeRelatedAlertsWithResponse call
func ParseCoreViewOptionMergeRelatedAlertsResponse(rsp *http.Response) (*CoreViewOptionMergeRelatedAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionMergeRelatedAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionProxyChainNameResponse parses an HTTP response from a CoreViewOptionProxyChainNameWithResponse call
func ParseCoreViewOptionProxyChainNameResponse(rsp *http.Response) (*CoreViewOptionProxyChainNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionProxyChainNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionProxyChainPasswordResponse parses an HTTP response from a CoreViewOptionProxyChainPasswordWithResponse call
func ParseCoreViewOptionProxyChainPasswordResponse(rsp *http.Response) (*CoreViewOptionProxyChainPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionProxyChainPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionProxyChainPortResponse parses an HTTP response from a CoreViewOptionProxyChainPortWithResponse call
func ParseCoreViewOptionProxyChainPortResponse(rsp *http.Response) (*CoreViewOptionProxyChainPortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionProxyChainPortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionProxyChainPromptResponse parses an HTTP response from a CoreViewOptionProxyChainPromptWithResponse call
func ParseCoreViewOptionProxyChainPromptResponse(rsp *http.Response) (*CoreViewOptionProxyChainPromptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionProxyChainPromptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionProxyChainRealmResponse parses an HTTP response from a CoreViewOptionProxyChainRealmWithResponse call
func ParseCoreViewOptionProxyChainRealmResponse(rsp *http.Response) (*CoreViewOptionProxyChainRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionProxyChainRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionProxyChainSkipNameResponse parses an HTTP response from a CoreViewOptionProxyChainSkipNameWithResponse call
func ParseCoreViewOptionProxyChainSkipNameResponse(rsp *http.Response) (*CoreViewOptionProxyChainSkipNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionProxyChainSkipNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionProxyChainUserNameResponse parses an HTTP response from a CoreViewOptionProxyChainUserNameWithResponse call
func ParseCoreViewOptionProxyChainUserNameResponse(rsp *http.Response) (*CoreViewOptionProxyChainUserNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionProxyChainUserNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionProxyExcludedDomainsResponse parses an HTTP response from a CoreViewOptionProxyExcludedDomainsWithResponse call
func ParseCoreViewOptionProxyExcludedDomainsResponse(rsp *http.Response) (*CoreViewOptionProxyExcludedDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionProxyExcludedDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionProxyExcludedDomainsEnabledResponse parses an HTTP response from a CoreViewOptionProxyExcludedDomainsEnabledWithResponse call
func ParseCoreViewOptionProxyExcludedDomainsEnabledResponse(rsp *http.Response) (*CoreViewOptionProxyExcludedDomainsEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionProxyExcludedDomainsEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionSingleCookieRequestHeaderResponse parses an HTTP response from a CoreViewOptionSingleCookieRequestHeaderWithResponse call
func ParseCoreViewOptionSingleCookieRequestHeaderResponse(rsp *http.Response) (*CoreViewOptionSingleCookieRequestHeaderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionSingleCookieRequestHeaderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionTimeoutInSecsResponse parses an HTTP response from a CoreViewOptionTimeoutInSecsWithResponse call
func ParseCoreViewOptionTimeoutInSecsResponse(rsp *http.Response) (*CoreViewOptionTimeoutInSecsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionTimeoutInSecsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionUseProxyChainResponse parses an HTTP response from a CoreViewOptionUseProxyChainWithResponse call
func ParseCoreViewOptionUseProxyChainResponse(rsp *http.Response) (*CoreViewOptionUseProxyChainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionUseProxyChainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionUseProxyChainAuthResponse parses an HTTP response from a CoreViewOptionUseProxyChainAuthWithResponse call
func ParseCoreViewOptionUseProxyChainAuthResponse(rsp *http.Response) (*CoreViewOptionUseProxyChainAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionUseProxyChainAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewOptionUseSocksProxyResponse parses an HTTP response from a CoreViewOptionUseSocksProxyWithResponse call
func ParseCoreViewOptionUseSocksProxyResponse(rsp *http.Response) (*CoreViewOptionUseSocksProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewOptionUseSocksProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewProxyChainExcludedDomainsResponse parses an HTTP response from a CoreViewProxyChainExcludedDomainsWithResponse call
func ParseCoreViewProxyChainExcludedDomainsResponse(rsp *http.Response) (*CoreViewProxyChainExcludedDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewProxyChainExcludedDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewSessionLocationResponse parses an HTTP response from a CoreViewSessionLocationWithResponse call
func ParseCoreViewSessionLocationResponse(rsp *http.Response) (*CoreViewSessionLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewSessionLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewSitesResponse parses an HTTP response from a CoreViewSitesWithResponse call
func ParseCoreViewSitesResponse(rsp *http.Response) (*CoreViewSitesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewSitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewUrlsResponse parses an HTTP response from a CoreViewUrlsWithResponse call
func ParseCoreViewUrlsResponse(rsp *http.Response) (*CoreViewUrlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewUrlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewVersionResponse parses an HTTP response from a CoreViewVersionWithResponse call
func ParseCoreViewVersionResponse(rsp *http.Response) (*CoreViewVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCoreViewZapHomePathResponse parses an HTTP response from a CoreViewZapHomePathWithResponse call
func ParseCoreViewZapHomePathResponse(rsp *http.Response) (*CoreViewZapHomePathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreViewZapHomePathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustompayloadsActionAddCustomPayloadResponse parses an HTTP response from a CustompayloadsActionAddCustomPayloadWithResponse call
func ParseCustompayloadsActionAddCustomPayloadResponse(rsp *http.Response) (*CustompayloadsActionAddCustomPayloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustompayloadsActionAddCustomPayloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustompayloadsActionDisableCustomPayloadResponse parses an HTTP response from a CustompayloadsActionDisableCustomPayloadWithResponse call
func ParseCustompayloadsActionDisableCustomPayloadResponse(rsp *http.Response) (*CustompayloadsActionDisableCustomPayloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustompayloadsActionDisableCustomPayloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustompayloadsActionDisableCustomPayloadsResponse parses an HTTP response from a CustompayloadsActionDisableCustomPayloadsWithResponse call
func ParseCustompayloadsActionDisableCustomPayloadsResponse(rsp *http.Response) (*CustompayloadsActionDisableCustomPayloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustompayloadsActionDisableCustomPayloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustompayloadsActionEnableCustomPayloadResponse parses an HTTP response from a CustompayloadsActionEnableCustomPayloadWithResponse call
func ParseCustompayloadsActionEnableCustomPayloadResponse(rsp *http.Response) (*CustompayloadsActionEnableCustomPayloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustompayloadsActionEnableCustomPayloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustompayloadsActionEnableCustomPayloadsResponse parses an HTTP response from a CustompayloadsActionEnableCustomPayloadsWithResponse call
func ParseCustompayloadsActionEnableCustomPayloadsResponse(rsp *http.Response) (*CustompayloadsActionEnableCustomPayloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustompayloadsActionEnableCustomPayloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustompayloadsActionRemoveCustomPayloadResponse parses an HTTP response from a CustompayloadsActionRemoveCustomPayloadWithResponse call
func ParseCustompayloadsActionRemoveCustomPayloadResponse(rsp *http.Response) (*CustompayloadsActionRemoveCustomPayloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustompayloadsActionRemoveCustomPayloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustompayloadsViewCustomPayloadsResponse parses an HTTP response from a CustompayloadsViewCustomPayloadsWithResponse call
func ParseCustompayloadsViewCustomPayloadsResponse(rsp *http.Response) (*CustompayloadsViewCustomPayloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustompayloadsViewCustomPayloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustompayloadsViewCustomPayloadsCategoriesResponse parses an HTTP response from a CustompayloadsViewCustomPayloadsCategoriesWithResponse call
func ParseCustompayloadsViewCustomPayloadsCategoriesResponse(rsp *http.Response) (*CustompayloadsViewCustomPayloadsCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustompayloadsViewCustomPayloadsCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEximActionExportSitesTreeResponse parses an HTTP response from a EximActionExportSitesTreeWithResponse call
func ParseEximActionExportSitesTreeResponse(rsp *http.Response) (*EximActionExportSitesTreeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EximActionExportSitesTreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEximActionImportHarResponse parses an HTTP response from a EximActionImportHarWithResponse call
func ParseEximActionImportHarResponse(rsp *http.Response) (*EximActionImportHarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EximActionImportHarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEximActionImportModsec2LogsResponse parses an HTTP response from a EximActionImportModsec2LogsWithResponse call
func ParseEximActionImportModsec2LogsResponse(rsp *http.Response) (*EximActionImportModsec2LogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EximActionImportModsec2LogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEximActionImportUrlsResponse parses an HTTP response from a EximActionImportUrlsWithResponse call
func ParseEximActionImportUrlsResponse(rsp *http.Response) (*EximActionImportUrlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EximActionImportUrlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEximActionImportZapLogsResponse parses an HTTP response from a EximActionImportZapLogsWithResponse call
func ParseEximActionImportZapLogsResponse(rsp *http.Response) (*EximActionImportZapLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EximActionImportZapLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEximActionPruneSitesTreeResponse parses an HTTP response from a EximActionPruneSitesTreeWithResponse call
func ParseEximActionPruneSitesTreeResponse(rsp *http.Response) (*EximActionPruneSitesTreeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EximActionPruneSitesTreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseForcedUserActionSetForcedUserResponse parses an HTTP response from a ForcedUserActionSetForcedUserWithResponse call
func ParseForcedUserActionSetForcedUserResponse(rsp *http.Response) (*ForcedUserActionSetForcedUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ForcedUserActionSetForcedUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseForcedUserActionSetForcedUserModeEnabledResponse parses an HTTP response from a ForcedUserActionSetForcedUserModeEnabledWithResponse call
func ParseForcedUserActionSetForcedUserModeEnabledResponse(rsp *http.Response) (*ForcedUserActionSetForcedUserModeEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ForcedUserActionSetForcedUserModeEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseForcedUserViewGetForcedUserResponse parses an HTTP response from a ForcedUserViewGetForcedUserWithResponse call
func ParseForcedUserViewGetForcedUserResponse(rsp *http.Response) (*ForcedUserViewGetForcedUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ForcedUserViewGetForcedUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseForcedUserViewIsForcedUserModeEnabledResponse parses an HTTP response from a ForcedUserViewIsForcedUserModeEnabledWithResponse call
func ParseForcedUserViewIsForcedUserModeEnabledResponse(rsp *http.Response) (*ForcedUserViewIsForcedUserModeEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ForcedUserViewIsForcedUserModeEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlActionImportFileResponse parses an HTTP response from a GraphqlActionImportFileWithResponse call
func ParseGraphqlActionImportFileResponse(rsp *http.Response) (*GraphqlActionImportFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlActionImportFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlActionImportUrlResponse parses an HTTP response from a GraphqlActionImportUrlWithResponse call
func ParseGraphqlActionImportUrlResponse(rsp *http.Response) (*GraphqlActionImportUrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlActionImportUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlActionSetOptionArgsTypeResponse parses an HTTP response from a GraphqlActionSetOptionArgsTypeWithResponse call
func ParseGraphqlActionSetOptionArgsTypeResponse(rsp *http.Response) (*GraphqlActionSetOptionArgsTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlActionSetOptionArgsTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlActionSetOptionLenientMaxQueryDepthEnabledResponse parses an HTTP response from a GraphqlActionSetOptionLenientMaxQueryDepthEnabledWithResponse call
func ParseGraphqlActionSetOptionLenientMaxQueryDepthEnabledResponse(rsp *http.Response) (*GraphqlActionSetOptionLenientMaxQueryDepthEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlActionSetOptionLenientMaxQueryDepthEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlActionSetOptionMaxAdditionalQueryDepthResponse parses an HTTP response from a GraphqlActionSetOptionMaxAdditionalQueryDepthWithResponse call
func ParseGraphqlActionSetOptionMaxAdditionalQueryDepthResponse(rsp *http.Response) (*GraphqlActionSetOptionMaxAdditionalQueryDepthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlActionSetOptionMaxAdditionalQueryDepthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlActionSetOptionMaxArgsDepthResponse parses an HTTP response from a GraphqlActionSetOptionMaxArgsDepthWithResponse call
func ParseGraphqlActionSetOptionMaxArgsDepthResponse(rsp *http.Response) (*GraphqlActionSetOptionMaxArgsDepthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlActionSetOptionMaxArgsDepthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlActionSetOptionMaxQueryDepthResponse parses an HTTP response from a GraphqlActionSetOptionMaxQueryDepthWithResponse call
func ParseGraphqlActionSetOptionMaxQueryDepthResponse(rsp *http.Response) (*GraphqlActionSetOptionMaxQueryDepthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlActionSetOptionMaxQueryDepthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlActionSetOptionOptionalArgsEnabledResponse parses an HTTP response from a GraphqlActionSetOptionOptionalArgsEnabledWithResponse call
func ParseGraphqlActionSetOptionOptionalArgsEnabledResponse(rsp *http.Response) (*GraphqlActionSetOptionOptionalArgsEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlActionSetOptionOptionalArgsEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlActionSetOptionQueryGenEnabledResponse parses an HTTP response from a GraphqlActionSetOptionQueryGenEnabledWithResponse call
func ParseGraphqlActionSetOptionQueryGenEnabledResponse(rsp *http.Response) (*GraphqlActionSetOptionQueryGenEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlActionSetOptionQueryGenEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlActionSetOptionQuerySplitTypeResponse parses an HTTP response from a GraphqlActionSetOptionQuerySplitTypeWithResponse call
func ParseGraphqlActionSetOptionQuerySplitTypeResponse(rsp *http.Response) (*GraphqlActionSetOptionQuerySplitTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlActionSetOptionQuerySplitTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlActionSetOptionRequestMethodResponse parses an HTTP response from a GraphqlActionSetOptionRequestMethodWithResponse call
func ParseGraphqlActionSetOptionRequestMethodResponse(rsp *http.Response) (*GraphqlActionSetOptionRequestMethodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlActionSetOptionRequestMethodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlViewOptionArgsTypeResponse parses an HTTP response from a GraphqlViewOptionArgsTypeWithResponse call
func ParseGraphqlViewOptionArgsTypeResponse(rsp *http.Response) (*GraphqlViewOptionArgsTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlViewOptionArgsTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlViewOptionLenientMaxQueryDepthEnabledResponse parses an HTTP response from a GraphqlViewOptionLenientMaxQueryDepthEnabledWithResponse call
func ParseGraphqlViewOptionLenientMaxQueryDepthEnabledResponse(rsp *http.Response) (*GraphqlViewOptionLenientMaxQueryDepthEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlViewOptionLenientMaxQueryDepthEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlViewOptionMaxAdditionalQueryDepthResponse parses an HTTP response from a GraphqlViewOptionMaxAdditionalQueryDepthWithResponse call
func ParseGraphqlViewOptionMaxAdditionalQueryDepthResponse(rsp *http.Response) (*GraphqlViewOptionMaxAdditionalQueryDepthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlViewOptionMaxAdditionalQueryDepthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlViewOptionMaxArgsDepthResponse parses an HTTP response from a GraphqlViewOptionMaxArgsDepthWithResponse call
func ParseGraphqlViewOptionMaxArgsDepthResponse(rsp *http.Response) (*GraphqlViewOptionMaxArgsDepthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlViewOptionMaxArgsDepthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlViewOptionMaxQueryDepthResponse parses an HTTP response from a GraphqlViewOptionMaxQueryDepthWithResponse call
func ParseGraphqlViewOptionMaxQueryDepthResponse(rsp *http.Response) (*GraphqlViewOptionMaxQueryDepthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlViewOptionMaxQueryDepthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlViewOptionOptionalArgsEnabledResponse parses an HTTP response from a GraphqlViewOptionOptionalArgsEnabledWithResponse call
func ParseGraphqlViewOptionOptionalArgsEnabledResponse(rsp *http.Response) (*GraphqlViewOptionOptionalArgsEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlViewOptionOptionalArgsEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlViewOptionQueryGenEnabledResponse parses an HTTP response from a GraphqlViewOptionQueryGenEnabledWithResponse call
func ParseGraphqlViewOptionQueryGenEnabledResponse(rsp *http.Response) (*GraphqlViewOptionQueryGenEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlViewOptionQueryGenEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlViewOptionQuerySplitTypeResponse parses an HTTP response from a GraphqlViewOptionQuerySplitTypeWithResponse call
func ParseGraphqlViewOptionQuerySplitTypeResponse(rsp *http.Response) (*GraphqlViewOptionQuerySplitTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlViewOptionQuerySplitTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGraphqlViewOptionRequestMethodResponse parses an HTTP response from a GraphqlViewOptionRequestMethodWithResponse call
func ParseGraphqlViewOptionRequestMethodResponse(rsp *http.Response) (*GraphqlViewOptionRequestMethodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GraphqlViewOptionRequestMethodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHttpSessionsActionAddDefaultSessionTokenResponse parses an HTTP response from a HttpSessionsActionAddDefaultSessionTokenWithResponse call
func ParseHttpSessionsActionAddDefaultSessionTokenResponse(rsp *http.Response) (*HttpSessionsActionAddDefaultSessionTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HttpSessionsActionAddDefaultSessionTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHttpSessionsActionAddSessionTokenResponse parses an HTTP response from a HttpSessionsActionAddSessionTokenWithResponse call
func ParseHttpSessionsActionAddSessionTokenResponse(rsp *http.Response) (*HttpSessionsActionAddSessionTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HttpSessionsActionAddSessionTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHttpSessionsActionCreateEmptySessionResponse parses an HTTP response from a HttpSessionsActionCreateEmptySessionWithResponse call
func ParseHttpSessionsActionCreateEmptySessionResponse(rsp *http.Response) (*HttpSessionsActionCreateEmptySessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HttpSessionsActionCreateEmptySessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHttpSessionsActionRemoveDefaultSessionTokenResponse parses an HTTP response from a HttpSessionsActionRemoveDefaultSessionTokenWithResponse call
func ParseHttpSessionsActionRemoveDefaultSessionTokenResponse(rsp *http.Response) (*HttpSessionsActionRemoveDefaultSessionTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HttpSessionsActionRemoveDefaultSessionTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHttpSessionsActionRemoveSessionResponse parses an HTTP response from a HttpSessionsActionRemoveSessionWithResponse call
func ParseHttpSessionsActionRemoveSessionResponse(rsp *http.Response) (*HttpSessionsActionRemoveSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HttpSessionsActionRemoveSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHttpSessionsActionRemoveSessionTokenResponse parses an HTTP response from a HttpSessionsActionRemoveSessionTokenWithResponse call
func ParseHttpSessionsActionRemoveSessionTokenResponse(rsp *http.Response) (*HttpSessionsActionRemoveSessionTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HttpSessionsActionRemoveSessionTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHttpSessionsActionRenameSessionResponse parses an HTTP response from a HttpSessionsActionRenameSessionWithResponse call
func ParseHttpSessionsActionRenameSessionResponse(rsp *http.Response) (*HttpSessionsActionRenameSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HttpSessionsActionRenameSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHttpSessionsActionSetActiveSessionResponse parses an HTTP response from a HttpSessionsActionSetActiveSessionWithResponse call
func ParseHttpSessionsActionSetActiveSessionResponse(rsp *http.Response) (*HttpSessionsActionSetActiveSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HttpSessionsActionSetActiveSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHttpSessionsActionSetDefaultSessionTokenEnabledResponse parses an HTTP response from a HttpSessionsActionSetDefaultSessionTokenEnabledWithResponse call
func ParseHttpSessionsActionSetDefaultSessionTokenEnabledResponse(rsp *http.Response) (*HttpSessionsActionSetDefaultSessionTokenEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HttpSessionsActionSetDefaultSessionTokenEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHttpSessionsActionSetSessionTokenValueResponse parses an HTTP response from a HttpSessionsActionSetSessionTokenValueWithResponse call
func ParseHttpSessionsActionSetSessionTokenValueResponse(rsp *http.Response) (*HttpSessionsActionSetSessionTokenValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HttpSessionsActionSetSessionTokenValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHttpSessionsActionUnsetActiveSessionResponse parses an HTTP response from a HttpSessionsActionUnsetActiveSessionWithResponse call
func ParseHttpSessionsActionUnsetActiveSessionResponse(rsp *http.Response) (*HttpSessionsActionUnsetActiveSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HttpSessionsActionUnsetActiveSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHttpSessionsViewActiveSessionResponse parses an HTTP response from a HttpSessionsViewActiveSessionWithResponse call
func ParseHttpSessionsViewActiveSessionResponse(rsp *http.Response) (*HttpSessionsViewActiveSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HttpSessionsViewActiveSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHttpSessionsViewDefaultSessionTokensResponse parses an HTTP response from a HttpSessionsViewDefaultSessionTokensWithResponse call
func ParseHttpSessionsViewDefaultSessionTokensResponse(rsp *http.Response) (*HttpSessionsViewDefaultSessionTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HttpSessionsViewDefaultSessionTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHttpSessionsViewSessionTokensResponse parses an HTTP response from a HttpSessionsViewSessionTokensWithResponse call
func ParseHttpSessionsViewSessionTokensResponse(rsp *http.Response) (*HttpSessionsViewSessionTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HttpSessionsViewSessionTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHttpSessionsViewSessionsResponse parses an HTTP response from a HttpSessionsViewSessionsWithResponse call
func ParseHttpSessionsViewSessionsResponse(rsp *http.Response) (*HttpSessionsViewSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HttpSessionsViewSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHttpSessionsViewSitesResponse parses an HTTP response from a HttpSessionsViewSitesWithResponse call
func ParseHttpSessionsViewSitesResponse(rsp *http.Response) (*HttpSessionsViewSitesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HttpSessionsViewSitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudActionLogResponse parses an HTTP response from a HudActionLogWithResponse call
func ParseHudActionLogResponse(rsp *http.Response) (*HudActionLogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudActionLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudActionRecordRequestResponse parses an HTTP response from a HudActionRecordRequestWithResponse call
func ParseHudActionRecordRequestResponse(rsp *http.Response) (*HudActionRecordRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudActionRecordRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudActionResetTutorialTasksResponse parses an HTTP response from a HudActionResetTutorialTasksWithResponse call
func ParseHudActionResetTutorialTasksResponse(rsp *http.Response) (*HudActionResetTutorialTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudActionResetTutorialTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudActionSetOptionBaseDirectoryResponse parses an HTTP response from a HudActionSetOptionBaseDirectoryWithResponse call
func ParseHudActionSetOptionBaseDirectoryResponse(rsp *http.Response) (*HudActionSetOptionBaseDirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudActionSetOptionBaseDirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudActionSetOptionDevelopmentModeResponse parses an HTTP response from a HudActionSetOptionDevelopmentModeWithResponse call
func ParseHudActionSetOptionDevelopmentModeResponse(rsp *http.Response) (*HudActionSetOptionDevelopmentModeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudActionSetOptionDevelopmentModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudActionSetOptionEnableOnDomainMsgsResponse parses an HTTP response from a HudActionSetOptionEnableOnDomainMsgsWithResponse call
func ParseHudActionSetOptionEnableOnDomainMsgsResponse(rsp *http.Response) (*HudActionSetOptionEnableOnDomainMsgsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudActionSetOptionEnableOnDomainMsgsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudActionSetOptionEnabledForDaemonResponse parses an HTTP response from a HudActionSetOptionEnabledForDaemonWithResponse call
func ParseHudActionSetOptionEnabledForDaemonResponse(rsp *http.Response) (*HudActionSetOptionEnabledForDaemonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudActionSetOptionEnabledForDaemonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudActionSetOptionEnabledForDesktopResponse parses an HTTP response from a HudActionSetOptionEnabledForDesktopWithResponse call
func ParseHudActionSetOptionEnabledForDesktopResponse(rsp *http.Response) (*HudActionSetOptionEnabledForDesktopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudActionSetOptionEnabledForDesktopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudActionSetOptionInScopeOnlyResponse parses an HTTP response from a HudActionSetOptionInScopeOnlyWithResponse call
func ParseHudActionSetOptionInScopeOnlyResponse(rsp *http.Response) (*HudActionSetOptionInScopeOnlyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudActionSetOptionInScopeOnlyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudActionSetOptionRemoveCSPResponse parses an HTTP response from a HudActionSetOptionRemoveCSPWithResponse call
func ParseHudActionSetOptionRemoveCSPResponse(rsp *http.Response) (*HudActionSetOptionRemoveCSPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudActionSetOptionRemoveCSPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudActionSetOptionShowWelcomeScreenResponse parses an HTTP response from a HudActionSetOptionShowWelcomeScreenWithResponse call
func ParseHudActionSetOptionShowWelcomeScreenResponse(rsp *http.Response) (*HudActionSetOptionShowWelcomeScreenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudActionSetOptionShowWelcomeScreenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudActionSetOptionSkipTutorialTasksResponse parses an HTTP response from a HudActionSetOptionSkipTutorialTasksWithResponse call
func ParseHudActionSetOptionSkipTutorialTasksResponse(rsp *http.Response) (*HudActionSetOptionSkipTutorialTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudActionSetOptionSkipTutorialTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudActionSetOptionTutorialTaskDoneResponse parses an HTTP response from a HudActionSetOptionTutorialTaskDoneWithResponse call
func ParseHudActionSetOptionTutorialTaskDoneResponse(rsp *http.Response) (*HudActionSetOptionTutorialTaskDoneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudActionSetOptionTutorialTaskDoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudActionSetOptionTutorialTestModeResponse parses an HTTP response from a HudActionSetOptionTutorialTestModeWithResponse call
func ParseHudActionSetOptionTutorialTestModeResponse(rsp *http.Response) (*HudActionSetOptionTutorialTestModeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudActionSetOptionTutorialTestModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudActionSetUiOptionResponse parses an HTTP response from a HudActionSetUiOptionWithResponse call
func ParseHudActionSetUiOptionResponse(rsp *http.Response) (*HudActionSetUiOptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudActionSetUiOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewGetUiOptionResponse parses an HTTP response from a HudViewGetUiOptionWithResponse call
func ParseHudViewGetUiOptionResponse(rsp *http.Response) (*HudViewGetUiOptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewGetUiOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewHeartbeatResponse parses an HTTP response from a HudViewHeartbeatWithResponse call
func ParseHudViewHeartbeatResponse(rsp *http.Response) (*HudViewHeartbeatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewHeartbeatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewHudAlertDataResponse parses an HTTP response from a HudViewHudAlertDataWithResponse call
func ParseHudViewHudAlertDataResponse(rsp *http.Response) (*HudViewHudAlertDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewHudAlertDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewOptionAllowUnsafeEvalResponse parses an HTTP response from a HudViewOptionAllowUnsafeEvalWithResponse call
func ParseHudViewOptionAllowUnsafeEvalResponse(rsp *http.Response) (*HudViewOptionAllowUnsafeEvalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewOptionAllowUnsafeEvalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewOptionBaseDirectoryResponse parses an HTTP response from a HudViewOptionBaseDirectoryWithResponse call
func ParseHudViewOptionBaseDirectoryResponse(rsp *http.Response) (*HudViewOptionBaseDirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewOptionBaseDirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewOptionDevelopmentModeResponse parses an HTTP response from a HudViewOptionDevelopmentModeWithResponse call
func ParseHudViewOptionDevelopmentModeResponse(rsp *http.Response) (*HudViewOptionDevelopmentModeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewOptionDevelopmentModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewOptionEnableOnDomainMsgsResponse parses an HTTP response from a HudViewOptionEnableOnDomainMsgsWithResponse call
func ParseHudViewOptionEnableOnDomainMsgsResponse(rsp *http.Response) (*HudViewOptionEnableOnDomainMsgsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewOptionEnableOnDomainMsgsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewOptionEnableTelemetryResponse parses an HTTP response from a HudViewOptionEnableTelemetryWithResponse call
func ParseHudViewOptionEnableTelemetryResponse(rsp *http.Response) (*HudViewOptionEnableTelemetryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewOptionEnableTelemetryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewOptionEnabledForDaemonResponse parses an HTTP response from a HudViewOptionEnabledForDaemonWithResponse call
func ParseHudViewOptionEnabledForDaemonResponse(rsp *http.Response) (*HudViewOptionEnabledForDaemonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewOptionEnabledForDaemonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewOptionEnabledForDesktopResponse parses an HTTP response from a HudViewOptionEnabledForDesktopWithResponse call
func ParseHudViewOptionEnabledForDesktopResponse(rsp *http.Response) (*HudViewOptionEnabledForDesktopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewOptionEnabledForDesktopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewOptionInScopeOnlyResponse parses an HTTP response from a HudViewOptionInScopeOnlyWithResponse call
func ParseHudViewOptionInScopeOnlyResponse(rsp *http.Response) (*HudViewOptionInScopeOnlyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewOptionInScopeOnlyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewOptionRemoveCSPResponse parses an HTTP response from a HudViewOptionRemoveCSPWithResponse call
func ParseHudViewOptionRemoveCSPResponse(rsp *http.Response) (*HudViewOptionRemoveCSPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewOptionRemoveCSPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewOptionShowWelcomeScreenResponse parses an HTTP response from a HudViewOptionShowWelcomeScreenWithResponse call
func ParseHudViewOptionShowWelcomeScreenResponse(rsp *http.Response) (*HudViewOptionShowWelcomeScreenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewOptionShowWelcomeScreenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewOptionSkipTutorialTasksResponse parses an HTTP response from a HudViewOptionSkipTutorialTasksWithResponse call
func ParseHudViewOptionSkipTutorialTasksResponse(rsp *http.Response) (*HudViewOptionSkipTutorialTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewOptionSkipTutorialTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewOptionTutorialHostResponse parses an HTTP response from a HudViewOptionTutorialHostWithResponse call
func ParseHudViewOptionTutorialHostResponse(rsp *http.Response) (*HudViewOptionTutorialHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewOptionTutorialHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewOptionTutorialPortResponse parses an HTTP response from a HudViewOptionTutorialPortWithResponse call
func ParseHudViewOptionTutorialPortResponse(rsp *http.Response) (*HudViewOptionTutorialPortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewOptionTutorialPortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewOptionTutorialTasksDoneResponse parses an HTTP response from a HudViewOptionTutorialTasksDoneWithResponse call
func ParseHudViewOptionTutorialTasksDoneResponse(rsp *http.Response) (*HudViewOptionTutorialTasksDoneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewOptionTutorialTasksDoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewOptionTutorialTestModeResponse parses an HTTP response from a HudViewOptionTutorialTestModeWithResponse call
func ParseHudViewOptionTutorialTestModeResponse(rsp *http.Response) (*HudViewOptionTutorialTestModeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewOptionTutorialTestModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewOptionTutorialUpdatesResponse parses an HTTP response from a HudViewOptionTutorialUpdatesWithResponse call
func ParseHudViewOptionTutorialUpdatesResponse(rsp *http.Response) (*HudViewOptionTutorialUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewOptionTutorialUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewTutorialUpdatesResponse parses an HTTP response from a HudViewTutorialUpdatesWithResponse call
func ParseHudViewTutorialUpdatesResponse(rsp *http.Response) (*HudViewTutorialUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewTutorialUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHudViewUpgradedDomainsResponse parses an HTTP response from a HudViewUpgradedDomainsWithResponse call
func ParseHudViewUpgradedDomainsResponse(rsp *http.Response) (*HudViewUpgradedDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudViewUpgradedDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLocalProxiesActionAddAdditionalProxyResponse parses an HTTP response from a LocalProxiesActionAddAdditionalProxyWithResponse call
func ParseLocalProxiesActionAddAdditionalProxyResponse(rsp *http.Response) (*LocalProxiesActionAddAdditionalProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LocalProxiesActionAddAdditionalProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLocalProxiesActionRemoveAdditionalProxyResponse parses an HTTP response from a LocalProxiesActionRemoveAdditionalProxyWithResponse call
func ParseLocalProxiesActionRemoveAdditionalProxyResponse(rsp *http.Response) (*LocalProxiesActionRemoveAdditionalProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LocalProxiesActionRemoveAdditionalProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLocalProxiesViewAdditionalProxiesResponse parses an HTTP response from a LocalProxiesViewAdditionalProxiesWithResponse call
func ParseLocalProxiesViewAdditionalProxiesResponse(rsp *http.Response) (*LocalProxiesViewAdditionalProxiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LocalProxiesViewAdditionalProxiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionAddAliasResponse parses an HTTP response from a NetworkActionAddAliasWithResponse call
func ParseNetworkActionAddAliasResponse(rsp *http.Response) (*NetworkActionAddAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionAddAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionAddHttpProxyExclusionResponse parses an HTTP response from a NetworkActionAddHttpProxyExclusionWithResponse call
func ParseNetworkActionAddHttpProxyExclusionResponse(rsp *http.Response) (*NetworkActionAddHttpProxyExclusionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionAddHttpProxyExclusionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionAddLocalServerResponse parses an HTTP response from a NetworkActionAddLocalServerWithResponse call
func ParseNetworkActionAddLocalServerResponse(rsp *http.Response) (*NetworkActionAddLocalServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionAddLocalServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionAddPassThroughResponse parses an HTTP response from a NetworkActionAddPassThroughWithResponse call
func ParseNetworkActionAddPassThroughResponse(rsp *http.Response) (*NetworkActionAddPassThroughResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionAddPassThroughResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionAddPkcs12ClientCertificateResponse parses an HTTP response from a NetworkActionAddPkcs12ClientCertificateWithResponse call
func ParseNetworkActionAddPkcs12ClientCertificateResponse(rsp *http.Response) (*NetworkActionAddPkcs12ClientCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionAddPkcs12ClientCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionAddRateLimitRuleResponse parses an HTTP response from a NetworkActionAddRateLimitRuleWithResponse call
func ParseNetworkActionAddRateLimitRuleResponse(rsp *http.Response) (*NetworkActionAddRateLimitRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionAddRateLimitRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionGenerateRootCaCertResponse parses an HTTP response from a NetworkActionGenerateRootCaCertWithResponse call
func ParseNetworkActionGenerateRootCaCertResponse(rsp *http.Response) (*NetworkActionGenerateRootCaCertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionGenerateRootCaCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionImportRootCaCertResponse parses an HTTP response from a NetworkActionImportRootCaCertWithResponse call
func ParseNetworkActionImportRootCaCertResponse(rsp *http.Response) (*NetworkActionImportRootCaCertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionImportRootCaCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionRemoveAliasResponse parses an HTTP response from a NetworkActionRemoveAliasWithResponse call
func ParseNetworkActionRemoveAliasResponse(rsp *http.Response) (*NetworkActionRemoveAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionRemoveAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionRemoveHttpProxyExclusionResponse parses an HTTP response from a NetworkActionRemoveHttpProxyExclusionWithResponse call
func ParseNetworkActionRemoveHttpProxyExclusionResponse(rsp *http.Response) (*NetworkActionRemoveHttpProxyExclusionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionRemoveHttpProxyExclusionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionRemoveLocalServerResponse parses an HTTP response from a NetworkActionRemoveLocalServerWithResponse call
func ParseNetworkActionRemoveLocalServerResponse(rsp *http.Response) (*NetworkActionRemoveLocalServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionRemoveLocalServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionRemovePassThroughResponse parses an HTTP response from a NetworkActionRemovePassThroughWithResponse call
func ParseNetworkActionRemovePassThroughResponse(rsp *http.Response) (*NetworkActionRemovePassThroughResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionRemovePassThroughResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionRemoveRateLimitRuleResponse parses an HTTP response from a NetworkActionRemoveRateLimitRuleWithResponse call
func ParseNetworkActionRemoveRateLimitRuleResponse(rsp *http.Response) (*NetworkActionRemoveRateLimitRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionRemoveRateLimitRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionSetAliasEnabledResponse parses an HTTP response from a NetworkActionSetAliasEnabledWithResponse call
func ParseNetworkActionSetAliasEnabledResponse(rsp *http.Response) (*NetworkActionSetAliasEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionSetAliasEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionSetConnectionTimeoutResponse parses an HTTP response from a NetworkActionSetConnectionTimeoutWithResponse call
func ParseNetworkActionSetConnectionTimeoutResponse(rsp *http.Response) (*NetworkActionSetConnectionTimeoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionSetConnectionTimeoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionSetDefaultUserAgentResponse parses an HTTP response from a NetworkActionSetDefaultUserAgentWithResponse call
func ParseNetworkActionSetDefaultUserAgentResponse(rsp *http.Response) (*NetworkActionSetDefaultUserAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionSetDefaultUserAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionSetDnsTtlSuccessfulQueriesResponse parses an HTTP response from a NetworkActionSetDnsTtlSuccessfulQueriesWithResponse call
func ParseNetworkActionSetDnsTtlSuccessfulQueriesResponse(rsp *http.Response) (*NetworkActionSetDnsTtlSuccessfulQueriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionSetDnsTtlSuccessfulQueriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionSetHttpProxyResponse parses an HTTP response from a NetworkActionSetHttpProxyWithResponse call
func ParseNetworkActionSetHttpProxyResponse(rsp *http.Response) (*NetworkActionSetHttpProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionSetHttpProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionSetHttpProxyAuthEnabledResponse parses an HTTP response from a NetworkActionSetHttpProxyAuthEnabledWithResponse call
func ParseNetworkActionSetHttpProxyAuthEnabledResponse(rsp *http.Response) (*NetworkActionSetHttpProxyAuthEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionSetHttpProxyAuthEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionSetHttpProxyEnabledResponse parses an HTTP response from a NetworkActionSetHttpProxyEnabledWithResponse call
func ParseNetworkActionSetHttpProxyEnabledResponse(rsp *http.Response) (*NetworkActionSetHttpProxyEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionSetHttpProxyEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionSetHttpProxyExclusionEnabledResponse parses an HTTP response from a NetworkActionSetHttpProxyExclusionEnabledWithResponse call
func ParseNetworkActionSetHttpProxyExclusionEnabledResponse(rsp *http.Response) (*NetworkActionSetHttpProxyExclusionEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionSetHttpProxyExclusionEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionSetPassThroughEnabledResponse parses an HTTP response from a NetworkActionSetPassThroughEnabledWithResponse call
func ParseNetworkActionSetPassThroughEnabledResponse(rsp *http.Response) (*NetworkActionSetPassThroughEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionSetPassThroughEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionSetRateLimitRuleEnabledResponse parses an HTTP response from a NetworkActionSetRateLimitRuleEnabledWithResponse call
func ParseNetworkActionSetRateLimitRuleEnabledResponse(rsp *http.Response) (*NetworkActionSetRateLimitRuleEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionSetRateLimitRuleEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionSetRootCaCertValidityResponse parses an HTTP response from a NetworkActionSetRootCaCertValidityWithResponse call
func ParseNetworkActionSetRootCaCertValidityResponse(rsp *http.Response) (*NetworkActionSetRootCaCertValidityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionSetRootCaCertValidityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionSetServerCertValidityResponse parses an HTTP response from a NetworkActionSetServerCertValidityWithResponse call
func ParseNetworkActionSetServerCertValidityResponse(rsp *http.Response) (*NetworkActionSetServerCertValidityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionSetServerCertValidityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionSetSocksProxyResponse parses an HTTP response from a NetworkActionSetSocksProxyWithResponse call
func ParseNetworkActionSetSocksProxyResponse(rsp *http.Response) (*NetworkActionSetSocksProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionSetSocksProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionSetSocksProxyEnabledResponse parses an HTTP response from a NetworkActionSetSocksProxyEnabledWithResponse call
func ParseNetworkActionSetSocksProxyEnabledResponse(rsp *http.Response) (*NetworkActionSetSocksProxyEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionSetSocksProxyEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionSetUseClientCertificateResponse parses an HTTP response from a NetworkActionSetUseClientCertificateWithResponse call
func ParseNetworkActionSetUseClientCertificateResponse(rsp *http.Response) (*NetworkActionSetUseClientCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionSetUseClientCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkActionSetUseGlobalHttpStateResponse parses an HTTP response from a NetworkActionSetUseGlobalHttpStateWithResponse call
func ParseNetworkActionSetUseGlobalHttpStateResponse(rsp *http.Response) (*NetworkActionSetUseGlobalHttpStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkActionSetUseGlobalHttpStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkViewGetAliasesResponse parses an HTTP response from a NetworkViewGetAliasesWithResponse call
func ParseNetworkViewGetAliasesResponse(rsp *http.Response) (*NetworkViewGetAliasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkViewGetAliasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkViewGetConnectionTimeoutResponse parses an HTTP response from a NetworkViewGetConnectionTimeoutWithResponse call
func ParseNetworkViewGetConnectionTimeoutResponse(rsp *http.Response) (*NetworkViewGetConnectionTimeoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkViewGetConnectionTimeoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkViewGetDefaultUserAgentResponse parses an HTTP response from a NetworkViewGetDefaultUserAgentWithResponse call
func ParseNetworkViewGetDefaultUserAgentResponse(rsp *http.Response) (*NetworkViewGetDefaultUserAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkViewGetDefaultUserAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkViewGetDnsTtlSuccessfulQueriesResponse parses an HTTP response from a NetworkViewGetDnsTtlSuccessfulQueriesWithResponse call
func ParseNetworkViewGetDnsTtlSuccessfulQueriesResponse(rsp *http.Response) (*NetworkViewGetDnsTtlSuccessfulQueriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkViewGetDnsTtlSuccessfulQueriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkViewGetHttpProxyResponse parses an HTTP response from a NetworkViewGetHttpProxyWithResponse call
func ParseNetworkViewGetHttpProxyResponse(rsp *http.Response) (*NetworkViewGetHttpProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkViewGetHttpProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkViewGetHttpProxyExclusionsResponse parses an HTTP response from a NetworkViewGetHttpProxyExclusionsWithResponse call
func ParseNetworkViewGetHttpProxyExclusionsResponse(rsp *http.Response) (*NetworkViewGetHttpProxyExclusionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkViewGetHttpProxyExclusionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkViewGetLocalServersResponse parses an HTTP response from a NetworkViewGetLocalServersWithResponse call
func ParseNetworkViewGetLocalServersResponse(rsp *http.Response) (*NetworkViewGetLocalServersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkViewGetLocalServersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkViewGetPassThroughsResponse parses an HTTP response from a NetworkViewGetPassThroughsWithResponse call
func ParseNetworkViewGetPassThroughsResponse(rsp *http.Response) (*NetworkViewGetPassThroughsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkViewGetPassThroughsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkViewGetRateLimitRulesResponse parses an HTTP response from a NetworkViewGetRateLimitRulesWithResponse call
func ParseNetworkViewGetRateLimitRulesResponse(rsp *http.Response) (*NetworkViewGetRateLimitRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkViewGetRateLimitRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkViewGetRootCaCertValidityResponse parses an HTTP response from a NetworkViewGetRootCaCertValidityWithResponse call
func ParseNetworkViewGetRootCaCertValidityResponse(rsp *http.Response) (*NetworkViewGetRootCaCertValidityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkViewGetRootCaCertValidityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkViewGetServerCertValidityResponse parses an HTTP response from a NetworkViewGetServerCertValidityWithResponse call
func ParseNetworkViewGetServerCertValidityResponse(rsp *http.Response) (*NetworkViewGetServerCertValidityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkViewGetServerCertValidityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkViewGetSocksProxyResponse parses an HTTP response from a NetworkViewGetSocksProxyWithResponse call
func ParseNetworkViewGetSocksProxyResponse(rsp *http.Response) (*NetworkViewGetSocksProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkViewGetSocksProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkViewIsHttpProxyAuthEnabledResponse parses an HTTP response from a NetworkViewIsHttpProxyAuthEnabledWithResponse call
func ParseNetworkViewIsHttpProxyAuthEnabledResponse(rsp *http.Response) (*NetworkViewIsHttpProxyAuthEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkViewIsHttpProxyAuthEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkViewIsHttpProxyEnabledResponse parses an HTTP response from a NetworkViewIsHttpProxyEnabledWithResponse call
func ParseNetworkViewIsHttpProxyEnabledResponse(rsp *http.Response) (*NetworkViewIsHttpProxyEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkViewIsHttpProxyEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkViewIsSocksProxyEnabledResponse parses an HTTP response from a NetworkViewIsSocksProxyEnabledWithResponse call
func ParseNetworkViewIsSocksProxyEnabledResponse(rsp *http.Response) (*NetworkViewIsSocksProxyEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkViewIsSocksProxyEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNetworkViewIsUseGlobalHttpStateResponse parses an HTTP response from a NetworkViewIsUseGlobalHttpStateWithResponse call
func ParseNetworkViewIsUseGlobalHttpStateResponse(rsp *http.Response) (*NetworkViewIsUseGlobalHttpStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkViewIsUseGlobalHttpStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOastActionSetActiveScanServiceResponse parses an HTTP response from a OastActionSetActiveScanServiceWithResponse call
func ParseOastActionSetActiveScanServiceResponse(rsp *http.Response) (*OastActionSetActiveScanServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OastActionSetActiveScanServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOastActionSetBoastOptionsResponse parses an HTTP response from a OastActionSetBoastOptionsWithResponse call
func ParseOastActionSetBoastOptionsResponse(rsp *http.Response) (*OastActionSetBoastOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OastActionSetBoastOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOastActionSetCallbackOptionsResponse parses an HTTP response from a OastActionSetCallbackOptionsWithResponse call
func ParseOastActionSetCallbackOptionsResponse(rsp *http.Response) (*OastActionSetCallbackOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OastActionSetCallbackOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOastActionSetDaysToKeepRecordsResponse parses an HTTP response from a OastActionSetDaysToKeepRecordsWithResponse call
func ParseOastActionSetDaysToKeepRecordsResponse(rsp *http.Response) (*OastActionSetDaysToKeepRecordsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OastActionSetDaysToKeepRecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOastActionSetInteractshOptionsResponse parses an HTTP response from a OastActionSetInteractshOptionsWithResponse call
func ParseOastActionSetInteractshOptionsResponse(rsp *http.Response) (*OastActionSetInteractshOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OastActionSetInteractshOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOastViewGetActiveScanServiceResponse parses an HTTP response from a OastViewGetActiveScanServiceWithResponse call
func ParseOastViewGetActiveScanServiceResponse(rsp *http.Response) (*OastViewGetActiveScanServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OastViewGetActiveScanServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOastViewGetBoastOptionsResponse parses an HTTP response from a OastViewGetBoastOptionsWithResponse call
func ParseOastViewGetBoastOptionsResponse(rsp *http.Response) (*OastViewGetBoastOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OastViewGetBoastOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOastViewGetCallbackOptionsResponse parses an HTTP response from a OastViewGetCallbackOptionsWithResponse call
func ParseOastViewGetCallbackOptionsResponse(rsp *http.Response) (*OastViewGetCallbackOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OastViewGetCallbackOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOastViewGetDaysToKeepRecordsResponse parses an HTTP response from a OastViewGetDaysToKeepRecordsWithResponse call
func ParseOastViewGetDaysToKeepRecordsResponse(rsp *http.Response) (*OastViewGetDaysToKeepRecordsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OastViewGetDaysToKeepRecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOastViewGetInteractshOptionsResponse parses an HTTP response from a OastViewGetInteractshOptionsWithResponse call
func ParseOastViewGetInteractshOptionsResponse(rsp *http.Response) (*OastViewGetInteractshOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OastViewGetInteractshOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOastViewGetServicesResponse parses an HTTP response from a OastViewGetServicesWithResponse call
func ParseOastViewGetServicesResponse(rsp *http.Response) (*OastViewGetServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OastViewGetServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOpenapiActionImportFileResponse parses an HTTP response from a OpenapiActionImportFileWithResponse call
func ParseOpenapiActionImportFileResponse(rsp *http.Response) (*OpenapiActionImportFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpenapiActionImportFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOpenapiActionImportUrlResponse parses an HTTP response from a OpenapiActionImportUrlWithResponse call
func ParseOpenapiActionImportUrlResponse(rsp *http.Response) (*OpenapiActionImportUrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpenapiActionImportUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseParamDiggerActionHelloWorldResponse parses an HTTP response from a ParamDiggerActionHelloWorldWithResponse call
func ParseParamDiggerActionHelloWorldResponse(rsp *http.Response) (*ParamDiggerActionHelloWorldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ParamDiggerActionHelloWorldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseParamsViewParamsResponse parses an HTTP response from a ParamsViewParamsWithResponse call
func ParseParamsViewParamsResponse(rsp *http.Response) (*ParamsViewParamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ParamsViewParamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePnhActionMonitorResponse parses an HTTP response from a PnhActionMonitorWithResponse call
func ParsePnhActionMonitorResponse(rsp *http.Response) (*PnhActionMonitorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PnhActionMonitorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePnhActionOracleResponse parses an HTTP response from a PnhActionOracleWithResponse call
func ParsePnhActionOracleResponse(rsp *http.Response) (*PnhActionOracleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PnhActionOracleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePnhActionStartMonitoringResponse parses an HTTP response from a PnhActionStartMonitoringWithResponse call
func ParsePnhActionStartMonitoringResponse(rsp *http.Response) (*PnhActionStartMonitoringResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PnhActionStartMonitoringResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePnhActionStopMonitoringResponse parses an HTTP response from a PnhActionStopMonitoringWithResponse call
func ParsePnhActionStopMonitoringResponse(rsp *http.Response) (*PnhActionStopMonitoringResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PnhActionStopMonitoringResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostmanActionImportFileResponse parses an HTTP response from a PostmanActionImportFileWithResponse call
func ParsePostmanActionImportFileResponse(rsp *http.Response) (*PostmanActionImportFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostmanActionImportFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostmanActionImportUrlResponse parses an HTTP response from a PostmanActionImportUrlWithResponse call
func ParsePostmanActionImportUrlResponse(rsp *http.Response) (*PostmanActionImportUrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostmanActionImportUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanActionClearQueueResponse parses an HTTP response from a PscanActionClearQueueWithResponse call
func ParsePscanActionClearQueueResponse(rsp *http.Response) (*PscanActionClearQueueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanActionClearQueueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanActionDisableAllScannersResponse parses an HTTP response from a PscanActionDisableAllScannersWithResponse call
func ParsePscanActionDisableAllScannersResponse(rsp *http.Response) (*PscanActionDisableAllScannersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanActionDisableAllScannersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanActionDisableAllTagsResponse parses an HTTP response from a PscanActionDisableAllTagsWithResponse call
func ParsePscanActionDisableAllTagsResponse(rsp *http.Response) (*PscanActionDisableAllTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanActionDisableAllTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanActionDisableScannersResponse parses an HTTP response from a PscanActionDisableScannersWithResponse call
func ParsePscanActionDisableScannersResponse(rsp *http.Response) (*PscanActionDisableScannersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanActionDisableScannersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanActionEnableAllScannersResponse parses an HTTP response from a PscanActionEnableAllScannersWithResponse call
func ParsePscanActionEnableAllScannersResponse(rsp *http.Response) (*PscanActionEnableAllScannersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanActionEnableAllScannersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanActionEnableAllTagsResponse parses an HTTP response from a PscanActionEnableAllTagsWithResponse call
func ParsePscanActionEnableAllTagsResponse(rsp *http.Response) (*PscanActionEnableAllTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanActionEnableAllTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanActionEnableScannersResponse parses an HTTP response from a PscanActionEnableScannersWithResponse call
func ParsePscanActionEnableScannersResponse(rsp *http.Response) (*PscanActionEnableScannersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanActionEnableScannersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanActionSetEnabledResponse parses an HTTP response from a PscanActionSetEnabledWithResponse call
func ParsePscanActionSetEnabledResponse(rsp *http.Response) (*PscanActionSetEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanActionSetEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanActionSetMaxAlertsPerRuleResponse parses an HTTP response from a PscanActionSetMaxAlertsPerRuleWithResponse call
func ParsePscanActionSetMaxAlertsPerRuleResponse(rsp *http.Response) (*PscanActionSetMaxAlertsPerRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanActionSetMaxAlertsPerRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanActionSetScanOnlyInScopeResponse parses an HTTP response from a PscanActionSetScanOnlyInScopeWithResponse call
func ParsePscanActionSetScanOnlyInScopeResponse(rsp *http.Response) (*PscanActionSetScanOnlyInScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanActionSetScanOnlyInScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanActionSetScannerAlertThresholdResponse parses an HTTP response from a PscanActionSetScannerAlertThresholdWithResponse call
func ParsePscanActionSetScannerAlertThresholdResponse(rsp *http.Response) (*PscanActionSetScannerAlertThresholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanActionSetScannerAlertThresholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanViewCurrentRuleResponse parses an HTTP response from a PscanViewCurrentRuleWithResponse call
func ParsePscanViewCurrentRuleResponse(rsp *http.Response) (*PscanViewCurrentRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanViewCurrentRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanViewCurrentTasksResponse parses an HTTP response from a PscanViewCurrentTasksWithResponse call
func ParsePscanViewCurrentTasksResponse(rsp *http.Response) (*PscanViewCurrentTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanViewCurrentTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanViewMaxAlertsPerRuleResponse parses an HTTP response from a PscanViewMaxAlertsPerRuleWithResponse call
func ParsePscanViewMaxAlertsPerRuleResponse(rsp *http.Response) (*PscanViewMaxAlertsPerRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanViewMaxAlertsPerRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanViewRecordsToScanResponse parses an HTTP response from a PscanViewRecordsToScanWithResponse call
func ParsePscanViewRecordsToScanResponse(rsp *http.Response) (*PscanViewRecordsToScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanViewRecordsToScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanViewScanOnlyInScopeResponse parses an HTTP response from a PscanViewScanOnlyInScopeWithResponse call
func ParsePscanViewScanOnlyInScopeResponse(rsp *http.Response) (*PscanViewScanOnlyInScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanViewScanOnlyInScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePscanViewScannersResponse parses an HTTP response from a PscanViewScannersWithResponse call
func ParsePscanViewScannersResponse(rsp *http.Response) (*PscanViewScannersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PscanViewScannersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplacerActionAddRuleResponse parses an HTTP response from a ReplacerActionAddRuleWithResponse call
func ParseReplacerActionAddRuleResponse(rsp *http.Response) (*ReplacerActionAddRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplacerActionAddRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplacerActionRemoveRuleResponse parses an HTTP response from a ReplacerActionRemoveRuleWithResponse call
func ParseReplacerActionRemoveRuleResponse(rsp *http.Response) (*ReplacerActionRemoveRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplacerActionRemoveRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplacerActionSetEnabledResponse parses an HTTP response from a ReplacerActionSetEnabledWithResponse call
func ParseReplacerActionSetEnabledResponse(rsp *http.Response) (*ReplacerActionSetEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplacerActionSetEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplacerViewRulesResponse parses an HTTP response from a ReplacerViewRulesWithResponse call
func ParseReplacerViewRulesResponse(rsp *http.Response) (*ReplacerViewRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplacerViewRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReportsActionGenerateResponse parses an HTTP response from a ReportsActionGenerateWithResponse call
func ParseReportsActionGenerateResponse(rsp *http.Response) (*ReportsActionGenerateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportsActionGenerateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReportsViewTemplateDetailsResponse parses an HTTP response from a ReportsViewTemplateDetailsWithResponse call
func ParseReportsViewTemplateDetailsResponse(rsp *http.Response) (*ReportsViewTemplateDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportsViewTemplateDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReportsViewTemplatesResponse parses an HTTP response from a ReportsViewTemplatesWithResponse call
func ParseReportsViewTemplatesResponse(rsp *http.Response) (*ReportsViewTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportsViewTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRetestActionRetestResponse parses an HTTP response from a RetestActionRetestWithResponse call
func ParseRetestActionRetestResponse(rsp *http.Response) (*RetestActionRetestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetestActionRetestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRevealActionSetRevealResponse parses an HTTP response from a RevealActionSetRevealWithResponse call
func ParseRevealActionSetRevealResponse(rsp *http.Response) (*RevealActionSetRevealResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevealActionSetRevealResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRevealViewRevealResponse parses an HTTP response from a RevealViewRevealWithResponse call
func ParseRevealViewRevealResponse(rsp *http.Response) (*RevealViewRevealResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevealViewRevealResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRevisitActionRevisitSiteOffResponse parses an HTTP response from a RevisitActionRevisitSiteOffWithResponse call
func ParseRevisitActionRevisitSiteOffResponse(rsp *http.Response) (*RevisitActionRevisitSiteOffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevisitActionRevisitSiteOffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRevisitActionRevisitSiteOnResponse parses an HTTP response from a RevisitActionRevisitSiteOnWithResponse call
func ParseRevisitActionRevisitSiteOnResponse(rsp *http.Response) (*RevisitActionRevisitSiteOnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevisitActionRevisitSiteOnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRevisitViewRevisitListResponse parses an HTTP response from a RevisitViewRevisitListWithResponse call
func ParseRevisitViewRevisitListResponse(rsp *http.Response) (*RevisitViewRevisitListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevisitViewRevisitListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleConfigActionResetAllRuleConfigValuesResponse parses an HTTP response from a RuleConfigActionResetAllRuleConfigValuesWithResponse call
func ParseRuleConfigActionResetAllRuleConfigValuesResponse(rsp *http.Response) (*RuleConfigActionResetAllRuleConfigValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleConfigActionResetAllRuleConfigValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleConfigActionResetRuleConfigValueResponse parses an HTTP response from a RuleConfigActionResetRuleConfigValueWithResponse call
func ParseRuleConfigActionResetRuleConfigValueResponse(rsp *http.Response) (*RuleConfigActionResetRuleConfigValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleConfigActionResetRuleConfigValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleConfigActionSetRuleConfigValueResponse parses an HTTP response from a RuleConfigActionSetRuleConfigValueWithResponse call
func ParseRuleConfigActionSetRuleConfigValueResponse(rsp *http.Response) (*RuleConfigActionSetRuleConfigValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleConfigActionSetRuleConfigValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleConfigViewAllRuleConfigsResponse parses an HTTP response from a RuleConfigViewAllRuleConfigsWithResponse call
func ParseRuleConfigViewAllRuleConfigsResponse(rsp *http.Response) (*RuleConfigViewAllRuleConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleConfigViewAllRuleConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleConfigViewRuleConfigValueResponse parses an HTTP response from a RuleConfigViewRuleConfigValueWithResponse call
func ParseRuleConfigViewRuleConfigValueResponse(rsp *http.Response) (*RuleConfigViewRuleConfigValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleConfigViewRuleConfigValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptActionClearGlobalCustomVarResponse parses an HTTP response from a ScriptActionClearGlobalCustomVarWithResponse call
func ParseScriptActionClearGlobalCustomVarResponse(rsp *http.Response) (*ScriptActionClearGlobalCustomVarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptActionClearGlobalCustomVarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptActionClearGlobalVarResponse parses an HTTP response from a ScriptActionClearGlobalVarWithResponse call
func ParseScriptActionClearGlobalVarResponse(rsp *http.Response) (*ScriptActionClearGlobalVarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptActionClearGlobalVarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptActionClearGlobalVarsResponse parses an HTTP response from a ScriptActionClearGlobalVarsWithResponse call
func ParseScriptActionClearGlobalVarsResponse(rsp *http.Response) (*ScriptActionClearGlobalVarsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptActionClearGlobalVarsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptActionClearScriptCustomVarResponse parses an HTTP response from a ScriptActionClearScriptCustomVarWithResponse call
func ParseScriptActionClearScriptCustomVarResponse(rsp *http.Response) (*ScriptActionClearScriptCustomVarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptActionClearScriptCustomVarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptActionClearScriptVarResponse parses an HTTP response from a ScriptActionClearScriptVarWithResponse call
func ParseScriptActionClearScriptVarResponse(rsp *http.Response) (*ScriptActionClearScriptVarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptActionClearScriptVarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptActionClearScriptVarsResponse parses an HTTP response from a ScriptActionClearScriptVarsWithResponse call
func ParseScriptActionClearScriptVarsResponse(rsp *http.Response) (*ScriptActionClearScriptVarsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptActionClearScriptVarsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptActionDisableResponse parses an HTTP response from a ScriptActionDisableWithResponse call
func ParseScriptActionDisableResponse(rsp *http.Response) (*ScriptActionDisableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptActionDisableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptActionEnableResponse parses an HTTP response from a ScriptActionEnableWithResponse call
func ParseScriptActionEnableResponse(rsp *http.Response) (*ScriptActionEnableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptActionEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptActionLoadResponse parses an HTTP response from a ScriptActionLoadWithResponse call
func ParseScriptActionLoadResponse(rsp *http.Response) (*ScriptActionLoadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptActionLoadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptActionRemoveResponse parses an HTTP response from a ScriptActionRemoveWithResponse call
func ParseScriptActionRemoveResponse(rsp *http.Response) (*ScriptActionRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptActionRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptActionRunStandAloneScriptResponse parses an HTTP response from a ScriptActionRunStandAloneScriptWithResponse call
func ParseScriptActionRunStandAloneScriptResponse(rsp *http.Response) (*ScriptActionRunStandAloneScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptActionRunStandAloneScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptActionSetGlobalVarResponse parses an HTTP response from a ScriptActionSetGlobalVarWithResponse call
func ParseScriptActionSetGlobalVarResponse(rsp *http.Response) (*ScriptActionSetGlobalVarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptActionSetGlobalVarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptActionSetScriptVarResponse parses an HTTP response from a ScriptActionSetScriptVarWithResponse call
func ParseScriptActionSetScriptVarResponse(rsp *http.Response) (*ScriptActionSetScriptVarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptActionSetScriptVarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptViewGlobalCustomVarResponse parses an HTTP response from a ScriptViewGlobalCustomVarWithResponse call
func ParseScriptViewGlobalCustomVarResponse(rsp *http.Response) (*ScriptViewGlobalCustomVarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptViewGlobalCustomVarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptViewGlobalCustomVarsResponse parses an HTTP response from a ScriptViewGlobalCustomVarsWithResponse call
func ParseScriptViewGlobalCustomVarsResponse(rsp *http.Response) (*ScriptViewGlobalCustomVarsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptViewGlobalCustomVarsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptViewGlobalVarResponse parses an HTTP response from a ScriptViewGlobalVarWithResponse call
func ParseScriptViewGlobalVarResponse(rsp *http.Response) (*ScriptViewGlobalVarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptViewGlobalVarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptViewGlobalVarsResponse parses an HTTP response from a ScriptViewGlobalVarsWithResponse call
func ParseScriptViewGlobalVarsResponse(rsp *http.Response) (*ScriptViewGlobalVarsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptViewGlobalVarsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptViewListEnginesResponse parses an HTTP response from a ScriptViewListEnginesWithResponse call
func ParseScriptViewListEnginesResponse(rsp *http.Response) (*ScriptViewListEnginesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptViewListEnginesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptViewListScriptsResponse parses an HTTP response from a ScriptViewListScriptsWithResponse call
func ParseScriptViewListScriptsResponse(rsp *http.Response) (*ScriptViewListScriptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptViewListScriptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptViewListTypesResponse parses an HTTP response from a ScriptViewListTypesWithResponse call
func ParseScriptViewListTypesResponse(rsp *http.Response) (*ScriptViewListTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptViewListTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptViewScriptCustomVarResponse parses an HTTP response from a ScriptViewScriptCustomVarWithResponse call
func ParseScriptViewScriptCustomVarResponse(rsp *http.Response) (*ScriptViewScriptCustomVarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptViewScriptCustomVarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptViewScriptCustomVarsResponse parses an HTTP response from a ScriptViewScriptCustomVarsWithResponse call
func ParseScriptViewScriptCustomVarsResponse(rsp *http.Response) (*ScriptViewScriptCustomVarsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptViewScriptCustomVarsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptViewScriptVarResponse parses an HTTP response from a ScriptViewScriptVarWithResponse call
func ParseScriptViewScriptVarResponse(rsp *http.Response) (*ScriptViewScriptVarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptViewScriptVarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScriptViewScriptVarsResponse parses an HTTP response from a ScriptViewScriptVarsWithResponse call
func ParseScriptViewScriptVarsResponse(rsp *http.Response) (*ScriptViewScriptVarsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScriptViewScriptVarsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSearchViewMessagesByHeaderRegexResponse parses an HTTP response from a SearchViewMessagesByHeaderRegexWithResponse call
func ParseSearchViewMessagesByHeaderRegexResponse(rsp *http.Response) (*SearchViewMessagesByHeaderRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchViewMessagesByHeaderRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSearchViewMessagesByNoteRegexResponse parses an HTTP response from a SearchViewMessagesByNoteRegexWithResponse call
func ParseSearchViewMessagesByNoteRegexResponse(rsp *http.Response) (*SearchViewMessagesByNoteRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchViewMessagesByNoteRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSearchViewMessagesByRequestRegexResponse parses an HTTP response from a SearchViewMessagesByRequestRegexWithResponse call
func ParseSearchViewMessagesByRequestRegexResponse(rsp *http.Response) (*SearchViewMessagesByRequestRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchViewMessagesByRequestRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSearchViewMessagesByResponseRegexResponse parses an HTTP response from a SearchViewMessagesByResponseRegexWithResponse call
func ParseSearchViewMessagesByResponseRegexResponse(rsp *http.Response) (*SearchViewMessagesByResponseRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchViewMessagesByResponseRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSearchViewMessagesByTagRegexResponse parses an HTTP response from a SearchViewMessagesByTagRegexWithResponse call
func ParseSearchViewMessagesByTagRegexResponse(rsp *http.Response) (*SearchViewMessagesByTagRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchViewMessagesByTagRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSearchViewMessagesByUrlRegexResponse parses an HTTP response from a SearchViewMessagesByUrlRegexWithResponse call
func ParseSearchViewMessagesByUrlRegexResponse(rsp *http.Response) (*SearchViewMessagesByUrlRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchViewMessagesByUrlRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSearchViewUrlsByHeaderRegexResponse parses an HTTP response from a SearchViewUrlsByHeaderRegexWithResponse call
func ParseSearchViewUrlsByHeaderRegexResponse(rsp *http.Response) (*SearchViewUrlsByHeaderRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchViewUrlsByHeaderRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSearchViewUrlsByNoteRegexResponse parses an HTTP response from a SearchViewUrlsByNoteRegexWithResponse call
func ParseSearchViewUrlsByNoteRegexResponse(rsp *http.Response) (*SearchViewUrlsByNoteRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchViewUrlsByNoteRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSearchViewUrlsByRequestRegexResponse parses an HTTP response from a SearchViewUrlsByRequestRegexWithResponse call
func ParseSearchViewUrlsByRequestRegexResponse(rsp *http.Response) (*SearchViewUrlsByRequestRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchViewUrlsByRequestRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSearchViewUrlsByResponseRegexResponse parses an HTTP response from a SearchViewUrlsByResponseRegexWithResponse call
func ParseSearchViewUrlsByResponseRegexResponse(rsp *http.Response) (*SearchViewUrlsByResponseRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchViewUrlsByResponseRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSearchViewUrlsByTagRegexResponse parses an HTTP response from a SearchViewUrlsByTagRegexWithResponse call
func ParseSearchViewUrlsByTagRegexResponse(rsp *http.Response) (*SearchViewUrlsByTagRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchViewUrlsByTagRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSearchViewUrlsByUrlRegexResponse parses an HTTP response from a SearchViewUrlsByUrlRegexWithResponse call
func ParseSearchViewUrlsByUrlRegexResponse(rsp *http.Response) (*SearchViewUrlsByUrlRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchViewUrlsByUrlRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumActionAddBrowserArgumentResponse parses an HTTP response from a SeleniumActionAddBrowserArgumentWithResponse call
func ParseSeleniumActionAddBrowserArgumentResponse(rsp *http.Response) (*SeleniumActionAddBrowserArgumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumActionAddBrowserArgumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumActionLaunchBrowserResponse parses an HTTP response from a SeleniumActionLaunchBrowserWithResponse call
func ParseSeleniumActionLaunchBrowserResponse(rsp *http.Response) (*SeleniumActionLaunchBrowserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumActionLaunchBrowserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumActionRemoveBrowserArgumentResponse parses an HTTP response from a SeleniumActionRemoveBrowserArgumentWithResponse call
func ParseSeleniumActionRemoveBrowserArgumentResponse(rsp *http.Response) (*SeleniumActionRemoveBrowserArgumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumActionRemoveBrowserArgumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumActionSetBrowserArgumentEnabledResponse parses an HTTP response from a SeleniumActionSetBrowserArgumentEnabledWithResponse call
func ParseSeleniumActionSetBrowserArgumentEnabledResponse(rsp *http.Response) (*SeleniumActionSetBrowserArgumentEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumActionSetBrowserArgumentEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumActionSetOptionChromeBinaryPathResponse parses an HTTP response from a SeleniumActionSetOptionChromeBinaryPathWithResponse call
func ParseSeleniumActionSetOptionChromeBinaryPathResponse(rsp *http.Response) (*SeleniumActionSetOptionChromeBinaryPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumActionSetOptionChromeBinaryPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumActionSetOptionChromeDriverPathResponse parses an HTTP response from a SeleniumActionSetOptionChromeDriverPathWithResponse call
func ParseSeleniumActionSetOptionChromeDriverPathResponse(rsp *http.Response) (*SeleniumActionSetOptionChromeDriverPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumActionSetOptionChromeDriverPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumActionSetOptionFirefoxBinaryPathResponse parses an HTTP response from a SeleniumActionSetOptionFirefoxBinaryPathWithResponse call
func ParseSeleniumActionSetOptionFirefoxBinaryPathResponse(rsp *http.Response) (*SeleniumActionSetOptionFirefoxBinaryPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumActionSetOptionFirefoxBinaryPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumActionSetOptionFirefoxDefaultProfileResponse parses an HTTP response from a SeleniumActionSetOptionFirefoxDefaultProfileWithResponse call
func ParseSeleniumActionSetOptionFirefoxDefaultProfileResponse(rsp *http.Response) (*SeleniumActionSetOptionFirefoxDefaultProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumActionSetOptionFirefoxDefaultProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumActionSetOptionFirefoxDriverPathResponse parses an HTTP response from a SeleniumActionSetOptionFirefoxDriverPathWithResponse call
func ParseSeleniumActionSetOptionFirefoxDriverPathResponse(rsp *http.Response) (*SeleniumActionSetOptionFirefoxDriverPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumActionSetOptionFirefoxDriverPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumActionSetOptionIeDriverPathResponse parses an HTTP response from a SeleniumActionSetOptionIeDriverPathWithResponse call
func ParseSeleniumActionSetOptionIeDriverPathResponse(rsp *http.Response) (*SeleniumActionSetOptionIeDriverPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumActionSetOptionIeDriverPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumActionSetOptionLastDirectoryResponse parses an HTTP response from a SeleniumActionSetOptionLastDirectoryWithResponse call
func ParseSeleniumActionSetOptionLastDirectoryResponse(rsp *http.Response) (*SeleniumActionSetOptionLastDirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumActionSetOptionLastDirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumActionSetOptionPhantomJsBinaryPathResponse parses an HTTP response from a SeleniumActionSetOptionPhantomJsBinaryPathWithResponse call
func ParseSeleniumActionSetOptionPhantomJsBinaryPathResponse(rsp *http.Response) (*SeleniumActionSetOptionPhantomJsBinaryPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumActionSetOptionPhantomJsBinaryPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumViewGetBrowserArgumentsResponse parses an HTTP response from a SeleniumViewGetBrowserArgumentsWithResponse call
func ParseSeleniumViewGetBrowserArgumentsResponse(rsp *http.Response) (*SeleniumViewGetBrowserArgumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumViewGetBrowserArgumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumViewOptionBrowserExtensionsResponse parses an HTTP response from a SeleniumViewOptionBrowserExtensionsWithResponse call
func ParseSeleniumViewOptionBrowserExtensionsResponse(rsp *http.Response) (*SeleniumViewOptionBrowserExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumViewOptionBrowserExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumViewOptionChromeBinaryPathResponse parses an HTTP response from a SeleniumViewOptionChromeBinaryPathWithResponse call
func ParseSeleniumViewOptionChromeBinaryPathResponse(rsp *http.Response) (*SeleniumViewOptionChromeBinaryPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumViewOptionChromeBinaryPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumViewOptionChromeDriverPathResponse parses an HTTP response from a SeleniumViewOptionChromeDriverPathWithResponse call
func ParseSeleniumViewOptionChromeDriverPathResponse(rsp *http.Response) (*SeleniumViewOptionChromeDriverPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumViewOptionChromeDriverPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumViewOptionFirefoxBinaryPathResponse parses an HTTP response from a SeleniumViewOptionFirefoxBinaryPathWithResponse call
func ParseSeleniumViewOptionFirefoxBinaryPathResponse(rsp *http.Response) (*SeleniumViewOptionFirefoxBinaryPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumViewOptionFirefoxBinaryPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumViewOptionFirefoxDefaultProfileResponse parses an HTTP response from a SeleniumViewOptionFirefoxDefaultProfileWithResponse call
func ParseSeleniumViewOptionFirefoxDefaultProfileResponse(rsp *http.Response) (*SeleniumViewOptionFirefoxDefaultProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumViewOptionFirefoxDefaultProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumViewOptionFirefoxDriverPathResponse parses an HTTP response from a SeleniumViewOptionFirefoxDriverPathWithResponse call
func ParseSeleniumViewOptionFirefoxDriverPathResponse(rsp *http.Response) (*SeleniumViewOptionFirefoxDriverPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumViewOptionFirefoxDriverPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumViewOptionIeDriverPathResponse parses an HTTP response from a SeleniumViewOptionIeDriverPathWithResponse call
func ParseSeleniumViewOptionIeDriverPathResponse(rsp *http.Response) (*SeleniumViewOptionIeDriverPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumViewOptionIeDriverPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumViewOptionLastDirectoryResponse parses an HTTP response from a SeleniumViewOptionLastDirectoryWithResponse call
func ParseSeleniumViewOptionLastDirectoryResponse(rsp *http.Response) (*SeleniumViewOptionLastDirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumViewOptionLastDirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSeleniumViewOptionPhantomJsBinaryPathResponse parses an HTTP response from a SeleniumViewOptionPhantomJsBinaryPathWithResponse call
func ParseSeleniumViewOptionPhantomJsBinaryPathResponse(rsp *http.Response) (*SeleniumViewOptionPhantomJsBinaryPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeleniumViewOptionPhantomJsBinaryPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSessionManagementActionSetSessionManagementMethodResponse parses an HTTP response from a SessionManagementActionSetSessionManagementMethodWithResponse call
func ParseSessionManagementActionSetSessionManagementMethodResponse(rsp *http.Response) (*SessionManagementActionSetSessionManagementMethodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SessionManagementActionSetSessionManagementMethodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSessionManagementViewGetSessionManagementMethodResponse parses an HTTP response from a SessionManagementViewGetSessionManagementMethodWithResponse call
func ParseSessionManagementViewGetSessionManagementMethodResponse(rsp *http.Response) (*SessionManagementViewGetSessionManagementMethodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SessionManagementViewGetSessionManagementMethodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSessionManagementViewGetSessionManagementMethodConfigParamsResponse parses an HTTP response from a SessionManagementViewGetSessionManagementMethodConfigParamsWithResponse call
func ParseSessionManagementViewGetSessionManagementMethodConfigParamsResponse(rsp *http.Response) (*SessionManagementViewGetSessionManagementMethodConfigParamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SessionManagementViewGetSessionManagementMethodConfigParamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSessionManagementViewGetSupportedSessionManagementMethodsResponse parses an HTTP response from a SessionManagementViewGetSupportedSessionManagementMethodsWithResponse call
func ParseSessionManagementViewGetSupportedSessionManagementMethodsResponse(rsp *http.Response) (*SessionManagementViewGetSupportedSessionManagementMethodsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SessionManagementViewGetSupportedSessionManagementMethodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSoapActionImportFileResponse parses an HTTP response from a SoapActionImportFileWithResponse call
func ParseSoapActionImportFileResponse(rsp *http.Response) (*SoapActionImportFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SoapActionImportFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSoapActionImportUrlResponse parses an HTTP response from a SoapActionImportUrlWithResponse call
func ParseSoapActionImportUrlResponse(rsp *http.Response) (*SoapActionImportUrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SoapActionImportUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionAddDomainAlwaysInScopeResponse parses an HTTP response from a SpiderActionAddDomainAlwaysInScopeWithResponse call
func ParseSpiderActionAddDomainAlwaysInScopeResponse(rsp *http.Response) (*SpiderActionAddDomainAlwaysInScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionAddDomainAlwaysInScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionClearExcludedFromScanResponse parses an HTTP response from a SpiderActionClearExcludedFromScanWithResponse call
func ParseSpiderActionClearExcludedFromScanResponse(rsp *http.Response) (*SpiderActionClearExcludedFromScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionClearExcludedFromScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionDisableAllDomainsAlwaysInScopeResponse parses an HTTP response from a SpiderActionDisableAllDomainsAlwaysInScopeWithResponse call
func ParseSpiderActionDisableAllDomainsAlwaysInScopeResponse(rsp *http.Response) (*SpiderActionDisableAllDomainsAlwaysInScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionDisableAllDomainsAlwaysInScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionEnableAllDomainsAlwaysInScopeResponse parses an HTTP response from a SpiderActionEnableAllDomainsAlwaysInScopeWithResponse call
func ParseSpiderActionEnableAllDomainsAlwaysInScopeResponse(rsp *http.Response) (*SpiderActionEnableAllDomainsAlwaysInScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionEnableAllDomainsAlwaysInScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionExcludeFromScanResponse parses an HTTP response from a SpiderActionExcludeFromScanWithResponse call
func ParseSpiderActionExcludeFromScanResponse(rsp *http.Response) (*SpiderActionExcludeFromScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionExcludeFromScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionModifyDomainAlwaysInScopeResponse parses an HTTP response from a SpiderActionModifyDomainAlwaysInScopeWithResponse call
func ParseSpiderActionModifyDomainAlwaysInScopeResponse(rsp *http.Response) (*SpiderActionModifyDomainAlwaysInScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionModifyDomainAlwaysInScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionPauseResponse parses an HTTP response from a SpiderActionPauseWithResponse call
func ParseSpiderActionPauseResponse(rsp *http.Response) (*SpiderActionPauseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionPauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionPauseAllScansResponse parses an HTTP response from a SpiderActionPauseAllScansWithResponse call
func ParseSpiderActionPauseAllScansResponse(rsp *http.Response) (*SpiderActionPauseAllScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionPauseAllScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionRemoveAllScansResponse parses an HTTP response from a SpiderActionRemoveAllScansWithResponse call
func ParseSpiderActionRemoveAllScansResponse(rsp *http.Response) (*SpiderActionRemoveAllScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionRemoveAllScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionRemoveDomainAlwaysInScopeResponse parses an HTTP response from a SpiderActionRemoveDomainAlwaysInScopeWithResponse call
func ParseSpiderActionRemoveDomainAlwaysInScopeResponse(rsp *http.Response) (*SpiderActionRemoveDomainAlwaysInScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionRemoveDomainAlwaysInScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionRemoveScanResponse parses an HTTP response from a SpiderActionRemoveScanWithResponse call
func ParseSpiderActionRemoveScanResponse(rsp *http.Response) (*SpiderActionRemoveScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionRemoveScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionResumeResponse parses an HTTP response from a SpiderActionResumeWithResponse call
func ParseSpiderActionResumeResponse(rsp *http.Response) (*SpiderActionResumeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionResumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionResumeAllScansResponse parses an HTTP response from a SpiderActionResumeAllScansWithResponse call
func ParseSpiderActionResumeAllScansResponse(rsp *http.Response) (*SpiderActionResumeAllScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionResumeAllScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionScanResponse parses an HTTP response from a SpiderActionScanWithResponse call
func ParseSpiderActionScanResponse(rsp *http.Response) (*SpiderActionScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionScanAsUserResponse parses an HTTP response from a SpiderActionScanAsUserWithResponse call
func ParseSpiderActionScanAsUserResponse(rsp *http.Response) (*SpiderActionScanAsUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionScanAsUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionAcceptCookiesResponse parses an HTTP response from a SpiderActionSetOptionAcceptCookiesWithResponse call
func ParseSpiderActionSetOptionAcceptCookiesResponse(rsp *http.Response) (*SpiderActionSetOptionAcceptCookiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionAcceptCookiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionHandleODataParametersVisitedResponse parses an HTTP response from a SpiderActionSetOptionHandleODataParametersVisitedWithResponse call
func ParseSpiderActionSetOptionHandleODataParametersVisitedResponse(rsp *http.Response) (*SpiderActionSetOptionHandleODataParametersVisitedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionHandleODataParametersVisitedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionHandleParametersResponse parses an HTTP response from a SpiderActionSetOptionHandleParametersWithResponse call
func ParseSpiderActionSetOptionHandleParametersResponse(rsp *http.Response) (*SpiderActionSetOptionHandleParametersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionHandleParametersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionLogoutAvoidanceResponse parses an HTTP response from a SpiderActionSetOptionLogoutAvoidanceWithResponse call
func ParseSpiderActionSetOptionLogoutAvoidanceResponse(rsp *http.Response) (*SpiderActionSetOptionLogoutAvoidanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionLogoutAvoidanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionMaxChildrenResponse parses an HTTP response from a SpiderActionSetOptionMaxChildrenWithResponse call
func ParseSpiderActionSetOptionMaxChildrenResponse(rsp *http.Response) (*SpiderActionSetOptionMaxChildrenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionMaxChildrenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionMaxDepthResponse parses an HTTP response from a SpiderActionSetOptionMaxDepthWithResponse call
func ParseSpiderActionSetOptionMaxDepthResponse(rsp *http.Response) (*SpiderActionSetOptionMaxDepthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionMaxDepthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionMaxDurationResponse parses an HTTP response from a SpiderActionSetOptionMaxDurationWithResponse call
func ParseSpiderActionSetOptionMaxDurationResponse(rsp *http.Response) (*SpiderActionSetOptionMaxDurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionMaxDurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionMaxParseSizeBytesResponse parses an HTTP response from a SpiderActionSetOptionMaxParseSizeBytesWithResponse call
func ParseSpiderActionSetOptionMaxParseSizeBytesResponse(rsp *http.Response) (*SpiderActionSetOptionMaxParseSizeBytesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionMaxParseSizeBytesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionMaxScansInUIResponse parses an HTTP response from a SpiderActionSetOptionMaxScansInUIWithResponse call
func ParseSpiderActionSetOptionMaxScansInUIResponse(rsp *http.Response) (*SpiderActionSetOptionMaxScansInUIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionMaxScansInUIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionParseCommentsResponse parses an HTTP response from a SpiderActionSetOptionParseCommentsWithResponse call
func ParseSpiderActionSetOptionParseCommentsResponse(rsp *http.Response) (*SpiderActionSetOptionParseCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionParseCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionParseDsStoreResponse parses an HTTP response from a SpiderActionSetOptionParseDsStoreWithResponse call
func ParseSpiderActionSetOptionParseDsStoreResponse(rsp *http.Response) (*SpiderActionSetOptionParseDsStoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionParseDsStoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionParseGitResponse parses an HTTP response from a SpiderActionSetOptionParseGitWithResponse call
func ParseSpiderActionSetOptionParseGitResponse(rsp *http.Response) (*SpiderActionSetOptionParseGitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionParseGitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionParseRobotsTxtResponse parses an HTTP response from a SpiderActionSetOptionParseRobotsTxtWithResponse call
func ParseSpiderActionSetOptionParseRobotsTxtResponse(rsp *http.Response) (*SpiderActionSetOptionParseRobotsTxtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionParseRobotsTxtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionParseSVNEntriesResponse parses an HTTP response from a SpiderActionSetOptionParseSVNEntriesWithResponse call
func ParseSpiderActionSetOptionParseSVNEntriesResponse(rsp *http.Response) (*SpiderActionSetOptionParseSVNEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionParseSVNEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionParseSitemapXmlResponse parses an HTTP response from a SpiderActionSetOptionParseSitemapXmlWithResponse call
func ParseSpiderActionSetOptionParseSitemapXmlResponse(rsp *http.Response) (*SpiderActionSetOptionParseSitemapXmlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionParseSitemapXmlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionPostFormResponse parses an HTTP response from a SpiderActionSetOptionPostFormWithResponse call
func ParseSpiderActionSetOptionPostFormResponse(rsp *http.Response) (*SpiderActionSetOptionPostFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionPostFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionProcessFormResponse parses an HTTP response from a SpiderActionSetOptionProcessFormWithResponse call
func ParseSpiderActionSetOptionProcessFormResponse(rsp *http.Response) (*SpiderActionSetOptionProcessFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionProcessFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionSendRefererHeaderResponse parses an HTTP response from a SpiderActionSetOptionSendRefererHeaderWithResponse call
func ParseSpiderActionSetOptionSendRefererHeaderResponse(rsp *http.Response) (*SpiderActionSetOptionSendRefererHeaderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionSendRefererHeaderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionShowAdvancedDialogResponse parses an HTTP response from a SpiderActionSetOptionShowAdvancedDialogWithResponse call
func ParseSpiderActionSetOptionShowAdvancedDialogResponse(rsp *http.Response) (*SpiderActionSetOptionShowAdvancedDialogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionShowAdvancedDialogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionSkipURLStringResponse parses an HTTP response from a SpiderActionSetOptionSkipURLStringWithResponse call
func ParseSpiderActionSetOptionSkipURLStringResponse(rsp *http.Response) (*SpiderActionSetOptionSkipURLStringResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionSkipURLStringResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionThreadCountResponse parses an HTTP response from a SpiderActionSetOptionThreadCountWithResponse call
func ParseSpiderActionSetOptionThreadCountResponse(rsp *http.Response) (*SpiderActionSetOptionThreadCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionThreadCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionSetOptionUserAgentResponse parses an HTTP response from a SpiderActionSetOptionUserAgentWithResponse call
func ParseSpiderActionSetOptionUserAgentResponse(rsp *http.Response) (*SpiderActionSetOptionUserAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionSetOptionUserAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionStopResponse parses an HTTP response from a SpiderActionStopWithResponse call
func ParseSpiderActionStopResponse(rsp *http.Response) (*SpiderActionStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderActionStopAllScansResponse parses an HTTP response from a SpiderActionStopAllScansWithResponse call
func ParseSpiderActionStopAllScansResponse(rsp *http.Response) (*SpiderActionStopAllScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderActionStopAllScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewAddedNodesResponse parses an HTTP response from a SpiderViewAddedNodesWithResponse call
func ParseSpiderViewAddedNodesResponse(rsp *http.Response) (*SpiderViewAddedNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewAddedNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewAllUrlsResponse parses an HTTP response from a SpiderViewAllUrlsWithResponse call
func ParseSpiderViewAllUrlsResponse(rsp *http.Response) (*SpiderViewAllUrlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewAllUrlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewDomainsAlwaysInScopeResponse parses an HTTP response from a SpiderViewDomainsAlwaysInScopeWithResponse call
func ParseSpiderViewDomainsAlwaysInScopeResponse(rsp *http.Response) (*SpiderViewDomainsAlwaysInScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewDomainsAlwaysInScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewExcludedFromScanResponse parses an HTTP response from a SpiderViewExcludedFromScanWithResponse call
func ParseSpiderViewExcludedFromScanResponse(rsp *http.Response) (*SpiderViewExcludedFromScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewExcludedFromScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewFullResultsResponse parses an HTTP response from a SpiderViewFullResultsWithResponse call
func ParseSpiderViewFullResultsResponse(rsp *http.Response) (*SpiderViewFullResultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewFullResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionAcceptCookiesResponse parses an HTTP response from a SpiderViewOptionAcceptCookiesWithResponse call
func ParseSpiderViewOptionAcceptCookiesResponse(rsp *http.Response) (*SpiderViewOptionAcceptCookiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionAcceptCookiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionDomainsAlwaysInScopeResponse parses an HTTP response from a SpiderViewOptionDomainsAlwaysInScopeWithResponse call
func ParseSpiderViewOptionDomainsAlwaysInScopeResponse(rsp *http.Response) (*SpiderViewOptionDomainsAlwaysInScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionDomainsAlwaysInScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionDomainsAlwaysInScopeEnabledResponse parses an HTTP response from a SpiderViewOptionDomainsAlwaysInScopeEnabledWithResponse call
func ParseSpiderViewOptionDomainsAlwaysInScopeEnabledResponse(rsp *http.Response) (*SpiderViewOptionDomainsAlwaysInScopeEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionDomainsAlwaysInScopeEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionHandleODataParametersVisitedResponse parses an HTTP response from a SpiderViewOptionHandleODataParametersVisitedWithResponse call
func ParseSpiderViewOptionHandleODataParametersVisitedResponse(rsp *http.Response) (*SpiderViewOptionHandleODataParametersVisitedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionHandleODataParametersVisitedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionHandleParametersResponse parses an HTTP response from a SpiderViewOptionHandleParametersWithResponse call
func ParseSpiderViewOptionHandleParametersResponse(rsp *http.Response) (*SpiderViewOptionHandleParametersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionHandleParametersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionLogoutAvoidanceResponse parses an HTTP response from a SpiderViewOptionLogoutAvoidanceWithResponse call
func ParseSpiderViewOptionLogoutAvoidanceResponse(rsp *http.Response) (*SpiderViewOptionLogoutAvoidanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionLogoutAvoidanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionMaxChildrenResponse parses an HTTP response from a SpiderViewOptionMaxChildrenWithResponse call
func ParseSpiderViewOptionMaxChildrenResponse(rsp *http.Response) (*SpiderViewOptionMaxChildrenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionMaxChildrenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionMaxDepthResponse parses an HTTP response from a SpiderViewOptionMaxDepthWithResponse call
func ParseSpiderViewOptionMaxDepthResponse(rsp *http.Response) (*SpiderViewOptionMaxDepthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionMaxDepthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionMaxDurationResponse parses an HTTP response from a SpiderViewOptionMaxDurationWithResponse call
func ParseSpiderViewOptionMaxDurationResponse(rsp *http.Response) (*SpiderViewOptionMaxDurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionMaxDurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionMaxParseSizeBytesResponse parses an HTTP response from a SpiderViewOptionMaxParseSizeBytesWithResponse call
func ParseSpiderViewOptionMaxParseSizeBytesResponse(rsp *http.Response) (*SpiderViewOptionMaxParseSizeBytesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionMaxParseSizeBytesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionMaxScansInUIResponse parses an HTTP response from a SpiderViewOptionMaxScansInUIWithResponse call
func ParseSpiderViewOptionMaxScansInUIResponse(rsp *http.Response) (*SpiderViewOptionMaxScansInUIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionMaxScansInUIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionParseCommentsResponse parses an HTTP response from a SpiderViewOptionParseCommentsWithResponse call
func ParseSpiderViewOptionParseCommentsResponse(rsp *http.Response) (*SpiderViewOptionParseCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionParseCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionParseDsStoreResponse parses an HTTP response from a SpiderViewOptionParseDsStoreWithResponse call
func ParseSpiderViewOptionParseDsStoreResponse(rsp *http.Response) (*SpiderViewOptionParseDsStoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionParseDsStoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionParseGitResponse parses an HTTP response from a SpiderViewOptionParseGitWithResponse call
func ParseSpiderViewOptionParseGitResponse(rsp *http.Response) (*SpiderViewOptionParseGitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionParseGitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionParseRobotsTxtResponse parses an HTTP response from a SpiderViewOptionParseRobotsTxtWithResponse call
func ParseSpiderViewOptionParseRobotsTxtResponse(rsp *http.Response) (*SpiderViewOptionParseRobotsTxtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionParseRobotsTxtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionParseSVNEntriesResponse parses an HTTP response from a SpiderViewOptionParseSVNEntriesWithResponse call
func ParseSpiderViewOptionParseSVNEntriesResponse(rsp *http.Response) (*SpiderViewOptionParseSVNEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionParseSVNEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionParseSitemapXmlResponse parses an HTTP response from a SpiderViewOptionParseSitemapXmlWithResponse call
func ParseSpiderViewOptionParseSitemapXmlResponse(rsp *http.Response) (*SpiderViewOptionParseSitemapXmlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionParseSitemapXmlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionPostFormResponse parses an HTTP response from a SpiderViewOptionPostFormWithResponse call
func ParseSpiderViewOptionPostFormResponse(rsp *http.Response) (*SpiderViewOptionPostFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionPostFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionProcessFormResponse parses an HTTP response from a SpiderViewOptionProcessFormWithResponse call
func ParseSpiderViewOptionProcessFormResponse(rsp *http.Response) (*SpiderViewOptionProcessFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionProcessFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionSendRefererHeaderResponse parses an HTTP response from a SpiderViewOptionSendRefererHeaderWithResponse call
func ParseSpiderViewOptionSendRefererHeaderResponse(rsp *http.Response) (*SpiderViewOptionSendRefererHeaderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionSendRefererHeaderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionShowAdvancedDialogResponse parses an HTTP response from a SpiderViewOptionShowAdvancedDialogWithResponse call
func ParseSpiderViewOptionShowAdvancedDialogResponse(rsp *http.Response) (*SpiderViewOptionShowAdvancedDialogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionShowAdvancedDialogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionSkipURLStringResponse parses an HTTP response from a SpiderViewOptionSkipURLStringWithResponse call
func ParseSpiderViewOptionSkipURLStringResponse(rsp *http.Response) (*SpiderViewOptionSkipURLStringResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionSkipURLStringResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionThreadCountResponse parses an HTTP response from a SpiderViewOptionThreadCountWithResponse call
func ParseSpiderViewOptionThreadCountResponse(rsp *http.Response) (*SpiderViewOptionThreadCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionThreadCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewOptionUserAgentResponse parses an HTTP response from a SpiderViewOptionUserAgentWithResponse call
func ParseSpiderViewOptionUserAgentResponse(rsp *http.Response) (*SpiderViewOptionUserAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewOptionUserAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewResultsResponse parses an HTTP response from a SpiderViewResultsWithResponse call
func ParseSpiderViewResultsResponse(rsp *http.Response) (*SpiderViewResultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewScansResponse parses an HTTP response from a SpiderViewScansWithResponse call
func ParseSpiderViewScansResponse(rsp *http.Response) (*SpiderViewScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSpiderViewStatusResponse parses an HTTP response from a SpiderViewStatusWithResponse call
func ParseSpiderViewStatusResponse(rsp *http.Response) (*SpiderViewStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpiderViewStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStatsActionClearStatsResponse parses an HTTP response from a StatsActionClearStatsWithResponse call
func ParseStatsActionClearStatsResponse(rsp *http.Response) (*StatsActionClearStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatsActionClearStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStatsActionSetOptionInMemoryEnabledResponse parses an HTTP response from a StatsActionSetOptionInMemoryEnabledWithResponse call
func ParseStatsActionSetOptionInMemoryEnabledResponse(rsp *http.Response) (*StatsActionSetOptionInMemoryEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatsActionSetOptionInMemoryEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStatsActionSetOptionStatsdHostResponse parses an HTTP response from a StatsActionSetOptionStatsdHostWithResponse call
func ParseStatsActionSetOptionStatsdHostResponse(rsp *http.Response) (*StatsActionSetOptionStatsdHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatsActionSetOptionStatsdHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStatsActionSetOptionStatsdPortResponse parses an HTTP response from a StatsActionSetOptionStatsdPortWithResponse call
func ParseStatsActionSetOptionStatsdPortResponse(rsp *http.Response) (*StatsActionSetOptionStatsdPortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatsActionSetOptionStatsdPortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStatsActionSetOptionStatsdPrefixResponse parses an HTTP response from a StatsActionSetOptionStatsdPrefixWithResponse call
func ParseStatsActionSetOptionStatsdPrefixResponse(rsp *http.Response) (*StatsActionSetOptionStatsdPrefixResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatsActionSetOptionStatsdPrefixResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStatsViewAllSitesStatsResponse parses an HTTP response from a StatsViewAllSitesStatsWithResponse call
func ParseStatsViewAllSitesStatsResponse(rsp *http.Response) (*StatsViewAllSitesStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatsViewAllSitesStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStatsViewOptionInMemoryEnabledResponse parses an HTTP response from a StatsViewOptionInMemoryEnabledWithResponse call
func ParseStatsViewOptionInMemoryEnabledResponse(rsp *http.Response) (*StatsViewOptionInMemoryEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatsViewOptionInMemoryEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStatsViewOptionStatsdEnabledResponse parses an HTTP response from a StatsViewOptionStatsdEnabledWithResponse call
func ParseStatsViewOptionStatsdEnabledResponse(rsp *http.Response) (*StatsViewOptionStatsdEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatsViewOptionStatsdEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStatsViewOptionStatsdHostResponse parses an HTTP response from a StatsViewOptionStatsdHostWithResponse call
func ParseStatsViewOptionStatsdHostResponse(rsp *http.Response) (*StatsViewOptionStatsdHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatsViewOptionStatsdHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStatsViewOptionStatsdPortResponse parses an HTTP response from a StatsViewOptionStatsdPortWithResponse call
func ParseStatsViewOptionStatsdPortResponse(rsp *http.Response) (*StatsViewOptionStatsdPortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatsViewOptionStatsdPortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStatsViewOptionStatsdPrefixResponse parses an HTTP response from a StatsViewOptionStatsdPrefixWithResponse call
func ParseStatsViewOptionStatsdPrefixResponse(rsp *http.Response) (*StatsViewOptionStatsdPrefixResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatsViewOptionStatsdPrefixResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStatsViewSiteStatsResponse parses an HTTP response from a StatsViewSiteStatsWithResponse call
func ParseStatsViewSiteStatsResponse(rsp *http.Response) (*StatsViewSiteStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatsViewSiteStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStatsViewStatsResponse parses an HTTP response from a StatsViewStatsWithResponse call
func ParseStatsViewStatsResponse(rsp *http.Response) (*StatsViewStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatsViewStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersActionAuthenticateAsUserResponse parses an HTTP response from a UsersActionAuthenticateAsUserWithResponse call
func ParseUsersActionAuthenticateAsUserResponse(rsp *http.Response) (*UsersActionAuthenticateAsUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersActionAuthenticateAsUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersActionNewUserResponse parses an HTTP response from a UsersActionNewUserWithResponse call
func ParseUsersActionNewUserResponse(rsp *http.Response) (*UsersActionNewUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersActionNewUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersActionPollAsUserResponse parses an HTTP response from a UsersActionPollAsUserWithResponse call
func ParseUsersActionPollAsUserResponse(rsp *http.Response) (*UsersActionPollAsUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersActionPollAsUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersActionRemoveUserResponse parses an HTTP response from a UsersActionRemoveUserWithResponse call
func ParseUsersActionRemoveUserResponse(rsp *http.Response) (*UsersActionRemoveUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersActionRemoveUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersActionSetAuthenticationCredentialsResponse parses an HTTP response from a UsersActionSetAuthenticationCredentialsWithResponse call
func ParseUsersActionSetAuthenticationCredentialsResponse(rsp *http.Response) (*UsersActionSetAuthenticationCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersActionSetAuthenticationCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersActionSetAuthenticationStateResponse parses an HTTP response from a UsersActionSetAuthenticationStateWithResponse call
func ParseUsersActionSetAuthenticationStateResponse(rsp *http.Response) (*UsersActionSetAuthenticationStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersActionSetAuthenticationStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersActionSetCookieResponse parses an HTTP response from a UsersActionSetCookieWithResponse call
func ParseUsersActionSetCookieResponse(rsp *http.Response) (*UsersActionSetCookieResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersActionSetCookieResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersActionSetUserEnabledResponse parses an HTTP response from a UsersActionSetUserEnabledWithResponse call
func ParseUsersActionSetUserEnabledResponse(rsp *http.Response) (*UsersActionSetUserEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersActionSetUserEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersActionSetUserNameResponse parses an HTTP response from a UsersActionSetUserNameWithResponse call
func ParseUsersActionSetUserNameResponse(rsp *http.Response) (*UsersActionSetUserNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersActionSetUserNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersViewGetAuthenticationCredentialsResponse parses an HTTP response from a UsersViewGetAuthenticationCredentialsWithResponse call
func ParseUsersViewGetAuthenticationCredentialsResponse(rsp *http.Response) (*UsersViewGetAuthenticationCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersViewGetAuthenticationCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersViewGetAuthenticationCredentialsConfigParamsResponse parses an HTTP response from a UsersViewGetAuthenticationCredentialsConfigParamsWithResponse call
func ParseUsersViewGetAuthenticationCredentialsConfigParamsResponse(rsp *http.Response) (*UsersViewGetAuthenticationCredentialsConfigParamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersViewGetAuthenticationCredentialsConfigParamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersViewGetAuthenticationSessionResponse parses an HTTP response from a UsersViewGetAuthenticationSessionWithResponse call
func ParseUsersViewGetAuthenticationSessionResponse(rsp *http.Response) (*UsersViewGetAuthenticationSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersViewGetAuthenticationSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersViewGetAuthenticationStateResponse parses an HTTP response from a UsersViewGetAuthenticationStateWithResponse call
func ParseUsersViewGetAuthenticationStateResponse(rsp *http.Response) (*UsersViewGetAuthenticationStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersViewGetAuthenticationStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersViewGetUserByIdResponse parses an HTTP response from a UsersViewGetUserByIdWithResponse call
func ParseUsersViewGetUserByIdResponse(rsp *http.Response) (*UsersViewGetUserByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersViewGetUserByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersViewUsersListResponse parses an HTTP response from a UsersViewUsersListWithResponse call
func ParseUsersViewUsersListResponse(rsp *http.Response) (*UsersViewUsersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersViewUsersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWappalyzerViewListAllResponse parses an HTTP response from a WappalyzerViewListAllWithResponse call
func ParseWappalyzerViewListAllResponse(rsp *http.Response) (*WappalyzerViewListAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WappalyzerViewListAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWappalyzerViewListSiteResponse parses an HTTP response from a WappalyzerViewListSiteWithResponse call
func ParseWappalyzerViewListSiteResponse(rsp *http.Response) (*WappalyzerViewListSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WappalyzerViewListSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWappalyzerViewListSitesResponse parses an HTTP response from a WappalyzerViewListSitesWithResponse call
func ParseWappalyzerViewListSitesResponse(rsp *http.Response) (*WappalyzerViewListSitesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WappalyzerViewListSitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebsocketActionSendTextMessageResponse parses an HTTP response from a WebsocketActionSendTextMessageWithResponse call
func ParseWebsocketActionSendTextMessageResponse(rsp *http.Response) (*WebsocketActionSendTextMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebsocketActionSendTextMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebsocketActionSetBreakTextMessageResponse parses an HTTP response from a WebsocketActionSetBreakTextMessageWithResponse call
func ParseWebsocketActionSetBreakTextMessageResponse(rsp *http.Response) (*WebsocketActionSetBreakTextMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebsocketActionSetBreakTextMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebsocketViewBreakTextMessageResponse parses an HTTP response from a WebsocketViewBreakTextMessageWithResponse call
func ParseWebsocketViewBreakTextMessageResponse(rsp *http.Response) (*WebsocketViewBreakTextMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebsocketViewBreakTextMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebsocketViewChannelsResponse parses an HTTP response from a WebsocketViewChannelsWithResponse call
func ParseWebsocketViewChannelsResponse(rsp *http.Response) (*WebsocketViewChannelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebsocketViewChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebsocketViewMessageResponse parses an HTTP response from a WebsocketViewMessageWithResponse call
func ParseWebsocketViewMessageResponse(rsp *http.Response) (*WebsocketViewMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebsocketViewMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWebsocketViewMessagesResponse parses an HTTP response from a WebsocketViewMessagesWithResponse call
func ParseWebsocketViewMessagesResponse(rsp *http.Response) (*WebsocketViewMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebsocketViewMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAcsrfOtherGenFormResponse parses an HTTP response from a AcsrfOtherGenFormWithResponse call
func ParseAcsrfOtherGenFormResponse(rsp *http.Response) (*AcsrfOtherGenFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcsrfOtherGenFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCoreOtherFileDownloadResponse parses an HTTP response from a CoreOtherFileDownloadWithResponse call
func ParseCoreOtherFileDownloadResponse(rsp *http.Response) (*CoreOtherFileDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreOtherFileDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCoreOtherFileUploadResponse parses an HTTP response from a CoreOtherFileUploadWithResponse call
func ParseCoreOtherFileUploadResponse(rsp *http.Response) (*CoreOtherFileUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreOtherFileUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCoreOtherHtmlreportResponse parses an HTTP response from a CoreOtherHtmlreportWithResponse call
func ParseCoreOtherHtmlreportResponse(rsp *http.Response) (*CoreOtherHtmlreportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreOtherHtmlreportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCoreOtherJsonreportResponse parses an HTTP response from a CoreOtherJsonreportWithResponse call
func ParseCoreOtherJsonreportResponse(rsp *http.Response) (*CoreOtherJsonreportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreOtherJsonreportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCoreOtherMdreportResponse parses an HTTP response from a CoreOtherMdreportWithResponse call
func ParseCoreOtherMdreportResponse(rsp *http.Response) (*CoreOtherMdreportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreOtherMdreportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCoreOtherMessageHarResponse parses an HTTP response from a CoreOtherMessageHarWithResponse call
func ParseCoreOtherMessageHarResponse(rsp *http.Response) (*CoreOtherMessageHarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreOtherMessageHarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCoreOtherMessagesHarResponse parses an HTTP response from a CoreOtherMessagesHarWithResponse call
func ParseCoreOtherMessagesHarResponse(rsp *http.Response) (*CoreOtherMessagesHarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreOtherMessagesHarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCoreOtherMessagesHarByIdResponse parses an HTTP response from a CoreOtherMessagesHarByIdWithResponse call
func ParseCoreOtherMessagesHarByIdResponse(rsp *http.Response) (*CoreOtherMessagesHarByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreOtherMessagesHarByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCoreOtherProxyPacResponse parses an HTTP response from a CoreOtherProxyPacWithResponse call
func ParseCoreOtherProxyPacResponse(rsp *http.Response) (*CoreOtherProxyPacResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreOtherProxyPacResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCoreOtherRootcertResponse parses an HTTP response from a CoreOtherRootcertWithResponse call
func ParseCoreOtherRootcertResponse(rsp *http.Response) (*CoreOtherRootcertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreOtherRootcertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCoreOtherSendHarRequestResponse parses an HTTP response from a CoreOtherSendHarRequestWithResponse call
func ParseCoreOtherSendHarRequestResponse(rsp *http.Response) (*CoreOtherSendHarRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreOtherSendHarRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCoreOtherSetproxyResponse parses an HTTP response from a CoreOtherSetproxyWithResponse call
func ParseCoreOtherSetproxyResponse(rsp *http.Response) (*CoreOtherSetproxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreOtherSetproxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCoreOtherXmlreportResponse parses an HTTP response from a CoreOtherXmlreportWithResponse call
func ParseCoreOtherXmlreportResponse(rsp *http.Response) (*CoreOtherXmlreportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CoreOtherXmlreportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDevOtherOpenapiResponse parses an HTTP response from a DevOtherOpenapiWithResponse call
func ParseDevOtherOpenapiResponse(rsp *http.Response) (*DevOtherOpenapiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevOtherOpenapiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEximOtherExportHarResponse parses an HTTP response from a EximOtherExportHarWithResponse call
func ParseEximOtherExportHarResponse(rsp *http.Response) (*EximOtherExportHarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EximOtherExportHarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEximOtherExportHarByIdResponse parses an HTTP response from a EximOtherExportHarByIdWithResponse call
func ParseEximOtherExportHarByIdResponse(rsp *http.Response) (*EximOtherExportHarByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EximOtherExportHarByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEximOtherSendHarRequestResponse parses an HTTP response from a EximOtherSendHarRequestWithResponse call
func ParseEximOtherSendHarRequestResponse(rsp *http.Response) (*EximOtherSendHarRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EximOtherSendHarRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseHudOtherChangesInHtmlResponse parses an HTTP response from a HudOtherChangesInHtmlWithResponse call
func ParseHudOtherChangesInHtmlResponse(rsp *http.Response) (*HudOtherChangesInHtmlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HudOtherChangesInHtmlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseKeyboardOtherCheatsheetActionOrderResponse parses an HTTP response from a KeyboardOtherCheatsheetActionOrderWithResponse call
func ParseKeyboardOtherCheatsheetActionOrderResponse(rsp *http.Response) (*KeyboardOtherCheatsheetActionOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KeyboardOtherCheatsheetActionOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseKeyboardOtherCheatsheetKeyOrderResponse parses an HTTP response from a KeyboardOtherCheatsheetKeyOrderWithResponse call
func ParseKeyboardOtherCheatsheetKeyOrderResponse(rsp *http.Response) (*KeyboardOtherCheatsheetKeyOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KeyboardOtherCheatsheetKeyOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNetworkOtherProxyPacResponse parses an HTTP response from a NetworkOtherProxyPacWithResponse call
func ParseNetworkOtherProxyPacResponse(rsp *http.Response) (*NetworkOtherProxyPacResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkOtherProxyPacResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNetworkOtherRootCaCertResponse parses an HTTP response from a NetworkOtherRootCaCertWithResponse call
func ParseNetworkOtherRootCaCertResponse(rsp *http.Response) (*NetworkOtherRootCaCertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkOtherRootCaCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNetworkOtherSetProxyResponse parses an HTTP response from a NetworkOtherSetProxyWithResponse call
func ParseNetworkOtherSetProxyResponse(rsp *http.Response) (*NetworkOtherSetProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkOtherSetProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePnhOtherFxPnhXpiResponse parses an HTTP response from a PnhOtherFxPnhXpiWithResponse call
func ParsePnhOtherFxPnhXpiResponse(rsp *http.Response) (*PnhOtherFxPnhXpiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PnhOtherFxPnhXpiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePnhOtherManifestResponse parses an HTTP response from a PnhOtherManifestWithResponse call
func ParsePnhOtherManifestResponse(rsp *http.Response) (*PnhOtherManifestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PnhOtherManifestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePnhOtherPnhResponse parses an HTTP response from a PnhOtherPnhWithResponse call
func ParsePnhOtherPnhResponse(rsp *http.Response) (*PnhOtherPnhResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PnhOtherPnhResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePnhOtherServiceResponse parses an HTTP response from a PnhOtherServiceWithResponse call
func ParsePnhOtherServiceResponse(rsp *http.Response) (*PnhOtherServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PnhOtherServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQuickstartlaunchOtherStartPageResponse parses an HTTP response from a QuickstartlaunchOtherStartPageWithResponse call
func ParseQuickstartlaunchOtherStartPageResponse(rsp *http.Response) (*QuickstartlaunchOtherStartPageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuickstartlaunchOtherStartPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSearchOtherHarByHeaderRegexResponse parses an HTTP response from a SearchOtherHarByHeaderRegexWithResponse call
func ParseSearchOtherHarByHeaderRegexResponse(rsp *http.Response) (*SearchOtherHarByHeaderRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchOtherHarByHeaderRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSearchOtherHarByNoteRegexResponse parses an HTTP response from a SearchOtherHarByNoteRegexWithResponse call
func ParseSearchOtherHarByNoteRegexResponse(rsp *http.Response) (*SearchOtherHarByNoteRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchOtherHarByNoteRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSearchOtherHarByRequestRegexResponse parses an HTTP response from a SearchOtherHarByRequestRegexWithResponse call
func ParseSearchOtherHarByRequestRegexResponse(rsp *http.Response) (*SearchOtherHarByRequestRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchOtherHarByRequestRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSearchOtherHarByResponseRegexResponse parses an HTTP response from a SearchOtherHarByResponseRegexWithResponse call
func ParseSearchOtherHarByResponseRegexResponse(rsp *http.Response) (*SearchOtherHarByResponseRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchOtherHarByResponseRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSearchOtherHarByTagRegexResponse parses an HTTP response from a SearchOtherHarByTagRegexWithResponse call
func ParseSearchOtherHarByTagRegexResponse(rsp *http.Response) (*SearchOtherHarByTagRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchOtherHarByTagRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSearchOtherHarByUrlRegexResponse parses an HTTP response from a SearchOtherHarByUrlRegexWithResponse call
func ParseSearchOtherHarByUrlRegexResponse(rsp *http.Response) (*SearchOtherHarByUrlRegexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchOtherHarByUrlRegexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
